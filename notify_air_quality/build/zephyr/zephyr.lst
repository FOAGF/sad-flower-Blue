
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	40 4c 00 20 dd 27 00 00 9b 79 01 00 b1 27 00 00     @L. .'...y...'..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	b1 27 00 00 b1 27 00 00 b1 27 00 00 00 00 00 00     .'...'...'......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	19 24 00 00 b1 27 00 00 00 00 00 00 c5 23 00 00     .$...'.......#..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	b1 27 00 00                                         .'..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	c9 24 00 00 e5 04 01 00 c9 24 00 00 c9 24 00 00     .$.......$...$..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	c9 24 00 00 c9 24 00 00 c9 24 00 00 c9 24 00 00     .$...$...$...$..

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	c9 24 00 00 c9 24 00 00 c9 24 00 00 c9 24 00 00     .$...$...$...$..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	c9 24 00 00 c9 24 00 00 c9 24 00 00 c9 24 00 00     .$...$...$...$..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	c9 24 00 00 c9 24 00 00 c9 24 00 00 c9 24 00 00     .$...$...$...$..
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	c9 24 00 00 c9 24 00 00 c9 24 00 00 c9 24 00 00     .$...$...$...$..
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	c9 24 00 00 c9 24 00 00 c9 24 00 00 c9 24 00 00     .$...$...$...$..
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	c9 24 00 00 c9 24 00 00 c9 24 00 00 c9 24 00 00     .$...$...$...$..
			switch (*fmt) {
  c0:	c9 24 00 00 c9 24 00 00 c9 24 00 00 c9 24 00 00     .$...$...$...$..
  d0:	c9 24 00 00 c9 24 00 00 c9 24 00 00                 .$...$...$..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f808 	bl	114 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <__udivmoddi4>:
     114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     118:	4686      	mov	lr, r0
     11a:	468c      	mov	ip, r1
     11c:	4608      	mov	r0, r1
				align = VA_STACK_ALIGN(void *);
     11e:	9e08      	ldr	r6, [sp, #32]
     120:	4615      	mov	r5, r2
     122:	4674      	mov	r4, lr
			switch (*fmt) {
     124:	4619      	mov	r1, r3
     126:	2b00      	cmp	r3, #0
     128:	f040 80c2 	bne.w	2b0 <CONFIG_FLASH_SIZE+0xb0>
     12c:	4285      	cmp	r5, r0
     12e:	fab2 f282 	clz	r2, r2
     132:	d945      	bls.n	1c0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE>
     134:	b14a      	cbz	r2, 14a <CONFIG_NRF52_ANOMALY_132_DELAY_US>
     136:	f1c2 0320 	rsb	r3, r2, #32
     13a:	fa00 fc02 	lsl.w	ip, r0, r2
     13e:	fa2e f303 	lsr.w	r3, lr, r3
     142:	4095      	lsls	r5, r2
		buf = (void *) ROUND_UP(buf, align);
     144:	ea43 0c0c 	orr.w	ip, r3, ip
     148:	4094      	lsls	r4, r2
     14a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     14e:	b2a8      	uxth	r0, r5
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     150:	fbbc f8fe 	udiv	r8, ip, lr
     154:	0c23      	lsrs	r3, r4, #16
     156:	fb0e cc18 	mls	ip, lr, r8, ip
     15a:	fb08 f900 	mul.w	r9, r8, r0
     15e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
		if (is_str_arg) {
     162:	4599      	cmp	r9, r3
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	d928      	bls.n	1b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4b>
     166:	18eb      	adds	r3, r5, r3
			int v = va_arg(ap, int);
     168:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff

			if (buf0 != NULL) {
				*(int *)buf = v;
     16c:	d204      	bcs.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
			}
			buf += sizeof(int);
     16e:	4599      	cmp	r9, r3
     170:	d902      	bls.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     172:	f1a8 0702 	sub.w	r7, r8, #2
				arg_idx--;
     176:	442b      	add	r3, r5
     178:	eba3 0309 	sub.w	r3, r3, r9
				parsing = false;
     17c:	b2a4      	uxth	r4, r4
				continue;
     17e:	fbb3 fcfe 	udiv	ip, r3, lr
				if (fmt[-1] == 'l') {
     182:	fb0e 331c 	mls	r3, lr, ip, r3
     186:	fb0c f000 	mul.w	r0, ip, r0
					if (fmt[-2] == 'l') {
     18a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     18e:	42a0      	cmp	r0, r4
				parsing = false;
     190:	d914      	bls.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
					if (fmt[-2] == 'l') {
     192:	192c      	adds	r4, r5, r4
						align = VA_STACK_ALIGN(long long);
     194:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
				size = sizeof(void *);
     198:	d204      	bcs.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     19a:	42a0      	cmp	r0, r4
					v.ld = va_arg(ap, long double);
     19c:	d902      	bls.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     19e:	f1ac 0302 	sub.w	r3, ip, #2
     1a2:	442c      	add	r4, r5
				buf = (void *) ROUND_UP(buf, align);
     1a4:	1a24      	subs	r4, r4, r0
					v.ld = va_arg(ap, long double);
     1a6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
				buf = (void *) ROUND_UP(buf, align);
     1aa:	b11e      	cbz	r6, 1b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x47>
     1ac:	40d4      	lsrs	r4, r2
				if (buf0 != NULL) {
     1ae:	2300      	movs	r3, #0
					if (BUF_OFFSET + size > len) {
     1b0:	6034      	str	r4, [r6, #0]
     1b2:	6073      	str	r3, [r6, #4]
     1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b8:	4647      	mov	r7, r8
						*(long double *)buf = v.ld;
     1ba:	e7dd      	b.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     1bc:	4663      	mov	r3, ip
				buf += size;
     1be:	e7f1      	b.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
				parsing = false;
     1c0:	bb92      	cbnz	r2, 228 <CONFIG_FLASH_SIZE+0x28>
     1c2:	1b43      	subs	r3, r0, r5
			switch (*fmt) {
     1c4:	2101      	movs	r1, #1
     1c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			if (*++fmt == '\0') {
     1ca:	b2af      	uxth	r7, r5
     1cc:	fbb3 fcfe 	udiv	ip, r3, lr
     1d0:	0c20      	lsrs	r0, r4, #16
			if (!parsing) {
     1d2:	fb0e 331c 	mls	r3, lr, ip, r3
     1d6:	fb0c f807 	mul.w	r8, ip, r7
				if (*fmt == '%') {
     1da:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
					arg_idx++;
     1de:	4598      	cmp	r8, r3
     1e0:	d962      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     1e2:	18eb      	adds	r3, r5, r3
					parsing = true;
     1e4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
				align = VA_STACK_ALIGN(size_t);
     1e8:	d204      	bcs.n	1f4 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT>
     1ea:	4598      	cmp	r8, r3
     1ec:	d902      	bls.n	1f4 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT>
			switch (*fmt) {
     1ee:	f1ac 0002 	sub.w	r0, ip, #2
     1f2:	442b      	add	r3, r5
				parsing = false;
     1f4:	eba3 0308 	sub.w	r3, r3, r8

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f8:	b2a4      	uxth	r4, r4
     1fa:	fbb3 fcfe 	udiv	ip, r3, lr
					return -EINVAL;
     1fe:	fb0e 331c 	mls	r3, lr, ip, r3
			long long v = va_arg(ap, long long);
     202:	fb0c f707 	mul.w	r7, ip, r7
     206:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     20a:	42a7      	cmp	r7, r4
     20c:	d94e      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20e:	192c      	adds	r4, r5, r4
     210:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
				}
			}
			buf += sizeof(long long);
     214:	d204      	bcs.n	220 <CONFIG_FLASH_SIZE+0x20>
     216:	42a7      	cmp	r7, r4
		if (is_str_arg) {
     218:	d902      	bls.n	220 <CONFIG_FLASH_SIZE+0x20>
		} else if (size == sizeof(int)) {
     21a:	f1ac 0302 	sub.w	r3, ip, #2
			int v = va_arg(ap, int);
     21e:	442c      	add	r4, r5
     220:	1be4      	subs	r4, r4, r7
			if (buf0 != NULL) {
     222:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
		} else if (size == sizeof(long long)) {
     226:	e7c0      	b.n	1aa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3d>
			long long v = va_arg(ap, long long);
     228:	f1c2 0320 	rsb	r3, r2, #32
     22c:	fa20 f103 	lsr.w	r1, r0, r3
     230:	4095      	lsls	r5, r2
     232:	4090      	lsls	r0, r2
			if (buf0 != NULL) {
     234:	fa2e f303 	lsr.w	r3, lr, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     238:	4303      	orrs	r3, r0
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			s = va_arg(ap, char *);
     23e:	b2af      	uxth	r7, r5
     240:	fbb1 fcfe 	udiv	ip, r1, lr
			if (is_ro && !do_ro) {
     244:	fb0e 101c 	mls	r0, lr, ip, r1
     248:	0c19      	lsrs	r1, r3, #16
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24a:	fb0c f807 	mul.w	r8, ip, r7
     24e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     252:	4588      	cmp	r8, r1
     254:	fa04 f402 	lsl.w	r4, r4, r2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     258:	d922      	bls.n	2a0 <CONFIG_FLASH_SIZE+0xa0>
     25a:	1869      	adds	r1, r5, r1
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
				if (buf0 != NULL) {
     260:	d204      	bcs.n	26c <CONFIG_FLASH_SIZE+0x6c>
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	4588      	cmp	r8, r1
     264:	d902      	bls.n	26c <CONFIG_FLASH_SIZE+0x6c>
     266:	f1ac 0002 	sub.w	r0, ip, #2
     26a:	4429      	add	r1, r5
					str_ptr_arg[s_idx] = arg_idx;
     26c:	eba1 0108 	sub.w	r1, r1, r8
					str_ptr_pos[s_idx] = s_ptr_idx;
     270:	b29b      	uxth	r3, r3
					str_ptr_arg[s_idx] = arg_idx;
     272:	fbb1 fcfe 	udiv	ip, r1, lr
					if (is_ro) {
     276:	fb0e 111c 	mls	r1, lr, ip, r1
     27a:	fb0c f707 	mul.w	r7, ip, r7
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     282:	429f      	cmp	r7, r3
     284:	d90e      	bls.n	2a4 <CONFIG_FLASH_SIZE+0xa4>
						s_ro_cnt++;
     286:	18eb      	adds	r3, r5, r3
     288:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
					if (BUF_OFFSET + size > len) {
     28c:	d204      	bcs.n	298 <CONFIG_FLASH_SIZE+0x98>
     28e:	429f      	cmp	r7, r3
			buf += sizeof(char *);
     290:	d902      	bls.n	298 <CONFIG_FLASH_SIZE+0x98>
					if (BUF_OFFSET + size > len) {
     292:	f1ac 0102 	sub.w	r1, ip, #2
			switch (*fmt) {
     296:	442b      	add	r3, r5
     298:	1bdb      	subs	r3, r3, r7
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     29e:	e792      	b.n	1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
				} else if (is_ro) {
     2a0:	4660      	mov	r0, ip
     2a2:	e7e3      	b.n	26c <CONFIG_FLASH_SIZE+0x6c>
     2a4:	4661      	mov	r1, ip
					len += 1;
     2a6:	e7f7      	b.n	298 <CONFIG_FLASH_SIZE+0x98>
     2a8:	4660      	mov	r0, ip
				} else if (rws_pos_en) {
     2aa:	e7a3      	b.n	1f4 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT>
					len += 2;
     2ac:	4663      	mov	r3, ip
				} else if (rws_pos_en) {
     2ae:	e7b7      	b.n	220 <CONFIG_FLASH_SIZE+0x20>
     2b0:	4283      	cmp	r3, r0
					len += strlen(s) + 1 + 1;
     2b2:	d906      	bls.n	2c2 <CONFIG_FLASH_SIZE+0xc2>
     2b4:	b916      	cbnz	r6, 2bc <CONFIG_FLASH_SIZE+0xbc>
     2b6:	2100      	movs	r1, #0
     2b8:	4608      	mov	r0, r1
     2ba:	e77b      	b.n	1b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x47>
     2bc:	e9c6 e000 	strd	lr, r0, [r6]
     2c0:	e7f9      	b.n	2b6 <CONFIG_FLASH_SIZE+0xb6>
     2c2:	fab3 f783 	clz	r7, r3
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c6:	b98f      	cbnz	r7, 2ec <CONFIG_FLASH_SIZE+0xec>
     2c8:	4283      	cmp	r3, r0
     2ca:	d301      	bcc.n	2d0 <CONFIG_FLASH_SIZE+0xd0>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2cc:	4572      	cmp	r2, lr
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2ce:	d808      	bhi.n	2e2 <CONFIG_FLASH_SIZE+0xe2>
     2d0:	ebbe 0402 	subs.w	r4, lr, r2
     2d4:	eb60 0303 	sbc.w	r3, r0, r3
     2d8:	2001      	movs	r0, #1
     2da:	469c      	mov	ip, r3
     2dc:	b91e      	cbnz	r6, 2e6 <CONFIG_FLASH_SIZE+0xe6>
     2de:	2100      	movs	r1, #0
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2e0:	e768      	b.n	1b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x47>
	*(char **)buf0 = NULL;
     2e2:	4638      	mov	r0, r7
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e4:	e7fa      	b.n	2dc <CONFIG_FLASH_SIZE+0xdc>
     2e6:	e9c6 4c00 	strd	r4, ip, [r6]
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ea:	e7f8      	b.n	2de <CONFIG_FLASH_SIZE+0xde>
	if (rws_pos_en) {
     2ec:	f1c7 0c20 	rsb	ip, r7, #32
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f0:	40bb      	lsls	r3, r7
     2f2:	fa22 f40c 	lsr.w	r4, r2, ip
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f6:	431c      	orrs	r4, r3
     2f8:	fa2e f10c 	lsr.w	r1, lr, ip
		for (i = 0; i < s_idx; i++) {
     2fc:	fa20 f30c 	lsr.w	r3, r0, ip
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     300:	40b8      	lsls	r0, r7
		for (i = 0; i < s_idx; i++) {
     302:	4301      	orrs	r1, r0
     304:	ea4f 4914 	mov.w	r9, r4, lsr #16
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	fa0e f507 	lsl.w	r5, lr, r7
     30c:	fbb3 f8f9 	udiv	r8, r3, r9
			*buf++ = str_ptr_arg[i];
     310:	fa1f fe84 	uxth.w	lr, r4
     314:	fb09 3018 	mls	r0, r9, r8, r3
	for (i = 0; i < s_idx; i++) {
     318:	0c0b      	lsrs	r3, r1, #16
     31a:	fb08 fa0e 	mul.w	sl, r8, lr
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		pkg_hdr->desc.rw_str_cnt = 0;
     322:	459a      	cmp	sl, r3
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     324:	fa02 f207 	lsl.w	r2, r2, r7
     328:	d940      	bls.n	3ac <CONFIG_BT_DEVICE_APPEARANCE+0x6b>
     32a:	18e3      	adds	r3, r4, r3
			if (BUF_OFFSET + 1 > len) {
     32c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     330:	d204      	bcs.n	33c <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     332:	459a      	cmp	sl, r3
     334:	d902      	bls.n	33c <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>
			if (BUF_OFFSET + 1 > len) {
     336:	f1a8 0002 	sub.w	r0, r8, #2
			*buf++ = pos;
     33a:	4423      	add	r3, r4
     33c:	eba3 030a 	sub.w	r3, r3, sl
		for (i = 0; i < s_idx; i++) {
     340:	b289      	uxth	r1, r1
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     342:	fbb3 f8f9 	udiv	r8, r3, r9
     346:	fb09 3318 	mls	r3, r9, r8, r3
     34a:	fb08 fe0e 	mul.w	lr, r8, lr
     34e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
		if (rws_pos_en) {
     352:	458e      	cmp	lr, r1
			*buf++ = str_ptr_arg[i];
     354:	d92c      	bls.n	3b0 <CONFIG_BT_DEVICE_APPEARANCE+0x6f>
     356:	1861      	adds	r1, r4, r1
     358:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
			size = 0;
     35c:	d204      	bcs.n	368 <CONFIG_BT_DEVICE_APPEARANCE+0x27>
		if (BUF_OFFSET + 1 + size > len) {
     35e:	458e      	cmp	lr, r1
     360:	d902      	bls.n	368 <CONFIG_BT_DEVICE_APPEARANCE+0x27>
     362:	f1a8 0302 	sub.w	r3, r8, #2
     366:	4421      	add	r1, r4
     368:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
		*buf++ = str_ptr_pos[i];
     36c:	fba0 9802 	umull	r9, r8, r0, r2
     370:	eba1 010e 	sub.w	r1, r1, lr
		memcpy(buf, s, size);
     374:	4541      	cmp	r1, r8
     376:	46ce      	mov	lr, r9
     378:	4643      	mov	r3, r8
     37a:	d302      	bcc.n	382 <CONFIG_BT_DEVICE_APPEARANCE+0x41>
		buf += size;
     37c:	d106      	bne.n	38c <CONFIG_BT_DEVICE_APPEARANCE+0x4b>
     37e:	454d      	cmp	r5, r9
	for (i = 0; i < s_idx; i++) {
     380:	d204      	bcs.n	38c <CONFIG_BT_DEVICE_APPEARANCE+0x4b>
     382:	ebb9 0e02 	subs.w	lr, r9, r2
     386:	eb68 0304 	sbc.w	r3, r8, r4
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38a:	3801      	subs	r0, #1
     38c:	2e00      	cmp	r6, #0
     38e:	d0a6      	beq.n	2de <CONFIG_FLASH_SIZE+0xde>
     390:	ebb5 020e 	subs.w	r2, r5, lr
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	eb61 0103 	sbc.w	r1, r1, r3
     398:	fa01 fc0c 	lsl.w	ip, r1, ip
			size = strlen(s) + 1;
     39c:	fa22 f307 	lsr.w	r3, r2, r7
     3a0:	ea4c 0303 	orr.w	r3, ip, r3
		return -EFAULT;
     3a4:	40f9      	lsrs	r1, r7
     3a6:	e9c6 3100 	strd	r3, r1, [r6]
     3aa:	e798      	b.n	2de <CONFIG_FLASH_SIZE+0xde>
     3ac:	4640      	mov	r0, r8
     3ae:	e7c5      	b.n	33c <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>
     3b0:	4643      	mov	r3, r8
     3b2:	e7d9      	b.n	368 <CONFIG_BT_DEVICE_APPEARANCE+0x27>
     3b4:	0000      	movs	r0, r0
	...

000003b8 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     3bc:	e9d0 350c 	ldrd	r3, r5, [r0, #48]	; 0x30
	start_to_address_actual_us =
     3c0:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     3c4:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
     3c6:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     3c8:	45a0      	cmp	r8, r4
{
     3ca:	460f      	mov	r7, r1
     3cc:	4616      	mov	r6, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     3ce:	d819      	bhi.n	404 <CONFIG_MAIN_STACK_SIZE+0x4>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     3d0:	4d1d      	ldr	r5, [pc, #116]	; (448 <CONFIG_MAIN_STACK_SIZE+0x48>)
     3d2:	fba3 0105 	umull	r0, r1, r3, r5
     3d6:	a31a      	add	r3, pc, #104	; (adr r3, 440 <CONFIG_MAIN_STACK_SIZE+0x40>)
     3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
     3dc:	f7ff fe80 	bl	e0 <__aeabi_uldivmod>
     3e0:	4603      	mov	r3, r0
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     3e2:	eba4 0008 	sub.w	r0, r4, r8
     3e6:	fba0 0105 	umull	r0, r1, r0, r5
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     3ea:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     3ee:	a314      	add	r3, pc, #80	; (adr r3, 440 <CONFIG_MAIN_STACK_SIZE+0x40>)
     3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
     3f4:	f7ff fe74 	bl	e0 <__aeabi_uldivmod>
     3f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     3fc:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
     3fe:	6030      	str	r0, [r6, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     404:	f8df 9040 	ldr.w	r9, [pc, #64]	; 448 <CONFIG_MAIN_STACK_SIZE+0x48>
     408:	a30d      	add	r3, pc, #52	; (adr r3, 440 <CONFIG_MAIN_STACK_SIZE+0x40>)
     40a:	e9d3 2300 	ldrd	r2, r3, [r3]
     40e:	fba8 0109 	umull	r0, r1, r8, r9
     412:	f7ff fe65 	bl	e0 <__aeabi_uldivmod>
     416:	4604      	mov	r4, r0
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     418:	f105 0030 	add.w	r0, r5, #48	; 0x30
     41c:	a308      	add	r3, pc, #32	; (adr r3, 440 <CONFIG_MAIN_STACK_SIZE+0x40>)
     41e:	e9d3 2300 	ldrd	r2, r3, [r3]
     422:	fba0 0109 	umull	r0, r1, r0, r9
     426:	f7ff fe5b 	bl	e0 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     42a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     42e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     432:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
     434:	6030      	str	r0, [r6, #0]
}
     436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     43a:	bf00      	nop
     43c:	f3af 8000 	nop.w
     440:	1afd498d 	.word	0x1afd498d
     444:	00000007 	.word	0x00000007
     448:	3b9aca00 	.word	0x3b9aca00
     44c:	00000000 	.word	0x00000000

00000450 <ll_adv_enable>:
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
     450:	2800      	cmp	r0, #0
     452:	f000 813d 	beq.w	6d0 <CONFIG_BT_COMPANY_ID+0xdf>
{
     456:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     45a:	4ccb      	ldr	r4, [pc, #812]	; (788 <CONFIG_BT_COMPANY_ID+0x197>)
     45c:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
     460:	07da      	lsls	r2, r3, #31
{
     462:	b08d      	sub	sp, #52	; 0x34
	if (!adv || adv->is_enabled) {
     464:	f100 8171 	bmi.w	74a <CONFIG_BT_COMPANY_ID+0x159>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     468:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(const struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     46c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     470:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     474:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     478:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     47a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
     47e:	b30e      	cbz	r6, 4c4 <CONFIG_BT_RX_STACK_SIZE+0x14>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		} else if (ll_adv_cmds_is_ext() && pdu->tx_addr) {
			own_id_addr = adv->rnd_addr;
#endif
		} else {
			own_id_addr = ll_addr_get(pdu->tx_addr);
     480:	4635      	mov	r5, r6
     482:	f815 0b02 	ldrb.w	r0, [r5], #2
     486:	f3c0 1080 	ubfx	r0, r0, #6, #1
     48a:	f007 fc39 	bl	7d00 <ll_addr_get>
	} else {
		tx_addr = own_id_addr;
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     48e:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
     490:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     492:	4628      	mov	r0, r5
     494:	f017 fab2 	bl	179fc <memcpy>
		if (pdu_adv_to_update->tx_addr &&
     498:	7833      	ldrb	r3, [r6, #0]
     49a:	065b      	lsls	r3, r3, #25
     49c:	d506      	bpl.n	4ac <ll_adv_enable+0x5c>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     49e:	2106      	movs	r1, #6
     4a0:	4628      	mov	r0, r5
     4a2:	f006 f887 	bl	65b4 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     4a6:	2800      	cmp	r0, #0
     4a8:	f000 8151 	beq.w	74e <CONFIG_BT_COMPANY_ID+0x15d>
			own_id_addr = ll_addr_get(pdu->tx_addr);
     4ac:	4645      	mov	r5, r8
     4ae:	f815 0b02 	ldrb.w	r0, [r5], #2
     4b2:	f3c0 1080 	ubfx	r0, r0, #6, #1
     4b6:	f007 fc23 	bl	7d00 <ll_addr_get>
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     4ba:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
     4bc:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     4be:	4628      	mov	r0, r5
     4c0:	f017 fa9c 	bl	179fc <memcpy>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     4c4:	7833      	ldrb	r3, [r6, #0]
     4c6:	f013 0f0e 	tst.w	r3, #14
     4ca:	f040 808f 	bne.w	5ec <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x10>
		if (lll->conn) {
     4ce:	6a23      	ldr	r3, [r4, #32]
     4d0:	b11b      	cbz	r3, 4da <CONFIG_BT_RX_STACK_SIZE+0x2a>
	return BT_HCI_ERR_CMD_DISALLOWED;
     4d2:	200c      	movs	r0, #12
}
     4d4:	b00d      	add	sp, #52	; 0x34
     4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
     4da:	f008 f8ed 	bl	86b8 <ll_rx_link_alloc>
		if (!link) {
     4de:	4681      	mov	r9, r0
     4e0:	2800      	cmp	r0, #0
     4e2:	f000 8142 	beq.w	76a <CONFIG_BT_COMPANY_ID+0x179>
		node_rx = ll_rx_alloc();
     4e6:	f008 f8f3 	bl	86d0 <ll_rx_alloc>
		if (!node_rx) {
     4ea:	4682      	mov	sl, r0
     4ec:	2800      	cmp	r0, #0
     4ee:	f000 8139 	beq.w	764 <CONFIG_BT_COMPANY_ID+0x173>
		conn = ll_conn_acquire();
     4f2:	f00a fedd 	bl	b2b0 <ll_conn_acquire>
		if (!conn) {
     4f6:	4605      	mov	r5, r0
     4f8:	2800      	cmp	r0, #0
     4fa:	f000 8138 	beq.w	76e <CONFIG_BT_COMPANY_ID+0x17d>
		if (!conn_lll->link_tx_free) {
     4fe:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
		conn_lll->handle = 0xFFFF;
     502:	f64f 73ff 	movw	r3, #65535	; 0xffff
     506:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
     508:	f105 0b1c 	add.w	fp, r5, #28
		if (!conn_lll->link_tx_free) {
     50c:	2800      	cmp	r0, #0
     50e:	f000 8124 	beq.w	75a <CONFIG_BT_COMPANY_ID+0x169>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     512:	f105 027c 	add.w	r2, r5, #124	; 0x7c
     516:	f105 0178 	add.w	r1, r5, #120	; 0x78
     51a:	f006 f857 	bl	65cc <memq_init>
			conn_lll->phy_tx = PHY_1M;
     51e:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
     522:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
     526:	f023 0307 	bic.w	r3, r3, #7
     52a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
     52e:	f043 0301 	orr.w	r3, r3, #1
     532:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
		conn_lll->data_chan_sel = 0;
     536:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
     53a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     53e:	f063 037f 	orn	r3, r3, #127	; 0x7f
     542:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		conn_lll->sn = 0;
     546:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
     54a:	f023 0307 	bic.w	r3, r3, #7
     54e:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
		conn_lll->periph.initiated = 0;
     552:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
     556:	f023 0307 	bic.w	r3, r3, #7
		conn_lll->link_tx_free = NULL;
     55a:	2700      	movs	r7, #0
		conn_lll->periph.initiated = 0;
     55c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		conn->apto_expire = 0U;
     560:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
     564:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
		ull_llcp_init(conn);
     568:	4628      	mov	r0, r5
		conn_lll->periph.window_widening_event_us = 0;
     56a:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
     56e:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		conn_lll->packet_tx_head_len = 0;
     572:	f8a5 708c 	strh.w	r7, [r5, #140]	; 0x8c
		conn_lll->event_counter = 0;
     576:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_prepare = 0;
     578:	f8c5 702e 	str.w	r7, [r5, #46]	; 0x2e
		conn_lll->data_chan_use = 0;
     57c:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
     580:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
     582:	f8a5 7186 	strh.w	r7, [r5, #390]	; 0x186
		conn->appto_expire = 0U;
     586:	f8a5 717c 	strh.w	r7, [r5, #380]	; 0x17c
		ull_llcp_init(conn);
     58a:	f00c ff8d 	bl	d4a8 <ull_llcp_init>
		conn->llcp_terminate.reason_final = 0;
     58e:	f885 7148 	strb.w	r7, [r5, #328]	; 0x148
		conn->llcp_terminate.node_rx.hdr.link = link;
     592:	f8c5 914c 	str.w	r9, [r5, #332]	; 0x14c
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     596:	f00b f915 	bl	b7c4 <ull_conn_default_phy_tx_get>
     59a:	f895 318c 	ldrb.w	r3, [r5, #396]	; 0x18c
     59e:	f360 0302 	bfi	r3, r0, #0, #3
     5a2:	f885 318c 	strb.w	r3, [r5, #396]	; 0x18c
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     5a6:	f00b f913 	bl	b7d0 <ull_conn_default_phy_rx_get>
     5aa:	f895 318c 	ldrb.w	r3, [r5, #396]	; 0x18c
     5ae:	f360 03c5 	bfi	r3, r0, #3, #3
     5b2:	f885 318c 	strb.w	r3, [r5, #396]	; 0x18c
		conn->pause_rx_data = 0U;
     5b6:	f895 3178 	ldrb.w	r3, [r5, #376]	; 0x178
     5ba:	f367 0341 	bfi	r3, r7, #1, #1
     5be:	f885 3178 	strb.w	r3, [r5, #376]	; 0x178
		ull_dle_init(conn, phy_in_use);
     5c2:	2101      	movs	r1, #1
     5c4:	4628      	mov	r0, r5
     5c6:	f00b fd0f 	bl	bfe8 <ull_dle_init>
		ull_tx_q_init(&conn->tx_q);
     5ca:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
     5ce:	f00c fd55 	bl	d07c <ull_tx_q_init>
		adv->node_rx_cc_free = node_rx;
     5d2:	e9c4 9a18 	strd	r9, sl, [r4, #96]	; 0x60
		lll->conn = conn_lll;
     5d6:	f8c4 b020 	str.w	fp, [r4, #32]
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
     5da:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->ref = 0U;
     5de:	702f      	strb	r7, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
     5e0:	61ed      	str	r5, [r5, #28]
		err = lll_clock_wait();
     5e2:	f010 fcd9 	bl	10f98 <lll_clock_wait>
		if (err) {
     5e6:	2800      	cmp	r0, #0
     5e8:	f040 80b3 	bne.w	752 <CONFIG_BT_COMPANY_ID+0x161>
	uint8_t ch_map = lll->chan_map;
     5ec:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     5f0:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     5f2:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     5f6:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
	uint8_t ch_map = lll->chan_map;
     5fa:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     5fe:	f006 f96f 	bl	68e0 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     602:	4602      	mov	r2, r0
     604:	2800      	cmp	r0, #0
     606:	d065      	beq.n	6d4 <CONFIG_BT_COMPANY_ID+0xe3>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
     608:	f898 1001 	ldrb.w	r1, [r8, #1]
     60c:	4630      	mov	r0, r6
     60e:	f00a f981 	bl	a914 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     612:	495e      	ldr	r1, [pc, #376]	; (78c <CONFIG_BT_COMPANY_ID+0x19b>)
	uint16_t interval = adv->interval;
     614:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
     618:	2500      	movs	r5, #0
	adv->ull.ticks_prepare_to_start =
     61a:	2331      	movs	r3, #49	; 0x31
     61c:	60a3      	str	r3, [r4, #8]
	hdr->disabled_cb = hdr->disabled_param = NULL;
     61e:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     622:	a357      	add	r3, pc, #348	; (adr r3, 780 <CONFIG_BT_COMPANY_ID+0x18f>)
     624:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
     628:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
     62a:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
     62c:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     62e:	fba0 0101 	umull	r0, r1, r0, r1
     632:	f7ff fd55 	bl	e0 <__aeabi_uldivmod>
     636:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
     638:	f007 fb1e 	bl	7c78 <ticker_ticks_now_get>
	ticks_anchor += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);
     63c:	f100 0809 	add.w	r8, r0, #9
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     640:	b93f      	cbnz	r7, 652 <CONFIG_BT_COMPANY_ID+0x61>
     642:	7835      	ldrb	r5, [r6, #0]
     644:	f005 050f 	and.w	r5, r5, #15
     648:	f1a5 0501 	sub.w	r5, r5, #1
     64c:	fab5 f585 	clz	r5, r5
     650:	096d      	lsrs	r5, r5, #5
     652:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
     656:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     658:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
     65c:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     660:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
     664:	d03d      	beq.n	6e2 <CONFIG_BT_COMPANY_ID+0xf1>
		ll_adv_ticker_ext[handle].ticks_slot_window = 0;
     666:	494a      	ldr	r1, [pc, #296]	; (790 <CONFIG_BT_COMPANY_ID+0x19f>)
		ll_adv_ticker_ext[handle].ext_timeout_func = ticker_cb;
     668:	f8df c128 	ldr.w	ip, [pc, #296]	; 794 <CONFIG_BT_COMPANY_ID+0x1a3>
		ret = ticker_start_ext(
     66c:	4f4a      	ldr	r7, [pc, #296]	; (798 <CONFIG_BT_COMPANY_ID+0x1a7>)
     66e:	9109      	str	r1, [sp, #36]	; 0x24
		ll_adv_ticker_ext[handle].ticks_slot_window = 0;
     670:	2000      	movs	r0, #0
		ret = ticker_start_ext(
     672:	ae0b      	add	r6, sp, #44	; 0x2c
     674:	9304      	str	r3, [sp, #16]
     676:	9301      	str	r3, [sp, #4]
     678:	e9cd 0405 	strd	r0, r4, [sp, #20]
     67c:	e9cd 0002 	strd	r0, r0, [sp, #8]
     680:	9000      	str	r0, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
     682:	2502      	movs	r5, #2
		ll_adv_ticker_ext[handle].ticks_slot_window = 0;
     684:	6048      	str	r0, [r1, #4]
		ret = ticker_start_ext(
     686:	9608      	str	r6, [sp, #32]
     688:	9707      	str	r7, [sp, #28]
		ll_adv_ticker_ext[handle].ext_timeout_func = ticker_cb;
     68a:	f8c1 c000 	str.w	ip, [r1]
		ll_adv_ticker_ext[handle].expire_info_id = TICKER_NULL;
     68e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     692:	f881 c00d 	strb.w	ip, [r1, #13]
		ret = ticker_start_ext(
     696:	4643      	mov	r3, r8
     698:	2103      	movs	r1, #3
     69a:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
     69c:	950b      	str	r5, [sp, #44]	; 0x2c
		ret = ticker_start_ext(
     69e:	f007 f989 	bl	79b4 <ticker_start_ext>
		ret = ull_ticker_status_take(ret, &ret_cb);
     6a2:	4631      	mov	r1, r6
     6a4:	f008 f8a8 	bl	87f8 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     6a8:	b9a0      	cbnz	r0, 6d4 <CONFIG_BT_COMPANY_ID+0xe3>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     6aa:	493c      	ldr	r1, [pc, #240]	; (79c <CONFIG_BT_COMPANY_ID+0x1ab>)
     6ac:	9105      	str	r1, [sp, #20]
     6ae:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
     6b2:	9300      	str	r3, [sp, #0]
     6b4:	e9cd 0003 	strd	r0, r0, [sp, #12]
     6b8:	e9cd 0001 	strd	r0, r0, [sp, #4]
     6bc:	9707      	str	r7, [sp, #28]
     6be:	9608      	str	r6, [sp, #32]
     6c0:	9406      	str	r4, [sp, #24]
     6c2:	4643      	mov	r3, r8
     6c4:	2201      	movs	r2, #1
     6c6:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     6c8:	950b      	str	r5, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     6ca:	f007 f9c5 	bl	7a58 <ticker_start>
     6ce:	e031      	b.n	734 <CONFIG_BT_COMPANY_ID+0x143>
		return disable(handle);
     6d0:	f00a b872 	b.w	a7b8 <disable.constprop.0>
	if (adv->lll.conn) {
     6d4:	6a23      	ldr	r3, [r4, #32]
     6d6:	2b00      	cmp	r3, #0
     6d8:	f43f aefb 	beq.w	4d2 <CONFIG_BT_RX_STACK_SIZE+0x22>
		conn_release(adv);
     6dc:	f00a f82a 	bl	a734 <conn_release.constprop.0>
     6e0:	e6f7      	b.n	4d2 <CONFIG_BT_RX_STACK_SIZE+0x22>
		ll_adv_ticker_ext[handle].ticks_slot_window =
     6e2:	4a2b      	ldr	r2, [pc, #172]	; (790 <CONFIG_BT_COMPANY_ID+0x19f>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     6e4:	482e      	ldr	r0, [pc, #184]	; (7a0 <CONFIG_BT_COMPANY_ID+0x1af>)
		ret = ticker_start_ext(
     6e6:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     6e8:	f203 1347 	addw	r3, r3, #327	; 0x147
		ret = ticker_start_ext(
     6ec:	e9cd 5405 	strd	r5, r4, [sp, #20]
     6f0:	9502      	str	r5, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     6f2:	2191      	movs	r1, #145	; 0x91
		ll_adv_ticker_ext[handle].ticks_slot_window =
     6f4:	6053      	str	r3, [r2, #4]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     6f6:	fba7 0300 	umull	r0, r3, r7, r0
     6fa:	fb01 3107 	mla	r1, r1, r7, r3
		ll_adv_ticker_ext[handle].ext_timeout_func = ticker_cb;
     6fe:	4b25      	ldr	r3, [pc, #148]	; (794 <CONFIG_BT_COMPANY_ID+0x1a3>)
		ret = ticker_start_ext(
     700:	9209      	str	r2, [sp, #36]	; 0x24
		ll_adv_ticker_ext[handle].ext_timeout_func = ticker_cb;
     702:	6013      	str	r3, [r2, #0]
		ret = ticker_start_ext(
     704:	4b24      	ldr	r3, [pc, #144]	; (798 <CONFIG_BT_COMPANY_ID+0x1a7>)
     706:	9307      	str	r3, [sp, #28]
			ll_adv_ticker_ext[handle].expire_info_id = TICKER_NULL;
     708:	23ff      	movs	r3, #255	; 0xff
     70a:	7353      	strb	r3, [r2, #13]
		ret = ticker_start_ext(
     70c:	f64f 73ff 	movw	r3, #65535	; 0xffff
		ret_cb = TICKER_STATUS_BUSY;
     710:	2702      	movs	r7, #2
		ret = ticker_start_ext(
     712:	9303      	str	r3, [sp, #12]
     714:	ae0b      	add	r6, sp, #44	; 0x2c
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     716:	a31a      	add	r3, pc, #104	; (adr r3, 780 <CONFIG_BT_COMPANY_ID+0x18f>)
     718:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
     71c:	970b      	str	r7, [sp, #44]	; 0x2c
		ret = ticker_start_ext(
     71e:	9608      	str	r6, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     720:	f7ff fcde 	bl	e0 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     724:	4643      	mov	r3, r8
     726:	e9cd 5000 	strd	r5, r0, [sp]
     72a:	463a      	mov	r2, r7
     72c:	4628      	mov	r0, r5
     72e:	2103      	movs	r1, #3
     730:	f007 f940 	bl	79b4 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
     734:	4631      	mov	r1, r6
     736:	f008 f85f 	bl	87f8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     73a:	2800      	cmp	r0, #0
     73c:	d1ca      	bne.n	6d4 <CONFIG_BT_COMPANY_ID+0xe3>
	adv->is_enabled = 1;
     73e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
     742:	f043 0301 	orr.w	r3, r3, #1
     746:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			return 0;
     74a:	2000      	movs	r0, #0
     74c:	e6c2      	b.n	4d4 <CONFIG_BT_RX_STACK_SIZE+0x24>
			return BT_HCI_ERR_INVALID_PARAM;
     74e:	2012      	movs	r0, #18
     750:	e6c0      	b.n	4d4 <CONFIG_BT_RX_STACK_SIZE+0x24>
			conn_release(adv);
     752:	f009 ffef 	bl	a734 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
     756:	2003      	movs	r0, #3
     758:	e6bc      	b.n	4d4 <CONFIG_BT_RX_STACK_SIZE+0x24>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     75a:	f105 0080 	add.w	r0, r5, #128	; 0x80
     75e:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
     762:	e6d6      	b.n	512 <CONFIG_BT_RX_STACK_SIZE+0x62>
			ll_rx_link_release(link);
     764:	4648      	mov	r0, r9
     766:	f007 ffad 	bl	86c4 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     76a:	2007      	movs	r0, #7
     76c:	e6b2      	b.n	4d4 <CONFIG_BT_RX_STACK_SIZE+0x24>
			ll_rx_release(node_rx);
     76e:	4650      	mov	r0, sl
     770:	f007 ffb4 	bl	86dc <ll_rx_release>
			ll_rx_link_release(link);
     774:	4648      	mov	r0, r9
     776:	f007 ffa5 	bl	86c4 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     77a:	e7f6      	b.n	76a <CONFIG_BT_COMPANY_ID+0x179>
     77c:	f3af 8000 	nop.w
     780:	1afd498d 	.word	0x1afd498d
     784:	00000007 	.word	0x00000007
     788:	20001b54 	.word	0x20001b54
     78c:	3b9aca00 	.word	0x3b9aca00
     790:	20001b40 	.word	0x20001b40
     794:	0000a991 	.word	0x0000a991
     798:	00007de5 	.word	0x00007de5
     79c:	0000a4dd 	.word	0x0000a4dd
     7a0:	84e72a00 	.word	0x84e72a00
     7a4:	00000000 	.word	0x00000000

000007a8 <ull_adv_time_update>:
{
     7a8:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
     7aa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
     7ae:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
     7b0:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
     7b4:	460d      	mov	r5, r1
     7b6:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     7b8:	2101      	movs	r1, #1
     7ba:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
     7be:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
     7c0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     7c4:	f006 f88c 	bl	68e0 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
     7c8:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     7ca:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
     7cc:	4628      	mov	r0, r5
     7ce:	f00a f8a1 	bl	a914 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
     7d2:	491d      	ldr	r1, [pc, #116]	; (848 <__z_interrupt_stack_SIZEOF+0x8>)
     7d4:	a31a      	add	r3, pc, #104	; (adr r3, 840 <__z_interrupt_stack_SIZEOF>)
     7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
     7da:	fba0 0101 	umull	r0, r1, r0, r1
     7de:	f7ff fc7f 	bl	e0 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
     7e2:	6923      	ldr	r3, [r4, #16]
     7e4:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
     7e6:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
     7e8:	d222      	bcs.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
     7ea:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
     7ec:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     7ee:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     7f0:	4a16      	ldr	r2, [pc, #88]	; (84c <__z_interrupt_stack_SIZEOF+0xc>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     7f2:	9302      	str	r3, [sp, #8]
	ret_cb = TICKER_STATUS_BUSY;
     7f4:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     7f6:	4b16      	ldr	r3, [pc, #88]	; (850 <__z_interrupt_stack_SIZEOF+0x10>)
	ret_cb = TICKER_STATUS_BUSY;
     7f8:	9109      	str	r1, [sp, #36]	; 0x24
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     7fa:	1aa2      	subs	r2, r4, r2
     7fc:	40ca      	lsrs	r2, r1
     7fe:	fba3 3202 	umull	r3, r2, r3, r2
     802:	08d2      	lsrs	r2, r2, #3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     804:	2300      	movs	r3, #0
     806:	440a      	add	r2, r1
     808:	ae09      	add	r6, sp, #36	; 0x24
     80a:	4912      	ldr	r1, [pc, #72]	; (854 <__z_interrupt_stack_SIZEOF+0x14>)
     80c:	9105      	str	r1, [sp, #20]
     80e:	e9cd 3303 	strd	r3, r3, [sp, #12]
     812:	2103      	movs	r1, #3
     814:	b2d2      	uxtb	r2, r2
     816:	9606      	str	r6, [sp, #24]
     818:	9300      	str	r3, [sp, #0]
     81a:	4618      	mov	r0, r3
     81c:	f007 f994 	bl	7b48 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
     820:	4631      	mov	r1, r6
     822:	f007 ffe9 	bl	87f8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     826:	b938      	cbnz	r0, 838 <CONFIG_ISR_STACK_SIZE+0x38>
	adv->ull.ticks_slot = time_ticks;
     828:	6125      	str	r5, [r4, #16]
		return BT_HCI_ERR_SUCCESS;
     82a:	2000      	movs	r0, #0
}
     82c:	b00a      	add	sp, #40	; 0x28
     82e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
     830:	d9fb      	bls.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
     832:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
     834:	2300      	movs	r3, #0
     836:	e7da      	b.n	7ee <ull_adv_time_update+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
     838:	200c      	movs	r0, #12
}
     83a:	b00a      	add	sp, #40	; 0x28
     83c:	bd70      	pop	{r4, r5, r6, pc}
     83e:	bf00      	nop
     840:	1afd498d 	.word	0x1afd498d
     844:	00000007 	.word	0x00000007
     848:	3b9aca00 	.word	0x3b9aca00
     84c:	20001b54 	.word	0x20001b54
     850:	4bda12f7 	.word	0x4bda12f7
     854:	00007de5 	.word	0x00007de5

00000858 <ull_conn_update_ticker.constprop.0>:
				conn->llcp.prep.lazy;
	}

	return event_counter;
}
static void ull_conn_update_ticker(struct ll_conn *conn,
     858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     85c:	4605      	mov	r5, r0
     85e:	b08b      	sub	sp, #44	; 0x2c
     860:	468b      	mov	fp, r1
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start
	 * to avoid RTC being stopped if no tickers active.
	 */
	uint32_t mayfly_was_enabled =
		mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW);
     862:	2001      	movs	r0, #1
     864:	2102      	movs	r1, #2
static void ull_conn_update_ticker(struct ll_conn *conn,
     866:	469a      	mov	sl, r3
     868:	4614      	mov	r4, r2
		mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW);
     86a:	f012 fac7 	bl	12dfc <mayfly_is_enabled>

	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0U);
     86e:	2200      	movs	r2, #0
     870:	2102      	movs	r1, #2
		mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW);
     872:	4681      	mov	r9, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0U);
     874:	2001      	movs	r0, #1
     876:	f005 fef9 	bl	666c <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
     87a:	4939      	ldr	r1, [pc, #228]	; (960 <__data_size+0xd2>)
     87c:	f44f 72cc 	mov.w	r2, #408	; 0x198
     880:	4628      	mov	r0, r5
     882:	f005 fe83 	bl	658c <mem_index_get>
#endif /* CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO */

	/* start periph/central with new timings */
	uint8_t ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
     886:	1cc6      	adds	r6, r0, #3
     888:	b2f6      	uxtb	r6, r6
	uint32_t ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
     88a:	4b36      	ldr	r3, [pc, #216]	; (964 <__data_size+0xd6>)
     88c:	9500      	str	r5, [sp, #0]
     88e:	4632      	mov	r2, r6
     890:	2101      	movs	r1, #1
     892:	2000      	movs	r0, #0
     894:	f007 f972 	bl	7b7c <ticker_stop>
				    ticker_id_conn, ticker_stop_conn_op_cb, (void *)conn);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     898:	f010 0ffd 	tst.w	r0, #253	; 0xfd
     89c:	d00c      	beq.n	8b8 <__data_size+0x2a>
     89e:	4a32      	ldr	r2, [pc, #200]	; (968 <__data_size+0xda>)
     8a0:	4932      	ldr	r1, [pc, #200]	; (96c <__data_size+0xde>)
     8a2:	4833      	ldr	r0, [pc, #204]	; (970 <__data_size+0xe2>)
     8a4:	f640 030a 	movw	r3, #2058	; 0x80a
     8a8:	f016 fe1b 	bl	174e2 <assert_print>
     8ac:	4040      	eors	r0, r0
     8ae:	f380 8811 	msr	BASEPRI, r0
     8b2:	f04f 0003 	mov.w	r0, #3
     8b6:	df02      	svc	2
		  (ticker_status == TICKER_STATUS_BUSY));
	ticker_status = ticker_start(
		TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH, ticker_id_conn, ticks_at_expire,
		ticks_win_offset, HAL_TICKER_US_TO_TICKS(periodic_us),
     8b8:	4b2e      	ldr	r3, [pc, #184]	; (974 <__data_size+0xe6>)
     8ba:	fba4 4803 	umull	r4, r8, r4, r3
     8be:	4620      	mov	r0, r4
     8c0:	a325      	add	r3, pc, #148	; (adr r3, 958 <__data_size+0xca>)
     8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
     8c6:	4641      	mov	r1, r8
     8c8:	f7ff fc0a 	bl	e0 <__aeabi_uldivmod>
	ticker_status = ticker_start(
     8cc:	9508      	str	r5, [sp, #32]
     8ce:	9506      	str	r5, [sp, #24]
     8d0:	692b      	ldr	r3, [r5, #16]
     8d2:	9304      	str	r3, [sp, #16]
		HAL_TICKER_REMAINDER(periodic_us),
     8d4:	4b28      	ldr	r3, [pc, #160]	; (978 <__data_size+0xea>)
     8d6:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
     8da:	fba7 3103 	umull	r3, r1, r7, r3
     8de:	1ae0      	subs	r0, r4, r3
	ticker_status = ticker_start(
     8e0:	4b26      	ldr	r3, [pc, #152]	; (97c <__data_size+0xee>)
     8e2:	9307      	str	r3, [sp, #28]
		HAL_TICKER_REMAINDER(periodic_us),
     8e4:	f04f 0207 	mov.w	r2, #7
	ticker_status = ticker_start(
     8e8:	4b25      	ldr	r3, [pc, #148]	; (980 <__data_size+0xf2>)
     8ea:	9305      	str	r3, [sp, #20]
		HAL_TICKER_REMAINDER(periodic_us),
     8ec:	fb02 1107 	mla	r1, r2, r7, r1
	ticker_status = ticker_start(
     8f0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
		HAL_TICKER_REMAINDER(periodic_us),
     8f4:	eb68 0101 	sbc.w	r1, r8, r1
	ticker_status = ticker_start(
     8f8:	9303      	str	r3, [sp, #12]
		HAL_TICKER_REMAINDER(periodic_us),
     8fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8fe:	2300      	movs	r3, #0
     900:	f7ff fbee 	bl	e0 <__aeabi_uldivmod>
	ticker_status = ticker_start(
     904:	f8cd b000 	str.w	fp, [sp]
     908:	e9cd 7001 	strd	r7, r0, [sp, #4]
     90c:	4653      	mov	r3, sl
     90e:	4632      	mov	r2, r6
     910:	2101      	movs	r1, #1
     912:	2000      	movs	r0, #0
     914:	f007 f8a0 	bl	7a58 <ticker_start>
		ull_periph_ticker_cb,
#else
		ull_central_ticker_cb,
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CENTRAL */
		conn, ticker_start_conn_op_cb, (void *)conn);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     918:	f010 0ffd 	tst.w	r0, #253	; 0xfd
     91c:	d00c      	beq.n	938 <__data_size+0xaa>
     91e:	4a12      	ldr	r2, [pc, #72]	; (968 <__data_size+0xda>)
     920:	4912      	ldr	r1, [pc, #72]	; (96c <__data_size+0xde>)
     922:	4813      	ldr	r0, [pc, #76]	; (970 <__data_size+0xe2>)
     924:	f640 031f 	movw	r3, #2079	; 0x81f
     928:	f016 fddb 	bl	174e2 <assert_print>
     92c:	4040      	eors	r0, r0
     92e:	f380 8811 	msr	BASEPRI, r0
     932:	f04f 0003 	mov.w	r0, #3
     936:	df02      	svc	2
		  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, if disabled in this function */
	if (mayfly_was_enabled) {
     938:	f1b9 0f00 	cmp.w	r9, #0
     93c:	d102      	bne.n	944 <__data_size+0xb6>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1U);
	}
#endif /* CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO */
}
     93e:	b00b      	add	sp, #44	; 0x2c
     940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1U);
     944:	2201      	movs	r2, #1
     946:	2102      	movs	r1, #2
     948:	4610      	mov	r0, r2
}
     94a:	b00b      	add	sp, #44	; 0x2c
     94c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1U);
     950:	f005 be8c 	b.w	666c <mayfly_enable>
     954:	f3af 8000 	nop.w
     958:	1afd498d 	.word	0x1afd498d
     95c:	00000007 	.word	0x00000007
     960:	20000e58 	.word	0x20000e58
     964:	0000b259 	.word	0x0000b259
     968:	0001bd60 	.word	0x0001bd60
     96c:	0001be24 	.word	0x0001be24
     970:	0001b844 	.word	0x0001b844
     974:	3b9aca00 	.word	0x3b9aca00
     978:	1afd498d 	.word	0x1afd498d
     97c:	0000b201 	.word	0x0000b201
     980:	000101f5 	.word	0x000101f5
     984:	00000000 	.word	0x00000000

00000988 <ull_conn_done>:
{
     988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
     98c:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
     98e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     990:	f64f 73ff 	movw	r3, #65535	; 0xffff
     994:	429a      	cmp	r2, r3
{
     996:	b08d      	sub	sp, #52	; 0x34
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
     998:	f000 8088 	beq.w	aac <ull_conn_done+0x124>
     99c:	4605      	mov	r5, r0
	ull_cp_tx_ntf(conn);
     99e:	4620      	mov	r0, r4
     9a0:	f00c ffc2 	bl	d928 <ull_cp_tx_ntf>
	switch (done->extra.mic_state) {
     9a4:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
     9a8:	2b01      	cmp	r3, #1
     9aa:	f000 810a 	beq.w	bc2 <ull_conn_done+0x23a>
     9ae:	2b02      	cmp	r3, #2
     9b0:	f000 80fd 	beq.w	bae <ull_conn_done+0x226>
     9b4:	2b00      	cmp	r3, #0
     9b6:	f000 80dc 	beq.w	b72 <ull_conn_done+0x1ea>
	reason_final = conn->llcp_terminate.reason_final;
     9ba:	f894 7148 	ldrb.w	r7, [r4, #328]	; 0x148
	if (reason_final) {
     9be:	2f00      	cmp	r7, #0
     9c0:	f040 80f8 	bne.w	bb4 <ull_conn_done+0x22c>
	if (lll->latency_prepare) {
     9c4:	8de6      	ldrh	r6, [r4, #46]	; 0x2e
	latency_event = lll->latency_event;
     9c6:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (lll->latency_prepare) {
     9ca:	2e00      	cmp	r6, #0
     9cc:	d171      	bne.n	ab2 <ull_conn_done+0x12a>
	if (done->extra.trx_cnt) {
     9ce:	8caa      	ldrh	r2, [r5, #36]	; 0x24
		elapsed_event = latency_event + 1U;
     9d0:	f108 0601 	add.w	r6, r8, #1
	ticks_drift_plus = 0U;
     9d4:	2300      	movs	r3, #0
	ticks_drift_minus = 0U;
     9d6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		elapsed_event = latency_event + 1U;
     9da:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
     9dc:	2a00      	cmp	r2, #0
     9de:	d070      	beq.n	ac2 <ull_conn_done+0x13a>
		} else if (lll->role) {
     9e0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
     9e4:	2b00      	cmp	r3, #0
     9e6:	f2c0 8143 	blt.w	c70 <ull_conn_done+0x2e8>
		conn->connect_expire = 0U;
     9ea:	2300      	movs	r3, #0
     9ec:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
	if (done->extra.crc_valid) {
     9f0:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
     9f4:	07d9      	lsls	r1, r3, #31
     9f6:	f140 80ea 	bpl.w	bce <ull_conn_done+0x246>
		conn->supervision_expire = 0U;
     9fa:	2300      	movs	r3, #0
     9fc:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
	if (-ETIMEDOUT == ull_cp_prt_elapse(conn, elapsed_event, &error_code)) {
     a00:	f10d 0227 	add.w	r2, sp, #39	; 0x27
     a04:	4631      	mov	r1, r6
     a06:	4620      	mov	r0, r4
     a08:	f00c fd88 	bl	d51c <ull_cp_prt_elapse>
     a0c:	3074      	adds	r0, #116	; 0x74
     a0e:	f000 8141 	beq.w	c94 <ull_conn_done+0x30c>
	if (conn->apto_expire != 0U) {
     a12:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
     a16:	b12b      	cbz	r3, a24 <ull_conn_done+0x9c>
		if (conn->apto_expire > elapsed_event) {
     a18:	42b3      	cmp	r3, r6
     a1a:	f240 8108 	bls.w	c2e <ull_conn_done+0x2a6>
			conn->apto_expire -= elapsed_event;
     a1e:	1b9b      	subs	r3, r3, r6
     a20:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
	if (conn->appto_expire != 0U) {
     a24:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
     a28:	b12b      	cbz	r3, a36 <ull_conn_done+0xae>
		if (conn->appto_expire > elapsed_event) {
     a2a:	42b3      	cmp	r3, r6
     a2c:	f240 80f6 	bls.w	c1c <ull_conn_done+0x294>
			conn->appto_expire -= elapsed_event;
     a30:	1b9b      	subs	r3, r3, r6
     a32:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
	if ((force) || (latency_event != lll->latency_event)) {
     a36:	8e25      	ldrh	r5, [r4, #48]	; 0x30
     a38:	b917      	cbnz	r7, a40 <ull_conn_done+0xb8>
     a3a:	45a8      	cmp	r8, r5
     a3c:	f000 80e5 	beq.w	c0a <ull_conn_done+0x282>
		lazy = lll->latency_event + 1U;
     a40:	3501      	adds	r5, #1
     a42:	b2ad      	uxth	r5, r5
	if (lll->evt_len_upd) {
     a44:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
     a48:	f013 0601 	ands.w	r6, r3, #1
     a4c:	d159      	bne.n	b02 <ull_conn_done+0x17a>
	if (ticks_drift_plus || ticks_drift_minus ||
     a4e:	e9dd 130a 	ldrd	r1, r3, [sp, #40]	; 0x28
     a52:	460a      	mov	r2, r1
     a54:	2b00      	cmp	r3, #0
     a56:	f040 80e8 	bne.w	c2a <ull_conn_done+0x2a2>
     a5a:	2900      	cmp	r1, #0
     a5c:	f000 80d7 	beq.w	c0e <ull_conn_done+0x286>
	ticks_slot_plus = 0U;
     a60:	461e      	mov	r6, r3
	ticks_slot_minus = 0U;
     a62:	4618      	mov	r0, r3
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
     a64:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
     a66:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
     a68:	9406      	str	r4, [sp, #24]
     a6a:	e9cd 5703 	strd	r5, r7, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
     a6e:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
     a70:	4da5      	ldr	r5, [pc, #660]	; (d08 <ull_conn_done+0x380>)
     a72:	9002      	str	r0, [sp, #8]
     a74:	e9cd 1600 	strd	r1, r6, [sp]
     a78:	b2d2      	uxtb	r2, r2
     a7a:	2101      	movs	r1, #1
     a7c:	2000      	movs	r0, #0
     a7e:	9505      	str	r5, [sp, #20]
     a80:	f007 f862 	bl	7b48 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     a84:	f010 0ffd 	tst.w	r0, #253	; 0xfd
     a88:	d010      	beq.n	aac <ull_conn_done+0x124>
     a8a:	f007 fef5 	bl	8878 <ull_disable_mark_get>
     a8e:	4284      	cmp	r4, r0
     a90:	d00c      	beq.n	aac <ull_conn_done+0x124>
     a92:	4a9e      	ldr	r2, [pc, #632]	; (d0c <ull_conn_done+0x384>)
     a94:	499e      	ldr	r1, [pc, #632]	; (d10 <ull_conn_done+0x388>)
     a96:	489f      	ldr	r0, [pc, #636]	; (d14 <ull_conn_done+0x38c>)
     a98:	f240 43ed 	movw	r3, #1261	; 0x4ed
     a9c:	f016 fd21 	bl	174e2 <assert_print>
     aa0:	4040      	eors	r0, r0
     aa2:	f380 8811 	msr	BASEPRI, r0
     aa6:	f04f 0003 	mov.w	r0, #3
     aaa:	df02      	svc	2
}
     aac:	b00d      	add	sp, #52	; 0x34
     aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.trx_cnt) {
     ab2:	8caa      	ldrh	r2, [r5, #36]	; 0x24
		elapsed_event = latency_event + lll->latency_prepare;
     ab4:	4446      	add	r6, r8
	ticks_drift_plus = 0U;
     ab6:	2300      	movs	r3, #0
	ticks_drift_minus = 0U;
     ab8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		elapsed_event = latency_event + lll->latency_prepare;
     abc:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
     abe:	2a00      	cmp	r2, #0
     ac0:	d18e      	bne.n	9e0 <ull_conn_done+0x58>
	if (done->extra.crc_valid) {
     ac2:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
     ac6:	07da      	lsls	r2, r3, #31
     ac8:	d497      	bmi.n	9fa <ull_conn_done+0x72>
	else if (conn->connect_expire) {
     aca:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
     ace:	2b00      	cmp	r3, #0
     ad0:	d07d      	beq.n	bce <ull_conn_done+0x246>
		if (conn->connect_expire > elapsed_event) {
     ad2:	42b3      	cmp	r3, r6
     ad4:	f240 80f6 	bls.w	cc4 <ull_conn_done+0x33c>
			conn->connect_expire -= elapsed_event;
     ad8:	1b9b      	subs	r3, r3, r6
     ada:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
	if (conn->supervision_expire) {
     ade:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
     ae2:	2b00      	cmp	r3, #0
     ae4:	d08c      	beq.n	a00 <ull_conn_done+0x78>
		if (conn->supervision_expire > elapsed_event) {
     ae6:	429e      	cmp	r6, r3
     ae8:	f080 80da 	bcs.w	ca0 <ull_conn_done+0x318>
			conn->supervision_expire -= elapsed_event;
     aec:	1b9b      	subs	r3, r3, r6
     aee:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
     af0:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
     af2:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
     af4:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
			lll->latency_event = 0U;
     af8:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
     afa:	f200 80a8 	bhi.w	c4e <ull_conn_done+0x2c6>
				force = 1U;
     afe:	2701      	movs	r7, #1
     b00:	e77e      	b.n	a00 <ull_conn_done+0x78>
			lll_radio_rx_ready_delay_get(lll->phy_rx, PHY_FLAGS_S8) :
     b02:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
		lll->evt_len_upd = 0;
     b06:	f36f 0300 	bfc	r3, #0, #1
			lll_radio_rx_ready_delay_get(lll->phy_rx, PHY_FLAGS_S8) :
     b0a:	2a00      	cmp	r2, #0
		lll->evt_len_upd = 0;
     b0c:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
			lll_radio_rx_ready_delay_get(lll->phy_rx, PHY_FLAGS_S8) :
     b10:	db73      	blt.n	bfa <ull_conn_done+0x272>
			lll_radio_tx_ready_delay_get(lll->phy_tx, lll->phy_flags);
     b12:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
     b16:	f3c0 01c0 	ubfx	r1, r0, #3, #1
     b1a:	f000 0007 	and.w	r0, r0, #7
     b1e:	f010 f89d 	bl	10c5c <lll_radio_tx_ready_delay_get>
		rx_time = lll->dle.eff.max_rx_time;
     b22:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
		tx_time = lll->dle.eff.max_tx_time;
     b26:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
		ticks_slot = HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
     b2a:	4419      	add	r1, r3
     b2c:	f201 11ad 	addw	r1, r1, #429	; 0x1ad
     b30:	4408      	add	r0, r1
     b32:	4979      	ldr	r1, [pc, #484]	; (d18 <ull_conn_done+0x390>)
     b34:	a372      	add	r3, pc, #456	; (adr r3, d00 <ull_conn_done+0x378>)
     b36:	e9d3 2300 	ldrd	r2, r3, [r3]
     b3a:	fba0 0101 	umull	r0, r1, r0, r1
     b3e:	f7ff facf 	bl	e0 <__aeabi_uldivmod>
	if (ticks_drift_plus || ticks_drift_minus ||
     b42:	e9dd 130a 	ldrd	r1, r3, [sp, #40]	; 0x28
		ticks_slot = HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
     b46:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		if (ticks_slot > conn->ull.ticks_slot) {
     b4a:	6920      	ldr	r0, [r4, #16]
		conn->ull.ticks_slot = ticks_slot;
     b4c:	6122      	str	r2, [r4, #16]
		if (ticks_slot > conn->ull.ticks_slot) {
     b4e:	4290      	cmp	r0, r2
			ticks_slot_plus = ticks_slot - conn->ull.ticks_slot;
     b50:	bf35      	itete	cc
     b52:	1a16      	subcc	r6, r2, r0
			ticks_slot_minus = conn->ull.ticks_slot - ticks_slot;
     b54:	1a80      	subcs	r0, r0, r2
	ticks_slot_minus = 0U;
     b56:	2000      	movcc	r0, #0
	ticks_slot_plus = 0U;
     b58:	2600      	movcs	r6, #0
	if (ticks_drift_plus || ticks_drift_minus ||
     b5a:	460a      	mov	r2, r1
     b5c:	2b00      	cmp	r3, #0
     b5e:	d181      	bne.n	a64 <ull_conn_done+0xdc>
     b60:	ea56 0c01 	orrs.w	ip, r6, r1
     b64:	f47f af7e 	bne.w	a64 <ull_conn_done+0xdc>
	    ticks_slot_plus || ticks_slot_minus ||
     b68:	2800      	cmp	r0, #0
     b6a:	d050      	beq.n	c0e <ull_conn_done+0x286>
     b6c:	4619      	mov	r1, r3
     b6e:	461e      	mov	r6, r3
     b70:	e778      	b.n	a64 <ull_conn_done+0xdc>
		if (lll->enc_rx && lll->enc_tx) {
     b72:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
     b76:	f003 0318 	and.w	r3, r3, #24
     b7a:	2b18      	cmp	r3, #24
     b7c:	f47f af1d 	bne.w	9ba <ull_conn_done+0x32>
					    (lll->latency + 6)) ?
     b80:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
     b82:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
					    (lll->latency + 6)) ?
     b86:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
     b88:	429a      	cmp	r2, r3
     b8a:	bfc4      	itt	gt
     b8c:	1f93      	subgt	r3, r2, #6
     b8e:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
     b90:	f8b4 117a 	ldrh.w	r1, [r4, #378]	; 0x17a
			appto_reload_new = (conn->apto_reload >
     b94:	bfcc      	ite	gt
     b96:	b29b      	uxthgt	r3, r3
     b98:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
     b9a:	4299      	cmp	r1, r3
     b9c:	f000 808c 	beq.w	cb8 <ull_conn_done+0x330>
				conn->appto_reload = appto_reload_new;
     ba0:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
				conn->appto_expire = conn->appto_reload;
     ba4:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
				conn->apto_expire = conn->apto_reload;
     ba8:	f8a4 2180 	strh.w	r2, [r4, #384]	; 0x180
     bac:	e705      	b.n	9ba <ull_conn_done+0x32>
		conn->llcp_terminate.reason_final =
     bae:	273d      	movs	r7, #61	; 0x3d
     bb0:	f884 7148 	strb.w	r7, [r4, #328]	; 0x148
		conn_cleanup(conn, reason_final);
     bb4:	4639      	mov	r1, r7
     bb6:	4620      	mov	r0, r4
}
     bb8:	b00d      	add	sp, #52	; 0x34
     bba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		conn_cleanup(conn, reason_final);
     bbe:	f00a bedf 	b.w	b980 <conn_cleanup>
		conn->appto_expire = conn->apto_expire = 0U;
     bc2:	2300      	movs	r3, #0
     bc4:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
     bc8:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
		break;
     bcc:	e6f5      	b.n	9ba <ull_conn_done+0x32>
		if (!conn->supervision_expire) {
     bce:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
     bd2:	2b00      	cmp	r3, #0
     bd4:	d187      	bne.n	ae6 <ull_conn_done+0x15e>
			const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
     bd6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			conn->supervision_expire = RADIO_CONN_EVENTS(
     bd8:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
			const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
     bdc:	f240 41e2 	movw	r1, #1250	; 0x4e2
     be0:	fb01 f202 	mul.w	r2, r1, r2
			conn->supervision_expire = RADIO_CONN_EVENTS(
     be4:	f242 7110 	movw	r1, #10000	; 0x2710
     be8:	fb01 2303 	mla	r3, r1, r3, r2
     bec:	3b01      	subs	r3, #1
     bee:	fbb3 f3f2 	udiv	r3, r3, r2
     bf2:	b29b      	uxth	r3, r3
     bf4:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
     bf8:	e773      	b.n	ae2 <ull_conn_done+0x15a>
			lll_radio_rx_ready_delay_get(lll->phy_rx, PHY_FLAGS_S8) :
     bfa:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
     bfe:	2101      	movs	r1, #1
     c00:	f000 0007 	and.w	r0, r0, #7
     c04:	f010 f82c 	bl	10c60 <lll_radio_rx_ready_delay_get>
     c08:	e78b      	b.n	b22 <ull_conn_done+0x19a>
	lazy = 0U;
     c0a:	463d      	mov	r5, r7
     c0c:	e71a      	b.n	a44 <ull_conn_done+0xbc>
	    ticks_slot_plus || ticks_slot_minus ||
     c0e:	2d00      	cmp	r5, #0
     c10:	d04b      	beq.n	caa <ull_conn_done+0x322>
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
     c12:	2600      	movs	r6, #0
     c14:	4611      	mov	r1, r2
     c16:	4630      	mov	r0, r6
     c18:	4633      	mov	r3, r6
     c1a:	e723      	b.n	a64 <ull_conn_done+0xdc>
			conn->appto_expire = 0U;
     c1c:	2300      	movs	r3, #0
     c1e:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
			ull_cp_le_ping(conn);
     c22:	4620      	mov	r0, r4
     c24:	f00c fcf4 	bl	d610 <ull_cp_le_ping>
     c28:	e705      	b.n	a36 <ull_conn_done+0xae>
	ticks_slot_minus = 0U;
     c2a:	4630      	mov	r0, r6
     c2c:	e71a      	b.n	a64 <ull_conn_done+0xdc>
			rx = ll_pdu_rx_alloc();
     c2e:	f007 fd9b 	bl	8768 <ll_pdu_rx_alloc>
			if (rx) {
     c32:	4601      	mov	r1, r0
     c34:	2800      	cmp	r0, #0
     c36:	d03b      	beq.n	cb0 <ull_conn_done+0x328>
				conn->apto_expire = 0U;
     c38:	2300      	movs	r3, #0
     c3a:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
				rx->handle = lll->handle;
     c3e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     c40:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
     c42:	231b      	movs	r3, #27
     c44:	7103      	strb	r3, [r0, #4]
				ll_rx_put_sched(rx->link, rx);
     c46:	6800      	ldr	r0, [r0, #0]
     c48:	f007 fd58 	bl	86fc <ll_rx_put_sched>
     c4c:	e6ea      	b.n	a24 <ull_conn_done+0x9c>
			else if (lll->role) {
     c4e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
     c52:	4293      	cmp	r3, r2
     c54:	f6bf aed4 	bge.w	a00 <ull_conn_done+0x78>
				if (latency_event) {
     c58:	f1b8 0f00 	cmp.w	r8, #0
     c5c:	f47f af4f 	bne.w	afe <ull_conn_done+0x176>
					force = conn->periph.force & 0x01;
     c60:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
					conn->periph.force >>= 1U;
     c64:	085a      	lsrs	r2, r3, #1
					if (force) {
     c66:	07db      	lsls	r3, r3, #31
     c68:	d443      	bmi.n	cf2 <ull_conn_done+0x36a>
					conn->periph.force >>= 1U;
     c6a:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
     c6e:	e6c7      	b.n	a00 <ull_conn_done+0x78>
			ull_drift_ticks_get(done, &ticks_drift_plus,
     c70:	4628      	mov	r0, r5
     c72:	aa0a      	add	r2, sp, #40	; 0x28
     c74:	a90b      	add	r1, sp, #44	; 0x2c
			if (!ull_tx_q_peek(&conn->tx_q)) {
     c76:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
			ull_drift_ticks_get(done, &ticks_drift_plus,
     c7a:	f7ff fb9d 	bl	3b8 <ull_drift_ticks_get>
			if (!ull_tx_q_peek(&conn->tx_q)) {
     c7e:	4648      	mov	r0, r9
     c80:	f00c fa3e 	bl	d100 <ull_tx_q_peek>
     c84:	b318      	cbz	r0, cce <ull_conn_done+0x346>
			if (ull_tx_q_peek(&conn->tx_q) ||
     c86:	4648      	mov	r0, r9
     c88:	f00c fa3a 	bl	d100 <ull_tx_q_peek>
     c8c:	b318      	cbz	r0, cd6 <ull_conn_done+0x34e>
				lll->latency_event = 0U;
     c8e:	2300      	movs	r3, #0
     c90:	8623      	strh	r3, [r4, #48]	; 0x30
     c92:	e6aa      	b.n	9ea <ull_conn_done+0x62>
		conn_cleanup(conn, error_code);
     c94:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
     c98:	4620      	mov	r0, r4
     c9a:	f00a fe71 	bl	b980 <conn_cleanup>
		return;
     c9e:	e705      	b.n	aac <ull_conn_done+0x124>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
     ca0:	2108      	movs	r1, #8
     ca2:	4620      	mov	r0, r4
     ca4:	f00a fe6c 	bl	b980 <conn_cleanup>
			return;
     ca8:	e700      	b.n	aac <ull_conn_done+0x124>
	    lazy || force) {
     caa:	2f00      	cmp	r7, #0
     cac:	d1b1      	bne.n	c12 <ull_conn_done+0x28a>
     cae:	e6fd      	b.n	aac <ull_conn_done+0x124>
				conn->apto_expire = 1U;
     cb0:	2301      	movs	r3, #1
     cb2:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
     cb6:	e6b5      	b.n	a24 <ull_conn_done+0x9c>
			if (conn->apto_expire == 0U) {
     cb8:	f8b4 1180 	ldrh.w	r1, [r4, #384]	; 0x180
     cbc:	2900      	cmp	r1, #0
     cbe:	f47f ae7c 	bne.w	9ba <ull_conn_done+0x32>
     cc2:	e76f      	b.n	ba4 <ull_conn_done+0x21c>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
     cc4:	213e      	movs	r1, #62	; 0x3e
     cc6:	4620      	mov	r0, r4
     cc8:	f00a fe5a 	bl	b980 <conn_cleanup>
			return;
     ccc:	e6ee      	b.n	aac <ull_conn_done+0x124>
				ull_conn_tx_demux(UINT8_MAX);
     cce:	20ff      	movs	r0, #255	; 0xff
     cd0:	f00a fe16 	bl	b900 <ull_conn_tx_demux>
     cd4:	e7d7      	b.n	c86 <ull_conn_done+0x2fe>
			    memq_peek(lll->memq_tx.head,
     cd6:	4602      	mov	r2, r0
     cd8:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
     cdc:	f005 fc8e 	bl	65fc <memq_peek>
			if (ull_tx_q_peek(&conn->tx_q) ||
     ce0:	2800      	cmp	r0, #0
     ce2:	d1d4      	bne.n	c8e <ull_conn_done+0x306>
			} else if (lll->periph.latency_enabled) {
     ce4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
     ce8:	0758      	lsls	r0, r3, #29
				lll->latency_event = lll->latency;
     cea:	bf44      	itt	mi
     cec:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
     cee:	8623      	strhmi	r3, [r4, #48]	; 0x30
     cf0:	e67b      	b.n	9ea <ull_conn_done+0x62>
						conn->periph.force |= BIT(31);
     cf2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
     cf6:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
     cfa:	e700      	b.n	afe <ull_conn_done+0x176>
     cfc:	f3af 8000 	nop.w
     d00:	1afd498d 	.word	0x1afd498d
     d04:	00000007 	.word	0x00000007
     d08:	0000b1c1 	.word	0x0000b1c1
     d0c:	0001bd60 	.word	0x0001bd60
     d10:	0001be88 	.word	0x0001be88
     d14:	0001b844 	.word	0x0001b844
     d18:	3b9aca00 	.word	0x3b9aca00
     d1c:	00000000 	.word	0x00000000

00000d20 <ull_conn_update_parameters>:

void ull_conn_update_parameters(struct ll_conn *conn, uint8_t is_cu_proc, uint8_t win_size,
				uint16_t win_offset_us, uint16_t interval, uint16_t latency,
				uint16_t timeout, uint16_t instant)
{
     d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d24:	b087      	sub	sp, #28
     d26:	e9cd 2304 	strd	r2, r3, [sp, #16]
     d2a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
	return hdr->ref;
     d2e:	7803      	ldrb	r3, [r0, #0]
     d30:	9202      	str	r2, [sp, #8]
     d32:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
     d36:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
     d3a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
		event_counter = lll->event_counter - 1;
     d3e:	8e46      	ldrh	r6, [r0, #50]	; 0x32
		event_counter = lll->event_counter + lll->latency_prepare +
     d40:	f8b0 902e 	ldrh.w	r9, [r0, #46]	; 0x2e
				conn->llcp.prep.lazy;
     d44:	f8b0 b110 	ldrh.w	fp, [r0, #272]	; 0x110
{
     d48:	9101      	str	r1, [sp, #4]
     d4a:	4604      	mov	r4, r0
     d4c:	9203      	str	r2, [sp, #12]
	if (ull_ref_get(&conn->ull)) {
     d4e:	2b00      	cmp	r3, #0
     d50:	f000 808e 	beq.w	e70 <ull_conn_update_parameters+0x150>
		event_counter = lll->event_counter - 1;
     d54:	3e01      	subs	r6, #1
     d56:	b2b6      	uxth	r6, r6

	ticks_at_expire = conn->llcp.prep.ticks_at_expire;

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
	/* restore to normal prepare */
	if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
     d58:	68a3      	ldr	r3, [r4, #8]
	ticks_at_expire = conn->llcp.prep.ticks_at_expire;
     d5a:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
	instant_latency = (event_counter - instant) & 0xFFFF;
     d5e:	1b72      	subs	r2, r6, r5
     d60:	b292      	uxth	r2, r2
	if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
     d62:	2b00      	cmp	r3, #0
	instant_latency = (event_counter - instant) & 0xFFFF;
     d64:	9200      	str	r2, [sp, #0]
	if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
     d66:	da09      	bge.n	d7c <ull_conn_update_parameters+0x5c>
		uint32_t ticks_prepare_to_start =
     d68:	68e1      	ldr	r1, [r4, #12]
     d6a:	6862      	ldr	r2, [r4, #4]
			MAX(conn->ull.ticks_active_to_start, conn->ull.ticks_preempt_to_start);

		conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
     d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
     d70:	4291      	cmp	r1, r2
     d72:	bf2c      	ite	cs
     d74:	187f      	addcs	r7, r7, r1
     d76:	18bf      	addcc	r7, r7, r2
     d78:	60a3      	str	r3, [r4, #8]

		ticks_at_expire -= (conn->ull.ticks_prepare_to_start - ticks_prepare_to_start);
     d7a:	1aff      	subs	r7, r7, r3
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

	/* compensate for instant_latency due to laziness */
	conn_interval_old = instant_latency * lll->interval;
     d7c:	9a00      	ldr	r2, [sp, #0]
     d7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
     d80:	fb13 f302 	smulbb	r3, r3, r2
     d84:	b29b      	uxth	r3, r3
	latency_upd = conn_interval_old / interval;
     d86:	fbb3 f2f8 	udiv	r2, r3, r8
	conn_interval_new = latency_upd * interval;
     d8a:	fb18 f002 	smulbb	r0, r8, r2
     d8e:	b280      	uxth	r0, r0
	if (conn_interval_new > conn_interval_old) {
     d90:	4283      	cmp	r3, r0
	latency_upd = conn_interval_old / interval;
     d92:	fa1f fa82 	uxth.w	sl, r2
	if (conn_interval_new > conn_interval_old) {
     d96:	d25a      	bcs.n	e4e <ull_conn_update_parameters+0x12e>
		ticks_at_expire += HAL_TICKER_US_TO_TICKS((conn_interval_new - conn_interval_old) *
     d98:	1ac0      	subs	r0, r0, r3
     d9a:	f240 42e2 	movw	r2, #1250	; 0x4e2
     d9e:	495e      	ldr	r1, [pc, #376]	; (f18 <ull_conn_update_parameters+0x1f8>)
     da0:	fb02 f000 	mul.w	r0, r2, r0
     da4:	fba0 0101 	umull	r0, r1, r0, r1
     da8:	a359      	add	r3, pc, #356	; (adr r3, f10 <ull_conn_update_parameters+0x1f0>)
     daa:	e9d3 2300 	ldrd	r2, r3, [r3]
     dae:	f7ff f997 	bl	e0 <__aeabi_uldivmod>
     db2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     db6:	4407      	add	r7, r0
	} else {
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS((conn_interval_old - conn_interval_new) *
							  CONN_INT_UNIT_US);
	}

	lll->latency_prepare += conn->llcp.prep.lazy;
     db8:	44d9      	add	r9, fp

	/* calculate the window widening and interval */
	conn_interval_us = interval * CONN_INT_UNIT_US;
	periodic_us = conn_interval_us;

	switch (lll->role) {
     dba:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	lll->latency_prepare -= (instant_latency - latency_upd);
     dbe:	444d      	add	r5, r9
     dc0:	1bad      	subs	r5, r5, r6
     dc2:	4455      	add	r5, sl
	conn_interval_us = interval * CONN_INT_UNIT_US;
     dc4:	f240 46e2 	movw	r6, #1250	; 0x4e2
	switch (lll->role) {
     dc8:	09db      	lsrs	r3, r3, #7
	lll->latency_prepare -= (instant_latency - latency_upd);
     dca:	85e5      	strh	r5, [r4, #46]	; 0x2e
	conn_interval_us = interval * CONN_INT_UNIT_US;
     dcc:	fb06 f508 	mul.w	r5, r6, r8
	switch (lll->role) {
     dd0:	d152      	bne.n	e78 <ull_conn_update_parameters+0x158>
		 */
		ticks_win_offset += 1U;
		break;
#endif /*CONFIG_BT_CENTRAL */
	default:
		LL_ASSERT(0);
     dd2:	4a52      	ldr	r2, [pc, #328]	; (f1c <ull_conn_update_parameters+0x1fc>)
     dd4:	4952      	ldr	r1, [pc, #328]	; (f20 <ull_conn_update_parameters+0x200>)
     dd6:	4853      	ldr	r0, [pc, #332]	; (f24 <ull_conn_update_parameters+0x204>)
     dd8:	f640 0395 	movw	r3, #2197	; 0x895
     ddc:	f016 fb81 	bl	174e2 <assert_print>
     de0:	4040      	eors	r0, r0
     de2:	f380 8811 	msr	BASEPRI, r0
     de6:	f04f 0003 	mov.w	r0, #3
     dea:	df02      	svc	2
	uint32_t ticks_win_offset = 0U;
     dec:	2600      	movs	r6, #0
	periodic_us = conn_interval_us;
     dee:	46a9      	mov	r9, r5
		break;
	}

	lll->interval = interval;
	lll->latency = latency;
     df0:	9b02      	ldr	r3, [sp, #8]
     df2:	85a3      	strh	r3, [r4, #44]	; 0x2c

	conn->supervision_timeout = timeout;
     df4:	9b03      	ldr	r3, [sp, #12]
     df6:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
	ull_cp_prt_reload_set(conn, conn_interval_us);
     dfa:	4629      	mov	r1, r5
     dfc:	4620      	mov	r0, r4
	lll->interval = interval;
     dfe:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
	ull_cp_prt_reload_set(conn, conn_interval_us);
     e02:	f00c fbc5 	bl	d590 <ull_cp_prt_reload_set>

#if defined(CONFIG_BT_CTLR_LE_PING)
	/* APTO in no. of connection events */
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
     e06:	4b48      	ldr	r3, [pc, #288]	; (f28 <ull_conn_update_parameters+0x208>)
	/* Dispatch LE Ping PDU 6 connection events (that peer would
	 * listen to) before 30s timeout
	 * TODO: "peer listens to" is greater than 30s due to latency
	 */
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
     e08:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
     e0a:	442b      	add	r3, r5
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
     e0c:	1d88      	adds	r0, r1, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
     e0e:	fbb3 f3f5 	udiv	r3, r3, r5
     e12:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
     e14:	4290      	cmp	r0, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
     e16:	f8a4 217e 	strh.w	r2, [r4, #382]	; 0x17e
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
     e1a:	d202      	bcs.n	e22 <ull_conn_update_parameters+0x102>
					   (conn->apto_reload - (lll->latency + 6U)) :
     e1c:	1a52      	subs	r2, r2, r1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
     e1e:	3a06      	subs	r2, #6
     e20:	b292      	uxth	r2, r2
					   conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

	if (is_cu_proc) {
     e22:	9b01      	ldr	r3, [sp, #4]
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
     e24:	f8a4 217a 	strh.w	r2, [r4, #378]	; 0x17a
	if (is_cu_proc) {
     e28:	b113      	cbz	r3, e30 <ull_conn_update_parameters+0x110>
		conn->supervision_expire = 0U;
     e2a:	2300      	movs	r3, #0
     e2c:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
	}

	/* Update ACL ticker */
	ull_conn_update_ticker(conn, ticks_win_offset, ticks_slot_overhead, periodic_us,
     e30:	463b      	mov	r3, r7
     e32:	464a      	mov	r2, r9
     e34:	4631      	mov	r1, r6
     e36:	4620      	mov	r0, r4
     e38:	f7ff fd0e 	bl	858 <ull_conn_update_ticker.constprop.0>
			       ticks_at_expire);
	/* Signal that the prepare needs to be canceled */
	conn->cancel_prepare = 1U;
     e3c:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
     e40:	f043 0301 	orr.w	r3, r3, #1
     e44:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
}
     e48:	b007      	add	sp, #28
     e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS((conn_interval_old - conn_interval_new) *
     e4e:	fb08 3112 	mls	r1, r8, r2, r3
     e52:	4831      	ldr	r0, [pc, #196]	; (f18 <ull_conn_update_parameters+0x1f8>)
     e54:	f240 43e2 	movw	r3, #1250	; 0x4e2
     e58:	b289      	uxth	r1, r1
     e5a:	fb03 f101 	mul.w	r1, r3, r1
     e5e:	fba1 0100 	umull	r0, r1, r1, r0
     e62:	a32b      	add	r3, pc, #172	; (adr r3, f10 <ull_conn_update_parameters+0x1f0>)
     e64:	e9d3 2300 	ldrd	r2, r3, [r3]
     e68:	f7ff f93a 	bl	e0 <__aeabi_uldivmod>
     e6c:	1a3f      	subs	r7, r7, r0
     e6e:	e7a3      	b.n	db8 <ull_conn_update_parameters+0x98>
		event_counter = lll->event_counter + lll->latency_prepare +
     e70:	444e      	add	r6, r9
     e72:	445e      	add	r6, fp
     e74:	b2b6      	uxth	r6, r6
	return event_counter;
     e76:	e76f      	b.n	d58 <ull_conn_update_parameters+0x38>
			lll->periph.window_widening_periodic_us * instant_latency;
     e78:	6c22      	ldr	r2, [r4, #64]	; 0x40
		lll->periph.window_widening_prepare_us -=
     e7a:	9900      	ldr	r1, [sp, #0]
     e7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS(lll->periph.window_widening_periodic_us *
     e7e:	f8df b098 	ldr.w	fp, [pc, #152]	; f18 <ull_conn_update_parameters+0x1f8>
		lll->periph.window_widening_prepare_us -=
     e82:	fb02 3311 	mls	r3, r2, r1, r3
     e86:	64a3      	str	r3, [r4, #72]	; 0x48
			ceiling_fraction(((lll_clock_ppm_local_get() +
     e88:	f010 f8d6 	bl	11038 <lll_clock_ppm_local_get>
     e8c:	4681      	mov	r9, r0
     e8e:	f894 016c 	ldrb.w	r0, [r4, #364]	; 0x16c
     e92:	f3c0 0042 	ubfx	r0, r0, #1, #3
     e96:	f010 f8d1 	bl	1103c <lll_clock_ppm_get>
		lll->periph.window_size_prepare_us = win_size * CONN_INT_UNIT_US;
     e9a:	9b04      	ldr	r3, [sp, #16]
			ceiling_fraction(((lll_clock_ppm_local_get() +
     e9c:	4481      	add	r9, r0
		lll->periph.window_size_prepare_us = win_size * CONN_INT_UNIT_US;
     e9e:	fb06 f303 	mul.w	r3, r6, r3
			ceiling_fraction(((lll_clock_ppm_local_get() +
     ea2:	fb05 f909 	mul.w	r9, r5, r9
		lll->periph.window_size_prepare_us = win_size * CONN_INT_UNIT_US;
     ea6:	6523      	str	r3, [r4, #80]	; 0x50
			ceiling_fraction(((lll_clock_ppm_local_get() +
     ea8:	f509 2974 	add.w	r9, r9, #999424	; 0xf4000
     eac:	4b1f      	ldr	r3, [pc, #124]	; (f2c <ull_conn_update_parameters+0x20c>)
     eae:	f209 293f 	addw	r9, r9, #575	; 0x23f
     eb2:	fba3 3909 	umull	r3, r9, r3, r9
     eb6:	ea4f 4399 	mov.w	r3, r9, lsr #18
			lll->periph.window_widening_periodic_us * latency_upd;
     eba:	fb03 f00a 	mul.w	r0, r3, sl
		lll->periph.window_widening_periodic_us =
     ebe:	6423      	str	r3, [r4, #64]	; 0x40
		periodic_us -= lll->periph.window_widening_periodic_us;
     ec0:	eba5 0903 	sub.w	r9, r5, r3
		lll->periph.window_widening_prepare_us +=
     ec4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		lll->periph.window_widening_max_us = (conn_interval_us >> 1U) - EVENT_IFS_US;
     ec6:	086a      	lsrs	r2, r5, #1
		lll->periph.window_widening_prepare_us +=
     ec8:	4403      	add	r3, r0
		lll->periph.window_widening_max_us = (conn_interval_us >> 1U) - EVENT_IFS_US;
     eca:	3a96      	subs	r2, #150	; 0x96
     ecc:	4293      	cmp	r3, r2
     ece:	bf28      	it	cs
     ed0:	4613      	movcs	r3, r2
     ed2:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
		conn->periph.ticks_to_offset = 0U;
     ed6:	2300      	movs	r3, #0
     ed8:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS(lll->periph.window_widening_periodic_us *
     edc:	fba0 010b 	umull	r0, r1, r0, fp
     ee0:	a30b      	add	r3, pc, #44	; (adr r3, f10 <ull_conn_update_parameters+0x1f0>)
     ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
     ee6:	f7ff f8fb 	bl	e0 <__aeabi_uldivmod>
		ticks_win_offset = HAL_TICKER_US_TO_TICKS((win_offset_us / CONN_INT_UNIT_US) *
     eea:	4b11      	ldr	r3, [pc, #68]	; (f30 <ull_conn_update_parameters+0x210>)
     eec:	9a05      	ldr	r2, [sp, #20]
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS(lll->periph.window_widening_periodic_us *
     eee:	1a3f      	subs	r7, r7, r0
		ticks_win_offset = HAL_TICKER_US_TO_TICKS((win_offset_us / CONN_INT_UNIT_US) *
     ef0:	fba3 3002 	umull	r3, r0, r3, r2
     ef4:	0a80      	lsrs	r0, r0, #10
     ef6:	fb06 f000 	mul.w	r0, r6, r0
     efa:	a305      	add	r3, pc, #20	; (adr r3, f10 <ull_conn_update_parameters+0x1f0>)
     efc:	e9d3 2300 	ldrd	r2, r3, [r3]
     f00:	fba0 010b 	umull	r0, r1, r0, fp
     f04:	f7ff f8ec 	bl	e0 <__aeabi_uldivmod>
     f08:	4606      	mov	r6, r0
		break;
     f0a:	e771      	b.n	df0 <ull_conn_update_parameters+0xd0>
     f0c:	f3af 8000 	nop.w
     f10:	1afd498d 	.word	0x1afd498d
     f14:	00000007 	.word	0x00000007
     f18:	3b9aca00 	.word	0x3b9aca00
     f1c:	0001bd60 	.word	0x0001bd60
     f20:	0001b908 	.word	0x0001b908
     f24:	0001b844 	.word	0x0001b844
     f28:	01c9c37f 	.word	0x01c9c37f
     f2c:	431bde83 	.word	0x431bde83
     f30:	d1b71759 	.word	0xd1b71759
     f34:	00000000 	.word	0x00000000

00000f38 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
     f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t win_offset;
	memq_link_t *link;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
     f3c:	680b      	ldr	r3, [r1, #0]
     f3e:	f8d3 9000 	ldr.w	r9, [r3]
	conn = lll->hdr.parent;

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
     f42:	7f03      	ldrb	r3, [r0, #28]
{
     f44:	b093      	sub	sp, #76	; 0x4c
	conn = lll->hdr.parent;
     f46:	4690      	mov	r8, r2
	peer_addr_type = pdu_adv->tx_addr;
     f48:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
     f4c:	4615      	mov	r5, r2
     f4e:	4604      	mov	r4, r0
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
     f50:	2206      	movs	r2, #6
{
     f52:	460e      	mov	r6, r1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
     f54:	f100 011e 	add.w	r1, r0, #30
     f58:	a810      	add	r0, sp, #64	; 0x40
	peer_addr_type = pdu_adv->tx_addr;
     f5a:	930b      	str	r3, [sp, #44]	; 0x2c
	conn = lll->hdr.parent;
     f5c:	f858 7b08 	ldr.w	r7, [r8], #8
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
     f60:	f016 fd4c 	bl	179fc <memcpy>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
     f64:	a910      	add	r1, sp, #64	; 0x40
     f66:	2206      	movs	r2, #6
     f68:	a80e      	add	r0, sp, #56	; 0x38
     f6a:	f016 fd47 	bl	179fc <memcpy>
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
     f6e:	4621      	mov	r1, r4
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
     f70:	4640      	mov	r0, r8
	link = rx->link;
     f72:	f851 bb2e 	ldr.w	fp, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
     f76:	2203      	movs	r2, #3
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
     f78:	f105 0a04 	add.w	sl, r5, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
     f7c:	f016 fd3e 	bl	179fc <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
     f80:	f105 0818 	add.w	r8, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
     f84:	2204      	movs	r2, #4
     f86:	f104 012a 	add.w	r1, r4, #42	; 0x2a
     f8a:	4650      	mov	r0, sl
     f8c:	f016 fd36 	bl	179fc <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
     f90:	2205      	movs	r2, #5
     f92:	f104 013a 	add.w	r1, r4, #58	; 0x3a
     f96:	4640      	mov	r0, r8
     f98:	f016 fd30 	bl	179fc <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
     f9c:	4640      	mov	r0, r8
     f9e:	2105      	movs	r1, #5
     fa0:	f005 fc9e 	bl	68e0 <util_ones_count_get>
     fa4:	7f6b      	ldrb	r3, [r5, #29]
     fa6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
     faa:	f360 0305 	bfi	r3, r0, #0, #6
     fae:	776b      	strb	r3, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
     fb0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
     fb4:	f3c3 0204 	ubfx	r2, r3, #0, #5
     fb8:	77aa      	strb	r2, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
     fba:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
     fbc:	81ea      	strh	r2, [r5, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
     fbe:	2801      	cmp	r0, #1
     fc0:	d908      	bls.n	fd4 <ull_periph_setup+0x9c>
     fc2:	f003 031f 	and.w	r3, r3, #31
     fc6:	331b      	adds	r3, #27
     fc8:	f003 031f 	and.w	r3, r3, #31
     fcc:	2b0b      	cmp	r3, #11
     fce:	d801      	bhi.n	fd4 <ull_periph_setup+0x9c>
     fd0:	b292      	uxth	r2, r2
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
     fd2:	b9ba      	cbnz	r2, 1004 <ull_periph_setup+0xcc>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
     fd4:	2200      	movs	r2, #0
     fd6:	f8c9 2014 	str.w	r2, [r9, #20]

	/* Let the advertiser continue with connectable advertising */
	lll->periph.initiated = 0U;
     fda:	f895 3020 	ldrb.w	r3, [r5, #32]
     fde:	f362 0300 	bfi	r3, r2, #0, #1
     fe2:	f885 3020 	strb.w	r3, [r5, #32]
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
     fe6:	68e5      	ldr	r5, [r4, #12]
	rx->type = NODE_RX_TYPE_RELEASE;
     fe8:	2601      	movs	r6, #1

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
     fea:	4658      	mov	r0, fp
     fec:	4621      	mov	r1, r4
	rx->type = NODE_RX_TYPE_RELEASE;
     fee:	7126      	strb	r6, [r4, #4]
		ll_rx_put(link, rx);
     ff0:	f007 fb7a 	bl	86e8 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put_sched(link, rx);
     ff4:	6828      	ldr	r0, [r5, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
     ff6:	712e      	strb	r6, [r5, #4]
	ll_rx_put_sched(link, rx);
     ff8:	4629      	mov	r1, r5
     ffa:	f007 fb7f 	bl	86fc <ll_rx_put_sched>
}
     ffe:	b013      	add	sp, #76	; 0x4c
    1000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    1004:	6833      	ldr	r3, [r6, #0]
    1006:	2100      	movs	r1, #0
    1008:	6059      	str	r1, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    100a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    100c:	89ea      	ldrh	r2, [r5, #14]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    100e:	822b      	strh	r3, [r5, #16]
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1010:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1014:	fb03 f802 	mul.w	r8, r3, r2
	ull_cp_state_set(conn, ULL_CP_CONNECTED);
    1018:	4638      	mov	r0, r7
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    101a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    101c:	930d      	str	r3, [sp, #52]	; 0x34
	ull_cp_state_set(conn, ULL_CP_CONNECTED);
    101e:	f00c facb 	bl	d5b8 <ull_cp_state_set>
	conn->periph.sca = pdu_adv->connect_ind.sca;
    1022:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    1026:	f897 116c 	ldrb.w	r1, [r7, #364]	; 0x16c
    102a:	0952      	lsrs	r2, r2, #5
    102c:	f362 0143 	bfi	r1, r2, #1, #3
    1030:	f887 116c 	strb.w	r1, [r7, #364]	; 0x16c
		ceiling_fraction(((lll_clock_ppm_local_get() +
    1034:	f010 f800 	bl	11038 <lll_clock_ppm_local_get>
    1038:	900c      	str	r0, [sp, #48]	; 0x30
    103a:	f897 016c 	ldrb.w	r0, [r7, #364]	; 0x16c
    103e:	f3c0 0042 	ubfx	r0, r0, #1, #3
    1042:	f00f fffb 	bl	1103c <lll_clock_ppm_get>
    1046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1048:	4410      	add	r0, r2
    104a:	fb08 f000 	mul.w	r0, r8, r0
    104e:	4aa8      	ldr	r2, [pc, #672]	; (12f0 <ull_periph_setup+0x3b8>)
    1050:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    1054:	f200 203f 	addw	r0, r0, #575	; 0x23f
    1058:	fba2 2000 	umull	r2, r0, r2, r0
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    105c:	ea4f 0258 	mov.w	r2, r8, lsr #1
		ceiling_fraction(((lll_clock_ppm_local_get() +
    1060:	0c80      	lsrs	r0, r0, #18
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    1062:	3a96      	subs	r2, #150	; 0x96
	lll->periph.window_widening_periodic_us =
    1064:	6268      	str	r0, [r5, #36]	; 0x24
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    1066:	62aa      	str	r2, [r5, #40]	; 0x28
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    1068:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    106c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1070:	fb02 f303 	mul.w	r3, r2, r3
    1074:	63ab      	str	r3, [r5, #56]	; 0x38
	conn->supervision_timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1076:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    1078:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184
	ull_cp_prt_reload_set(conn, conn_interval_us);
    107c:	4641      	mov	r1, r8
    107e:	4638      	mov	r0, r7
    1080:	f00c fa86 	bl	d590 <ull_cp_prt_reload_set>
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1084:	4b9b      	ldr	r3, [pc, #620]	; (12f4 <ull_periph_setup+0x3bc>)
	conn->connect_accept_to = DEFAULT_CONNECTION_ACCEPT_TIMEOUT_US;
    1086:	4a9c      	ldr	r2, [pc, #624]	; (12f8 <ull_periph_setup+0x3c0>)
    1088:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    108c:	4443      	add	r3, r8
    108e:	fbb3 f3f8 	udiv	r3, r3, r8
    1092:	b29a      	uxth	r2, r3
    1094:	f8a7 217e 	strh.w	r2, [r7, #382]	; 0x17e
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1098:	8a29      	ldrh	r1, [r5, #16]
    109a:	1d88      	adds	r0, r1, #6
    109c:	4282      	cmp	r2, r0
    109e:	dd04      	ble.n	10aa <ull_periph_setup+0x172>
    10a0:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
    10a4:	31fa      	adds	r1, #250	; 0xfa
    10a6:	440a      	add	r2, r1
    10a8:	b292      	uxth	r2, r2
    10aa:	f8a7 217a 	strh.w	r2, [r7, #378]	; 0x17a
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    10ae:	4651      	mov	r1, sl
    10b0:	2204      	movs	r2, #4
    10b2:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    10b6:	f016 fca1 	bl	179fc <memcpy>
		chan_sel = pdu_adv->chan_sel;
    10ba:	4623      	mov	r3, r4
    10bc:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
    10c0:	f3c2 1240 	ubfx	r2, r2, #5, #1
    10c4:	920c      	str	r2, [sp, #48]	; 0x30
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    10c6:	07da      	lsls	r2, r3, #31
    10c8:	f100 80ed 	bmi.w	12a6 <ull_periph_setup+0x36e>
	cc->peer_addr_type = peer_addr_type;
    10cc:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    10d0:	77a3      	strb	r3, [r4, #30]
	cc->status = 0U;
    10d2:	f44f 7380 	mov.w	r3, #256	; 0x100
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    10d6:	a90e      	add	r1, sp, #56	; 0x38
	cc->status = 0U;
    10d8:	83a3      	strh	r3, [r4, #28]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    10da:	2206      	movs	r2, #6
    10dc:	f104 001f 	add.w	r0, r4, #31
    10e0:	f016 fc8c 	bl	179fc <memcpy>
	cc->interval = lll->interval;
    10e4:	89eb      	ldrh	r3, [r5, #14]
    10e6:	84e3      	strh	r3, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    10e8:	8a2b      	ldrh	r3, [r5, #16]
    10ea:	8523      	strh	r3, [r4, #40]	; 0x28
	cc->timeout = conn->supervision_timeout;
    10ec:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
    10f0:	8563      	strh	r3, [r4, #42]	; 0x2a
	cc->sca = conn->periph.sca;
    10f2:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
    10f6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    10fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	lll->handle = ll_conn_handle_get(conn);
    10fe:	4638      	mov	r0, r7
    1100:	f00a f8e2 	bl	b2c8 <ll_conn_handle_get>
    1104:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
    1106:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    1108:	4621      	mov	r1, r4
    110a:	4658      	mov	r0, fp
		rx_csa = (void *)ftr->extra;
    110c:	6874      	ldr	r4, [r6, #4]
		ll_rx_put(link, rx);
    110e:	f007 faeb 	bl	86e8 <ll_rx_put>
		rx->handle = lll->handle;
    1112:	89ab      	ldrh	r3, [r5, #12]
    1114:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    1116:	231c      	movs	r3, #28
    1118:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    111a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    111c:	f8d4 b000 	ldr.w	fp, [r4]
		if (chan_sel) {
    1120:	2b00      	cmp	r3, #0
    1122:	f040 80b6 	bne.w	1292 <ull_periph_setup+0x35a>
    1126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			cs->csa = 0x00;
    1128:	7723      	strb	r3, [r4, #28]
	ll_rx_put_sched(link, rx);
    112a:	4621      	mov	r1, r4
    112c:	4658      	mov	r0, fp
    112e:	f007 fae5 	bl	86fc <ll_rx_put_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1132:	f895 005b 	ldrb.w	r0, [r5, #91]	; 0x5b
	max_tx_time = lll->dle.eff.max_tx_time;
    1136:	f8b5 a050 	ldrh.w	sl, [r5, #80]	; 0x50
	max_rx_time = lll->dle.eff.max_rx_time;
    113a:	f8b5 4052 	ldrh.w	r4, [r5, #82]	; 0x52
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    113e:	2101      	movs	r1, #1
    1140:	f000 0007 	and.w	r0, r0, #7
    1144:	f00f fd8c 	bl	10c60 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1148:	4454      	add	r4, sl
    114a:	f204 240d 	addw	r4, r4, #525	; 0x20d
    114e:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 12fc <ull_periph_setup+0x3c4>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1152:	4683      	mov	fp, r0
	conn->ull.ticks_prepare_to_start =
    1154:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1156:	1820      	adds	r0, r4, r0
	conn->ull.ticks_active_to_start = 0U;
    1158:	2400      	movs	r4, #0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    115a:	fba0 010a 	umull	r0, r1, r0, sl
	conn->ull.ticks_prepare_to_start =
    115e:	60bb      	str	r3, [r7, #8]
	conn->ull.ticks_active_to_start = 0U;
    1160:	607c      	str	r4, [r7, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1162:	a361      	add	r3, pc, #388	; (adr r3, 12e8 <ull_periph_setup+0x3b0>)
    1164:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_preempt_to_start =
    1168:	60fc      	str	r4, [r7, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    116a:	f7fe ffb9 	bl	e0 <__aeabi_uldivmod>
    116e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    1172:	6138      	str	r0, [r7, #16]
	conn_offset_us = ftr->radio_end_us;
    1174:	68f3      	ldr	r3, [r6, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1176:	990d      	ldr	r1, [sp, #52]	; 0x34
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1178:	6a6d      	ldr	r5, [r5, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    117a:	f240 42e2 	movw	r2, #1250	; 0x4e2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    117e:	2001      	movs	r0, #1
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1180:	eba8 0505 	sub.w	r5, r8, r5
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1184:	fb02 3801 	mla	r8, r2, r1, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1188:	4622      	mov	r2, r4
    118a:	2102      	movs	r1, #2
    118c:	f005 fa6e 	bl	666c <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1190:	4648      	mov	r0, r9
    1192:	f009 fdaf 	bl	acf4 <ull_adv_handle_get>
	conn_offset_us -= EVENT_JITTER_US;
    1196:	f208 48b2 	addw	r8, r8, #1202	; 0x4b2
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    119a:	4602      	mov	r2, r0
	conn_offset_us -= ready_delay_us;
    119c:	eba8 080b 	sub.w	r8, r8, fp
			HAL_TICKER_US_TO_TICKS(conn_offset_us) -
    11a0:	fba8 010a 	umull	r0, r1, r8, sl
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    11a4:	4692      	mov	sl, r2
			HAL_TICKER_US_TO_TICKS(conn_offset_us) -
    11a6:	a350      	add	r3, pc, #320	; (adr r3, 12e8 <ull_periph_setup+0x3b0>)
    11a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    11ac:	f7fe ff98 	bl	e0 <__aeabi_uldivmod>
	ticker_status = ticker_stop_abs(TICKER_INSTANCE_ID_CTLR,
    11b0:	f8cd 9004 	str.w	r9, [sp, #4]
	ticks_at_stop = ftr->ticks_anchor +
    11b4:	68b3      	ldr	r3, [r6, #8]
	ticker_status = ticker_stop_abs(TICKER_INSTANCE_ID_CTLR,
    11b6:	4952      	ldr	r1, [pc, #328]	; (1300 <ull_periph_setup+0x3c8>)
    11b8:	9100      	str	r1, [sp, #0]
			HAL_TICKER_US_TO_TICKS(conn_offset_us) -
    11ba:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    11be:	f10a 0202 	add.w	r2, sl, #2
	ticks_at_stop = ftr->ticks_anchor +
    11c2:	3b3a      	subs	r3, #58	; 0x3a
	ticker_status = ticker_stop_abs(TICKER_INSTANCE_ID_CTLR,
    11c4:	b2d2      	uxtb	r2, r2
    11c6:	4620      	mov	r0, r4
    11c8:	4443      	add	r3, r8
    11ca:	2101      	movs	r1, #1
    11cc:	f006 fd14 	bl	7bf8 <ticker_stop_abs>
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    11d0:	2801      	cmp	r0, #1
    11d2:	d075      	beq.n	12c0 <ull_periph_setup+0x388>
	if (adv->lll.is_hdcd) {
    11d4:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
    11d8:	07db      	lsls	r3, r3, #31
    11da:	d452      	bmi.n	1282 <ull_periph_setup+0x34a>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    11dc:	4638      	mov	r0, r7
    11de:	f00a f873 	bl	b2c8 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    11e2:	4b46      	ldr	r3, [pc, #280]	; (12fc <ull_periph_setup+0x3c4>)
    11e4:	fba5 a903 	umull	sl, r9, r5, r3
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    11e8:	4604      	mov	r4, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    11ea:	a33f      	add	r3, pc, #252	; (adr r3, 12e8 <ull_periph_setup+0x3b0>)
    11ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    11f0:	4650      	mov	r0, sl
    11f2:	4649      	mov	r1, r9
    11f4:	f7fe ff74 	bl	e0 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    11f8:	4b42      	ldr	r3, [pc, #264]	; (1304 <ull_periph_setup+0x3cc>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    11fa:	68b6      	ldr	r6, [r6, #8]
    11fc:	4a42      	ldr	r2, [pc, #264]	; (1308 <ull_periph_setup+0x3d0>)
    11fe:	9207      	str	r2, [sp, #28]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1200:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    1204:	fba5 3103 	umull	r3, r1, r5, r3
    1208:	ebba 0003 	subs.w	r0, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    120c:	4b3f      	ldr	r3, [pc, #252]	; (130c <ull_periph_setup+0x3d4>)
    120e:	9305      	str	r3, [sp, #20]
    1210:	f240 13cd 	movw	r3, #461	; 0x1cd
    1214:	9706      	str	r7, [sp, #24]
    1216:	9308      	str	r3, [sp, #32]
    1218:	693b      	ldr	r3, [r7, #16]
    121a:	f04f 0b00 	mov.w	fp, #0
    121e:	e9cd b303 	strd	fp, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1222:	f04f 0307 	mov.w	r3, #7
    1226:	fb03 1105 	mla	r1, r3, r5, r1
    122a:	eb69 0101 	sbc.w	r1, r9, r1
    122e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1232:	2300      	movs	r3, #0
    1234:	f7fe ff54 	bl	e0 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1238:	3403      	adds	r4, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    123a:	3e3a      	subs	r6, #58	; 0x3a
    123c:	b2e4      	uxtb	r4, r4
    123e:	e9cd 5001 	strd	r5, r0, [sp, #4]
    1242:	f8cd 8000 	str.w	r8, [sp]
    1246:	4633      	mov	r3, r6
    1248:	4622      	mov	r2, r4
    124a:	2101      	movs	r1, #1
    124c:	4658      	mov	r0, fp
    124e:	f006 fc03 	bl	7a58 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1252:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    1256:	d00c      	beq.n	1272 <ull_periph_setup+0x33a>
    1258:	4a2d      	ldr	r2, [pc, #180]	; (1310 <ull_periph_setup+0x3d8>)
    125a:	492e      	ldr	r1, [pc, #184]	; (1314 <ull_periph_setup+0x3dc>)
    125c:	482e      	ldr	r0, [pc, #184]	; (1318 <ull_periph_setup+0x3e0>)
    125e:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
    1262:	f016 f93e 	bl	174e2 <assert_print>
    1266:	4040      	eors	r0, r0
    1268:	f380 8811 	msr	BASEPRI, r0
    126c:	f04f 0003 	mov.w	r0, #3
    1270:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    1272:	2201      	movs	r2, #1
    1274:	2102      	movs	r1, #2
    1276:	4610      	mov	r0, r2
    1278:	f005 f9f8 	bl	666c <mayfly_enable>
}
    127c:	b013      	add	sp, #76	; 0x4c
    127e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    1282:	2300      	movs	r3, #0
    1284:	2201      	movs	r2, #1
    1286:	9300      	str	r3, [sp, #0]
    1288:	4618      	mov	r0, r3
    128a:	4611      	mov	r1, r2
    128c:	f006 fc76 	bl	7b7c <ticker_stop>
    1290:	e7a4      	b.n	11dc <ull_periph_setup+0x2a4>
			lll->data_chan_sel = 1;
    1292:	7f6b      	ldrb	r3, [r5, #29]
    1294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1298:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    129a:	4650      	mov	r0, sl
    129c:	f00f f8ac 	bl	103f8 <lll_chan_id>
    12a0:	2301      	movs	r3, #1
    12a2:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    12a4:	e740      	b.n	1128 <ull_periph_setup+0x1f0>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    12a6:	4a1a      	ldr	r2, [pc, #104]	; (1310 <ull_periph_setup+0x3d8>)
    12a8:	491c      	ldr	r1, [pc, #112]	; (131c <ull_periph_setup+0x3e4>)
    12aa:	481b      	ldr	r0, [pc, #108]	; (1318 <ull_periph_setup+0x3e0>)
    12ac:	23f7      	movs	r3, #247	; 0xf7
    12ae:	f016 f918 	bl	174e2 <assert_print>
    12b2:	4040      	eors	r0, r0
    12b4:	f380 8811 	msr	BASEPRI, r0
    12b8:	f04f 0003 	mov.w	r0, #3
    12bc:	df02      	svc	2
    12be:	e705      	b.n	10cc <ull_periph_setup+0x194>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    12c0:	f007 fada 	bl	8878 <ull_disable_mark_get>
    12c4:	4581      	cmp	r9, r0
    12c6:	d085      	beq.n	11d4 <ull_periph_setup+0x29c>
    12c8:	4a11      	ldr	r2, [pc, #68]	; (1310 <ull_periph_setup+0x3d8>)
    12ca:	4915      	ldr	r1, [pc, #84]	; (1320 <ull_periph_setup+0x3e8>)
    12cc:	4812      	ldr	r0, [pc, #72]	; (1318 <ull_periph_setup+0x3e0>)
    12ce:	f240 2375 	movw	r3, #629	; 0x275
    12d2:	f016 f906 	bl	174e2 <assert_print>
    12d6:	4040      	eors	r0, r0
    12d8:	f380 8811 	msr	BASEPRI, r0
    12dc:	f04f 0003 	mov.w	r0, #3
    12e0:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    12e2:	e777      	b.n	11d4 <ull_periph_setup+0x29c>
    12e4:	f3af 8000 	nop.w
    12e8:	1afd498d 	.word	0x1afd498d
    12ec:	00000007 	.word	0x00000007
    12f0:	431bde83 	.word	0x431bde83
    12f4:	01c9c37f 	.word	0x01c9c37f
    12f8:	004c4b40 	.word	0x004c4b40
    12fc:	3b9aca00 	.word	0x3b9aca00
    1300:	000101b9 	.word	0x000101b9
    1304:	1afd498d 	.word	0x1afd498d
    1308:	00010189 	.word	0x00010189
    130c:	000101f5 	.word	0x000101f5
    1310:	0001c270 	.word	0x0001c270
    1314:	0001be24 	.word	0x0001be24
    1318:	0001b844 	.word	0x0001b844
    131c:	0001bb50 	.word	0x0001bb50
    1320:	0001c2cc 	.word	0x0001c2cc
    1324:	00000000 	.word	0x00000000

00001328 <lll_preempt_calc>:
	}
}

uint32_t lll_preempt_calc(struct ull_hdr *ull, uint8_t ticker_id,
		       uint32_t ticks_at_event)
{
    1328:	b510      	push	{r4, lr}
    132a:	4614      	mov	r4, r2
	uint32_t ticks_now;
	uint32_t diff;

	ticks_now = ticker_ticks_now_get();
    132c:	f006 fca4 	bl	7c78 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
    1330:	4621      	mov	r1, r4
    1332:	f006 fca3 	bl	7c7c <ticker_ticks_diff_get>
    1336:	4603      	mov	r3, r0
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
    1338:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
    133c:	d103      	bne.n	1346 <lll_preempt_calc+0x1e>
		return 0;
	}

	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
    133e:	1cdc      	adds	r4, r3, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
    1340:	2c09      	cmp	r4, #9
    1342:	d802      	bhi.n	134a <lll_preempt_calc+0x22>

		return 1U;
	}

	return 0U;
}
    1344:	bd10      	pop	{r4, pc}
		return 0;
    1346:	2000      	movs	r0, #0
}
    1348:	bd10      	pop	{r4, pc}
		LL_ASSERT_MSG(false, "%s: Actual EVENT_OVERHEAD_START_US = %u",
    134a:	4a11      	ldr	r2, [pc, #68]	; (1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>)
    134c:	4911      	ldr	r1, [pc, #68]	; (1394 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xc>)
    134e:	4812      	ldr	r0, [pc, #72]	; (1398 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x10>)
    1350:	f240 13d9 	movw	r3, #473	; 0x1d9
    1354:	f016 f8c5 	bl	174e2 <assert_print>
    1358:	4810      	ldr	r0, [pc, #64]	; (139c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x14>)
    135a:	2107      	movs	r1, #7
    135c:	fba4 0300 	umull	r0, r3, r4, r0
    1360:	fb01 3104 	mla	r1, r1, r4, r3
    1364:	a308      	add	r3, pc, #32	; (adr r3, 1388 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT>)
    1366:	e9d3 2300 	ldrd	r2, r3, [r3]
    136a:	f7fe feb9 	bl	e0 <__aeabi_uldivmod>
    136e:	490c      	ldr	r1, [pc, #48]	; (13a0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x18>)
    1370:	4602      	mov	r2, r0
    1372:	480c      	ldr	r0, [pc, #48]	; (13a4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1c>)
    1374:	f016 f8b5 	bl	174e2 <assert_print>
    1378:	4040      	eors	r0, r0
    137a:	f380 8811 	msr	BASEPRI, r0
    137e:	f04f 0003 	mov.w	r0, #3
    1382:	df02      	svc	2
		return 1U;
    1384:	2001      	movs	r0, #1
}
    1386:	bd10      	pop	{r4, pc}
    1388:	3b9aca00 	.word	0x3b9aca00
    138c:	00000000 	.word	0x00000000
    1390:	0001c30c 	.word	0x0001c30c
    1394:	0001b908 	.word	0x0001b908
    1398:	0001b844 	.word	0x0001b844
    139c:	1afd498d 	.word	0x1afd498d
    13a0:	0001c490 	.word	0x0001c490
    13a4:	0001c430 	.word	0x0001c430

000013a8 <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
    13a8:	4801      	ldr	r0, [pc, #4]	; (13b0 <disconnected+0x8>)
    13aa:	f015 bd54 	b.w	16e56 <printk>
    13ae:	bf00      	nop
    13b0:	0001c978 	.word	0x0001c978

000013b4 <connected>:
	if (err) {
    13b4:	b111      	cbz	r1, 13bc <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    13b6:	4803      	ldr	r0, [pc, #12]	; (13c4 <connected+0x10>)
    13b8:	f015 bd4d 	b.w	16e56 <printk>
		printk("Connected\n");
    13bc:	4802      	ldr	r0, [pc, #8]	; (13c8 <connected+0x14>)
    13be:	f015 bd4a 	b.w	16e56 <printk>
    13c2:	bf00      	nop
    13c4:	0001c996 	.word	0x0001c996
    13c8:	0001c9b6 	.word	0x0001c9b6

000013cc <led_thread>:
	return false;
}


// blinks led every second, signifies mobile node is running
static void led_thread(void *, void *, void *) {
    13cc:	b510      	push	{r4, lr}

	if (initGpio(&led_red) || initGpio(&led_green) || initGpio(&led_blue))
    13ce:	480c      	ldr	r0, [pc, #48]	; (1400 <led_thread+0x34>)
    13d0:	f015 fd0b 	bl	16dea <initGpio>
    13d4:	b998      	cbnz	r0, 13fe <led_thread+0x32>
    13d6:	480b      	ldr	r0, [pc, #44]	; (1404 <led_thread+0x38>)
    13d8:	f015 fd07 	bl	16dea <initGpio>
    13dc:	b978      	cbnz	r0, 13fe <led_thread+0x32>
    13de:	480a      	ldr	r0, [pc, #40]	; (1408 <led_thread+0x3c>)
    13e0:	f015 fd03 	bl	16dea <initGpio>
    13e4:	b958      	cbnz	r0, 13fe <led_thread+0x32>
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
    13e6:	4b09      	ldr	r3, [pc, #36]	; (140c <led_thread+0x40>)
    13e8:	689c      	ldr	r4, [r3, #8]
    13ea:	2180      	movs	r1, #128	; 0x80
    13ec:	6963      	ldr	r3, [r4, #20]
    13ee:	4807      	ldr	r0, [pc, #28]	; (140c <led_thread+0x40>)
    13f0:	4798      	blx	r3
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    13f2:	2100      	movs	r1, #0
    13f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    13f8:	f015 fa60 	bl	168bc <z_impl_k_sleep>
	{
		return;
	}

	while (1)
    13fc:	e7f5      	b.n	13ea <led_thread+0x1e>
	{
		gpio_pin_toggle_dt(&led_red);
		k_sleep(K_MSEC(1000));
	}
}
    13fe:	bd10      	pop	{r4, pc}
    1400:	0001b3d8 	.word	0x0001b3d8
    1404:	0001b3d0 	.word	0x0001b3d0
    1408:	0001b3c8 	.word	0x0001b3c8
    140c:	0001b03c 	.word	0x0001b03c

00001410 <main>:




void main(void)
{
    1410:	b570      	push	{r4, r5, r6, lr}

	int err;

	err = bt_enable(NULL);
    1412:	2000      	movs	r0, #0
{
    1414:	b088      	sub	sp, #32
	err = bt_enable(NULL);
    1416:	f002 fa31 	bl	387c <bt_enable>
	if (err) {
    141a:	4606      	mov	r6, r0
    141c:	b130      	cbz	r0, 142c <main+0x1c>
		printk("Bluetooth init failed (err %d)\n", err);
    141e:	4601      	mov	r1, r0
    1420:	4814      	ldr	r0, [pc, #80]	; (1474 <main+0x64>)
	while (1) {
		k_sleep(K_SECONDS(1));
		/* Air Quality Service updates only when new value is read */
		aqs_notify();
	}
}
    1422:	b008      	add	sp, #32
    1424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    1428:	f015 bd15 	b.w	16e56 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    142c:	4d12      	ldr	r5, [pc, #72]	; (1478 <main+0x68>)
	printk("Bluetooth initialized\n");
    142e:	4813      	ldr	r0, [pc, #76]	; (147c <main+0x6c>)
    1430:	f015 fd11 	bl	16e56 <printk>
	aqs_init();
    1434:	f000 f850 	bl	14d8 <aqs_init>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    1438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    143a:	ac03      	add	r4, sp, #12
    143c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    143e:	682b      	ldr	r3, [r5, #0]
    1440:	6023      	str	r3, [r4, #0]
    1442:	490f      	ldr	r1, [pc, #60]	; (1480 <main+0x70>)
    1444:	9600      	str	r6, [sp, #0]
    1446:	4633      	mov	r3, r6
    1448:	2202      	movs	r2, #2
    144a:	a803      	add	r0, sp, #12
    144c:	f002 fdfc 	bl	4048 <bt_le_adv_start>
	if (err) {
    1450:	4601      	mov	r1, r0
    1452:	b150      	cbz	r0, 146a <main+0x5a>
		printk("Advertising failed to start (err %d)\n", err);
    1454:	480b      	ldr	r0, [pc, #44]	; (1484 <main+0x74>)
    1456:	f015 fcfe 	bl	16e56 <printk>
    145a:	2100      	movs	r1, #0
    145c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1460:	f015 fa2c 	bl	168bc <z_impl_k_sleep>
		aqs_notify();
    1464:	f000 f856 	bl	1514 <aqs_notify>
	while (1) {
    1468:	e7f7      	b.n	145a <main+0x4a>
	printk("Advertising successfully started\n");
    146a:	4807      	ldr	r0, [pc, #28]	; (1488 <main+0x78>)
    146c:	f015 fcf3 	bl	16e56 <printk>
    1470:	e7f3      	b.n	145a <main+0x4a>
    1472:	bf00      	nop
    1474:	0001c9c1 	.word	0x0001c9c1
    1478:	0001b360 	.word	0x0001b360
    147c:	0001c9e1 	.word	0x0001c9e1
    1480:	0001b3e0 	.word	0x0001b3e0
    1484:	0001c9f8 	.word	0x0001c9f8
    1488:	0001ca1e 	.word	0x0001ca1e

0000148c <write_aq>:
}

static ssize_t write_aq(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset,
			uint8_t flags)
{
    148c:	b538      	push	{r3, r4, r5, lr}
    148e:	460c      	mov	r4, r1
    1490:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
    1494:	68e5      	ldr	r5, [r4, #12]

	if (offset + len > sizeof(aq)) {
    1496:	461c      	mov	r4, r3
    1498:	18c3      	adds	r3, r0, r3
    149a:	2b0a      	cmp	r3, #10
{
    149c:	4611      	mov	r1, r2
	if (offset + len > sizeof(aq)) {
    149e:	dc08      	bgt.n	14b2 <write_aq+0x26>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
    14a0:	4622      	mov	r2, r4
    14a2:	4428      	add	r0, r5
    14a4:	f016 faaa 	bl	179fc <memcpy>
	aq_update = 1U;
    14a8:	4b03      	ldr	r3, [pc, #12]	; (14b8 <write_aq+0x2c>)
    14aa:	2201      	movs	r2, #1
    14ac:	701a      	strb	r2, [r3, #0]

	return len;
}
    14ae:	4620      	mov	r0, r4
    14b0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    14b2:	f06f 0406 	mvn.w	r4, #6
    14b6:	e7fa      	b.n	14ae <write_aq+0x22>
    14b8:	20002624 	.word	0x20002624

000014bc <read_aq>:
{
    14bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, str ,
    14be:	2405      	movs	r4, #5
    14c0:	9402      	str	r4, [sp, #8]
    14c2:	4c04      	ldr	r4, [pc, #16]	; (14d4 <read_aq+0x18>)
    14c4:	9401      	str	r4, [sp, #4]
    14c6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    14ca:	9400      	str	r4, [sp, #0]
    14cc:	f018 f803 	bl	194d6 <bt_gatt_attr_read>
}
    14d0:	b004      	add	sp, #16
    14d2:	bd10      	pop	{r4, pc}
    14d4:	0001ca54 	.word	0x0001ca54

000014d8 <aqs_init>:
	/* Adjust reason */
	buf[9] = 0U; /* No update, change, etc */
}

void aqs_init(void)
{
    14d8:	b513      	push	{r0, r1, r4, lr}
	memcpy(buf,  &year, 2); /* year */
    14da:	4c0d      	ldr	r4, [pc, #52]	; (1510 <aqs_init+0x38>)
	year = sys_cpu_to_le16(2015);
    14dc:	f240 73df 	movw	r3, #2015	; 0x7df
	memcpy(buf,  &year, 2); /* year */
    14e0:	2202      	movs	r2, #2
    14e2:	f10d 0106 	add.w	r1, sp, #6
    14e6:	4620      	mov	r0, r4
	year = sys_cpu_to_le16(2015);
    14e8:	f8ad 3006 	strh.w	r3, [sp, #6]
	memcpy(buf,  &year, 2); /* year */
    14ec:	f016 fa86 	bl	179fc <memcpy>
	buf[2] = 5U; /* months starting from 1 */
    14f0:	2305      	movs	r3, #5
    14f2:	70a3      	strb	r3, [r4, #2]
	buf[3] = 30U; /* day */
    14f4:	231e      	movs	r3, #30
    14f6:	70e3      	strb	r3, [r4, #3]
	buf[4] = 12U; /* hours */
    14f8:	220c      	movs	r2, #12
	buf[6] = 30U; /* seconds */
    14fa:	71a3      	strb	r3, [r4, #6]
	buf[7] = 1U; /* day of week starting from 1 */
    14fc:	2301      	movs	r3, #1
	buf[4] = 12U; /* hours */
    14fe:	7122      	strb	r2, [r4, #4]
	buf[7] = 1U; /* day of week starting from 1 */
    1500:	71e3      	strb	r3, [r4, #7]
	buf[5] = 45U; /* minutes */
    1502:	222d      	movs	r2, #45	; 0x2d
	buf[8] = 0U;
    1504:	2300      	movs	r3, #0
	buf[5] = 45U; /* minutes */
    1506:	7162      	strb	r2, [r4, #5]
	buf[8] = 0U;
    1508:	7223      	strb	r3, [r4, #8]
	buf[9] = 0U; /* No update, change, etc */
    150a:	7263      	strb	r3, [r4, #9]
	/* Simulate current time for Current Time Service */
	generate_current_time(aq);
}
    150c:	b002      	add	sp, #8
    150e:	bd10      	pop	{r4, pc}
    1510:	20002625 	.word	0x20002625

00001514 <aqs_notify>:

void aqs_notify(void)
{	/* Current Time Service updates only when time is changed */
    1514:	b510      	push	{r4, lr}
	if (!aq_update) {
    1516:	4b0c      	ldr	r3, [pc, #48]	; (1548 <aqs_notify+0x34>)
    1518:	781a      	ldrb	r2, [r3, #0]
{	/* Current Time Service updates only when time is changed */
    151a:	b086      	sub	sp, #24
	if (!aq_update) {
    151c:	b18a      	cbz	r2, 1542 <aqs_notify+0x2e>
		return;
	}

	aq_update = 0U;
    151e:	2400      	movs	r4, #0
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    1520:	4621      	mov	r1, r4
    1522:	2218      	movs	r2, #24
    1524:	4668      	mov	r0, sp
    1526:	701c      	strb	r4, [r3, #0]
    1528:	f016 fa73 	bl	17a12 <memset>

	params.attr = attr;
    152c:	4b07      	ldr	r3, [pc, #28]	; (154c <aqs_notify+0x38>)
    152e:	9301      	str	r3, [sp, #4]
	params.data = data;
    1530:	4b07      	ldr	r3, [pc, #28]	; (1550 <aqs_notify+0x3c>)
    1532:	9302      	str	r3, [sp, #8]
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
    1534:	4669      	mov	r1, sp
	params.len = len;
    1536:	230a      	movs	r3, #10
	return bt_gatt_notify_cb(conn, &params);
    1538:	4620      	mov	r0, r4
	params.len = len;
    153a:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    153e:	f004 fe77 	bl	6230 <bt_gatt_notify_cb>
	bt_gatt_notify(NULL, &aqs_cvs.attrs[1], &aq, sizeof(aq));
}
    1542:	b006      	add	sp, #24
    1544:	bd10      	pop	{r4, pc}
    1546:	bf00      	nop
    1548:	20002624 	.word	0x20002624
    154c:	0001b404 	.word	0x0001b404
    1550:	20002625 	.word	0x20002625

00001554 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    1554:	4b01      	ldr	r3, [pc, #4]	; (155c <char_out+0x8>)
    1556:	681b      	ldr	r3, [r3, #0]
    1558:	4718      	bx	r3
    155a:	bf00      	nop
    155c:	20000180 	.word	0x20000180

00001560 <__printk_hook_install>:
	_char_out = fn;
    1560:	4b01      	ldr	r3, [pc, #4]	; (1568 <__printk_hook_install+0x8>)
    1562:	6018      	str	r0, [r3, #0]
}
    1564:	4770      	bx	lr
    1566:	bf00      	nop
    1568:	20000180 	.word	0x20000180

0000156c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    156c:	b507      	push	{r0, r1, r2, lr}
    156e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1570:	2100      	movs	r1, #0
    1572:	4602      	mov	r2, r0
    1574:	9100      	str	r1, [sp, #0]
    1576:	4803      	ldr	r0, [pc, #12]	; (1584 <vprintk+0x18>)
    1578:	f000 f914 	bl	17a4 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    157c:	b003      	add	sp, #12
    157e:	f85d fb04 	ldr.w	pc, [sp], #4
    1582:	bf00      	nop
    1584:	00001555 	.word	0x00001555

00001588 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    158c:	8b05      	ldrh	r5, [r0, #24]
{
    158e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1590:	0728      	lsls	r0, r5, #28
{
    1592:	4690      	mov	r8, r2
	if (processing) {
    1594:	d411      	bmi.n	15ba <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1596:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1598:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    159c:	f040 80cd 	bne.w	173a <process_event+0x1b2>
			evt = process_recheck(mgr);
    15a0:	4620      	mov	r0, r4
    15a2:	f015 fe34 	bl	1720e <process_recheck>
		}

		if (evt == EVT_NOP) {
    15a6:	b178      	cbz	r0, 15c8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    15a8:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15aa:	8b21      	ldrh	r1, [r4, #24]
    15ac:	2804      	cmp	r0, #4
    15ae:	d811      	bhi.n	15d4 <process_event+0x4c>
    15b0:	e8df f000 	tbb	[pc, r0]
    15b4:	856d10c3 	.word	0x856d10c3
    15b8:	95          	.byte	0x95
    15b9:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    15ba:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    15bc:	bf0c      	ite	eq
    15be:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    15c2:	f045 0520 	orrne.w	r5, r5, #32
    15c6:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    15c8:	f388 8811 	msr	BASEPRI, r8
    15cc:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    15d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    15d4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    15d8:	45aa      	cmp	sl, r5
    15da:	f000 80a6 	beq.w	172a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    15de:	2700      	movs	r7, #0
    15e0:	46b9      	mov	r9, r7
    15e2:	463e      	mov	r6, r7
    15e4:	68a3      	ldr	r3, [r4, #8]
    15e6:	2b00      	cmp	r3, #0
    15e8:	f000 80bd 	beq.w	1766 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    15ec:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    15f0:	8321      	strh	r1, [r4, #24]
    15f2:	f388 8811 	msr	BASEPRI, r8
    15f6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    15fa:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    15fc:	2900      	cmp	r1, #0
    15fe:	f000 80bb 	beq.w	1778 <process_event+0x1f0>
	return node->next;
    1602:	680d      	ldr	r5, [r1, #0]
    1604:	2900      	cmp	r1, #0
    1606:	f000 80b7 	beq.w	1778 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    160a:	f8d1 8004 	ldr.w	r8, [r1, #4]
    160e:	4633      	mov	r3, r6
    1610:	4652      	mov	r2, sl
    1612:	4620      	mov	r0, r4
    1614:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1616:	2d00      	cmp	r5, #0
    1618:	d076      	beq.n	1708 <process_event+0x180>
    161a:	682b      	ldr	r3, [r5, #0]
    161c:	4629      	mov	r1, r5
    161e:	461d      	mov	r5, r3
    1620:	e7f0      	b.n	1604 <process_event+0x7c>
    1622:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1626:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1628:	2a01      	cmp	r2, #1
    162a:	d81b      	bhi.n	1664 <process_event+0xdc>
	list->head = NULL;
    162c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    162e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1632:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1634:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1636:	b289      	uxth	r1, r1
	list->tail = NULL;
    1638:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    163c:	d109      	bne.n	1652 <process_event+0xca>
    163e:	463b      	mov	r3, r7
    1640:	e003      	b.n	164a <process_event+0xc2>
				mgr->refs += 1U;
    1642:	8b62      	ldrh	r2, [r4, #26]
    1644:	3201      	adds	r2, #1
    1646:	8362      	strh	r2, [r4, #26]
	return node->next;
    1648:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    164a:	2b00      	cmp	r3, #0
    164c:	d1f9      	bne.n	1642 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    164e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1652:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1654:	4620      	mov	r0, r4
    1656:	f015 fdda 	bl	1720e <process_recheck>
    165a:	2800      	cmp	r0, #0
    165c:	d07b      	beq.n	1756 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    165e:	f041 0120 	orr.w	r1, r1, #32
    1662:	e077      	b.n	1754 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1664:	2b04      	cmp	r3, #4
    1666:	d10a      	bne.n	167e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1668:	f021 0107 	bic.w	r1, r1, #7
    166c:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    166e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1670:	4620      	mov	r0, r4
    1672:	f015 fdcc 	bl	1720e <process_recheck>
    1676:	b110      	cbz	r0, 167e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1678:	f041 0120 	orr.w	r1, r1, #32
    167c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    167e:	8b21      	ldrh	r1, [r4, #24]
    1680:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1684:	45aa      	cmp	sl, r5
    1686:	d050      	beq.n	172a <process_event+0x1a2>
    1688:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    168a:	46b9      	mov	r9, r7
    168c:	e7aa      	b.n	15e4 <process_event+0x5c>
			transit = mgr->transitions->start;
    168e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1690:	f021 0107 	bic.w	r1, r1, #7
    1694:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1698:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    169a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    169e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    16a0:	d12d      	bne.n	16fe <process_event+0x176>
		    || (transit != NULL)) {
    16a2:	f1b9 0f00 	cmp.w	r9, #0
    16a6:	d040      	beq.n	172a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    16a8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    16ac:	8321      	strh	r1, [r4, #24]
    16ae:	f388 8811 	msr	BASEPRI, r8
    16b2:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    16b6:	493a      	ldr	r1, [pc, #232]	; (17a0 <process_event+0x218>)
    16b8:	4620      	mov	r0, r4
    16ba:	47c8      	blx	r9
    16bc:	e029      	b.n	1712 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16be:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    16c2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16c4:	f041 0104 	orr.w	r1, r1, #4
    16c8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    16ca:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    16cc:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    16d0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    16d2:	d0e6      	beq.n	16a2 <process_event+0x11a>
    16d4:	2700      	movs	r7, #0
		res = 0;
    16d6:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16d8:	f04f 0a04 	mov.w	sl, #4
    16dc:	e782      	b.n	15e4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16de:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    16e2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16e4:	f041 0105 	orr.w	r1, r1, #5
    16e8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    16ea:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    16ec:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    16f0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    16f2:	d0d6      	beq.n	16a2 <process_event+0x11a>
    16f4:	2700      	movs	r7, #0
		res = 0;
    16f6:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16f8:	f04f 0a05 	mov.w	sl, #5
    16fc:	e772      	b.n	15e4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    16fe:	2700      	movs	r7, #0
		res = 0;
    1700:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1702:	f04f 0a06 	mov.w	sl, #6
    1706:	e76d      	b.n	15e4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1708:	462b      	mov	r3, r5
    170a:	e787      	b.n	161c <process_event+0x94>
			if (transit != NULL) {
    170c:	f1b9 0f00 	cmp.w	r9, #0
    1710:	d1d1      	bne.n	16b6 <process_event+0x12e>
	__asm__ volatile(
    1712:	f04f 0320 	mov.w	r3, #32
    1716:	f3ef 8811 	mrs	r8, BASEPRI
    171a:	f383 8812 	msr	BASEPRI_MAX, r3
    171e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1722:	8b23      	ldrh	r3, [r4, #24]
    1724:	f023 0308 	bic.w	r3, r3, #8
    1728:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    172a:	8b25      	ldrh	r5, [r4, #24]
    172c:	06ea      	lsls	r2, r5, #27
    172e:	d52e      	bpl.n	178e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1730:	f025 0310 	bic.w	r3, r5, #16
    1734:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1736:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    173a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    173c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    173e:	2e00      	cmp	r6, #0
    1740:	f6bf af6f 	bge.w	1622 <process_event+0x9a>
	list->head = NULL;
    1744:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1746:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1748:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    174c:	f021 0107 	bic.w	r1, r1, #7
    1750:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1754:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1756:	8b21      	ldrh	r1, [r4, #24]
    1758:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    175c:	45aa      	cmp	sl, r5
    175e:	f04f 0900 	mov.w	r9, #0
    1762:	f47f af3f 	bne.w	15e4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1766:	2f00      	cmp	r7, #0
    1768:	d09b      	beq.n	16a2 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    176a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    176e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1770:	f388 8811 	msr	BASEPRI, r8
    1774:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1778:	2f00      	cmp	r7, #0
    177a:	d0c7      	beq.n	170c <process_event+0x184>
	return node->next;
    177c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    177e:	4639      	mov	r1, r7
    1780:	4633      	mov	r3, r6
    1782:	4652      	mov	r2, sl
    1784:	4620      	mov	r0, r4
    1786:	f015 fd6e 	bl	17266 <notify_one>
	list->head = node;
    178a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    178c:	e7f4      	b.n	1778 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    178e:	06ab      	lsls	r3, r5, #26
    1790:	f57f af1a 	bpl.w	15c8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1794:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1798:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    179a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    179e:	e6ff      	b.n	15a0 <process_event+0x18>
    17a0:	00017293 	.word	0x00017293

000017a4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    17a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17a8:	4681      	mov	r9, r0
    17aa:	b095      	sub	sp, #84	; 0x54
    17ac:	468b      	mov	fp, r1
    17ae:	4617      	mov	r7, r2
    17b0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    17b2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    17b4:	7838      	ldrb	r0, [r7, #0]
    17b6:	b908      	cbnz	r0, 17bc <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    17b8:	4628      	mov	r0, r5
    17ba:	e358      	b.n	1e6e <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
    17bc:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    17be:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    17c0:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    17c2:	d006      	beq.n	17d2 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    17c4:	4659      	mov	r1, fp
    17c6:	47c8      	blx	r9
    17c8:	2800      	cmp	r0, #0
    17ca:	f2c0 8350 	blt.w	1e6e <z_cbvprintf_impl+0x6ca>
    17ce:	3501      	adds	r5, #1
		if (bps == NULL) {
    17d0:	e1fb      	b.n	1bca <z_cbvprintf_impl+0x426>
		} state = {
    17d2:	2218      	movs	r2, #24
    17d4:	2100      	movs	r1, #0
    17d6:	a80e      	add	r0, sp, #56	; 0x38
    17d8:	f016 f91b 	bl	17a12 <memset>
	if (*sp == '%') {
    17dc:	787b      	ldrb	r3, [r7, #1]
    17de:	2b25      	cmp	r3, #37	; 0x25
    17e0:	d07d      	beq.n	18de <z_cbvprintf_impl+0x13a>
    17e2:	2300      	movs	r3, #0
    17e4:	1c78      	adds	r0, r7, #1
    17e6:	4698      	mov	r8, r3
    17e8:	469e      	mov	lr, r3
    17ea:	469c      	mov	ip, r3
    17ec:	461e      	mov	r6, r3
    17ee:	4601      	mov	r1, r0
		switch (*sp) {
    17f0:	f810 2b01 	ldrb.w	r2, [r0], #1
    17f4:	2a2b      	cmp	r2, #43	; 0x2b
    17f6:	f000 80a1 	beq.w	193c <z_cbvprintf_impl+0x198>
    17fa:	f200 8098 	bhi.w	192e <z_cbvprintf_impl+0x18a>
    17fe:	2a20      	cmp	r2, #32
    1800:	f000 809f 	beq.w	1942 <z_cbvprintf_impl+0x19e>
    1804:	2a23      	cmp	r2, #35	; 0x23
    1806:	f000 809f 	beq.w	1948 <z_cbvprintf_impl+0x1a4>
    180a:	b12b      	cbz	r3, 1818 <z_cbvprintf_impl+0x74>
    180c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1814:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1818:	f1b8 0f00 	cmp.w	r8, #0
    181c:	d005      	beq.n	182a <z_cbvprintf_impl+0x86>
    181e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1822:	f043 0320 	orr.w	r3, r3, #32
    1826:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    182a:	f1be 0f00 	cmp.w	lr, #0
    182e:	d005      	beq.n	183c <z_cbvprintf_impl+0x98>
    1830:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1834:	f043 0310 	orr.w	r3, r3, #16
    1838:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    183c:	f1bc 0f00 	cmp.w	ip, #0
    1840:	d005      	beq.n	184e <z_cbvprintf_impl+0xaa>
    1842:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1846:	f043 0308 	orr.w	r3, r3, #8
    184a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    184e:	b12e      	cbz	r6, 185c <z_cbvprintf_impl+0xb8>
    1850:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1854:	f043 0304 	orr.w	r3, r3, #4
    1858:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    185c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1860:	f003 0044 	and.w	r0, r3, #68	; 0x44
    1864:	2844      	cmp	r0, #68	; 0x44
    1866:	d103      	bne.n	1870 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    1868:	f36f 1386 	bfc	r3, #6, #1
    186c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    1870:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1874:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    1876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    187a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    187e:	d17f      	bne.n	1980 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    1880:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1884:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    1888:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    188a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    188e:	781a      	ldrb	r2, [r3, #0]
    1890:	2a2e      	cmp	r2, #46	; 0x2e
    1892:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1896:	bf0c      	ite	eq
    1898:	2101      	moveq	r1, #1
    189a:	2100      	movne	r1, #0
    189c:	f361 0241 	bfi	r2, r1, #1, #1
    18a0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    18a4:	d178      	bne.n	1998 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    18a6:	785a      	ldrb	r2, [r3, #1]
    18a8:	2a2a      	cmp	r2, #42	; 0x2a
    18aa:	d06e      	beq.n	198a <z_cbvprintf_impl+0x1e6>
	++sp;
    18ac:	3301      	adds	r3, #1
	size_t val = 0;
    18ae:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    18b0:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    18b4:	4619      	mov	r1, r3
    18b6:	f811 0b01 	ldrb.w	r0, [r1], #1
    18ba:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    18be:	2e09      	cmp	r6, #9
    18c0:	f240 8095 	bls.w	19ee <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    18c4:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    18c8:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    18ca:	f3c1 0040 	ubfx	r0, r1, #1, #1
    18ce:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    18d2:	460a      	mov	r2, r1
    18d4:	f360 0241 	bfi	r2, r0, #1, #1
    18d8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    18dc:	e05c      	b.n	1998 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    18de:	1cba      	adds	r2, r7, #2
    18e0:	9203      	str	r2, [sp, #12]
    18e2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    18e6:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    18ea:	07da      	lsls	r2, r3, #31
    18ec:	f140 812e 	bpl.w	1b4c <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    18f0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    18f4:	f1b8 0f00 	cmp.w	r8, #0
    18f8:	da07      	bge.n	190a <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    18fa:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    18fe:	f042 0204 	orr.w	r2, r2, #4
    1902:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    1906:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    190a:	075e      	lsls	r6, r3, #29
    190c:	f140 8127 	bpl.w	1b5e <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    1910:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    1914:	f1ba 0f00 	cmp.w	sl, #0
    1918:	f280 8126 	bge.w	1b68 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    191c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1920:	f36f 0341 	bfc	r3, #1, #1
    1924:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    1928:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    192c:	e11c      	b.n	1b68 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    192e:	2a2d      	cmp	r2, #45	; 0x2d
    1930:	d00d      	beq.n	194e <z_cbvprintf_impl+0x1aa>
    1932:	2a30      	cmp	r2, #48	; 0x30
    1934:	f47f af69 	bne.w	180a <z_cbvprintf_impl+0x66>
    1938:	2301      	movs	r3, #1
	} while (loop);
    193a:	e758      	b.n	17ee <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    193c:	f04f 0c01 	mov.w	ip, #1
    1940:	e755      	b.n	17ee <z_cbvprintf_impl+0x4a>
    1942:	f04f 0e01 	mov.w	lr, #1
    1946:	e752      	b.n	17ee <z_cbvprintf_impl+0x4a>
    1948:	f04f 0801 	mov.w	r8, #1
    194c:	e74f      	b.n	17ee <z_cbvprintf_impl+0x4a>
    194e:	2601      	movs	r6, #1
    1950:	e74d      	b.n	17ee <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    1952:	fb0e 6202 	mla	r2, lr, r2, r6
    1956:	3a30      	subs	r2, #48	; 0x30
    1958:	4603      	mov	r3, r0
    195a:	4618      	mov	r0, r3
    195c:	f810 6b01 	ldrb.w	r6, [r0], #1
    1960:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1964:	f1bc 0f09 	cmp.w	ip, #9
    1968:	d9f3      	bls.n	1952 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    196a:	4299      	cmp	r1, r3
    196c:	d08f      	beq.n	188e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    196e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    1972:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    1974:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1976:	f362 0141 	bfi	r1, r2, #1, #1
    197a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    197e:	e786      	b.n	188e <z_cbvprintf_impl+0xea>
    1980:	460b      	mov	r3, r1
	size_t val = 0;
    1982:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1984:	f04f 0e0a 	mov.w	lr, #10
    1988:	e7e7      	b.n	195a <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    198a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    198e:	f042 0204 	orr.w	r2, r2, #4
    1992:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    1996:	3302      	adds	r3, #2
	switch (*sp) {
    1998:	781a      	ldrb	r2, [r3, #0]
    199a:	2a6c      	cmp	r2, #108	; 0x6c
    199c:	d047      	beq.n	1a2e <z_cbvprintf_impl+0x28a>
    199e:	d82b      	bhi.n	19f8 <z_cbvprintf_impl+0x254>
    19a0:	2a68      	cmp	r2, #104	; 0x68
    19a2:	d031      	beq.n	1a08 <z_cbvprintf_impl+0x264>
    19a4:	2a6a      	cmp	r2, #106	; 0x6a
    19a6:	d04b      	beq.n	1a40 <z_cbvprintf_impl+0x29c>
    19a8:	2a4c      	cmp	r2, #76	; 0x4c
    19aa:	d051      	beq.n	1a50 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    19ac:	461a      	mov	r2, r3
    19ae:	f812 3b01 	ldrb.w	r3, [r2], #1
    19b2:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    19b4:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    19b6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    19ba:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    19be:	f200 80be 	bhi.w	1b3e <z_cbvprintf_impl+0x39a>
    19c2:	2b6d      	cmp	r3, #109	; 0x6d
    19c4:	d851      	bhi.n	1a6a <z_cbvprintf_impl+0x2c6>
    19c6:	2b69      	cmp	r3, #105	; 0x69
    19c8:	f200 80b9 	bhi.w	1b3e <z_cbvprintf_impl+0x39a>
    19cc:	2b57      	cmp	r3, #87	; 0x57
    19ce:	d867      	bhi.n	1aa0 <z_cbvprintf_impl+0x2fc>
    19d0:	2b41      	cmp	r3, #65	; 0x41
    19d2:	d003      	beq.n	19dc <z_cbvprintf_impl+0x238>
    19d4:	3b45      	subs	r3, #69	; 0x45
    19d6:	2b02      	cmp	r3, #2
    19d8:	f200 80b1 	bhi.w	1b3e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    19dc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    19e0:	2204      	movs	r2, #4
    19e2:	f362 0302 	bfi	r3, r2, #0, #3
    19e6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    19ea:	2301      	movs	r3, #1
			break;
    19ec:	e073      	b.n	1ad6 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    19ee:	fb0c 0202 	mla	r2, ip, r2, r0
    19f2:	3a30      	subs	r2, #48	; 0x30
    19f4:	460b      	mov	r3, r1
    19f6:	e75d      	b.n	18b4 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    19f8:	2a74      	cmp	r2, #116	; 0x74
    19fa:	d025      	beq.n	1a48 <z_cbvprintf_impl+0x2a4>
    19fc:	2a7a      	cmp	r2, #122	; 0x7a
    19fe:	d1d5      	bne.n	19ac <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    1a00:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1a04:	2106      	movs	r1, #6
    1a06:	e00c      	b.n	1a22 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    1a08:	785a      	ldrb	r2, [r3, #1]
    1a0a:	2a68      	cmp	r2, #104	; 0x68
    1a0c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1a10:	d106      	bne.n	1a20 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    1a12:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1a14:	f361 02c6 	bfi	r2, r1, #3, #4
    1a18:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    1a1c:	3302      	adds	r3, #2
    1a1e:	e7c5      	b.n	19ac <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    1a20:	2102      	movs	r1, #2
    1a22:	f361 02c6 	bfi	r2, r1, #3, #4
    1a26:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    1a2a:	3301      	adds	r3, #1
    1a2c:	e7be      	b.n	19ac <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    1a2e:	785a      	ldrb	r2, [r3, #1]
    1a30:	2a6c      	cmp	r2, #108	; 0x6c
    1a32:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1a36:	d101      	bne.n	1a3c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    1a38:	2104      	movs	r1, #4
    1a3a:	e7eb      	b.n	1a14 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    1a3c:	2103      	movs	r1, #3
    1a3e:	e7f0      	b.n	1a22 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    1a40:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1a44:	2105      	movs	r1, #5
    1a46:	e7ec      	b.n	1a22 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    1a48:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1a4c:	2107      	movs	r1, #7
    1a4e:	e7e8      	b.n	1a22 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    1a50:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    1a54:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1a58:	f022 0202 	bic.w	r2, r2, #2
    1a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1a60:	f042 0202 	orr.w	r2, r2, #2
    1a64:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    1a68:	e7df      	b.n	1a2a <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    1a6a:	3b6e      	subs	r3, #110	; 0x6e
    1a6c:	b2d9      	uxtb	r1, r3
    1a6e:	2301      	movs	r3, #1
    1a70:	408b      	lsls	r3, r1
    1a72:	f240 4182 	movw	r1, #1154	; 0x482
    1a76:	420b      	tst	r3, r1
    1a78:	d137      	bne.n	1aea <z_cbvprintf_impl+0x346>
    1a7a:	f013 0f24 	tst.w	r3, #36	; 0x24
    1a7e:	d151      	bne.n	1b24 <z_cbvprintf_impl+0x380>
    1a80:	07d8      	lsls	r0, r3, #31
    1a82:	d55c      	bpl.n	1b3e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    1a84:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1a88:	2103      	movs	r1, #3
    1a8a:	f361 0302 	bfi	r3, r1, #0, #3
    1a8e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1a92:	f002 0378 	and.w	r3, r2, #120	; 0x78
    1a96:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    1a9a:	424b      	negs	r3, r1
    1a9c:	414b      	adcs	r3, r1
    1a9e:	e01a      	b.n	1ad6 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
    1aa0:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    1aa4:	b2c9      	uxtb	r1, r1
    1aa6:	2001      	movs	r0, #1
    1aa8:	fa00 f101 	lsl.w	r1, r0, r1
    1aac:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1ab0:	d194      	bne.n	19dc <z_cbvprintf_impl+0x238>
    1ab2:	f640 0601 	movw	r6, #2049	; 0x801
    1ab6:	4231      	tst	r1, r6
    1ab8:	d11d      	bne.n	1af6 <z_cbvprintf_impl+0x352>
    1aba:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1abe:	d03e      	beq.n	1b3e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    1ac0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1ac4:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1ac8:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1acc:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    1ace:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1ad2:	d034      	beq.n	1b3e <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    1ad4:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    1ad6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1ada:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1ade:	430b      	orrs	r3, r1
    1ae0:	f363 0241 	bfi	r2, r3, #1, #1
    1ae4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1ae8:	e6fd      	b.n	18e6 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    1aea:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1aee:	2102      	movs	r1, #2
    1af0:	f361 0302 	bfi	r3, r1, #0, #3
    1af4:	e7e8      	b.n	1ac8 <z_cbvprintf_impl+0x324>
    1af6:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    1afa:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    1afc:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1b00:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b04:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1b06:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    1b0a:	bf02      	ittt	eq
    1b0c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    1b10:	f041 0101 	orreq.w	r1, r1, #1
    1b14:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    1b18:	2b63      	cmp	r3, #99	; 0x63
    1b1a:	d1db      	bne.n	1ad4 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1b1c:	1e13      	subs	r3, r2, #0
    1b1e:	bf18      	it	ne
    1b20:	2301      	movne	r3, #1
    1b22:	e7d8      	b.n	1ad6 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    1b24:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1b28:	2103      	movs	r1, #3
    1b2a:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    1b2e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1b32:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    1b36:	bf14      	ite	ne
    1b38:	2301      	movne	r3, #1
    1b3a:	2300      	moveq	r3, #0
    1b3c:	e7cb      	b.n	1ad6 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    1b3e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1b42:	f043 0301 	orr.w	r3, r3, #1
    1b46:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    1b4a:	e7c3      	b.n	1ad4 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    1b4c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1b50:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1b52:	bfb4      	ite	lt
    1b54:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    1b58:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    1b5c:	e6d5      	b.n	190a <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    1b5e:	0798      	lsls	r0, r3, #30
    1b60:	f57f aee2 	bpl.w	1928 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    1b64:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    1b68:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    1b6c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1b6e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    1b72:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    1b76:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1b7a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1b7c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1b80:	d133      	bne.n	1bea <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    1b82:	1ecb      	subs	r3, r1, #3
    1b84:	2b04      	cmp	r3, #4
    1b86:	d804      	bhi.n	1b92 <z_cbvprintf_impl+0x3ee>
    1b88:	e8df f003 	tbb	[pc, r3]
    1b8c:	21464621 	.word	0x21464621
    1b90:	21          	.byte	0x21
    1b91:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1b92:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    1b94:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    1b96:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1b9a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1b9e:	d11c      	bne.n	1bda <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    1ba0:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    1ba4:	17da      	asrs	r2, r3, #31
    1ba6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    1baa:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1bac:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1bb0:	f013 0603 	ands.w	r6, r3, #3
    1bb4:	d050      	beq.n	1c58 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    1bb6:	9b03      	ldr	r3, [sp, #12]
    1bb8:	463a      	mov	r2, r7
    1bba:	4659      	mov	r1, fp
    1bbc:	4648      	mov	r0, r9
    1bbe:	f015 fc79 	bl	174b4 <outs>
    1bc2:	2800      	cmp	r0, #0
    1bc4:	f2c0 8153 	blt.w	1e6e <z_cbvprintf_impl+0x6ca>
    1bc8:	4405      	add	r5, r0
			continue;
    1bca:	9f03      	ldr	r7, [sp, #12]
    1bcc:	e5f2      	b.n	17b4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1bce:	f854 3b04 	ldr.w	r3, [r4], #4
    1bd2:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1bd4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    1bd8:	e7e8      	b.n	1bac <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    1bda:	2902      	cmp	r1, #2
    1bdc:	d1e5      	bne.n	1baa <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    1bde:	b21a      	sxth	r2, r3
    1be0:	f343 33c0 	sbfx	r3, r3, #15, #1
    1be4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1be8:	e7df      	b.n	1baa <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1bea:	2b02      	cmp	r3, #2
    1bec:	d124      	bne.n	1c38 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    1bee:	1ecb      	subs	r3, r1, #3
    1bf0:	2b04      	cmp	r3, #4
    1bf2:	d804      	bhi.n	1bfe <z_cbvprintf_impl+0x45a>
    1bf4:	e8df f003 	tbb	[pc, r3]
    1bf8:	18101018 	.word	0x18101018
    1bfc:	18          	.byte	0x18
    1bfd:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    1bfe:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    1c00:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1c04:	f04f 0200 	mov.w	r2, #0
    1c08:	d014      	beq.n	1c34 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    1c0a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1c0c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1c10:	d1cc      	bne.n	1bac <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    1c12:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    1c14:	930e      	str	r3, [sp, #56]	; 0x38
    1c16:	e7c9      	b.n	1bac <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    1c18:	3407      	adds	r4, #7
    1c1a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    1c1e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1c22:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1c26:	e7c1      	b.n	1bac <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    1c28:	f854 3b04 	ldr.w	r3, [r4], #4
    1c2c:	930e      	str	r3, [sp, #56]	; 0x38
    1c2e:	2300      	movs	r3, #0
    1c30:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    1c32:	e7bb      	b.n	1bac <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    1c34:	b2db      	uxtb	r3, r3
    1c36:	e7cd      	b.n	1bd4 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    1c38:	2b04      	cmp	r3, #4
    1c3a:	d108      	bne.n	1c4e <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    1c3c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    1c3e:	f024 0407 	bic.w	r4, r4, #7
    1c42:	e9d4 2300 	ldrd	r2, r3, [r4]
    1c46:	3408      	adds	r4, #8
    1c48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1c4c:	e7ae      	b.n	1bac <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1c4e:	2b03      	cmp	r3, #3
    1c50:	d1ac      	bne.n	1bac <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    1c52:	f854 3b04 	ldr.w	r3, [r4], #4
    1c56:	e7dd      	b.n	1c14 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    1c58:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1c5c:	2878      	cmp	r0, #120	; 0x78
    1c5e:	d8b4      	bhi.n	1bca <z_cbvprintf_impl+0x426>
    1c60:	2862      	cmp	r0, #98	; 0x62
    1c62:	d81c      	bhi.n	1c9e <z_cbvprintf_impl+0x4fa>
    1c64:	2825      	cmp	r0, #37	; 0x25
    1c66:	f43f adad 	beq.w	17c4 <z_cbvprintf_impl+0x20>
    1c6a:	2858      	cmp	r0, #88	; 0x58
    1c6c:	d1ad      	bne.n	1bca <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1c6e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1c72:	9300      	str	r3, [sp, #0]
    1c74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1c78:	ab08      	add	r3, sp, #32
    1c7a:	aa10      	add	r2, sp, #64	; 0x40
    1c7c:	f015 fbd4 	bl	17428 <encode_uint>
			if (precision >= 0) {
    1c80:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    1c84:	4607      	mov	r7, r0
			if (precision >= 0) {
    1c86:	f280 809a 	bge.w	1dbe <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
    1c8a:	2f00      	cmp	r7, #0
    1c8c:	d09d      	beq.n	1bca <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    1c8e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1c92:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    1c94:	2e00      	cmp	r6, #0
    1c96:	f000 80c1 	beq.w	1e1c <z_cbvprintf_impl+0x678>
			nj_len += 1U;
    1c9a:	3001      	adds	r0, #1
    1c9c:	e0be      	b.n	1e1c <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
    1c9e:	3863      	subs	r0, #99	; 0x63
    1ca0:	2815      	cmp	r0, #21
    1ca2:	d892      	bhi.n	1bca <z_cbvprintf_impl+0x426>
    1ca4:	a201      	add	r2, pc, #4	; (adr r2, 1cac <z_cbvprintf_impl+0x508>)
    1ca6:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1caa:	bf00      	nop
    1cac:	00001d81 	.word	0x00001d81
    1cb0:	00001d93 	.word	0x00001d93
    1cb4:	00001bcb 	.word	0x00001bcb
    1cb8:	00001bcb 	.word	0x00001bcb
    1cbc:	00001bcb 	.word	0x00001bcb
    1cc0:	00001bcb 	.word	0x00001bcb
    1cc4:	00001d93 	.word	0x00001d93
    1cc8:	00001bcb 	.word	0x00001bcb
    1ccc:	00001bcb 	.word	0x00001bcb
    1cd0:	00001bcb 	.word	0x00001bcb
    1cd4:	00001bcb 	.word	0x00001bcb
    1cd8:	00001e21 	.word	0x00001e21
    1cdc:	00001db9 	.word	0x00001db9
    1ce0:	00001ddf 	.word	0x00001ddf
    1ce4:	00001bcb 	.word	0x00001bcb
    1ce8:	00001bcb 	.word	0x00001bcb
    1cec:	00001d05 	.word	0x00001d05
    1cf0:	00001bcb 	.word	0x00001bcb
    1cf4:	00001db9 	.word	0x00001db9
    1cf8:	00001bcb 	.word	0x00001bcb
    1cfc:	00001bcb 	.word	0x00001bcb
    1d00:	00001db9 	.word	0x00001db9
			if (precision >= 0) {
    1d04:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    1d08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    1d0a:	db35      	blt.n	1d78 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    1d0c:	4651      	mov	r1, sl
    1d0e:	4638      	mov	r0, r7
    1d10:	f015 fe5b 	bl	179ca <strnlen>
			bpe = bps + len;
    1d14:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    1d18:	2f00      	cmp	r7, #0
    1d1a:	f43f af56 	beq.w	1bca <z_cbvprintf_impl+0x426>
		char sign = 0;
    1d1e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    1d20:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1d24:	f013 0210 	ands.w	r2, r3, #16
    1d28:	9205      	str	r2, [sp, #20]
    1d2a:	f000 8093 	beq.w	1e54 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
    1d2e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1d30:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    1d32:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    1d34:	bf48      	it	mi
    1d36:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    1d38:	9204      	str	r2, [sp, #16]
    1d3a:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    1d3c:	bf48      	it	mi
    1d3e:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1d40:	f1b8 0f00 	cmp.w	r8, #0
    1d44:	f340 80a0 	ble.w	1e88 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
    1d48:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    1d4c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    1d50:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1d54:	0750      	lsls	r0, r2, #29
    1d56:	9306      	str	r3, [sp, #24]
    1d58:	f100 8096 	bmi.w	1e88 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
    1d5c:	0651      	lsls	r1, r2, #25
    1d5e:	f140 8089 	bpl.w	1e74 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
    1d62:	b13e      	cbz	r6, 1d74 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    1d64:	4659      	mov	r1, fp
    1d66:	4630      	mov	r0, r6
    1d68:	47c8      	blx	r9
    1d6a:	2800      	cmp	r0, #0
    1d6c:	db7f      	blt.n	1e6e <z_cbvprintf_impl+0x6ca>
    1d6e:	9b06      	ldr	r3, [sp, #24]
    1d70:	3501      	adds	r5, #1
    1d72:	461e      	mov	r6, r3
					pad = '0';
    1d74:	2230      	movs	r2, #48	; 0x30
    1d76:	e07e      	b.n	1e76 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
    1d78:	4638      	mov	r0, r7
    1d7a:	f015 fe1f 	bl	179bc <strlen>
    1d7e:	e7c9      	b.n	1d14 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1d82:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    1d86:	2600      	movs	r6, #0
			bps = buf;
    1d88:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    1d8a:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    1d8e:	2001      	movs	r0, #1
    1d90:	e7c6      	b.n	1d20 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    1d92:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    1d94:	bf5c      	itt	pl
    1d96:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    1d9a:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1d9c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    1da0:	bf48      	it	mi
    1da2:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1da4:	2b00      	cmp	r3, #0
    1da6:	f6bf af62 	bge.w	1c6e <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    1daa:	4252      	negs	r2, r2
    1dac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1db0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    1db4:	262d      	movs	r6, #45	; 0x2d
    1db6:	e75a      	b.n	1c6e <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    1db8:	2600      	movs	r6, #0
    1dba:	e758      	b.n	1c6e <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    1dbc:	2600      	movs	r6, #0
				conv->flag_zero = false;
    1dbe:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    1dc2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1dc6:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    1dc8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1dcc:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    1dce:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    1dd2:	f67f af5a 	bls.w	1c8a <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    1dd6:	ebaa 0303 	sub.w	r3, sl, r3
    1dda:	9311      	str	r3, [sp, #68]	; 0x44
    1ddc:	e755      	b.n	1c8a <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    1dde:	980e      	ldr	r0, [sp, #56]	; 0x38
    1de0:	b390      	cbz	r0, 1e48 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1de2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1de6:	9300      	str	r3, [sp, #0]
    1de8:	aa10      	add	r2, sp, #64	; 0x40
    1dea:	ab08      	add	r3, sp, #32
    1dec:	2100      	movs	r1, #0
    1dee:	f015 fb1b 	bl	17428 <encode_uint>
				conv->altform_0c = true;
    1df2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    1df6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1dfa:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1dfe:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    1e02:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1e06:	4607      	mov	r7, r0
				conv->altform_0c = true;
    1e08:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1e0c:	dad6      	bge.n	1dbc <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    1e0e:	2800      	cmp	r0, #0
    1e10:	f43f aedb 	beq.w	1bca <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    1e14:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1e18:	1a18      	subs	r0, r3, r0
		char sign = 0;
    1e1a:	2600      	movs	r6, #0
    1e1c:	469a      	mov	sl, r3
    1e1e:	e77f      	b.n	1d20 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    1e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    1e22:	2907      	cmp	r1, #7
    1e24:	f63f aed1 	bhi.w	1bca <z_cbvprintf_impl+0x426>
    1e28:	e8df f001 	tbb	[pc, r1]
    1e2c:	0c06040c 	.word	0x0c06040c
    1e30:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1e34:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    1e36:	e6c8      	b.n	1bca <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    1e38:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    1e3a:	e6c6      	b.n	1bca <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    1e3c:	17ea      	asrs	r2, r5, #31
    1e3e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    1e42:	e6c2      	b.n	1bca <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1e44:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    1e46:	e6c0      	b.n	1bca <z_cbvprintf_impl+0x426>
    1e48:	4f2e      	ldr	r7, [pc, #184]	; (1f04 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    1e4a:	4606      	mov	r6, r0
			bpe = bps + 5;
    1e4c:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    1e50:	2005      	movs	r0, #5
    1e52:	e765      	b.n	1d20 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    1e54:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    1e56:	bf48      	it	mi
    1e58:	3001      	addmi	r0, #1
    1e5a:	e769      	b.n	1d30 <z_cbvprintf_impl+0x58c>
    1e5c:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    1e5e:	4610      	mov	r0, r2
    1e60:	9206      	str	r2, [sp, #24]
    1e62:	4659      	mov	r1, fp
    1e64:	47c8      	blx	r9
    1e66:	2800      	cmp	r0, #0
    1e68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1e6c:	da04      	bge.n	1e78 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
    1e6e:	b015      	add	sp, #84	; 0x54
    1e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1e74:	2220      	movs	r2, #32
					pad = '0';
    1e76:	4643      	mov	r3, r8
				while (width-- > 0) {
    1e78:	4619      	mov	r1, r3
    1e7a:	2900      	cmp	r1, #0
    1e7c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    1e80:	dcec      	bgt.n	1e5c <z_cbvprintf_impl+0x6b8>
    1e82:	4445      	add	r5, r8
    1e84:	1a6d      	subs	r5, r5, r1
    1e86:	4698      	mov	r8, r3
		if (sign != 0) {
    1e88:	b12e      	cbz	r6, 1e96 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
    1e8a:	4659      	mov	r1, fp
    1e8c:	4630      	mov	r0, r6
    1e8e:	47c8      	blx	r9
    1e90:	2800      	cmp	r0, #0
    1e92:	dbec      	blt.n	1e6e <z_cbvprintf_impl+0x6ca>
    1e94:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1e96:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1e9a:	06da      	lsls	r2, r3, #27
    1e9c:	d401      	bmi.n	1ea2 <z_cbvprintf_impl+0x6fe>
    1e9e:	071b      	lsls	r3, r3, #28
    1ea0:	d505      	bpl.n	1eae <z_cbvprintf_impl+0x70a>
				OUTC('0');
    1ea2:	4659      	mov	r1, fp
    1ea4:	2030      	movs	r0, #48	; 0x30
    1ea6:	47c8      	blx	r9
    1ea8:	2800      	cmp	r0, #0
    1eaa:	dbe0      	blt.n	1e6e <z_cbvprintf_impl+0x6ca>
    1eac:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1eae:	9b05      	ldr	r3, [sp, #20]
    1eb0:	b133      	cbz	r3, 1ec0 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
    1eb2:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1eb6:	4659      	mov	r1, fp
    1eb8:	47c8      	blx	r9
    1eba:	2800      	cmp	r0, #0
    1ebc:	dbd7      	blt.n	1e6e <z_cbvprintf_impl+0x6ca>
    1ebe:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1ec0:	9e04      	ldr	r6, [sp, #16]
    1ec2:	442e      	add	r6, r5
    1ec4:	e005      	b.n	1ed2 <z_cbvprintf_impl+0x72e>
				OUTC('0');
    1ec6:	4659      	mov	r1, fp
    1ec8:	2030      	movs	r0, #48	; 0x30
    1eca:	47c8      	blx	r9
    1ecc:	2800      	cmp	r0, #0
    1ece:	dbce      	blt.n	1e6e <z_cbvprintf_impl+0x6ca>
    1ed0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1ed2:	1b73      	subs	r3, r6, r5
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	dcf6      	bgt.n	1ec6 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
    1ed8:	4653      	mov	r3, sl
    1eda:	463a      	mov	r2, r7
    1edc:	4659      	mov	r1, fp
    1ede:	4648      	mov	r0, r9
    1ee0:	f015 fae8 	bl	174b4 <outs>
    1ee4:	2800      	cmp	r0, #0
    1ee6:	dbc2      	blt.n	1e6e <z_cbvprintf_impl+0x6ca>
    1ee8:	4405      	add	r5, r0
		while (width > 0) {
    1eea:	44a8      	add	r8, r5
    1eec:	eba8 0305 	sub.w	r3, r8, r5
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	f77f ae6a 	ble.w	1bca <z_cbvprintf_impl+0x426>
			OUTC(' ');
    1ef6:	4659      	mov	r1, fp
    1ef8:	2020      	movs	r0, #32
    1efa:	47c8      	blx	r9
    1efc:	2800      	cmp	r0, #0
    1efe:	dbb6      	blt.n	1e6e <z_cbvprintf_impl+0x6ca>
    1f00:	3501      	adds	r5, #1
			--width;
    1f02:	e7f3      	b.n	1eec <z_cbvprintf_impl+0x748>
    1f04:	0001ca6b 	.word	0x0001ca6b

00001f08 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1f08:	f012 bb98 	b.w	1463c <SystemInit>

00001f0c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f10:	4605      	mov	r5, r0
	__asm__ volatile(
    1f12:	f04f 0320 	mov.w	r3, #32
    1f16:	f3ef 8611 	mrs	r6, BASEPRI
    1f1a:	f383 8812 	msr	BASEPRI_MAX, r3
    1f1e:	f3bf 8f6f 	isb	sy
	return list->head;
    1f22:	4b0e      	ldr	r3, [pc, #56]	; (1f5c <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1f24:	4f0e      	ldr	r7, [pc, #56]	; (1f60 <pm_state_notify+0x54>)
    1f26:	681c      	ldr	r4, [r3, #0]
    1f28:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1f64 <pm_state_notify+0x58>
    1f2c:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1f30:	b92c      	cbnz	r4, 1f3e <pm_state_notify+0x32>
	__asm__ volatile(
    1f32:	f386 8811 	msr	BASEPRI, r6
    1f36:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    1f3e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    1f42:	2d00      	cmp	r5, #0
    1f44:	bf18      	it	ne
    1f46:	4613      	movne	r3, r2
		if (callback) {
    1f48:	b12b      	cbz	r3, 1f56 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1f4a:	f898 2010 	ldrb.w	r2, [r8, #16]
    1f4e:	fb09 f202 	mul.w	r2, r9, r2
    1f52:	5cb8      	ldrb	r0, [r7, r2]
    1f54:	4798      	blx	r3
	return node->next;
    1f56:	6824      	ldr	r4, [r4, #0]
    1f58:	e7ea      	b.n	1f30 <pm_state_notify+0x24>
    1f5a:	bf00      	nop
    1f5c:	200011e8 	.word	0x200011e8
    1f60:	200011dc 	.word	0x200011dc
    1f64:	200025d0 	.word	0x200025d0

00001f68 <pm_system_resume>:

void pm_system_resume(void)
{
    1f68:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    1f6a:	4b19      	ldr	r3, [pc, #100]	; (1fd0 <pm_system_resume+0x68>)
    1f6c:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1f6e:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1f72:	f004 031f 	and.w	r3, r4, #31
    1f76:	2201      	movs	r2, #1
    1f78:	409a      	lsls	r2, r3
    1f7a:	4b16      	ldr	r3, [pc, #88]	; (1fd4 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1f7c:	0961      	lsrs	r1, r4, #5
    1f7e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1f82:	43d0      	mvns	r0, r2
    1f84:	e853 1f00 	ldrex	r1, [r3]
    1f88:	ea01 0500 	and.w	r5, r1, r0
    1f8c:	e843 5600 	strex	r6, r5, [r3]
    1f90:	2e00      	cmp	r6, #0
    1f92:	d1f7      	bne.n	1f84 <pm_system_resume+0x1c>
    1f94:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1f98:	420a      	tst	r2, r1
    1f9a:	d013      	beq.n	1fc4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    1f9c:	4b0e      	ldr	r3, [pc, #56]	; (1fd8 <pm_system_resume+0x70>)
    1f9e:	4d0f      	ldr	r5, [pc, #60]	; (1fdc <pm_system_resume+0x74>)
    1fa0:	b18b      	cbz	r3, 1fc6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1fa2:	230c      	movs	r3, #12
    1fa4:	4363      	muls	r3, r4
    1fa6:	18ea      	adds	r2, r5, r3
    1fa8:	5ce8      	ldrb	r0, [r5, r3]
    1faa:	7851      	ldrb	r1, [r2, #1]
    1fac:	f015 fd49 	bl	17a42 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1fb0:	2000      	movs	r0, #0
    1fb2:	f7ff ffab 	bl	1f0c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1fb6:	230c      	movs	r3, #12
    1fb8:	435c      	muls	r4, r3
    1fba:	192a      	adds	r2, r5, r4
    1fbc:	2300      	movs	r3, #0
    1fbe:	512b      	str	r3, [r5, r4]
    1fc0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1fc4:	bd70      	pop	{r4, r5, r6, pc}
    1fc6:	f383 8811 	msr	BASEPRI, r3
    1fca:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1fce:	e7ef      	b.n	1fb0 <pm_system_resume+0x48>
    1fd0:	200025d0 	.word	0x200025d0
    1fd4:	200011f0 	.word	0x200011f0
    1fd8:	00017a43 	.word	0x00017a43
    1fdc:	200011dc 	.word	0x200011dc

00001fe0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    1fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    1fe4:	4b35      	ldr	r3, [pc, #212]	; (20bc <pm_system_suspend+0xdc>)
{
    1fe6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    1fe8:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    1fea:	f04f 0320 	mov.w	r3, #32
    1fee:	f3ef 8811 	mrs	r8, BASEPRI
    1ff2:	f383 8812 	msr	BASEPRI_MAX, r3
    1ff6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    1ffa:	240c      	movs	r4, #12
    1ffc:	4b30      	ldr	r3, [pc, #192]	; (20c0 <pm_system_suspend+0xe0>)
    1ffe:	4e31      	ldr	r6, [pc, #196]	; (20c4 <pm_system_suspend+0xe4>)
    2000:	436c      	muls	r4, r5
    2002:	191a      	adds	r2, r3, r4
    2004:	5d19      	ldrb	r1, [r3, r4]
    2006:	2900      	cmp	r1, #0
    2008:	d04c      	beq.n	20a4 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    200a:	ca07      	ldmia	r2, {r0, r1, r2}
    200c:	eb06 0c04 	add.w	ip, r6, r4
    2010:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    2014:	2200      	movs	r2, #0
    2016:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    2018:	f388 8811 	msr	BASEPRI, r8
    201c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2020:	230c      	movs	r3, #12
    2022:	436b      	muls	r3, r5
    2024:	18f2      	adds	r2, r6, r3
    2026:	5cf0      	ldrb	r0, [r6, r3]
    2028:	2800      	cmp	r0, #0
    202a:	d039      	beq.n	20a0 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    202c:	1c7b      	adds	r3, r7, #1
    202e:	d010      	beq.n	2052 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2030:	f8d2 c008 	ldr.w	ip, [r2, #8]
    2034:	4c24      	ldr	r4, [pc, #144]	; (20c8 <pm_system_suspend+0xe8>)
    2036:	4a25      	ldr	r2, [pc, #148]	; (20cc <pm_system_suspend+0xec>)
    2038:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    203c:	2100      	movs	r1, #0
    203e:	fbec 4100 	umlal	r4, r1, ip, r0
    2042:	2300      	movs	r3, #0
    2044:	4620      	mov	r0, r4
    2046:	f7fe f84b 	bl	e0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    204a:	2101      	movs	r1, #1
    204c:	1a38      	subs	r0, r7, r0
    204e:	f012 fa9d 	bl	1458c <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2052:	f014 fb75 	bl	16740 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    2056:	2001      	movs	r0, #1
    2058:	f7ff ff58 	bl	1f0c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    205c:	f3bf 8f5b 	dmb	ish
    2060:	4b1b      	ldr	r3, [pc, #108]	; (20d0 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2062:	096a      	lsrs	r2, r5, #5
    2064:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    2068:	f005 011f 	and.w	r1, r5, #31
    206c:	2201      	movs	r2, #1
    206e:	408a      	lsls	r2, r1
    2070:	e853 0f00 	ldrex	r0, [r3]
    2074:	4310      	orrs	r0, r2
    2076:	e843 0100 	strex	r1, r0, [r3]
    207a:	2900      	cmp	r1, #0
    207c:	d1f8      	bne.n	2070 <pm_system_suspend+0x90>
    207e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2082:	4b14      	ldr	r3, [pc, #80]	; (20d4 <pm_system_suspend+0xf4>)
    2084:	b13b      	cbz	r3, 2096 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    2086:	230c      	movs	r3, #12
    2088:	fb03 f005 	mul.w	r0, r3, r5
    208c:	1833      	adds	r3, r6, r0
    208e:	5c30      	ldrb	r0, [r6, r0]
    2090:	7859      	ldrb	r1, [r3, #1]
    2092:	f015 fcca 	bl	17a2a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    2096:	f7ff ff67 	bl	1f68 <pm_system_resume>
	k_sched_unlock();
    209a:	f014 fb65 	bl	16768 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    209e:	2001      	movs	r0, #1
}
    20a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    20a4:	4601      	mov	r1, r0
    20a6:	4628      	mov	r0, r5
    20a8:	f000 f816 	bl	20d8 <pm_policy_next_state>
		if (info != NULL) {
    20ac:	2800      	cmp	r0, #0
    20ae:	d0b3      	beq.n	2018 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    20b0:	c807      	ldmia	r0, {r0, r1, r2}
    20b2:	4434      	add	r4, r6
    20b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    20b8:	e7ae      	b.n	2018 <pm_system_suspend+0x38>
    20ba:	bf00      	nop
    20bc:	200025d0 	.word	0x200025d0
    20c0:	200011d0 	.word	0x200011d0
    20c4:	200011dc 	.word	0x200011dc
    20c8:	000f423f 	.word	0x000f423f
    20cc:	000f4240 	.word	0x000f4240
    20d0:	200011f0 	.word	0x200011f0
    20d4:	00017a2b 	.word	0x00017a2b

000020d8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    20d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20dc:	b085      	sub	sp, #20
    20de:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    20e0:	a903      	add	r1, sp, #12
    20e2:	f000 f843 	bl	216c <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    20e6:	4b1e      	ldr	r3, [pc, #120]	; (2160 <pm_policy_next_state+0x88>)
    20e8:	9d03      	ldr	r5, [sp, #12]
    20ea:	f8d3 a000 	ldr.w	sl, [r3]
    20ee:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2164 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    20f2:	1e43      	subs	r3, r0, #1
    20f4:	b21b      	sxth	r3, r3
    20f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    20fa:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    20fc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2100:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2104:	f04f 0b00 	mov.w	fp, #0
    2108:	b924      	cbnz	r4, 2114 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    210a:	46a1      	mov	r9, r4
}
    210c:	4648      	mov	r0, r9
    210e:	b005      	add	sp, #20
    2110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2114:	6868      	ldr	r0, [r5, #4]
    2116:	4a14      	ldr	r2, [pc, #80]	; (2168 <pm_policy_next_state+0x90>)
    2118:	46c4      	mov	ip, r8
    211a:	4659      	mov	r1, fp
    211c:	fbe0 c107 	umlal	ip, r1, r0, r7
    2120:	2300      	movs	r3, #0
    2122:	4660      	mov	r0, ip
    2124:	f7fd ffdc 	bl	e0 <__aeabi_uldivmod>
    2128:	9001      	str	r0, [sp, #4]
    212a:	68a8      	ldr	r0, [r5, #8]
    212c:	4a0e      	ldr	r2, [pc, #56]	; (2168 <pm_policy_next_state+0x90>)
    212e:	46c4      	mov	ip, r8
    2130:	4659      	mov	r1, fp
    2132:	fbe0 c107 	umlal	ip, r1, r0, r7
    2136:	2300      	movs	r3, #0
    2138:	4660      	mov	r0, ip
    213a:	f7fd ffd1 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    213e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    2142:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2144:	d001      	beq.n	214a <pm_policy_next_state+0x72>
    2146:	4582      	cmp	sl, r0
    2148:	d905      	bls.n	2156 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    214a:	1c73      	adds	r3, r6, #1
    214c:	d0de      	beq.n	210c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    214e:	9b01      	ldr	r3, [sp, #4]
    2150:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2152:	42b0      	cmp	r0, r6
    2154:	d9da      	bls.n	210c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2156:	3c01      	subs	r4, #1
    2158:	b2a4      	uxth	r4, r4
    215a:	3d0c      	subs	r5, #12
    215c:	e7d4      	b.n	2108 <pm_policy_next_state+0x30>
    215e:	bf00      	nop
    2160:	20000184 	.word	0x20000184
    2164:	000f423f 	.word	0x000f423f
    2168:	000f4240 	.word	0x000f4240

0000216c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    216c:	b908      	cbnz	r0, 2172 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    216e:	4b02      	ldr	r3, [pc, #8]	; (2178 <pm_state_cpu_get_all+0xc>)
    2170:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2172:	2000      	movs	r0, #0
    2174:	4770      	bx	lr
    2176:	bf00      	nop
    2178:	0001b440 	.word	0x0001b440

0000217c <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    217c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    217e:	2407      	movs	r4, #7
    2180:	9402      	str	r4, [sp, #8]
    2182:	4c04      	ldr	r4, [pc, #16]	; (2194 <read_pnp_id+0x18>)
    2184:	9401      	str	r4, [sp, #4]
    2186:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    218a:	9400      	str	r4, [sp, #0]
    218c:	f017 f9a3 	bl	194d6 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    2190:	b004      	add	sp, #16
    2192:	bd10      	pop	{r4, pc}
    2194:	20000887 	.word	0x20000887

00002198 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    2198:	4904      	ldr	r1, [pc, #16]	; (21ac <sub_bytes+0x14>)
    219a:	1e43      	subs	r3, r0, #1
    219c:	300f      	adds	r0, #15
    219e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    21a2:	5c8a      	ldrb	r2, [r1, r2]
    21a4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    21a6:	4283      	cmp	r3, r0
    21a8:	d1f9      	bne.n	219e <sub_bytes+0x6>
	}
}
    21aa:	4770      	bx	lr
    21ac:	0001ca96 	.word	0x0001ca96

000021b0 <tc_aes128_set_encrypt_key>:
{
    21b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    21b2:	4e26      	ldr	r6, [pc, #152]	; (224c <tc_aes128_set_encrypt_key+0x9c>)
{
    21b4:	4607      	mov	r7, r0
    21b6:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    21b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    21ba:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    21bc:	ad01      	add	r5, sp, #4
    21be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    21c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    21c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    21c4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    21c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    21cc:	4638      	mov	r0, r7
    21ce:	2f00      	cmp	r7, #0
    21d0:	d038      	beq.n	2244 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    21d2:	2c00      	cmp	r4, #0
    21d4:	d038      	beq.n	2248 <tc_aes128_set_encrypt_key+0x98>
    21d6:	1f38      	subs	r0, r7, #4
    21d8:	4621      	mov	r1, r4
    21da:	4602      	mov	r2, r0
    21dc:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    21de:	784b      	ldrb	r3, [r1, #1]
    21e0:	780d      	ldrb	r5, [r1, #0]
    21e2:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    21e4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    21e8:	78cd      	ldrb	r5, [r1, #3]
    21ea:	432b      	orrs	r3, r5
    21ec:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    21ee:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    21f0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    21f4:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    21f6:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    21fa:	d1f0      	bne.n	21de <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    21fc:	4c14      	ldr	r4, [pc, #80]	; (2250 <tc_aes128_set_encrypt_key+0xa0>)
    21fe:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    2200:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    2202:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    2204:	d116      	bne.n	2234 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2206:	f3c3 4207 	ubfx	r2, r3, #16, #8
    220a:	5ca5      	ldrb	r5, [r4, r2]
    220c:	0e1a      	lsrs	r2, r3, #24
    220e:	5ca2      	ldrb	r2, [r4, r2]
    2210:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    2214:	f3c3 2507 	ubfx	r5, r3, #8, #8
    2218:	b2db      	uxtb	r3, r3
    221a:	5d65      	ldrb	r5, [r4, r5]
    221c:	5ce3      	ldrb	r3, [r4, r3]
    221e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    2222:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    2226:	f021 0303 	bic.w	r3, r1, #3
    222a:	3330      	adds	r3, #48	; 0x30
    222c:	446b      	add	r3, sp
    222e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    2232:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    2234:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    2238:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    223a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    223c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    223e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    2240:	d1de      	bne.n	2200 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    2242:	2001      	movs	r0, #1
}
    2244:	b00d      	add	sp, #52	; 0x34
    2246:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    2248:	4620      	mov	r0, r4
    224a:	e7fb      	b.n	2244 <tc_aes128_set_encrypt_key+0x94>
    224c:	0001b374 	.word	0x0001b374
    2250:	0001ca96 	.word	0x0001ca96

00002254 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2254:	4901      	ldr	r1, [pc, #4]	; (225c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2256:	2210      	movs	r2, #16
	str	r2, [r1]
    2258:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    225a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    225c:	e000ed10 	.word	0xe000ed10

00002260 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2260:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2262:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2264:	f380 8811 	msr	BASEPRI, r0
	isb
    2268:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    226c:	f3bf 8f4f 	dsb	sy
    2270:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2272:	b662      	cpsie	i
	isb
    2274:	f3bf 8f6f 	isb	sy

	bx	lr
    2278:	4770      	bx	lr
    227a:	bf00      	nop

0000227c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    227c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    227e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2280:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    2284:	f3bf 8f4f 	dsb	sy
    2288:	bf20      	wfe

	msr	BASEPRI, r0
    228a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    228e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2290:	4770      	bx	lr
    2292:	bf00      	nop

00002294 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2294:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2296:	2800      	cmp	r0, #0
    2298:	db07      	blt.n	22aa <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    229a:	4a04      	ldr	r2, [pc, #16]	; (22ac <arch_irq_enable+0x18>)
    229c:	0941      	lsrs	r1, r0, #5
    229e:	2301      	movs	r3, #1
    22a0:	f000 001f 	and.w	r0, r0, #31
    22a4:	4083      	lsls	r3, r0
    22a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    22aa:	4770      	bx	lr
    22ac:	e000e100 	.word	0xe000e100

000022b0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    22b0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    22b2:	2800      	cmp	r0, #0
    22b4:	db0c      	blt.n	22d0 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22b6:	0943      	lsrs	r3, r0, #5
    22b8:	4906      	ldr	r1, [pc, #24]	; (22d4 <arch_irq_disable+0x24>)
    22ba:	f000 001f 	and.w	r0, r0, #31
    22be:	3320      	adds	r3, #32
    22c0:	2201      	movs	r2, #1
    22c2:	4082      	lsls	r2, r0
    22c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    22c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22cc:	f3bf 8f6f 	isb	sy
}
    22d0:	4770      	bx	lr
    22d2:	bf00      	nop
    22d4:	e000e100 	.word	0xe000e100

000022d8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    22d8:	4b05      	ldr	r3, [pc, #20]	; (22f0 <arch_irq_is_enabled+0x18>)
    22da:	0942      	lsrs	r2, r0, #5
    22dc:	f000 001f 	and.w	r0, r0, #31
    22e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    22e4:	2301      	movs	r3, #1
    22e6:	fa03 f000 	lsl.w	r0, r3, r0
}
    22ea:	4010      	ands	r0, r2
    22ec:	4770      	bx	lr
    22ee:	bf00      	nop
    22f0:	e000e100 	.word	0xe000e100

000022f4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    22f4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    22f6:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22f8:	bfa8      	it	ge
    22fa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    22fe:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2302:	bfb8      	it	lt
    2304:	4b06      	ldrlt	r3, [pc, #24]	; (2320 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2306:	ea4f 1141 	mov.w	r1, r1, lsl #5
    230a:	bfac      	ite	ge
    230c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2310:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2314:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2316:	bfb4      	ite	lt
    2318:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    231a:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    231e:	4770      	bx	lr
    2320:	e000ed14 	.word	0xe000ed14

00002324 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    2324:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    2326:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    2328:	4b04      	ldr	r3, [pc, #16]	; (233c <_arch_isr_direct_pm+0x18>)
    232a:	695a      	ldr	r2, [r3, #20]
    232c:	b11a      	cbz	r2, 2336 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    232e:	2200      	movs	r2, #0
    2330:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
    2332:	f018 f93b 	bl	1a5ac <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    2336:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    2338:	bd08      	pop	{r3, pc}
    233a:	bf00      	nop
    233c:	200025d0 	.word	0x200025d0

00002340 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2340:	bf30      	wfi
    b z_SysNmiOnReset
    2342:	f7ff bffd 	b.w	2340 <z_SysNmiOnReset>
    2346:	bf00      	nop

00002348 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2348:	4a0f      	ldr	r2, [pc, #60]	; (2388 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    234a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    234c:	4b0f      	ldr	r3, [pc, #60]	; (238c <z_arm_prep_c+0x44>)
    234e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2352:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2354:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2358:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    235c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2360:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    2368:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    236c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2370:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2374:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2378:	f013 faa6 	bl	158c8 <z_bss_zero>
	z_data_copy();
    237c:	f014 fb30 	bl	169e0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2380:	f000 fa20 	bl	27c4 <z_arm_interrupt_init>
	z_cstart();
    2384:	f013 fae4 	bl	15950 <z_cstart>
    2388:	00000000 	.word	0x00000000
    238c:	e000ed00 	.word	0xe000ed00

00002390 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2390:	4a09      	ldr	r2, [pc, #36]	; (23b8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2392:	490a      	ldr	r1, [pc, #40]	; (23bc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2394:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2396:	6809      	ldr	r1, [r1, #0]
    2398:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    239a:	4909      	ldr	r1, [pc, #36]	; (23c0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    239c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    239e:	684b      	ldr	r3, [r1, #4]
    23a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    23a4:	604b      	str	r3, [r1, #4]
    23a6:	2300      	movs	r3, #0
    23a8:	f383 8811 	msr	BASEPRI, r3
    23ac:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    23b0:	6893      	ldr	r3, [r2, #8]
}
    23b2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    23b4:	4770      	bx	lr
    23b6:	bf00      	nop
    23b8:	200025d0 	.word	0x200025d0
    23bc:	0001c95c 	.word	0x0001c95c
    23c0:	e000ed00 	.word	0xe000ed00

000023c4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    23c4:	4912      	ldr	r1, [pc, #72]	; (2410 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    23c6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    23c8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    23cc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    23ce:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    23d2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    23d6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    23d8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    23dc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    23e0:	4f0c      	ldr	r7, [pc, #48]	; (2414 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    23e2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    23e6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    23e8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    23ea:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    23ec:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    23ee:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    23f0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    23f2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    23f6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    23f8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    23fa:	f000 fa29 	bl	2850 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    23fe:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2402:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2406:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    240a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    240e:	4770      	bx	lr
    ldr r1, =_kernel
    2410:	200025d0 	.word	0x200025d0
    ldr v4, =_SCS_ICSR
    2414:	e000ed04 	.word	0xe000ed04

00002418 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2418:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    241c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    241e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2422:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2426:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2428:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    242c:	2902      	cmp	r1, #2
    beq _oops
    242e:	d0ff      	beq.n	2430 <_oops>

00002430 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2430:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2432:	f015 faaa 	bl	1798a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    2436:	bd01      	pop	{r0, pc}

00002438 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2438:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    243c:	9b00      	ldr	r3, [sp, #0]
    243e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2442:	490a      	ldr	r1, [pc, #40]	; (246c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2444:	9b01      	ldr	r3, [sp, #4]
    2446:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    244a:	9b02      	ldr	r3, [sp, #8]
    244c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2450:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2454:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2458:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    245c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2460:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2462:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2464:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2466:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2468:	4770      	bx	lr
    246a:	bf00      	nop
    246c:	00016e71 	.word	0x00016e71

00002470 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2470:	4a09      	ldr	r2, [pc, #36]	; (2498 <z_check_thread_stack_fail+0x28>)
{
    2472:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2474:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2476:	b170      	cbz	r0, 2496 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2478:	f113 0f16 	cmn.w	r3, #22
    247c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    247e:	d005      	beq.n	248c <z_check_thread_stack_fail+0x1c>
    2480:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    2484:	429a      	cmp	r2, r3
    2486:	d805      	bhi.n	2494 <z_check_thread_stack_fail+0x24>
    2488:	4283      	cmp	r3, r0
    248a:	d203      	bcs.n	2494 <z_check_thread_stack_fail+0x24>
		return 0;
    248c:	4281      	cmp	r1, r0
    248e:	bf28      	it	cs
    2490:	2000      	movcs	r0, #0
    2492:	4770      	bx	lr
    2494:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    2496:	4770      	bx	lr
    2498:	200025d0 	.word	0x200025d0

0000249c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    249c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    249e:	4b09      	ldr	r3, [pc, #36]	; (24c4 <arch_switch_to_main_thread+0x28>)
{
    24a0:	460d      	mov	r5, r1
    24a2:	4614      	mov	r4, r2
	_current = main_thread;
    24a4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    24a6:	f000 f9d3 	bl	2850 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    24aa:	4620      	mov	r0, r4
    24ac:	f385 8809 	msr	PSP, r5
    24b0:	2100      	movs	r1, #0
    24b2:	b663      	cpsie	if
    24b4:	f381 8811 	msr	BASEPRI, r1
    24b8:	f3bf 8f6f 	isb	sy
    24bc:	2200      	movs	r2, #0
    24be:	2300      	movs	r3, #0
    24c0:	f014 fcd6 	bl	16e70 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    24c4:	200025d0 	.word	0x200025d0

000024c8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    24c8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    24ca:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    24cc:	4a0b      	ldr	r2, [pc, #44]	; (24fc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    24ce:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    24d0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    24d2:	bf1e      	ittt	ne
	movne	r1, #0
    24d4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    24d6:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    24d8:	f018 f868 	blne	1a5ac <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    24dc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    24de:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    24e2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    24e6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    24ea:	4905      	ldr	r1, [pc, #20]	; (2500 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    24ec:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    24ee:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    24f0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    24f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    24f6:	4903      	ldr	r1, [pc, #12]	; (2504 <_isr_wrapper+0x3c>)
	bx r1
    24f8:	4708      	bx	r1
    24fa:	0000      	.short	0x0000
	ldr r2, =_kernel
    24fc:	200025d0 	.word	0x200025d0
	ldr r1, =_sw_isr_table
    2500:	0001b054 	.word	0x0001b054
	ldr r1, =z_arm_int_exit
    2504:	00002509 	.word	0x00002509

00002508 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2508:	4b04      	ldr	r3, [pc, #16]	; (251c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    250a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    250c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    250e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2510:	d003      	beq.n	251a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2512:	4903      	ldr	r1, [pc, #12]	; (2520 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2518:	600a      	str	r2, [r1, #0]

0000251a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    251a:	4770      	bx	lr
	ldr r3, =_kernel
    251c:	200025d0 	.word	0x200025d0
	ldr r1, =_SCS_ICSR
    2520:	e000ed04 	.word	0xe000ed04

00002524 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2524:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2526:	4b26      	ldr	r3, [pc, #152]	; (25c0 <mem_manage_fault+0x9c>)
{
    2528:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    252a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    252c:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    2532:	bf14      	ite	ne
    2534:	2411      	movne	r4, #17
    2536:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    2538:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    253c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    253e:	bf18      	it	ne
    2540:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2542:	0792      	lsls	r2, r2, #30
{
    2544:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2546:	d50a      	bpl.n	255e <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2548:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    254a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    254c:	0614      	lsls	r4, r2, #24
    254e:	d534      	bpl.n	25ba <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    2550:	b119      	cbz	r1, 255a <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2558:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    255a:	2413      	movs	r4, #19
    255c:	e001      	b.n	2562 <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
    255e:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2562:	4b17      	ldr	r3, [pc, #92]	; (25c0 <mem_manage_fault+0x9c>)
    2564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    2566:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    256a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    256c:	bf18      	it	ne
    256e:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    2570:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    2576:	bf18      	it	ne
    2578:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    257a:	06d2      	lsls	r2, r2, #27
    257c:	d402      	bmi.n	2584 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2580:	079b      	lsls	r3, r3, #30
    2582:	d50a      	bpl.n	259a <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2584:	4b0e      	ldr	r3, [pc, #56]	; (25c0 <mem_manage_fault+0x9c>)
    2586:	685b      	ldr	r3, [r3, #4]
    2588:	0519      	lsls	r1, r3, #20
    258a:	d506      	bpl.n	259a <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    258c:	4631      	mov	r1, r6
    258e:	f7ff ff6f 	bl	2470 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    2592:	b110      	cbz	r0, 259a <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2594:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    2598:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    259a:	4b09      	ldr	r3, [pc, #36]	; (25c0 <mem_manage_fault+0x9c>)
    259c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    259e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    25a0:	bf42      	ittt	mi
    25a2:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    25a4:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    25a8:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    25aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25ac:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    25b0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    25b2:	2300      	movs	r3, #0
    25b4:	702b      	strb	r3, [r5, #0]

	return reason;
}
    25b6:	4620      	mov	r0, r4
    25b8:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    25ba:	f06f 0015 	mvn.w	r0, #21
    25be:	e7cc      	b.n	255a <mem_manage_fault+0x36>
    25c0:	e000ed00 	.word	0xe000ed00

000025c4 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    25c4:	4b13      	ldr	r3, [pc, #76]	; (2614 <usage_fault.constprop.0+0x50>)
    25c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    25c8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    25cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    25ce:	bf14      	ite	ne
    25d0:	201e      	movne	r0, #30
    25d2:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    25d4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    25d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    25da:	bf18      	it	ne
    25dc:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    25de:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    25e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    25e4:	bf18      	it	ne
    25e6:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    25e8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    25ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    25ee:	bf18      	it	ne
    25f0:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    25f2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    25f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    25f8:	bf18      	it	ne
    25fa:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    25fc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2602:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2606:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    260a:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    260c:	bf18      	it	ne
    260e:	2024      	movne	r0, #36	; 0x24
    2610:	4770      	bx	lr
    2612:	bf00      	nop
    2614:	e000ed00 	.word	0xe000ed00

00002618 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2618:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    261a:	4b19      	ldr	r3, [pc, #100]	; (2680 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    261c:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    261e:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2620:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    2622:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    2626:	bf14      	ite	ne
    2628:	2017      	movne	r0, #23
    262a:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    262c:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2630:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    2632:	bf18      	it	ne
    2634:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2636:	05a4      	lsls	r4, r4, #22
    2638:	d509      	bpl.n	264e <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    263a:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    263c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    263e:	0400      	lsls	r0, r0, #16
    2640:	d504      	bpl.n	264c <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    2642:	b11a      	cbz	r2, 264c <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2646:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    264a:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    264c:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    264e:	4b0c      	ldr	r3, [pc, #48]	; (2680 <bus_fault.constprop.0+0x68>)
    2650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    2652:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    2658:	bf18      	it	ne
    265a:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    265c:	05d2      	lsls	r2, r2, #23
    265e:	d40c      	bmi.n	267a <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    2662:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2666:	bf18      	it	ne
    2668:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    266a:	4a05      	ldr	r2, [pc, #20]	; (2680 <bus_fault.constprop.0+0x68>)
    266c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    266e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2672:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2674:	2300      	movs	r3, #0
    2676:	700b      	strb	r3, [r1, #0]
}
    2678:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    267a:	201b      	movs	r0, #27
    267c:	e7f5      	b.n	266a <bus_fault.constprop.0+0x52>
    267e:	bf00      	nop
    2680:	e000ed00 	.word	0xe000ed00

00002684 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2684:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2686:	4b45      	ldr	r3, [pc, #276]	; (279c <z_arm_fault+0x118>)
    2688:	685b      	ldr	r3, [r3, #4]
{
    268a:	b08a      	sub	sp, #40	; 0x28
    268c:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    268e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2692:	2600      	movs	r6, #0
    2694:	f386 8811 	msr	BASEPRI, r6
    2698:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    269c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    26a0:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    26a4:	d111      	bne.n	26ca <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    26a6:	f002 000c 	and.w	r0, r2, #12
    26aa:	2808      	cmp	r0, #8
    26ac:	d00d      	beq.n	26ca <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    26ae:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    26b0:	bf4c      	ite	mi
    26b2:	460d      	movmi	r5, r1
			*nested_exc = true;
    26b4:	2601      	movpl	r6, #1
	*recoverable = false;
    26b6:	2200      	movs	r2, #0
	switch (fault) {
    26b8:	3b03      	subs	r3, #3
	*recoverable = false;
    26ba:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    26be:	2b03      	cmp	r3, #3
    26c0:	d805      	bhi.n	26ce <z_arm_fault+0x4a>
    26c2:	e8df f003 	tbb	[pc, r3]
    26c6:	5d1e      	.short	0x5d1e
    26c8:	5a61      	.short	0x5a61
		return NULL;
    26ca:	4635      	mov	r5, r6
    26cc:	e7f3      	b.n	26b6 <z_arm_fault+0x32>
    26ce:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    26d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    26d4:	b99b      	cbnz	r3, 26fe <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    26d6:	2220      	movs	r2, #32
    26d8:	4629      	mov	r1, r5
    26da:	a802      	add	r0, sp, #8
    26dc:	f015 f98e 	bl	179fc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    26e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    26e2:	2e00      	cmp	r6, #0
    26e4:	d054      	beq.n	2790 <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    26e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
    26ea:	b922      	cbnz	r2, 26f6 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    26ec:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    26f0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    26f4:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    26f6:	a902      	add	r1, sp, #8
    26f8:	4620      	mov	r0, r4
    26fa:	f015 f944 	bl	17986 <z_arm_fatal_error>
}
    26fe:	b00a      	add	sp, #40	; 0x28
    2700:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2702:	4b26      	ldr	r3, [pc, #152]	; (279c <z_arm_fault+0x118>)
    2704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2706:	0791      	lsls	r1, r2, #30
    2708:	d4e1      	bmi.n	26ce <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    270c:	2a00      	cmp	r2, #0
    270e:	dbde      	blt.n	26ce <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2712:	0052      	lsls	r2, r2, #1
    2714:	d5db      	bpl.n	26ce <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    2716:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    2718:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    271a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    271e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2720:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2724:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    2728:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    272a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    272e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    2732:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2734:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2738:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    273c:	f64d 7202 	movw	r2, #57090	; 0xdf02
    2740:	4291      	cmp	r1, r2
    2742:	d00a      	beq.n	275a <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    2744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2746:	b2d2      	uxtb	r2, r2
    2748:	b14a      	cbz	r2, 275e <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
    274a:	f10d 0207 	add.w	r2, sp, #7
    274e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2750:	4628      	mov	r0, r5
    2752:	f7ff fee7 	bl	2524 <mem_manage_fault>
		reason = usage_fault(esf);
    2756:	4604      	mov	r4, r0
		break;
    2758:	e7ba      	b.n	26d0 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    275a:	682c      	ldr	r4, [r5, #0]
    275c:	e7b8      	b.n	26d0 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    275e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2760:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    2764:	d005      	beq.n	2772 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    2766:	f10d 0107 	add.w	r1, sp, #7
    276a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    276c:	f7ff ff54 	bl	2618 <bus_fault.constprop.0>
    2770:	e7f1      	b.n	2756 <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    2772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    2778:	d3a9      	bcc.n	26ce <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    277a:	f7ff ff23 	bl	25c4 <usage_fault.constprop.0>
    277e:	e7ea      	b.n	2756 <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
    2780:	f10d 0207 	add.w	r2, sp, #7
    2784:	2100      	movs	r1, #0
    2786:	e7e3      	b.n	2750 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    2788:	f10d 0107 	add.w	r1, sp, #7
    278c:	2000      	movs	r0, #0
    278e:	e7ed      	b.n	276c <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2790:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2794:	f023 0301 	bic.w	r3, r3, #1
    2798:	e7ac      	b.n	26f4 <z_arm_fault+0x70>
    279a:	bf00      	nop
    279c:	e000ed00 	.word	0xe000ed00

000027a0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    27a0:	4a02      	ldr	r2, [pc, #8]	; (27ac <z_arm_fault_init+0xc>)
    27a2:	6953      	ldr	r3, [r2, #20]
    27a4:	f043 0310 	orr.w	r3, r3, #16
    27a8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    27aa:	4770      	bx	lr
    27ac:	e000ed00 	.word	0xe000ed00

000027b0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    27b0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    27b4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    27b8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    27ba:	4672      	mov	r2, lr
	bl z_arm_fault
    27bc:	f7ff ff62 	bl	2684 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    27c0:	bd01      	pop	{r0, pc}
    27c2:	bf00      	nop

000027c4 <z_arm_interrupt_init>:
    27c4:	4804      	ldr	r0, [pc, #16]	; (27d8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    27c6:	2300      	movs	r3, #0
    27c8:	2120      	movs	r1, #32
    27ca:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    27cc:	3301      	adds	r3, #1
    27ce:	2b27      	cmp	r3, #39	; 0x27
    27d0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    27d4:	d1f9      	bne.n	27ca <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    27d6:	4770      	bx	lr
    27d8:	e000e100 	.word	0xe000e100

000027dc <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    27dc:	f7ff fb94 	bl	1f08 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    27e0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    27e2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    27e6:	4808      	ldr	r0, [pc, #32]	; (2808 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    27e8:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    27ec:	1840      	adds	r0, r0, r1
    msr PSP, r0
    27ee:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    27f2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    27f6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    27f8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    27fa:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    27fe:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2802:	f7ff fda1 	bl	2348 <z_arm_prep_c>
    2806:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    2808:	20003e80 	.word	0x20003e80

0000280c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    280c:	4b08      	ldr	r3, [pc, #32]	; (2830 <z_impl_k_thread_abort+0x24>)
    280e:	689b      	ldr	r3, [r3, #8]
    2810:	4283      	cmp	r3, r0
    2812:	d10b      	bne.n	282c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2814:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2818:	b143      	cbz	r3, 282c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    281a:	4b06      	ldr	r3, [pc, #24]	; (2834 <z_impl_k_thread_abort+0x28>)
    281c:	685a      	ldr	r2, [r3, #4]
    281e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2822:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    282a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    282c:	f014 b866 	b.w	168fc <z_thread_abort>
    2830:	200025d0 	.word	0x200025d0
    2834:	e000ed00 	.word	0xe000ed00

00002838 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2838:	4b02      	ldr	r3, [pc, #8]	; (2844 <z_arm_configure_static_mpu_regions+0xc>)
    283a:	4a03      	ldr	r2, [pc, #12]	; (2848 <z_arm_configure_static_mpu_regions+0x10>)
    283c:	4803      	ldr	r0, [pc, #12]	; (284c <z_arm_configure_static_mpu_regions+0x14>)
    283e:	2101      	movs	r1, #1
    2840:	f000 b870 	b.w	2924 <arm_core_mpu_configure_static_mpu_regions>
    2844:	20010000 	.word	0x20010000
    2848:	20000000 	.word	0x20000000
    284c:	0001b4cc 	.word	0x0001b4cc

00002850 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2850:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2852:	4b05      	ldr	r3, [pc, #20]	; (2868 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2854:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    2856:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2858:	4a04      	ldr	r2, [pc, #16]	; (286c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    285a:	2140      	movs	r1, #64	; 0x40
    285c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2860:	4618      	mov	r0, r3
    2862:	2101      	movs	r1, #1
    2864:	f000 b868 	b.w	2938 <arm_core_mpu_configure_dynamic_mpu_regions>
    2868:	200011f4 	.word	0x200011f4
    286c:	150b0000 	.word	0x150b0000

00002870 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2870:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2872:	4e20      	ldr	r6, [pc, #128]	; (28f4 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2874:	2500      	movs	r5, #0
    2876:	428d      	cmp	r5, r1
    2878:	da39      	bge.n	28ee <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    287a:	6844      	ldr	r4, [r0, #4]
    287c:	b374      	cbz	r4, 28dc <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    287e:	b153      	cbz	r3, 2896 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2880:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2884:	ea14 0f0c 	tst.w	r4, ip
    2888:	d12f      	bne.n	28ea <mpu_configure_regions+0x7a>
		&&
    288a:	2c1f      	cmp	r4, #31
    288c:	d92d      	bls.n	28ea <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    288e:	6807      	ldr	r7, [r0, #0]
		&&
    2890:	ea1c 0f07 	tst.w	ip, r7
    2894:	d129      	bne.n	28ea <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2896:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2898:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    289a:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    289e:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    28a2:	d91e      	bls.n	28e2 <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    28a4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    28a8:	d81d      	bhi.n	28e6 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    28aa:	3c01      	subs	r4, #1
    28ac:	fab4 f484 	clz	r4, r4
    28b0:	f1c4 041f 	rsb	r4, r4, #31
    28b4:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    28b6:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    28ba:	ea4c 0c04 	orr.w	ip, ip, r4
    28be:	d814      	bhi.n	28ea <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28c0:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    28c4:	4314      	orrs	r4, r2
    28c6:	f044 0410 	orr.w	r4, r4, #16
    28ca:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28ce:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    28d2:	f04c 0401 	orr.w	r4, ip, #1
    28d6:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    28da:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    28dc:	3501      	adds	r5, #1
    28de:	300c      	adds	r0, #12
    28e0:	e7c9      	b.n	2876 <mpu_configure_regions+0x6>
		return REGION_32B;
    28e2:	2408      	movs	r4, #8
    28e4:	e7e7      	b.n	28b6 <mpu_configure_regions+0x46>
		return REGION_4G;
    28e6:	243e      	movs	r4, #62	; 0x3e
    28e8:	e7e5      	b.n	28b6 <mpu_configure_regions+0x46>
			return -EINVAL;
    28ea:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    28ee:	4610      	mov	r0, r2
    28f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28f2:	bf00      	nop
    28f4:	e000ed00 	.word	0xe000ed00

000028f8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    28f8:	4b04      	ldr	r3, [pc, #16]	; (290c <arm_core_mpu_enable+0x14>)
    28fa:	2205      	movs	r2, #5
    28fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2900:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2904:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2908:	4770      	bx	lr
    290a:	bf00      	nop
    290c:	e000ed00 	.word	0xe000ed00

00002910 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2910:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2914:	4b02      	ldr	r3, [pc, #8]	; (2920 <arm_core_mpu_disable+0x10>)
    2916:	2200      	movs	r2, #0
    2918:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    291c:	4770      	bx	lr
    291e:	bf00      	nop
    2920:	e000ed00 	.word	0xe000ed00

00002924 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2924:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2926:	4c03      	ldr	r4, [pc, #12]	; (2934 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2928:	2301      	movs	r3, #1
    292a:	7822      	ldrb	r2, [r4, #0]
    292c:	f7ff ffa0 	bl	2870 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2930:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2932:	bd10      	pop	{r4, pc}
    2934:	2000262f 	.word	0x2000262f

00002938 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    2938:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    293a:	4a09      	ldr	r2, [pc, #36]	; (2960 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    293c:	2300      	movs	r3, #0
    293e:	7812      	ldrb	r2, [r2, #0]
    2940:	f7ff ff96 	bl	2870 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2944:	f110 0f16 	cmn.w	r0, #22
    2948:	d002      	beq.n	2950 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    294a:	4a06      	ldr	r2, [pc, #24]	; (2964 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    294c:	2807      	cmp	r0, #7
    294e:	dd00      	ble.n	2952 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2950:	bd08      	pop	{r3, pc}
    2952:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    2956:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    295a:	3001      	adds	r0, #1
    295c:	e7f6      	b.n	294c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    295e:	bf00      	nop
    2960:	2000262f 	.word	0x2000262f
    2964:	e000ed00 	.word	0xe000ed00

00002968 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2968:	4914      	ldr	r1, [pc, #80]	; (29bc <z_arm_mpu_init+0x54>)
    296a:	6808      	ldr	r0, [r1, #0]
    296c:	2808      	cmp	r0, #8
{
    296e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2970:	d821      	bhi.n	29b6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2972:	f7ff ffcd 	bl	2910 <arm_core_mpu_disable>
    2976:	4c12      	ldr	r4, [pc, #72]	; (29c0 <z_arm_mpu_init+0x58>)
    2978:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    297a:	2200      	movs	r2, #0
    297c:	4290      	cmp	r0, r2
    297e:	f101 010c 	add.w	r1, r1, #12
    2982:	d105      	bne.n	2990 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2984:	4b0f      	ldr	r3, [pc, #60]	; (29c4 <z_arm_mpu_init+0x5c>)
    2986:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2988:	f7ff ffb6 	bl	28f8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    298c:	2000      	movs	r0, #0
}
    298e:	bd10      	pop	{r4, pc}
    2990:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2994:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2998:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    299c:	4313      	orrs	r3, r2
    299e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    29a2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    29a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    29aa:	f043 0301 	orr.w	r3, r3, #1
    29ae:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    29b2:	3201      	adds	r2, #1
    29b4:	e7e2      	b.n	297c <z_arm_mpu_init+0x14>
		return -1;
    29b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    29ba:	e7e8      	b.n	298e <z_arm_mpu_init+0x26>
    29bc:	0001b4d8 	.word	0x0001b4d8
    29c0:	e000ed00 	.word	0xe000ed00
    29c4:	2000262f 	.word	0x2000262f

000029c8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    29c8:	4b01      	ldr	r3, [pc, #4]	; (29d0 <__stdout_hook_install+0x8>)
    29ca:	6018      	str	r0, [r3, #0]
}
    29cc:	4770      	bx	lr
    29ce:	bf00      	nop
    29d0:	200001a0 	.word	0x200001a0

000029d4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    29d4:	f04f 0220 	mov.w	r2, #32
    29d8:	f3ef 8311 	mrs	r3, BASEPRI
    29dc:	f382 8812 	msr	BASEPRI_MAX, r2
    29e0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    29e4:	4a04      	ldr	r2, [pc, #16]	; (29f8 <nordicsemi_nrf52_init+0x24>)
    29e6:	2101      	movs	r1, #1
    29e8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    29ec:	f383 8811 	msr	BASEPRI, r3
    29f0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    29f4:	2000      	movs	r0, #0
    29f6:	4770      	bx	lr
    29f8:	4001e000 	.word	0x4001e000

000029fc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    29fc:	b120      	cbz	r0, 2a08 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    29fe:	4b03      	ldr	r3, [pc, #12]	; (2a0c <arch_busy_wait+0x10>)
    2a00:	0180      	lsls	r0, r0, #6
    2a02:	f043 0301 	orr.w	r3, r3, #1
    2a06:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2a08:	4770      	bx	lr
    2a0a:	bf00      	nop
    2a0c:	0001b3c0 	.word	0x0001b3c0

00002a10 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
    2a10:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    2a12:	4804      	ldr	r0, [pc, #16]	; (2a24 <xoshiro128_initialize+0x14>)
    2a14:	f017 fcd8 	bl	1a3c8 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
    2a18:	2800      	cmp	r0, #0
}
    2a1a:	bf0c      	ite	eq
    2a1c:	f06f 0012 	mvneq.w	r0, #18
    2a20:	2000      	movne	r0, #0
    2a22:	bd08      	pop	{r3, pc}
    2a24:	0001af94 	.word	0x0001af94

00002a28 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
    2a28:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
    2a2a:	4d0a      	ldr	r5, [pc, #40]	; (2a54 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    2a2c:	4b0a      	ldr	r3, [pc, #40]	; (2a58 <long_wq_init+0x30>)
{
    2a2e:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    2a30:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
    2a32:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    2a34:	9302      	str	r3, [sp, #8]
    2a36:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
    2a38:	f017 ff46 	bl	1a8c8 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    2a3c:	ab02      	add	r3, sp, #8
    2a3e:	9300      	str	r3, [sp, #0]
    2a40:	4628      	mov	r0, r5
    2a42:	4906      	ldr	r1, [pc, #24]	; (2a5c <long_wq_init+0x34>)
    2a44:	230a      	movs	r3, #10
    2a46:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    2a4a:	f013 fba5 	bl	16198 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    2a4e:	4620      	mov	r0, r4
    2a50:	b005      	add	sp, #20
    2a52:	bd30      	pop	{r4, r5, pc}
    2a54:	20000ab0 	.word	0x20000ab0
    2a58:	0001cbc7 	.word	0x0001cbc7
    2a5c:	20002ec0 	.word	0x20002ec0

00002a60 <bt_long_wq_schedule>:
{
    2a60:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    2a62:	4801      	ldr	r0, [pc, #4]	; (2a68 <bt_long_wq_schedule+0x8>)
    2a64:	f013 bbd0 	b.w	16208 <k_work_schedule_for_queue>
    2a68:	20000ab0 	.word	0x20000ab0

00002a6c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    2a6c:	b430      	push	{r4, r5}
    2a6e:	4603      	mov	r3, r0
    2a70:	4608      	mov	r0, r1
	switch (src->type) {
    2a72:	781a      	ldrb	r2, [r3, #0]
    2a74:	2a01      	cmp	r2, #1
    2a76:	d013      	beq.n	2aa0 <uuid_to_uuid128+0x34>
    2a78:	2a02      	cmp	r2, #2
    2a7a:	d026      	beq.n	2aca <uuid_to_uuid128+0x5e>
    2a7c:	b972      	cbnz	r2, 2a9c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    2a7e:	4a15      	ldr	r2, [pc, #84]	; (2ad4 <uuid_to_uuid128+0x68>)
    2a80:	f102 0410 	add.w	r4, r2, #16
    2a84:	f852 5b04 	ldr.w	r5, [r2], #4
    2a88:	f841 5b04 	str.w	r5, [r1], #4
    2a8c:	42a2      	cmp	r2, r4
    2a8e:	d1f9      	bne.n	2a84 <uuid_to_uuid128+0x18>
    2a90:	7812      	ldrb	r2, [r2, #0]
    2a92:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    2a94:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2a96:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    2a98:	0a1b      	lsrs	r3, r3, #8
    2a9a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    2a9c:	bc30      	pop	{r4, r5}
    2a9e:	4770      	bx	lr
		*dst = uuid128_base;
    2aa0:	4a0c      	ldr	r2, [pc, #48]	; (2ad4 <uuid_to_uuid128+0x68>)
    2aa2:	f102 0410 	add.w	r4, r2, #16
    2aa6:	f852 5b04 	ldr.w	r5, [r2], #4
    2aaa:	f841 5b04 	str.w	r5, [r1], #4
    2aae:	42a2      	cmp	r2, r4
    2ab0:	d1f9      	bne.n	2aa6 <uuid_to_uuid128+0x3a>
    2ab2:	7812      	ldrb	r2, [r2, #0]
    2ab4:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    2ab6:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
    2ab8:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    2aba:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    2abe:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    2ac0:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    2ac2:	0a1b      	lsrs	r3, r3, #8
    2ac4:	7382      	strb	r2, [r0, #14]
    2ac6:	7403      	strb	r3, [r0, #16]
}
    2ac8:	e7e8      	b.n	2a9c <uuid_to_uuid128+0x30>
}
    2aca:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    2acc:	2211      	movs	r2, #17
    2ace:	4619      	mov	r1, r3
    2ad0:	f014 bf94 	b.w	179fc <memcpy>
    2ad4:	0001cbd0 	.word	0x0001cbd0

00002ad8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    2ad8:	b538      	push	{r3, r4, r5, lr}
    2ada:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    2adc:	4805      	ldr	r0, [pc, #20]	; (2af4 <bt_buf_get_rx+0x1c>)
    2ade:	f016 feb9 	bl	19854 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    2ae2:	4604      	mov	r4, r0
    2ae4:	b120      	cbz	r0, 2af0 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    2ae6:	2100      	movs	r1, #0
    2ae8:	300c      	adds	r0, #12
    2aea:	f016 feee 	bl	198ca <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    2aee:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    2af0:	4620      	mov	r0, r4
    2af2:	bd38      	pop	{r3, r4, r5, pc}
    2af4:	200009d8 	.word	0x200009d8

00002af8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    2af8:	b510      	push	{r4, lr}
    2afa:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    2afc:	490a      	ldr	r1, [pc, #40]	; (2b28 <bt_buf_get_cmd_complete+0x30>)
{
    2afe:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    2b00:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
    2b04:	b920      	cbnz	r0, 2b10 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    2b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2b0a:	2001      	movs	r0, #1
    2b0c:	f7ff bfe4 	b.w	2ad8 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    2b10:	f016 fea9 	bl	19866 <net_buf_ref>
    2b14:	2301      	movs	r3, #1
		buf->len = 0U;
    2b16:	2100      	movs	r1, #0
    2b18:	7603      	strb	r3, [r0, #24]
    2b1a:	8201      	strh	r1, [r0, #16]
		buf = net_buf_ref(bt_dev.sent_cmd);
    2b1c:	4604      	mov	r4, r0
    2b1e:	300c      	adds	r0, #12
    2b20:	f016 fed3 	bl	198ca <net_buf_simple_reserve>
}
    2b24:	4620      	mov	r0, r4
    2b26:	bd10      	pop	{r4, pc}
    2b28:	20000000 	.word	0x20000000

00002b2c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    2b2c:	b570      	push	{r4, r5, r6, lr}
    2b2e:	4604      	mov	r4, r0
	switch (evt) {
    2b30:	2c0f      	cmp	r4, #15
{
    2b32:	460d      	mov	r5, r1
    2b34:	4610      	mov	r0, r2
    2b36:	4619      	mov	r1, r3
	switch (evt) {
    2b38:	d805      	bhi.n	2b46 <bt_buf_get_evt+0x1a>
    2b3a:	2c0d      	cmp	r4, #13
    2b3c:	d90d      	bls.n	2b5a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    2b3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    2b42:	f7ff bfd9 	b.w	2af8 <bt_buf_get_cmd_complete>
	switch (evt) {
    2b46:	2c13      	cmp	r4, #19
    2b48:	d107      	bne.n	2b5a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
    2b4a:	480c      	ldr	r0, [pc, #48]	; (2b7c <bt_buf_get_evt+0x50>)
    2b4c:	f016 fe82 	bl	19854 <net_buf_alloc_fixed>
			if (buf) {
    2b50:	4604      	mov	r4, r0
    2b52:	b938      	cbnz	r0, 2b64 <bt_buf_get_evt+0x38>
{
    2b54:	2400      	movs	r4, #0
}
    2b56:	4620      	mov	r0, r4
    2b58:	bd70      	pop	{r4, r5, r6, pc}
    2b5a:	4602      	mov	r2, r0
    2b5c:	460b      	mov	r3, r1
		if (discardable) {
    2b5e:	b145      	cbz	r5, 2b72 <bt_buf_get_evt+0x46>
    2b60:	4807      	ldr	r0, [pc, #28]	; (2b80 <bt_buf_get_evt+0x54>)
    2b62:	e7f3      	b.n	2b4c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
    2b64:	2100      	movs	r1, #0
    2b66:	300c      	adds	r0, #12
    2b68:	f016 feaf 	bl	198ca <net_buf_simple_reserve>
    2b6c:	2301      	movs	r3, #1
    2b6e:	7623      	strb	r3, [r4, #24]
}
    2b70:	e7f1      	b.n	2b56 <bt_buf_get_evt+0x2a>
}
    2b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2b76:	2001      	movs	r0, #1
    2b78:	f7ff bfae 	b.w	2ad8 <bt_buf_get_rx>
    2b7c:	20000a04 	.word	0x20000a04
    2b80:	20000954 	.word	0x20000954

00002b84 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    2b84:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    2b86:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    2b88:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	LOG_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle, evt->reason);

	if (evt->status) {
    2b8c:	781b      	ldrb	r3, [r3, #0]
    2b8e:	b963      	cbnz	r3, 2baa <hci_disconn_complete_prio+0x26>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    2b90:	4620      	mov	r0, r4
    2b92:	f001 fd2d 	bl	45f0 <bt_conn_lookup_handle>
	if (!conn) {
    2b96:	4605      	mov	r5, r0
    2b98:	b940      	cbnz	r0, 2bac <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    2b9a:	4b08      	ldr	r3, [pc, #32]	; (2bbc <hci_disconn_complete_prio+0x38>)
    2b9c:	881a      	ldrh	r2, [r3, #0]
    2b9e:	b922      	cbnz	r2, 2baa <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    2ba0:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    2ba4:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    2ba8:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    2baa:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    2bac:	2101      	movs	r1, #1
    2bae:	f001 fd27 	bl	4600 <bt_conn_set_state>
	bt_conn_unref(conn);
    2bb2:	4628      	mov	r0, r5
}
    2bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    2bb8:	f015 bc5f 	b.w	1847a <bt_conn_unref>
    2bbc:	2000260c 	.word	0x2000260c

00002bc0 <find_pending_connect.part.0>:
	cp->phy_opts = phy_opts;

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
}

static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    2bc0:	b510      	push	{r4, lr}

		return conn;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    2bc2:	4c08      	ldr	r4, [pc, #32]	; (2be4 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    2bc4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    2bc6:	2205      	movs	r2, #5
    2bc8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    2bcc:	f001 feae 	bl	492c <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_DIR_ADV);
		if (!conn) {
    2bd0:	b938      	cbnz	r0, 2be2 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    2bd2:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    2bd6:	4904      	ldr	r1, [pc, #16]	; (2be8 <find_pending_connect.part.0+0x28>)

		return conn;
	}

	return NULL;
}
    2bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    2bdc:	2204      	movs	r2, #4
    2bde:	f001 bea5 	b.w	492c <bt_conn_lookup_state_le>
}
    2be2:	bd10      	pop	{r4, pc}
    2be4:	20000000 	.word	0x20000000
    2be8:	0001cbad 	.word	0x0001cbad

00002bec <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    2bec:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    2bee:	2101      	movs	r1, #1
    2bf0:	4604      	mov	r4, r0
    2bf2:	300c      	adds	r0, #12
    2bf4:	f016 fe94 	bl	19920 <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
    2bf8:	4621      	mov	r1, r4
    2bfa:	4a03      	ldr	r2, [pc, #12]	; (2c08 <hci_le_meta_event+0x1c>)
    2bfc:	7800      	ldrb	r0, [r0, #0]
	evt = net_buf_pull_mem(buf, sizeof(*evt));

	LOG_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
}
    2bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
    2c02:	2307      	movs	r3, #7
    2c04:	f014 bff4 	b.w	17bf0 <handle_event_common.isra.0>
    2c08:	0001b570 	.word	0x0001b570

00002c0c <hci_cmd_done>:
{
    2c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c0e:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2c10:	7a90      	ldrb	r0, [r2, #10]
{
    2c12:	460e      	mov	r6, r1
    2c14:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2c16:	f010 faad 	bl	13174 <net_buf_pool_get>
    2c1a:	4b28      	ldr	r3, [pc, #160]	; (2cbc <hci_cmd_done+0xb0>)
    2c1c:	4283      	cmp	r3, r0
    2c1e:	d14b      	bne.n	2cb8 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
    2c20:	4620      	mov	r0, r4
    2c22:	f010 faaf 	bl	13184 <net_buf_id>
    2c26:	4d26      	ldr	r5, [pc, #152]	; (2cc0 <hci_cmd_done+0xb4>)
    2c28:	230c      	movs	r3, #12
    2c2a:	fb03 5000 	mla	r0, r3, r0, r5
    2c2e:	8843      	ldrh	r3, [r0, #2]
    2c30:	42bb      	cmp	r3, r7
    2c32:	d141      	bne.n	2cb8 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
    2c34:	4f23      	ldr	r7, [pc, #140]	; (2cc4 <hci_cmd_done+0xb8>)
    2c36:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    2c3a:	b120      	cbz	r0, 2c46 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    2c3c:	f010 fb5c 	bl	132f8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2c40:	2300      	movs	r3, #0
    2c42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    2c46:	4620      	mov	r0, r4
    2c48:	f010 fa9c 	bl	13184 <net_buf_id>
    2c4c:	270c      	movs	r7, #12
    2c4e:	fb07 5000 	mla	r0, r7, r0, r5
    2c52:	6843      	ldr	r3, [r0, #4]
    2c54:	b19b      	cbz	r3, 2c7e <hci_cmd_done+0x72>
    2c56:	b996      	cbnz	r6, 2c7e <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    2c58:	4620      	mov	r0, r4
    2c5a:	f010 fa93 	bl	13184 <net_buf_id>
    2c5e:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2c62:	2101      	movs	r1, #1
    2c64:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    2c66:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    2c6a:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    2c6c:	f003 071f 	and.w	r7, r3, #31
    2c70:	40b9      	lsls	r1, r7
	if (val) {
    2c72:	095b      	lsrs	r3, r3, #5
    2c74:	b1d2      	cbz	r2, 2cac <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2c76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    2c7a:	f014 ff8c 	bl	17b96 <atomic_or>
	if (cmd(buf)->sync) {
    2c7e:	4620      	mov	r0, r4
    2c80:	f010 fa80 	bl	13184 <net_buf_id>
    2c84:	270c      	movs	r7, #12
    2c86:	fb07 5000 	mla	r0, r7, r0, r5
    2c8a:	6883      	ldr	r3, [r0, #8]
    2c8c:	b1a3      	cbz	r3, 2cb8 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
    2c8e:	4620      	mov	r0, r4
    2c90:	f010 fa78 	bl	13184 <net_buf_id>
    2c94:	4378      	muls	r0, r7
    2c96:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    2c98:	4620      	mov	r0, r4
    2c9a:	f010 fa73 	bl	13184 <net_buf_id>
    2c9e:	fb07 5500 	mla	r5, r7, r0, r5
    2ca2:	68a8      	ldr	r0, [r5, #8]
}
    2ca4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2ca8:	f013 b8d2 	b.w	15e50 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2cac:	43c9      	mvns	r1, r1
    2cae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    2cb2:	f014 ffb4 	bl	17c1e <atomic_and.isra.0>
    2cb6:	e7e2      	b.n	2c7e <hci_cmd_done+0x72>
    2cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cba:	bf00      	nop
    2cbc:	200009ac 	.word	0x200009ac
    2cc0:	20001200 	.word	0x20001200
    2cc4:	20000000 	.word	0x20000000

00002cc8 <hci_cmd_status>:
{
    2cc8:	b538      	push	{r3, r4, r5, lr}
    2cca:	2104      	movs	r1, #4
    2ccc:	4604      	mov	r4, r0
    2cce:	300c      	adds	r0, #12
    2cd0:	f016 fe26 	bl	19920 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    2cd4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    2cd6:	7801      	ldrb	r1, [r0, #0]
    2cd8:	8840      	ldrh	r0, [r0, #2]
    2cda:	4622      	mov	r2, r4
    2cdc:	f7ff ff96 	bl	2c0c <hci_cmd_done>
	if (ncmd) {
    2ce0:	b125      	cbz	r5, 2cec <hci_cmd_status+0x24>
    2ce2:	4803      	ldr	r0, [pc, #12]	; (2cf0 <hci_cmd_status+0x28>)
}
    2ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2ce8:	f013 b8b2 	b.w	15e50 <z_impl_k_sem_give>
    2cec:	bd38      	pop	{r3, r4, r5, pc}
    2cee:	bf00      	nop
    2cf0:	20000118 	.word	0x20000118

00002cf4 <hci_cmd_complete>:
{
    2cf4:	b538      	push	{r3, r4, r5, lr}
    2cf6:	2103      	movs	r1, #3
    2cf8:	4604      	mov	r4, r0
    2cfa:	300c      	adds	r0, #12
    2cfc:	f016 fe10 	bl	19920 <net_buf_simple_pull_mem>
	status = buf->data[0];
    2d00:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
    2d02:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    2d04:	7819      	ldrb	r1, [r3, #0]
    2d06:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    2d0a:	4622      	mov	r2, r4
    2d0c:	f7ff ff7e 	bl	2c0c <hci_cmd_done>
	if (ncmd) {
    2d10:	b125      	cbz	r5, 2d1c <hci_cmd_complete+0x28>
    2d12:	4803      	ldr	r0, [pc, #12]	; (2d20 <hci_cmd_complete+0x2c>)
}
    2d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2d18:	f013 b89a 	b.w	15e50 <z_impl_k_sem_give>
    2d1c:	bd38      	pop	{r3, r4, r5, pc}
    2d1e:	bf00      	nop
    2d20:	20000118 	.word	0x20000118

00002d24 <bt_hci_cmd_state_set_init>:
{
    2d24:	b510      	push	{r4, lr}
	state->bit = bit;
    2d26:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    2d2a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2d2e:	720b      	strb	r3, [r1, #8]
{
    2d30:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    2d32:	f010 fa27 	bl	13184 <net_buf_id>
    2d36:	4b03      	ldr	r3, [pc, #12]	; (2d44 <bt_hci_cmd_state_set_init+0x20>)
    2d38:	220c      	movs	r2, #12
    2d3a:	fb02 3300 	mla	r3, r2, r0, r3
    2d3e:	605c      	str	r4, [r3, #4]
}
    2d40:	bd10      	pop	{r4, pc}
    2d42:	bf00      	nop
    2d44:	20001200 	.word	0x20001200

00002d48 <bt_hci_cmd_create>:
{
    2d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    2d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d54:	4606      	mov	r6, r0
    2d56:	4817      	ldr	r0, [pc, #92]	; (2db4 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    2d58:	4d17      	ldr	r5, [pc, #92]	; (2db8 <bt_hci_cmd_create+0x70>)
{
    2d5a:	460f      	mov	r7, r1
    2d5c:	f016 fd7a 	bl	19854 <net_buf_alloc_fixed>
    2d60:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    2d62:	f100 0a0c 	add.w	sl, r0, #12
    2d66:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    2d68:	f04f 0800 	mov.w	r8, #0
    2d6c:	4650      	mov	r0, sl
    2d6e:	f016 fdac 	bl	198ca <net_buf_simple_reserve>
    2d72:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
    2d76:	4620      	mov	r0, r4
    2d78:	f010 fa04 	bl	13184 <net_buf_id>
    2d7c:	f04f 090c 	mov.w	r9, #12
    2d80:	fb09 5000 	mla	r0, r9, r0, r5
    2d84:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    2d86:	4620      	mov	r0, r4
    2d88:	f010 f9fc 	bl	13184 <net_buf_id>
    2d8c:	fb09 5000 	mla	r0, r9, r0, r5
    2d90:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    2d94:	4620      	mov	r0, r4
    2d96:	f010 f9f5 	bl	13184 <net_buf_id>
    2d9a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    2d9e:	2103      	movs	r1, #3
    2da0:	4650      	mov	r0, sl
    2da2:	f8c5 8004 	str.w	r8, [r5, #4]
    2da6:	f016 fd94 	bl	198d2 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    2daa:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    2dac:	7087      	strb	r7, [r0, #2]
}
    2dae:	4620      	mov	r0, r4
    2db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2db4:	200009ac 	.word	0x200009ac
    2db8:	20001200 	.word	0x20001200

00002dbc <bt_hci_cmd_send_sync>:
{
    2dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2dc0:	4607      	mov	r7, r0
    2dc2:	b086      	sub	sp, #24
    2dc4:	4615      	mov	r5, r2
	if (!buf) {
    2dc6:	460c      	mov	r4, r1
    2dc8:	b921      	cbnz	r1, 2dd4 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    2dca:	f7ff ffbd 	bl	2d48 <bt_hci_cmd_create>
		if (!buf) {
    2dce:	4604      	mov	r4, r0
    2dd0:	2800      	cmp	r0, #0
    2dd2:	d04b      	beq.n	2e6c <bt_hci_cmd_send_sync+0xb0>
	return z_impl_k_sem_init(sem, initial_count, limit);
    2dd4:	2201      	movs	r2, #1
    2dd6:	2100      	movs	r1, #0
    2dd8:	4668      	mov	r0, sp
    2dda:	f017 fcb4 	bl	1a746 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    2dde:	4620      	mov	r0, r4
    2de0:	f010 f9d0 	bl	13184 <net_buf_id>
    2de4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 2e74 <bt_hci_cmd_send_sync+0xb8>
    2de8:	230c      	movs	r3, #12
    2dea:	fb03 8000 	mla	r0, r3, r0, r8
    2dee:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    2df2:	4620      	mov	r0, r4
    2df4:	f016 fd37 	bl	19866 <net_buf_ref>
    2df8:	4601      	mov	r1, r0
    2dfa:	481f      	ldr	r0, [pc, #124]	; (2e78 <bt_hci_cmd_send_sync+0xbc>)
    2dfc:	f016 fd31 	bl	19862 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    2e00:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    2e04:	2300      	movs	r3, #0
    2e06:	4668      	mov	r0, sp
    2e08:	f013 f848 	bl	15e9c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    2e0c:	4606      	mov	r6, r0
    2e0e:	b188      	cbz	r0, 2e34 <bt_hci_cmd_send_sync+0x78>
    2e10:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    2e14:	4a19      	ldr	r2, [pc, #100]	; (2e7c <bt_hci_cmd_send_sync+0xc0>)
    2e16:	491a      	ldr	r1, [pc, #104]	; (2e80 <bt_hci_cmd_send_sync+0xc4>)
    2e18:	481a      	ldr	r0, [pc, #104]	; (2e84 <bt_hci_cmd_send_sync+0xc8>)
    2e1a:	f014 fb62 	bl	174e2 <assert_print>
    2e1e:	481a      	ldr	r0, [pc, #104]	; (2e88 <bt_hci_cmd_send_sync+0xcc>)
    2e20:	4632      	mov	r2, r6
    2e22:	4639      	mov	r1, r7
    2e24:	f014 fb5d 	bl	174e2 <assert_print>
    2e28:	4040      	eors	r0, r0
    2e2a:	f380 8811 	msr	BASEPRI, r0
    2e2e:	f04f 0003 	mov.w	r0, #3
    2e32:	df02      	svc	2
	status = cmd(buf)->status;
    2e34:	4620      	mov	r0, r4
    2e36:	f010 f9a5 	bl	13184 <net_buf_id>
    2e3a:	230c      	movs	r3, #12
    2e3c:	4358      	muls	r0, r3
    2e3e:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    2e42:	b15e      	cbz	r6, 2e5c <bt_hci_cmd_send_sync+0xa0>
		net_buf_unref(buf);
    2e44:	4620      	mov	r0, r4
    2e46:	f010 fa57 	bl	132f8 <net_buf_unref>
			return -ECONNREFUSED;
    2e4a:	2e09      	cmp	r6, #9
    2e4c:	bf14      	ite	ne
    2e4e:	f06f 0004 	mvnne.w	r0, #4
    2e52:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    2e56:	b006      	add	sp, #24
    2e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    2e5c:	b115      	cbz	r5, 2e64 <bt_hci_cmd_send_sync+0xa8>
		*rsp = buf;
    2e5e:	602c      	str	r4, [r5, #0]
	return 0;
    2e60:	2000      	movs	r0, #0
    2e62:	e7f8      	b.n	2e56 <bt_hci_cmd_send_sync+0x9a>
		net_buf_unref(buf);
    2e64:	4620      	mov	r0, r4
    2e66:	f010 fa47 	bl	132f8 <net_buf_unref>
    2e6a:	e7f9      	b.n	2e60 <bt_hci_cmd_send_sync+0xa4>
			return -ENOBUFS;
    2e6c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    2e70:	e7f1      	b.n	2e56 <bt_hci_cmd_send_sync+0x9a>
    2e72:	bf00      	nop
    2e74:	20001200 	.word	0x20001200
    2e78:	20000134 	.word	0x20000134
    2e7c:	0001cbe9 	.word	0x0001cbe9
    2e80:	0001cc1d 	.word	0x0001cc1d
    2e84:	0001cc26 	.word	0x0001cc26
    2e88:	0001cc43 	.word	0x0001cc43

00002e8c <bt_hci_le_rand>:
{
    2e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    2e8e:	4b14      	ldr	r3, [pc, #80]	; (2ee0 <bt_hci_le_rand+0x54>)
    2e90:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
    2e94:	2b00      	cmp	r3, #0
{
    2e96:	4605      	mov	r5, r0
    2e98:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    2e9a:	da1d      	bge.n	2ed8 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    2e9c:	b914      	cbnz	r4, 2ea4 <bt_hci_le_rand+0x18>
	return 0;
    2e9e:	4620      	mov	r0, r4
}
    2ea0:	b003      	add	sp, #12
    2ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    2ea4:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    2ea6:	aa01      	add	r2, sp, #4
    2ea8:	f04f 0100 	mov.w	r1, #0
    2eac:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
    2eb0:	4626      	mov	r6, r4
    2eb2:	bf28      	it	cs
    2eb4:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    2eb6:	f7ff ff81 	bl	2dbc <bt_hci_cmd_send_sync>
		if (err) {
    2eba:	2800      	cmp	r0, #0
    2ebc:	d1f0      	bne.n	2ea0 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    2ebe:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    2ec0:	68f9      	ldr	r1, [r7, #12]
    2ec2:	4632      	mov	r2, r6
    2ec4:	3101      	adds	r1, #1
    2ec6:	4628      	mov	r0, r5
    2ec8:	f014 fd98 	bl	179fc <memcpy>
		net_buf_unref(rsp);
    2ecc:	4638      	mov	r0, r7
    2ece:	f010 fa13 	bl	132f8 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    2ed2:	4435      	add	r5, r6
		len -= count;
    2ed4:	1ba4      	subs	r4, r4, r6
    2ed6:	e7e1      	b.n	2e9c <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    2ed8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2edc:	e7e0      	b.n	2ea0 <bt_hci_le_rand+0x14>
    2ede:	bf00      	nop
    2ee0:	20000000 	.word	0x20000000

00002ee4 <bt_hci_le_enh_conn_complete>:
{
    2ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    2ee8:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
    2eec:	4a7c      	ldr	r2, [pc, #496]	; (30e0 <bt_hci_le_enh_conn_complete+0x1fc>)
	handle |= ~BT_ACL_HANDLE_MASK;
    2eee:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
    2ef2:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    2ef4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    2ef8:	b29b      	uxth	r3, r3
    2efa:	4299      	cmp	r1, r3
    2efc:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    2f00:	bf08      	it	eq
    2f02:	8016      	strheq	r6, [r2, #0]
	if (evt->status) {
    2f04:	7804      	ldrb	r4, [r0, #0]
{
    2f06:	b089      	sub	sp, #36	; 0x24
    2f08:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    2f0a:	fa1f f887 	uxth.w	r8, r7
			return true;
    2f0e:	bf08      	it	eq
    2f10:	2601      	moveq	r6, #1
	if (evt->status) {
    2f12:	b1bc      	cbz	r4, 2f44 <bt_hci_le_enh_conn_complete+0x60>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    2f14:	2c3c      	cmp	r4, #60	; 0x3c
    2f16:	d130      	bne.n	2f7a <bt_hci_le_enh_conn_complete+0x96>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    2f18:	f000 ff66 	bl	3de8 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2f1c:	f06f 0180 	mvn.w	r1, #128	; 0x80
    2f20:	3010      	adds	r0, #16
    2f22:	f014 fe7c 	bl	17c1e <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    2f26:	2000      	movs	r0, #0
    2f28:	f7ff fe4a 	bl	2bc0 <find_pending_connect.part.0>
		if (!conn) {
    2f2c:	4605      	mov	r5, r0
    2f2e:	b320      	cbz	r0, 2f7a <bt_hci_le_enh_conn_complete+0x96>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    2f30:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2f32:	2100      	movs	r1, #0
    2f34:	f001 fb64 	bl	4600 <bt_conn_set_state>
		bt_conn_unref(conn);
    2f38:	4628      	mov	r0, r5
}
    2f3a:	b009      	add	sp, #36	; 0x24
    2f3c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    2f40:	f015 ba9b 	b.w	1847a <bt_conn_unref>
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    2f44:	f100 0904 	add.w	r9, r0, #4
    2f48:	4648      	mov	r0, r9
    2f4a:	f014 fde1 	bl	17b10 <bt_addr_le_is_resolved>
    2f4e:	b1b8      	cbz	r0, 2f80 <bt_hci_le_enh_conn_complete+0x9c>
		bt_addr_le_copy_resolved(&id_addr, &evt->peer_addr);
    2f50:	4649      	mov	r1, r9
    2f52:	a806      	add	r0, sp, #24
    2f54:	f014 fdd2 	bl	17afc <bt_addr_le_copy_resolved>
 *  @param dst Bluetooth device address destination buffer.
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2f58:	2206      	movs	r2, #6
    2f5a:	f105 0111 	add.w	r1, r5, #17
    2f5e:	f10d 0011 	add.w	r0, sp, #17
    2f62:	f014 fd4b 	bl	179fc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    2f66:	2301      	movs	r3, #1
    2f68:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    2f6c:	78eb      	ldrb	r3, [r5, #3]
    2f6e:	2b01      	cmp	r3, #1
    2f70:	d01b      	beq.n	2faa <bt_hci_le_enh_conn_complete+0xc6>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    2f72:	211f      	movs	r1, #31
    2f74:	4640      	mov	r0, r8
    2f76:	f014 ff3d 	bl	17df4 <bt_hci_disconnect>
}
    2f7a:	b009      	add	sp, #36	; 0x24
    2f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    2f80:	78eb      	ldrb	r3, [r5, #3]
    2f82:	2b01      	cmp	r3, #1
    2f84:	bf04      	itt	eq
    2f86:	4b57      	ldreq	r3, [pc, #348]	; (30e4 <bt_hci_le_enh_conn_complete+0x200>)
    2f88:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    2f8c:	4649      	mov	r1, r9
    2f8e:	4620      	mov	r0, r4
    2f90:	f015 f868 	bl	18064 <bt_lookup_id_addr>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2f94:	2207      	movs	r2, #7
    2f96:	4601      	mov	r1, r0
    2f98:	a806      	add	r0, sp, #24
    2f9a:	f014 fd2f 	bl	179fc <memcpy>
    2f9e:	2207      	movs	r2, #7
    2fa0:	4649      	mov	r1, r9
    2fa2:	a804      	add	r0, sp, #16
    2fa4:	f014 fd2a 	bl	179fc <memcpy>
}
    2fa8:	e7e0      	b.n	2f6c <bt_hci_le_enh_conn_complete+0x88>
    2faa:	a806      	add	r0, sp, #24
    2fac:	f7ff fe08 	bl	2bc0 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    2fb0:	78eb      	ldrb	r3, [r5, #3]
    2fb2:	2b01      	cmp	r3, #1
    2fb4:	4604      	mov	r4, r0
    2fb6:	d10a      	bne.n	2fce <bt_hci_le_enh_conn_complete+0xea>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    2fb8:	f000 ff16 	bl	3de8 <bt_le_adv_lookup_legacy>
    2fbc:	f06f 0180 	mvn.w	r1, #128	; 0x80
    2fc0:	4681      	mov	r9, r0
    2fc2:	3010      	adds	r0, #16
    2fc4:	f014 fe2b 	bl	17c1e <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    2fc8:	4648      	mov	r0, r9
    2fca:	f015 f9b9 	bl	18340 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    2fce:	2c00      	cmp	r4, #0
    2fd0:	d0cf      	beq.n	2f72 <bt_hci_le_enh_conn_complete+0x8e>
	conn->handle = handle;
    2fd2:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
    2fd4:	2207      	movs	r2, #7
    2fd6:	f820 7b88 	strh.w	r7, [r0], #136
    2fda:	a906      	add	r1, sp, #24
    2fdc:	f014 fd0e 	bl	179fc <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    2fe0:	f8b5 3017 	ldrh.w	r3, [r5, #23]
    2fe4:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    2fe8:	f8b5 3019 	ldrh.w	r3, [r5, #25]
    2fec:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2ff0:	f8b5 301b 	ldrh.w	r3, [r5, #27]
    2ff4:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    2ff8:	78eb      	ldrb	r3, [r5, #3]
    2ffa:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    2ffc:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    2ffe:	2b01      	cmp	r3, #1
	conn->err = 0U;
    3000:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    3002:	d117      	bne.n	3034 <bt_hci_le_enh_conn_complete+0x150>
    3004:	2207      	movs	r2, #7
    3006:	a904      	add	r1, sp, #16
    3008:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    300c:	f014 fcf6 	bl	179fc <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    3010:	f000 feea 	bl	3de8 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    3014:	7a21      	ldrb	r1, [r4, #8]
    3016:	4d33      	ldr	r5, [pc, #204]	; (30e4 <bt_hci_le_enh_conn_complete+0x200>)
    3018:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    301c:	4429      	add	r1, r5
    301e:	2207      	movs	r2, #7
    3020:	f104 0096 	add.w	r0, r4, #150	; 0x96
    3024:	f014 fcea 	bl	179fc <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    3028:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    302c:	065d      	lsls	r5, r3, #25
    302e:	d501      	bpl.n	3034 <bt_hci_le_enh_conn_complete+0x150>
			bt_le_adv_resume();
    3030:	f001 f878 	bl	4124 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    3034:	2107      	movs	r1, #7
    3036:	4620      	mov	r0, r4
    3038:	f001 fae2 	bl	4600 <bt_conn_set_state>
	if (is_disconnected) {
    303c:	b11e      	cbz	r6, 3046 <bt_hci_le_enh_conn_complete+0x162>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    303e:	2101      	movs	r1, #1
    3040:	4620      	mov	r0, r4
    3042:	f001 fadd 	bl	4600 <bt_conn_set_state>
	bt_conn_connected(conn);
    3046:	4620      	mov	r0, r4
    3048:	f015 fa55 	bl	184f6 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    304c:	7aa3      	ldrb	r3, [r4, #10]
    304e:	2b07      	cmp	r3, #7
    3050:	d142      	bne.n	30d8 <bt_hci_le_enh_conn_complete+0x1f4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3052:	f3bf 8f5b 	dmb	ish
    3056:	6863      	ldr	r3, [r4, #4]
    3058:	4e22      	ldr	r6, [pc, #136]	; (30e4 <bt_hci_le_enh_conn_complete+0x200>)
    305a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    305e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    3062:	d118      	bne.n	3096 <bt_hci_le_enh_conn_complete+0x1b2>
    3064:	78e3      	ldrb	r3, [r4, #3]
    3066:	b11b      	cbz	r3, 3070 <bt_hci_le_enh_conn_complete+0x18c>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    3068:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
    306c:	0718      	lsls	r0, r3, #28
    306e:	d512      	bpl.n	3096 <bt_hci_le_enh_conn_complete+0x1b2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    3070:	2102      	movs	r1, #2
    3072:	f242 0016 	movw	r0, #8214	; 0x2016
    3076:	f7ff fe67 	bl	2d48 <bt_hci_cmd_create>
	if (!buf) {
    307a:	4605      	mov	r5, r0
    307c:	b158      	cbz	r0, 3096 <bt_hci_le_enh_conn_complete+0x1b2>
    307e:	2102      	movs	r1, #2
    3080:	300c      	adds	r0, #12
    3082:	f016 fc26 	bl	198d2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3086:	8823      	ldrh	r3, [r4, #0]
    3088:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    308a:	2200      	movs	r2, #0
    308c:	4629      	mov	r1, r5
    308e:	f242 0016 	movw	r0, #8214	; 0x2016
    3092:	f7ff fe93 	bl	2dbc <bt_hci_cmd_send_sync>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    3096:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
    309a:	07d9      	lsls	r1, r3, #31
    309c:	d506      	bpl.n	30ac <bt_hci_le_enh_conn_complete+0x1c8>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    309e:	2100      	movs	r1, #0
    30a0:	2302      	movs	r3, #2
    30a2:	9100      	str	r1, [sp, #0]
    30a4:	461a      	mov	r2, r3
    30a6:	4620      	mov	r0, r4
    30a8:	f014 fedd 	bl	17e66 <bt_le_set_phy>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    30ac:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
    30b0:	069a      	lsls	r2, r3, #26
    30b2:	d511      	bpl.n	30d8 <bt_hci_le_enh_conn_complete+0x1f4>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    30b4:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    30b8:	689b      	ldr	r3, [r3, #8]
    30ba:	079b      	lsls	r3, r3, #30
    30bc:	d50c      	bpl.n	30d8 <bt_hci_le_enh_conn_complete+0x1f4>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    30be:	f10d 010e 	add.w	r1, sp, #14
    30c2:	a803      	add	r0, sp, #12
    30c4:	f014 fe7e 	bl	17dc4 <hci_le_read_max_data_len>
			if (!err) {
    30c8:	b930      	cbnz	r0, 30d8 <bt_hci_le_enh_conn_complete+0x1f4>
				err = bt_le_set_data_len(conn,
    30ca:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    30ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    30d2:	4620      	mov	r0, r4
    30d4:	f014 fea9 	bl	17e2a <bt_le_set_data_len>
	bt_conn_unref(conn);
    30d8:	4620      	mov	r0, r4
    30da:	f015 f9ce 	bl	1847a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    30de:	e74c      	b.n	2f7a <bt_hci_le_enh_conn_complete+0x96>
    30e0:	2000260c 	.word	0x2000260c
    30e4:	20000000 	.word	0x20000000

000030e8 <le_legacy_conn_complete>:
{
    30e8:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    30ea:	68c1      	ldr	r1, [r0, #12]
	memcpy(dst, src, sizeof(*dst));
    30ec:	4c18      	ldr	r4, [pc, #96]	; (3150 <le_legacy_conn_complete+0x68>)
	enh.status         = evt->status;
    30ee:	780b      	ldrb	r3, [r1, #0]
{
    30f0:	b088      	sub	sp, #32
	memcpy(dst, src, sizeof(*dst));
    30f2:	2207      	movs	r2, #7
	enh.status         = evt->status;
    30f4:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
    30f8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    30fc:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
    3100:	78cb      	ldrb	r3, [r1, #3]
    3102:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
    3106:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    310a:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
    310e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    3112:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
    3116:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    311a:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
    311e:	7c4b      	ldrb	r3, [r1, #17]
    3120:	f88d 301d 	strb.w	r3, [sp, #29]
    3124:	3104      	adds	r1, #4
    3126:	a801      	add	r0, sp, #4
    3128:	f014 fc68 	bl	179fc <memcpy>
	memcpy(dst, src, sizeof(*dst));
    312c:	4621      	mov	r1, r4
    312e:	2206      	movs	r2, #6
    3130:	f10d 000b 	add.w	r0, sp, #11
    3134:	f014 fc62 	bl	179fc <memcpy>
    3138:	2206      	movs	r2, #6
    313a:	4621      	mov	r1, r4
    313c:	f10d 0011 	add.w	r0, sp, #17
    3140:	f014 fc5c 	bl	179fc <memcpy>
	bt_hci_le_enh_conn_complete(evt);
    3144:	4668      	mov	r0, sp
    3146:	f7ff fecd 	bl	2ee4 <bt_hci_le_enh_conn_complete>
}
    314a:	b008      	add	sp, #32
    314c:	bd10      	pop	{r4, pc}
    314e:	bf00      	nop
    3150:	0001cbc1 	.word	0x0001cbc1

00003154 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    3154:	4b02      	ldr	r3, [pc, #8]	; (3160 <bt_send+0xc>)
    3156:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
    315a:	695b      	ldr	r3, [r3, #20]
    315c:	4718      	bx	r3
    315e:	bf00      	nop
    3160:	20000000 	.word	0x20000000

00003164 <bt_hci_cmd_send>:
{
    3164:	b538      	push	{r3, r4, r5, lr}
    3166:	4605      	mov	r5, r0
	if (!buf) {
    3168:	460c      	mov	r4, r1
    316a:	b919      	cbnz	r1, 3174 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    316c:	f7ff fdec 	bl	2d48 <bt_hci_cmd_create>
		if (!buf) {
    3170:	4604      	mov	r4, r0
    3172:	b198      	cbz	r0, 319c <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    3174:	f640 4335 	movw	r3, #3125	; 0xc35
    3178:	429d      	cmp	r5, r3
    317a:	d109      	bne.n	3190 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    317c:	4620      	mov	r0, r4
    317e:	f7ff ffe9 	bl	3154 <bt_send>
		if (err) {
    3182:	4605      	mov	r5, r0
    3184:	b140      	cbz	r0, 3198 <bt_hci_cmd_send+0x34>
			net_buf_unref(buf);
    3186:	4620      	mov	r0, r4
    3188:	f010 f8b6 	bl	132f8 <net_buf_unref>
}
    318c:	4628      	mov	r0, r5
    318e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    3190:	4804      	ldr	r0, [pc, #16]	; (31a4 <bt_hci_cmd_send+0x40>)
    3192:	4621      	mov	r1, r4
    3194:	f016 fb65 	bl	19862 <net_buf_put>
	return 0;
    3198:	2500      	movs	r5, #0
    319a:	e7f7      	b.n	318c <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    319c:	f06f 0568 	mvn.w	r5, #104	; 0x68
    31a0:	e7f4      	b.n	318c <bt_hci_cmd_send+0x28>
    31a2:	bf00      	nop
    31a4:	20000134 	.word	0x20000134

000031a8 <hci_tx_thread>:
{
    31a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    31ac:	4f3c      	ldr	r7, [pc, #240]	; (32a0 <hci_tx_thread+0xf8>)
		BT_ASSERT(err == 0);
    31ae:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 32a4 <hci_tx_thread+0xfc>
			ev_count += bt_conn_prepare_events(&events[1]);
    31b2:	f107 0914 	add.w	r9, r7, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    31b6:	68fb      	ldr	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    31b8:	4648      	mov	r0, r9
		events[0].state = K_POLL_STATE_NOT_READY;
    31ba:	f36f 3394 	bfc	r3, #14, #7
    31be:	60fb      	str	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    31c0:	f001 f9c4 	bl	454c <bt_conn_prepare_events>
    31c4:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    31c6:	4836      	ldr	r0, [pc, #216]	; (32a0 <hci_tx_thread+0xf8>)
    31c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    31cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    31d0:	4629      	mov	r1, r5
    31d2:	f013 fd5f 	bl	16c94 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    31d6:	b160      	cbz	r0, 31f2 <hci_tx_thread+0x4a>
    31d8:	4933      	ldr	r1, [pc, #204]	; (32a8 <hci_tx_thread+0x100>)
    31da:	4834      	ldr	r0, [pc, #208]	; (32ac <hci_tx_thread+0x104>)
    31dc:	f640 13f4 	movw	r3, #2548	; 0x9f4
    31e0:	4642      	mov	r2, r8
    31e2:	f014 f97e 	bl	174e2 <assert_print>
    31e6:	4040      	eors	r0, r0
    31e8:	f380 8811 	msr	BASEPRI, r0
    31ec:	f04f 0003 	mov.w	r0, #3
    31f0:	df02      	svc	2
{
    31f2:	4e2b      	ldr	r6, [pc, #172]	; (32a0 <hci_tx_thread+0xf8>)
	for (; count; ev++, count--) {
    31f4:	b915      	cbnz	r5, 31fc <hci_tx_thread+0x54>
	z_impl_k_yield();
    31f6:	f013 fadf 	bl	167b8 <z_impl_k_yield>
	while (1) {
    31fa:	e7dc      	b.n	31b6 <hci_tx_thread+0xe>
		switch (ev->state) {
    31fc:	68f3      	ldr	r3, [r6, #12]
    31fe:	f3c3 3386 	ubfx	r3, r3, #14, #7
    3202:	2b04      	cmp	r3, #4
    3204:	d142      	bne.n	328c <hci_tx_thread+0xe4>
			if (ev->tag == BT_EVENT_CMD_TX) {
    3206:	7b33      	ldrb	r3, [r6, #12]
    3208:	2b00      	cmp	r3, #0
    320a:	d142      	bne.n	3292 <hci_tx_thread+0xea>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    320c:	4828      	ldr	r0, [pc, #160]	; (32b0 <hci_tx_thread+0x108>)
    320e:	2200      	movs	r2, #0
    3210:	2300      	movs	r3, #0
    3212:	f016 fb24 	bl	1985e <net_buf_get>
	BT_ASSERT(buf);
    3216:	4604      	mov	r4, r0
    3218:	b960      	cbnz	r0, 3234 <hci_tx_thread+0x8c>
    321a:	4926      	ldr	r1, [pc, #152]	; (32b4 <hci_tx_thread+0x10c>)
    321c:	4823      	ldr	r0, [pc, #140]	; (32ac <hci_tx_thread+0x104>)
    321e:	f640 1386 	movw	r3, #2438	; 0x986
    3222:	4642      	mov	r2, r8
    3224:	f014 f95d 	bl	174e2 <assert_print>
    3228:	4040      	eors	r0, r0
    322a:	f380 8811 	msr	BASEPRI, r0
    322e:	f04f 0003 	mov.w	r0, #3
    3232:	df02      	svc	2
	if (bt_dev.sent_cmd) {
    3234:	f8df a080 	ldr.w	sl, [pc, #128]	; 32b8 <hci_tx_thread+0x110>
	return z_impl_k_sem_take(sem, timeout);
    3238:	4820      	ldr	r0, [pc, #128]	; (32bc <hci_tx_thread+0x114>)
    323a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    323e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3242:	f012 fe2b 	bl	15e9c <z_impl_k_sem_take>
    3246:	f8da 0130 	ldr.w	r0, [sl, #304]	; 0x130
    324a:	b120      	cbz	r0, 3256 <hci_tx_thread+0xae>
		net_buf_unref(bt_dev.sent_cmd);
    324c:	f010 f854 	bl	132f8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3250:	2300      	movs	r3, #0
    3252:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    3256:	4620      	mov	r0, r4
    3258:	f016 fb05 	bl	19866 <net_buf_ref>
    325c:	f8ca 0130 	str.w	r0, [sl, #304]	; 0x130
	err = bt_send(buf);
    3260:	4620      	mov	r0, r4
    3262:	f7ff ff77 	bl	3154 <bt_send>
	if (err) {
    3266:	b188      	cbz	r0, 328c <hci_tx_thread+0xe4>
	z_impl_k_sem_give(sem);
    3268:	4814      	ldr	r0, [pc, #80]	; (32bc <hci_tx_thread+0x114>)
    326a:	f012 fdf1 	bl	15e50 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    326e:	4620      	mov	r0, r4
    3270:	f00f ff88 	bl	13184 <net_buf_id>
    3274:	4b12      	ldr	r3, [pc, #72]	; (32c0 <hci_tx_thread+0x118>)
    3276:	220c      	movs	r2, #12
    3278:	fb02 3000 	mla	r0, r2, r0, r3
    327c:	211f      	movs	r1, #31
    327e:	8840      	ldrh	r0, [r0, #2]
    3280:	4622      	mov	r2, r4
    3282:	f7ff fcc3 	bl	2c0c <hci_cmd_done>
		net_buf_unref(buf);
    3286:	4620      	mov	r0, r4
    3288:	f010 f836 	bl	132f8 <net_buf_unref>
	for (; count; ev++, count--) {
    328c:	3614      	adds	r6, #20
    328e:	3d01      	subs	r5, #1
    3290:	e7b0      	b.n	31f4 <hci_tx_thread+0x4c>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    3292:	2b01      	cmp	r3, #1
    3294:	d1fa      	bne.n	328c <hci_tx_thread+0xe4>
					conn = CONTAINER_OF(ev->fifo,
    3296:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    3298:	3838      	subs	r0, #56	; 0x38
    329a:	f001 fc21 	bl	4ae0 <bt_conn_process_tx>
    329e:	e7f5      	b.n	328c <hci_tx_thread+0xe4>
    32a0:	200001a4 	.word	0x200001a4
    32a4:	0001cbe9 	.word	0x0001cbe9
    32a8:	0001cc1d 	.word	0x0001cc1d
    32ac:	0001cc26 	.word	0x0001cc26
    32b0:	20000134 	.word	0x20000134
    32b4:	0001cda8 	.word	0x0001cda8
    32b8:	20000000 	.word	0x20000000
    32bc:	20000118 	.word	0x20000118
    32c0:	20001200 	.word	0x20001200

000032c4 <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
    32c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32c8:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    32ca:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    32ce:	4630      	mov	r0, r6
    32d0:	f016 fb36 	bl	19940 <net_buf_simple_headroom>
	state->len = buf->len;
    32d4:	f8b4 8010 	ldrh.w	r8, [r4, #16]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    32d8:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    32dc:	4605      	mov	r5, r0
    32de:	d80c      	bhi.n	32fa <hci_event_prio+0x36>
    32e0:	4a1c      	ldr	r2, [pc, #112]	; (3354 <hci_event_prio+0x90>)
    32e2:	491d      	ldr	r1, [pc, #116]	; (3358 <hci_event_prio+0x94>)
    32e4:	481d      	ldr	r0, [pc, #116]	; (335c <hci_event_prio+0x98>)
    32e6:	f640 5395 	movw	r3, #3477	; 0xd95
    32ea:	f014 f8fa 	bl	174e2 <assert_print>
    32ee:	4040      	eors	r0, r0
    32f0:	f380 8811 	msr	BASEPRI, r0
    32f4:	f04f 0003 	mov.w	r0, #3
    32f8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    32fa:	4630      	mov	r0, r6
    32fc:	2102      	movs	r1, #2
    32fe:	f016 fb0f 	bl	19920 <net_buf_simple_pull_mem>
    3302:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    3304:	7800      	ldrb	r0, [r0, #0]
    3306:	f014 fc07 	bl	17b18 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    330a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    330c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    330e:	d40c      	bmi.n	332a <hci_event_prio+0x66>
    3310:	4a10      	ldr	r2, [pc, #64]	; (3354 <hci_event_prio+0x90>)
    3312:	4913      	ldr	r1, [pc, #76]	; (3360 <hci_event_prio+0x9c>)
    3314:	4811      	ldr	r0, [pc, #68]	; (335c <hci_event_prio+0x98>)
    3316:	f640 5399 	movw	r3, #3481	; 0xd99
    331a:	f014 f8e2 	bl	174e2 <assert_print>
    331e:	4040      	eors	r0, r0
    3320:	f380 8811 	msr	BASEPRI, r0
    3324:	f04f 0003 	mov.w	r0, #3
    3328:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
    332a:	2305      	movs	r3, #5
    332c:	4a0d      	ldr	r2, [pc, #52]	; (3364 <hci_event_prio+0xa0>)
    332e:	7838      	ldrb	r0, [r7, #0]
    3330:	4621      	mov	r1, r4
    3332:	f014 fc5d 	bl	17bf0 <handle_event_common.isra.0>

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    3336:	07b3      	lsls	r3, r6, #30
    3338:	d507      	bpl.n	334a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    333a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    333c:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
    3340:	fa13 f585 	uxtah	r5, r3, r5
    3344:	60e5      	str	r5, [r4, #12]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    3346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    334a:	4620      	mov	r0, r4
}
    334c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    3350:	f00f bfd2 	b.w	132f8 <net_buf_unref>
    3354:	0001cbe9 	.word	0x0001cbe9
    3358:	0001cc6f 	.word	0x0001cc6f
    335c:	0001cc26 	.word	0x0001cc26
    3360:	0001cc88 	.word	0x0001cc88
    3364:	0001b528 	.word	0x0001b528

00003368 <bt_recv>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_recv(struct net_buf *buf)
{
    3368:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    336a:	7e03      	ldrb	r3, [r0, #24]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	LOG_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    336c:	2b01      	cmp	r3, #1
{
    336e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    3370:	d036      	beq.n	33e0 <bt_recv+0x78>
    3372:	2b03      	cmp	r3, #3
    3374:	d163      	bne.n	343e <bt_recv+0xd6>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3376:	8a03      	ldrh	r3, [r0, #16]
    3378:	2b03      	cmp	r3, #3
    337a:	d80c      	bhi.n	3396 <bt_recv+0x2e>
    337c:	4a32      	ldr	r2, [pc, #200]	; (3448 <bt_recv+0xe0>)
    337e:	4933      	ldr	r1, [pc, #204]	; (344c <bt_recv+0xe4>)
    3380:	4833      	ldr	r0, [pc, #204]	; (3450 <bt_recv+0xe8>)
    3382:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
    3386:	f014 f8ac 	bl	174e2 <assert_print>
    338a:	4040      	eors	r0, r0
    338c:	f380 8811 	msr	BASEPRI, r0
    3390:	f04f 0003 	mov.w	r0, #3
    3394:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    3396:	2104      	movs	r1, #4
    3398:	f104 000c 	add.w	r0, r4, #12
    339c:	f016 fac0 	bl	19920 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    33a0:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    33a2:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    33a4:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    33a6:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
    33a8:	8a22      	ldrh	r2, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
    33aa:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    33ae:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    33b0:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
    33b2:	d003      	beq.n	33bc <bt_recv+0x54>
	net_buf_unref(buf);
    33b4:	4620      	mov	r0, r4
    33b6:	f00f ff9f 	bl	132f8 <net_buf_unref>
}
    33ba:	e00f      	b.n	33dc <bt_recv+0x74>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    33bc:	f001 f918 	bl	45f0 <bt_conn_lookup_handle>
	if (!conn) {
    33c0:	4605      	mov	r5, r0
    33c2:	2800      	cmp	r0, #0
    33c4:	d0f6      	beq.n	33b4 <bt_recv+0x4c>
	acl(buf)->index = bt_conn_index(conn);
    33c6:	f001 f9d9 	bl	477c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    33ca:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    33cc:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
    33ce:	4621      	mov	r1, r4
    33d0:	4628      	mov	r0, r5
    33d2:	f014 ffe9 	bl	183a8 <bt_conn_recv>
	bt_conn_unref(conn);
    33d6:	4628      	mov	r0, r5
    33d8:	f015 f84f 	bl	1847a <bt_conn_unref>
#if defined(CONFIG_BT_RECV_BLOCKING)
		hci_acl(buf);
#else
		rx_queue_put(buf);
#endif
		return 0;
    33dc:	2000      	movs	r0, #0
	default:
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    33de:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    33e0:	8a03      	ldrh	r3, [r0, #16]
    33e2:	2b01      	cmp	r3, #1
    33e4:	d80c      	bhi.n	3400 <bt_recv+0x98>
    33e6:	4a18      	ldr	r2, [pc, #96]	; (3448 <bt_recv+0xe0>)
    33e8:	4918      	ldr	r1, [pc, #96]	; (344c <bt_recv+0xe4>)
    33ea:	4819      	ldr	r0, [pc, #100]	; (3450 <bt_recv+0xe8>)
    33ec:	f640 1373 	movw	r3, #2419	; 0x973
    33f0:	f014 f877 	bl	174e2 <assert_print>
    33f4:	4040      	eors	r0, r0
    33f6:	f380 8811 	msr	BASEPRI, r0
    33fa:	f04f 0003 	mov.w	r0, #3
    33fe:	df02      	svc	2
    3400:	2102      	movs	r1, #2
    3402:	f104 000c 	add.w	r0, r4, #12
    3406:	f016 fa8b 	bl	19920 <net_buf_simple_pull_mem>
    340a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    340c:	7800      	ldrb	r0, [r0, #0]
    340e:	f014 fb83 	bl	17b18 <bt_hci_evt_get_flags>
    3412:	0783      	lsls	r3, r0, #30
    3414:	d40c      	bmi.n	3430 <bt_recv+0xc8>
    3416:	4a0c      	ldr	r2, [pc, #48]	; (3448 <bt_recv+0xe0>)
    3418:	490e      	ldr	r1, [pc, #56]	; (3454 <bt_recv+0xec>)
    341a:	480d      	ldr	r0, [pc, #52]	; (3450 <bt_recv+0xe8>)
    341c:	f640 1377 	movw	r3, #2423	; 0x977
    3420:	f014 f85f 	bl	174e2 <assert_print>
    3424:	4040      	eors	r0, r0
    3426:	f380 8811 	msr	BASEPRI, r0
    342a:	f04f 0003 	mov.w	r0, #3
    342e:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
    3430:	4a09      	ldr	r2, [pc, #36]	; (3458 <bt_recv+0xf0>)
    3432:	7828      	ldrb	r0, [r5, #0]
    3434:	2304      	movs	r3, #4
    3436:	4621      	mov	r1, r4
    3438:	f014 fbda 	bl	17bf0 <handle_event_common.isra.0>
    343c:	e7ba      	b.n	33b4 <bt_recv+0x4c>
		net_buf_unref(buf);
    343e:	f00f ff5b 	bl	132f8 <net_buf_unref>
		return -EINVAL;
    3442:	f06f 0015 	mvn.w	r0, #21
    3446:	e7ca      	b.n	33de <bt_recv+0x76>
    3448:	0001cbe9 	.word	0x0001cbe9
    344c:	0001cc6f 	.word	0x0001cc6f
    3450:	0001cc26 	.word	0x0001cc26
    3454:	0001cca1 	.word	0x0001cca1
    3458:	0001b550 	.word	0x0001b550

0000345c <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
    345c:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    345e:	7e03      	ldrb	r3, [r0, #24]
    3460:	2b01      	cmp	r3, #1
{
    3462:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3464:	d00c      	beq.n	3480 <bt_recv_prio+0x24>
    3466:	4a09      	ldr	r2, [pc, #36]	; (348c <bt_recv_prio+0x30>)
    3468:	4909      	ldr	r1, [pc, #36]	; (3490 <bt_recv_prio+0x34>)
    346a:	480a      	ldr	r0, [pc, #40]	; (3494 <bt_recv_prio+0x38>)
    346c:	f640 53eb 	movw	r3, #3563	; 0xdeb
    3470:	f014 f837 	bl	174e2 <assert_print>
    3474:	4040      	eors	r0, r0
    3476:	f380 8811 	msr	BASEPRI, r0
    347a:	f04f 0003 	mov.w	r0, #3
    347e:	df02      	svc	2

	hci_event_prio(buf);
    3480:	4620      	mov	r0, r4
    3482:	f7ff ff1f 	bl	32c4 <hci_event_prio>

	return 0;
}
    3486:	2000      	movs	r0, #0
    3488:	bd10      	pop	{r4, pc}
    348a:	bf00      	nop
    348c:	0001cbe9 	.word	0x0001cbe9
    3490:	0001cccf 	.word	0x0001cccf
    3494:	0001cc26 	.word	0x0001cc26

00003498 <bt_hci_driver_register>:

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    3498:	4a08      	ldr	r2, [pc, #32]	; (34bc <bt_hci_driver_register+0x24>)
{
    349a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    349c:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
    34a0:	b930      	cbnz	r0, 34b0 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    34a2:	68d9      	ldr	r1, [r3, #12]
    34a4:	b139      	cbz	r1, 34b6 <bt_hci_driver_register+0x1e>
    34a6:	6959      	ldr	r1, [r3, #20]
    34a8:	b129      	cbz	r1, 34b6 <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    34aa:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	LOG_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    34ae:	4770      	bx	lr
		return -EALREADY;
    34b0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    34b4:	4770      	bx	lr
		return -EINVAL;
    34b6:	f06f 0015 	mvn.w	r0, #21
}
    34ba:	4770      	bx	lr
    34bc:	20000000 	.word	0x20000000

000034c0 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    34c0:	4801      	ldr	r0, [pc, #4]	; (34c8 <bt_finalize_init+0x8>)
    34c2:	2104      	movs	r1, #4
    34c4:	f014 bb67 	b.w	17b96 <atomic_or>
    34c8:	200000cc 	.word	0x200000cc

000034cc <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    34cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    34ce:	4db0      	ldr	r5, [pc, #704]	; (3790 <bt_init+0x2c4>)
    34d0:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    34d4:	6899      	ldr	r1, [r3, #8]
    34d6:	f011 0101 	ands.w	r1, r1, #1
    34da:	d121      	bne.n	3520 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    34dc:	aa01      	add	r2, sp, #4
    34de:	f640 4003 	movw	r0, #3075	; 0xc03
    34e2:	f7ff fc6b 	bl	2dbc <bt_hci_cmd_send_sync>
		if (err) {
    34e6:	4604      	mov	r4, r0
    34e8:	2800      	cmp	r0, #0
    34ea:	d161      	bne.n	35b0 <bt_init+0xe4>
		hci_reset_complete(rsp);
    34ec:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
    34ee:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    34f0:	781b      	ldrb	r3, [r3, #0]
    34f2:	b99b      	cbnz	r3, 351c <bt_init+0x50>
    34f4:	f3bf 8f5b 	dmb	ish
    34f8:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    34fc:	f3bf 8f5b 	dmb	ish
    3500:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3504:	f003 0309 	and.w	r3, r3, #9
    3508:	f3bf 8f5b 	dmb	ish
    350c:	e852 1f00 	ldrex	r1, [r2]
    3510:	e842 3400 	strex	r4, r3, [r2]
    3514:	2c00      	cmp	r4, #0
    3516:	d1f9      	bne.n	350c <bt_init+0x40>
    3518:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    351c:	f00f feec 	bl	132f8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    3520:	aa01      	add	r2, sp, #4
    3522:	2100      	movs	r1, #0
    3524:	f241 0003 	movw	r0, #4099	; 0x1003
    3528:	f7ff fc48 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
    352c:	4604      	mov	r4, r0
    352e:	2800      	cmp	r0, #0
    3530:	d13e      	bne.n	35b0 <bt_init+0xe4>
	read_local_features_complete(rsp);
    3532:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    3534:	4897      	ldr	r0, [pc, #604]	; (3794 <bt_init+0x2c8>)
    3536:	68f1      	ldr	r1, [r6, #12]
    3538:	2208      	movs	r2, #8
    353a:	3101      	adds	r1, #1
    353c:	f014 fa5e 	bl	179fc <memcpy>
	net_buf_unref(rsp);
    3540:	4630      	mov	r0, r6
    3542:	f00f fed9 	bl	132f8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    3546:	4621      	mov	r1, r4
    3548:	aa01      	add	r2, sp, #4
    354a:	f241 0001 	movw	r0, #4097	; 0x1001
    354e:	f7ff fc35 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
    3552:	4604      	mov	r4, r0
    3554:	bb60      	cbnz	r0, 35b0 <bt_init+0xe4>
	read_local_ver_complete(rsp);
    3556:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    3558:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    355a:	785a      	ldrb	r2, [r3, #1]
    355c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    3560:	885a      	ldrh	r2, [r3, #2]
    3562:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    3566:	791a      	ldrb	r2, [r3, #4]
    3568:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    356c:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    3570:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    3574:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    3578:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    357c:	f00f febc 	bl	132f8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    3580:	4621      	mov	r1, r4
    3582:	aa01      	add	r2, sp, #4
    3584:	f241 0002 	movw	r0, #4098	; 0x1002
    3588:	f7ff fc18 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
    358c:	4604      	mov	r4, r0
    358e:	b978      	cbnz	r0, 35b0 <bt_init+0xe4>
	read_supported_commands_complete(rsp);
    3590:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    3592:	4881      	ldr	r0, [pc, #516]	; (3798 <bt_init+0x2cc>)
    3594:	68f1      	ldr	r1, [r6, #12]
    3596:	2240      	movs	r2, #64	; 0x40
    3598:	3101      	adds	r1, #1
    359a:	f014 fa2f 	bl	179fc <memcpy>
	net_buf_unref(rsp);
    359e:	4630      	mov	r0, r6
    35a0:	f00f feaa 	bl	132f8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    35a4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    35a8:	065e      	lsls	r6, r3, #25
    35aa:	d404      	bmi.n	35b6 <bt_init+0xea>
		return -ENODEV;
    35ac:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    35b0:	4620      	mov	r0, r4
    35b2:	b003      	add	sp, #12
    35b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    35b6:	4621      	mov	r1, r4
    35b8:	aa01      	add	r2, sp, #4
    35ba:	f242 0003 	movw	r0, #8195	; 0x2003
    35be:	f7ff fbfd 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
    35c2:	4604      	mov	r4, r0
    35c4:	2800      	cmp	r0, #0
    35c6:	d1f3      	bne.n	35b0 <bt_init+0xe4>
	read_le_features_complete(rsp);
    35c8:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    35ca:	4874      	ldr	r0, [pc, #464]	; (379c <bt_init+0x2d0>)
    35cc:	68f1      	ldr	r1, [r6, #12]
    35ce:	2208      	movs	r2, #8
    35d0:	3101      	adds	r1, #1
    35d2:	f014 fa13 	bl	179fc <memcpy>
	net_buf_unref(rsp);
    35d6:	4630      	mov	r0, r6
    35d8:	f00f fe8e 	bl	132f8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    35dc:	4621      	mov	r1, r4
    35de:	aa01      	add	r2, sp, #4
    35e0:	f242 0002 	movw	r0, #8194	; 0x2002
    35e4:	f7ff fbea 	bl	2dbc <bt_hci_cmd_send_sync>
		if (err) {
    35e8:	4604      	mov	r4, r0
    35ea:	2800      	cmp	r0, #0
    35ec:	d1e0      	bne.n	35b0 <bt_init+0xe4>
		le_read_buffer_size_complete(rsp);
    35ee:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    35f0:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    35f2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    35f6:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
    35f8:	b141      	cbz	r1, 360c <bt_init+0x140>
    35fa:	78d9      	ldrb	r1, [r3, #3]
    35fc:	b131      	cbz	r1, 360c <bt_init+0x140>
	bt_dev.le.acl_mtu = acl_mtu;
    35fe:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    3602:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    3604:	4866      	ldr	r0, [pc, #408]	; (37a0 <bt_init+0x2d4>)
    3606:	4611      	mov	r1, r2
    3608:	f017 f89d 	bl	1a746 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    360c:	4620      	mov	r0, r4
    360e:	f00f fe73 	bl	132f8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    3612:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    3616:	f016 0620 	ands.w	r6, r6, #32
    361a:	d118      	bne.n	364e <bt_init+0x182>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    361c:	2102      	movs	r1, #2
    361e:	f640 406d 	movw	r0, #3181	; 0xc6d
    3622:	f7ff fb91 	bl	2d48 <bt_hci_cmd_create>
		if (!buf) {
    3626:	4604      	mov	r4, r0
    3628:	2800      	cmp	r0, #0
    362a:	f000 80a9 	beq.w	3780 <bt_init+0x2b4>
	return net_buf_simple_add(&buf->b, len);
    362e:	2102      	movs	r1, #2
    3630:	300c      	adds	r0, #12
    3632:	f016 f94e 	bl	198d2 <net_buf_simple_add>
		cp_le->le = 0x01;
    3636:	2301      	movs	r3, #1
    3638:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    363a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    363c:	4621      	mov	r1, r4
    363e:	4632      	mov	r2, r6
    3640:	f640 406d 	movw	r0, #3181	; 0xc6d
    3644:	f7ff fbba 	bl	2dbc <bt_hci_cmd_send_sync>
		if (err) {
    3648:	4604      	mov	r4, r0
    364a:	2800      	cmp	r0, #0
    364c:	d1b0      	bne.n	35b0 <bt_init+0xe4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    364e:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    3652:	071c      	lsls	r4, r3, #28
    3654:	d512      	bpl.n	367c <bt_init+0x1b0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    3656:	aa01      	add	r2, sp, #4
    3658:	2100      	movs	r1, #0
    365a:	f242 001c 	movw	r0, #8220	; 0x201c
    365e:	f7ff fbad 	bl	2dbc <bt_hci_cmd_send_sync>
		if (err) {
    3662:	4604      	mov	r4, r0
    3664:	2800      	cmp	r0, #0
    3666:	d1a3      	bne.n	35b0 <bt_init+0xe4>
		le_read_supp_states_complete(rsp);
    3668:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    366a:	68c3      	ldr	r3, [r0, #12]
    366c:	f8d3 2001 	ldr.w	r2, [r3, #1]
    3670:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    3674:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    3678:	f00f fe3e 	bl	132f8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    367c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    3680:	0698      	lsls	r0, r3, #26
    3682:	d523      	bpl.n	36cc <bt_init+0x200>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    3684:	f10d 0102 	add.w	r1, sp, #2
    3688:	4668      	mov	r0, sp
    368a:	f014 fb9b 	bl	17dc4 <hci_le_read_max_data_len>
		if (err) {
    368e:	4604      	mov	r4, r0
    3690:	2800      	cmp	r0, #0
    3692:	d18d      	bne.n	35b0 <bt_init+0xe4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    3694:	2104      	movs	r1, #4
    3696:	f242 0024 	movw	r0, #8228	; 0x2024
    369a:	f7ff fb55 	bl	2d48 <bt_hci_cmd_create>
		if (!buf) {
    369e:	4606      	mov	r6, r0
    36a0:	2800      	cmp	r0, #0
    36a2:	d06d      	beq.n	3780 <bt_init+0x2b4>
    36a4:	2104      	movs	r1, #4
    36a6:	300c      	adds	r0, #12
    36a8:	f016 f913 	bl	198d2 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    36ac:	f8bd 3000 	ldrh.w	r3, [sp]
    36b0:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    36b2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    36b6:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    36b8:	4622      	mov	r2, r4
    36ba:	4631      	mov	r1, r6
    36bc:	f242 0024 	movw	r0, #8228	; 0x2024
    36c0:	f7ff fb7c 	bl	2dbc <bt_hci_cmd_send_sync>
		if (err) {
    36c4:	4604      	mov	r4, r0
    36c6:	2800      	cmp	r0, #0
    36c8:	f47f af72 	bne.w	35b0 <bt_init+0xe4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    36cc:	2108      	movs	r1, #8
    36ce:	f242 0001 	movw	r0, #8193	; 0x2001
    36d2:	f7ff fb39 	bl	2d48 <bt_hci_cmd_create>
	if (!buf) {
    36d6:	4604      	mov	r4, r0
    36d8:	2800      	cmp	r0, #0
    36da:	d051      	beq.n	3780 <bt_init+0x2b4>
    36dc:	2108      	movs	r1, #8
    36de:	300c      	adds	r0, #12
    36e0:	f016 f8f7 	bl	198d2 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    36e4:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    36e8:	f012 0f02 	tst.w	r2, #2
    36ec:	bf14      	ite	ne
    36ee:	232f      	movne	r3, #47	; 0x2f
    36f0:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    36f2:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    36f4:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    36f8:	bf48      	it	mi
    36fa:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    36fe:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    3702:	bf18      	it	ne
    3704:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    3708:	2200      	movs	r2, #0
    370a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    370c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3710:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    3712:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    3714:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    3716:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    3718:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    371a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    371c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    371e:	4621      	mov	r1, r4
    3720:	f242 0001 	movw	r0, #8193	; 0x2001
    3724:	f7ff fb4a 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
    3728:	4604      	mov	r4, r0
    372a:	2800      	cmp	r0, #0
    372c:	f47f af40 	bne.w	35b0 <bt_init+0xe4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    3730:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    3734:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    3738:	069a      	lsls	r2, r3, #26
    373a:	d424      	bmi.n	3786 <bt_init+0x2ba>
	if (bt_dev.le.acl_mtu) {
    373c:	b9c9      	cbnz	r1, 3772 <bt_init+0x2a6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    373e:	aa01      	add	r2, sp, #4
    3740:	f241 0005 	movw	r0, #4101	; 0x1005
    3744:	f7ff fb3a 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
    3748:	4604      	mov	r4, r0
    374a:	2800      	cmp	r0, #0
    374c:	f47f af30 	bne.w	35b0 <bt_init+0xe4>
	if (bt_dev.le.acl_mtu) {
    3750:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    3754:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
    3756:	b94b      	cbnz	r3, 376c <bt_init+0x2a0>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    3758:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    375a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    375e:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    3762:	889a      	ldrh	r2, [r3, #4]
    3764:	480e      	ldr	r0, [pc, #56]	; (37a0 <bt_init+0x2d4>)
    3766:	4611      	mov	r1, r2
    3768:	f016 ffed 	bl	1a746 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    376c:	4620      	mov	r0, r4
    376e:	f00f fdc3 	bl	132f8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    3772:	2108      	movs	r1, #8
    3774:	f640 4001 	movw	r0, #3073	; 0xc01
    3778:	f7ff fae6 	bl	2d48 <bt_hci_cmd_create>
	if (!buf) {
    377c:	4604      	mov	r4, r0
    377e:	b988      	cbnz	r0, 37a4 <bt_init+0x2d8>
		return -ENOBUFS;
    3780:	f06f 0468 	mvn.w	r4, #104	; 0x68
    3784:	e714      	b.n	35b0 <bt_init+0xe4>
	else if (!bt_dev.le.acl_mtu) {
    3786:	2900      	cmp	r1, #0
    3788:	d1f3      	bne.n	3772 <bt_init+0x2a6>
		return -EIO;
    378a:	f06f 0404 	mvn.w	r4, #4
    378e:	e70f      	b.n	35b0 <bt_init+0xe4>
    3790:	20000000 	.word	0x20000000
    3794:	20000070 	.word	0x20000070
    3798:	20000078 	.word	0x20000078
    379c:	200000d0 	.word	0x200000d0
    37a0:	20000100 	.word	0x20000100
    37a4:	2108      	movs	r1, #8
    37a6:	300c      	adds	r0, #12
    37a8:	f016 f893 	bl	198d2 <net_buf_simple_add>
	dst[0] = val;
    37ac:	2310      	movs	r3, #16
    37ae:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    37b0:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    37b2:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    37b4:	7043      	strb	r3, [r0, #1]
    37b6:	2602      	movs	r6, #2
    37b8:	2320      	movs	r3, #32
	dst[0] = val;
    37ba:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    37bc:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    37be:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    37c0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    37c2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    37c4:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    37c6:	4621      	mov	r1, r4
    37c8:	f640 4001 	movw	r0, #3073	; 0xc01
    37cc:	f7ff faf6 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
    37d0:	4604      	mov	r4, r0
    37d2:	2800      	cmp	r0, #0
    37d4:	f47f aeec 	bne.w	35b0 <bt_init+0xe4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    37d8:	4601      	mov	r1, r0
    37da:	aa01      	add	r2, sp, #4
    37dc:	f64f 4001 	movw	r0, #64513	; 0xfc01
    37e0:	f7ff faec 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
    37e4:	4604      	mov	r4, r0
    37e6:	bb48      	cbnz	r0, 383c <bt_init+0x370>
	net_buf_unref(rsp);
    37e8:	9801      	ldr	r0, [sp, #4]
    37ea:	f00f fd85 	bl	132f8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    37ee:	4621      	mov	r1, r4
    37f0:	aa01      	add	r2, sp, #4
    37f2:	f64f 4002 	movw	r0, #64514	; 0xfc02
    37f6:	f7ff fae1 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
    37fa:	4604      	mov	r4, r0
    37fc:	b9f0      	cbnz	r0, 383c <bt_init+0x370>
	rp.cmds = (void *)rsp->data;
    37fe:	9f01      	ldr	r7, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    3800:	4816      	ldr	r0, [pc, #88]	; (385c <bt_init+0x390>)
    3802:	68f9      	ldr	r1, [r7, #12]
    3804:	4632      	mov	r2, r6
    3806:	3101      	adds	r1, #1
    3808:	f014 f8f8 	bl	179fc <memcpy>
	net_buf_unref(rsp);
    380c:	4638      	mov	r0, r7
    380e:	f00f fd73 	bl	132f8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    3812:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    3816:	075b      	lsls	r3, r3, #29
    3818:	d510      	bpl.n	383c <bt_init+0x370>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    381a:	aa01      	add	r2, sp, #4
    381c:	4621      	mov	r1, r4
    381e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    3822:	f7ff facb 	bl	2dbc <bt_hci_cmd_send_sync>
		if (err) {
    3826:	b948      	cbnz	r0, 383c <bt_init+0x370>
		rp.feat = (void *)rsp->data;
    3828:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    382a:	480d      	ldr	r0, [pc, #52]	; (3860 <bt_init+0x394>)
    382c:	68e1      	ldr	r1, [r4, #12]
    382e:	2201      	movs	r2, #1
    3830:	4411      	add	r1, r2
    3832:	f014 f8e3 	bl	179fc <memcpy>
		net_buf_unref(rsp);
    3836:	4620      	mov	r0, r4
    3838:	f00f fd5e 	bl	132f8 <net_buf_unref>
	err = bt_id_init();
    383c:	f000 fa3e 	bl	3cbc <bt_id_init>
	if (err) {
    3840:	4604      	mov	r4, r0
    3842:	2800      	cmp	r0, #0
    3844:	f47f aeb4 	bne.w	35b0 <bt_init+0xe4>
		err = bt_conn_init();
    3848:	f001 f9d8 	bl	4bfc <bt_conn_init>
		if (err) {
    384c:	4604      	mov	r4, r0
    384e:	2800      	cmp	r0, #0
    3850:	f47f aeae 	bne.w	35b0 <bt_init+0xe4>
	bt_finalize_init();
    3854:	f7ff fe34 	bl	34c0 <bt_finalize_init>
	return 0;
    3858:	e6aa      	b.n	35b0 <bt_init+0xe4>
    385a:	bf00      	nop
    385c:	200000b9 	.word	0x200000b9
    3860:	200000b8 	.word	0x200000b8

00003864 <init_work>:

static void init_work(struct k_work *work)
{
    3864:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    3866:	f7ff fe31 	bl	34cc <bt_init>
	if (ready_cb) {
    386a:	4b03      	ldr	r3, [pc, #12]	; (3878 <init_work+0x14>)
    386c:	681b      	ldr	r3, [r3, #0]
    386e:	b113      	cbz	r3, 3876 <init_work+0x12>
		ready_cb(err);
	}
}
    3870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    3874:	4718      	bx	r3
}
    3876:	bd10      	pop	{r4, pc}
    3878:	20001218 	.word	0x20001218

0000387c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    387c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    387e:	4d26      	ldr	r5, [pc, #152]	; (3918 <bt_enable+0x9c>)
    3880:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
{
    3884:	b088      	sub	sp, #32
    3886:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    3888:	2b00      	cmp	r3, #0
    388a:	d03f      	beq.n	390c <bt_enable+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    388c:	f06f 0102 	mvn.w	r1, #2
    3890:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    3894:	f014 f9c3 	bl	17c1e <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3898:	2101      	movs	r1, #1
    389a:	f014 f97c 	bl	17b96 <atomic_or>
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    389e:	ea10 0401 	ands.w	r4, r0, r1
    38a2:	d136      	bne.n	3912 <bt_enable+0x96>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    38a4:	4b1d      	ldr	r3, [pc, #116]	; (391c <bt_enable+0xa0>)
    38a6:	601e      	str	r6, [r3, #0]
    38a8:	460a      	mov	r2, r1
    38aa:	f505 708c 	add.w	r0, r5, #280	; 0x118
    38ae:	f016 ff4a 	bl	1a746 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    38b2:	f505 709a 	add.w	r0, r5, #308	; 0x134
    38b6:	f016 ff01 	bl	1a6bc <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    38ba:	2200      	movs	r2, #0
    38bc:	2300      	movs	r3, #0
    38be:	e9cd 2306 	strd	r2, r3, [sp, #24]
    38c2:	f06f 0308 	mvn.w	r3, #8
    38c6:	e9cd 4302 	strd	r4, r3, [sp, #8]
    38ca:	e9cd 4400 	strd	r4, r4, [sp]
    38ce:	4b14      	ldr	r3, [pc, #80]	; (3920 <bt_enable+0xa4>)
    38d0:	4914      	ldr	r1, [pc, #80]	; (3924 <bt_enable+0xa8>)
    38d2:	9404      	str	r4, [sp, #16]
    38d4:	f44f 7240 	mov.w	r2, #768	; 0x300
    38d8:	4813      	ldr	r0, [pc, #76]	; (3928 <bt_enable+0xac>)
    38da:	f012 f92b 	bl	15b34 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    38de:	4913      	ldr	r1, [pc, #76]	; (392c <bt_enable+0xb0>)
    38e0:	4811      	ldr	r0, [pc, #68]	; (3928 <bt_enable+0xac>)
    38e2:	f016 fe5e 	bl	1a5a2 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
    38e6:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    38ea:	68db      	ldr	r3, [r3, #12]
    38ec:	4798      	blx	r3
	if (err) {
    38ee:	4604      	mov	r4, r0
    38f0:	b948      	cbnz	r0, 3906 <bt_enable+0x8a>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    38f2:	b926      	cbnz	r6, 38fe <bt_enable+0x82>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    38f4:	b008      	add	sp, #32
    38f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    38fa:	f7ff bde7 	b.w	34cc <bt_init>
	k_work_submit(&bt_dev.init);
    38fe:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    3902:	f012 fc43 	bl	1618c <k_work_submit>
}
    3906:	4620      	mov	r0, r4
    3908:	b008      	add	sp, #32
    390a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    390c:	f06f 0412 	mvn.w	r4, #18
    3910:	e7f9      	b.n	3906 <bt_enable+0x8a>
		return -EALREADY;
    3912:	f06f 0477 	mvn.w	r4, #119	; 0x77
    3916:	e7f6      	b.n	3906 <bt_enable+0x8a>
    3918:	20000000 	.word	0x20000000
    391c:	20001218 	.word	0x20001218
    3920:	000031a9 	.word	0x000031a9
    3924:	20003440 	.word	0x20003440
    3928:	20000b50 	.word	0x20000b50
    392c:	0001ccf2 	.word	0x0001ccf2

00003930 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3930:	4b04      	ldr	r3, [pc, #16]	; (3944 <bt_is_ready+0x14>)
    3932:	f3bf 8f5b 	dmb	ish
    3936:	6818      	ldr	r0, [r3, #0]
    3938:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    393c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    3940:	4770      	bx	lr
    3942:	bf00      	nop
    3944:	200000cc 	.word	0x200000cc

00003948 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    3948:	4800      	ldr	r0, [pc, #0]	; (394c <bt_get_name+0x4>)
    394a:	4770      	bx	lr
    394c:	0001ccf8 	.word	0x0001ccf8

00003950 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    3950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    3952:	4f0a      	ldr	r7, [pc, #40]	; (397c <id_find+0x2c>)
{
    3954:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    3956:	2500      	movs	r5, #0
    3958:	79fb      	ldrb	r3, [r7, #7]
    395a:	b2ec      	uxtb	r4, r5
    395c:	42a3      	cmp	r3, r4
    395e:	d802      	bhi.n	3966 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    3960:	f06f 0001 	mvn.w	r0, #1
    3964:	e009      	b.n	397a <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    3966:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    396a:	4439      	add	r1, r7
    396c:	4630      	mov	r0, r6
    396e:	f014 fb71 	bl	18054 <bt_addr_le_eq>
    3972:	3501      	adds	r5, #1
    3974:	2800      	cmp	r0, #0
    3976:	d0ef      	beq.n	3958 <id_find+0x8>
    3978:	4620      	mov	r0, r4
}
    397a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    397c:	20000000 	.word	0x20000000

00003980 <set_random_address>:
{
    3980:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    3982:	4913      	ldr	r1, [pc, #76]	; (39d0 <set_random_address+0x50>)
    3984:	2206      	movs	r2, #6
    3986:	4605      	mov	r5, r0
    3988:	f014 f828 	bl	179dc <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    398c:	b1d8      	cbz	r0, 39c6 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    398e:	2106      	movs	r1, #6
    3990:	f242 0005 	movw	r0, #8197	; 0x2005
    3994:	f7ff f9d8 	bl	2d48 <bt_hci_cmd_create>
	if (!buf) {
    3998:	4604      	mov	r4, r0
    399a:	b1b0      	cbz	r0, 39ca <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    399c:	2206      	movs	r2, #6
    399e:	4629      	mov	r1, r5
    39a0:	300c      	adds	r0, #12
    39a2:	f015 ff9c 	bl	198de <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    39a6:	2200      	movs	r2, #0
    39a8:	4621      	mov	r1, r4
    39aa:	f242 0005 	movw	r0, #8197	; 0x2005
    39ae:	f7ff fa05 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
    39b2:	b948      	cbnz	r0, 39c8 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
    39b4:	2206      	movs	r2, #6
    39b6:	4806      	ldr	r0, [pc, #24]	; (39d0 <set_random_address+0x50>)
    39b8:	4629      	mov	r1, r5
    39ba:	f014 f81f 	bl	179fc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    39be:	4b05      	ldr	r3, [pc, #20]	; (39d4 <set_random_address+0x54>)
    39c0:	2201      	movs	r2, #1
    39c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
    39c6:	2000      	movs	r0, #0
}
    39c8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    39ca:	f06f 0068 	mvn.w	r0, #104	; 0x68
    39ce:	e7fb      	b.n	39c8 <set_random_address+0x48>
    39d0:	20000061 	.word	0x20000061
    39d4:	20000000 	.word	0x20000000

000039d8 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    39d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    39da:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    39dc:	460d      	mov	r5, r1
    39de:	b179      	cbz	r1, 3a00 <id_create.constprop.0+0x28>
    39e0:	4914      	ldr	r1, [pc, #80]	; (3a34 <id_create.constprop.0+0x5c>)
    39e2:	4628      	mov	r0, r5
    39e4:	f014 fb36 	bl	18054 <bt_addr_le_eq>
    39e8:	b950      	cbnz	r0, 3a00 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
    39ea:	4813      	ldr	r0, [pc, #76]	; (3a38 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    39ec:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    39f0:	2207      	movs	r2, #7
    39f2:	4629      	mov	r1, r5
    39f4:	4420      	add	r0, r4
    39f6:	f014 f801 	bl	179fc <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    39fa:	2000      	movs	r0, #0
}
    39fc:	b003      	add	sp, #12
    39fe:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    3a00:	4668      	mov	r0, sp
    3a02:	f014 f86d 	bl	17ae0 <bt_addr_le_create_static>
			if (err) {
    3a06:	2800      	cmp	r0, #0
    3a08:	d1f8      	bne.n	39fc <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
    3a0a:	4668      	mov	r0, sp
    3a0c:	f7ff ffa0 	bl	3950 <id_find>
    3a10:	2800      	cmp	r0, #0
    3a12:	daf5      	bge.n	3a00 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    3a14:	4b08      	ldr	r3, [pc, #32]	; (3a38 <id_create.constprop.0+0x60>)
    3a16:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3a1a:	441c      	add	r4, r3
    3a1c:	2207      	movs	r2, #7
    3a1e:	4669      	mov	r1, sp
    3a20:	4620      	mov	r0, r4
    3a22:	f013 ffeb 	bl	179fc <memcpy>
		if (addr) {
    3a26:	2d00      	cmp	r5, #0
    3a28:	d0e7      	beq.n	39fa <id_create.constprop.0+0x22>
    3a2a:	2207      	movs	r2, #7
    3a2c:	4621      	mov	r1, r4
    3a2e:	4628      	mov	r0, r5
    3a30:	e7e1      	b.n	39f6 <id_create.constprop.0+0x1e>
    3a32:	bf00      	nop
    3a34:	0001cbb4 	.word	0x0001cbb4
    3a38:	20000000 	.word	0x20000000

00003a3c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    3a3c:	b570      	push	{r4, r5, r6, lr}
    3a3e:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    3a40:	4604      	mov	r4, r0
    3a42:	b918      	cbnz	r0, 3a4c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    3a44:	b1bd      	cbz	r5, 3a76 <bt_id_create+0x3a>
			return -EINVAL;
    3a46:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    3a4a:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    3a4c:	491c      	ldr	r1, [pc, #112]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3a4e:	f014 fb01 	bl	18054 <bt_addr_le_eq>
    3a52:	2800      	cmp	r0, #0
    3a54:	d1f6      	bne.n	3a44 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    3a56:	7823      	ldrb	r3, [r4, #0]
    3a58:	2b01      	cmp	r3, #1
    3a5a:	d1f4      	bne.n	3a46 <bt_id_create+0xa>
    3a5c:	79a3      	ldrb	r3, [r4, #6]
    3a5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    3a62:	2bc0      	cmp	r3, #192	; 0xc0
    3a64:	d1ef      	bne.n	3a46 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    3a66:	4620      	mov	r0, r4
    3a68:	f7ff ff72 	bl	3950 <id_find>
    3a6c:	2800      	cmp	r0, #0
    3a6e:	dbe9      	blt.n	3a44 <bt_id_create+0x8>
			return -EALREADY;
    3a70:	f06f 0077 	mvn.w	r0, #119	; 0x77
    3a74:	e7e9      	b.n	3a4a <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    3a76:	4d13      	ldr	r5, [pc, #76]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3a78:	79eb      	ldrb	r3, [r5, #7]
    3a7a:	2b01      	cmp	r3, #1
    3a7c:	d01c      	beq.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
    3a7e:	f3bf 8f5b 	dmb	ish
    3a82:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    3a86:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3a8a:	07db      	lsls	r3, r3, #31
    3a8c:	d50b      	bpl.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
	new_id = bt_dev.id_count;
    3a8e:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    3a90:	4621      	mov	r1, r4
    3a92:	4630      	mov	r0, r6
    3a94:	f7ff ffa0 	bl	39d8 <id_create.constprop.0>
	if (err) {
    3a98:	2800      	cmp	r0, #0
    3a9a:	d1d6      	bne.n	3a4a <bt_id_create+0xe>
		bt_dev.id_count++;
    3a9c:	79eb      	ldrb	r3, [r5, #7]
    3a9e:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
    3aa0:	4630      	mov	r0, r6
		bt_dev.id_count++;
    3aa2:	71eb      	strb	r3, [r5, #7]
	return new_id;
    3aa4:	e7d1      	b.n	3a4a <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    3aa6:	2c00      	cmp	r4, #0
    3aa8:	d0cd      	beq.n	3a46 <bt_id_create+0xa>
    3aaa:	4905      	ldr	r1, [pc, #20]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3aac:	4620      	mov	r0, r4
    3aae:	f014 fad1 	bl	18054 <bt_addr_le_eq>
    3ab2:	2800      	cmp	r0, #0
    3ab4:	d0eb      	beq.n	3a8e <bt_id_create+0x52>
    3ab6:	e7c6      	b.n	3a46 <bt_id_create+0xa>
		return -ENOMEM;
    3ab8:	f06f 000b 	mvn.w	r0, #11
    3abc:	e7c5      	b.n	3a4a <bt_id_create+0xe>
    3abe:	bf00      	nop
    3ac0:	0001cbb4 	.word	0x0001cbb4
    3ac4:	20000000 	.word	0x20000000

00003ac8 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    3ac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    3aca:	4604      	mov	r4, r0
    3acc:	b198      	cbz	r0, 3af6 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    3ace:	aa01      	add	r2, sp, #4
    3ad0:	2100      	movs	r1, #0
    3ad2:	f241 0009 	movw	r0, #4105	; 0x1009
    3ad6:	f7ff f971 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
    3ada:	4606      	mov	r6, r0
    3adc:	b958      	cbnz	r0, 3af6 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    3ade:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    3ae0:	490f      	ldr	r1, [pc, #60]	; (3b20 <bt_id_read_public_addr+0x58>)

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    3ae2:	68dd      	ldr	r5, [r3, #12]
    3ae4:	3501      	adds	r5, #1
    3ae6:	2206      	movs	r2, #6
    3ae8:	4628      	mov	r0, r5
    3aea:	f013 ff77 	bl	179dc <memcmp>
    3aee:	b928      	cbnz	r0, 3afc <bt_id_read_public_addr+0x34>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
    3af0:	9801      	ldr	r0, [sp, #4]
    3af2:	f00f fc01 	bl	132f8 <net_buf_unref>
		return 0U;
    3af6:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    3af8:	b002      	add	sp, #8
    3afa:	bd70      	pop	{r4, r5, r6, pc}
    3afc:	4909      	ldr	r1, [pc, #36]	; (3b24 <bt_id_read_public_addr+0x5c>)
    3afe:	2206      	movs	r2, #6
    3b00:	4628      	mov	r0, r5
    3b02:	f013 ff6b 	bl	179dc <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    3b06:	2800      	cmp	r0, #0
    3b08:	d0f2      	beq.n	3af0 <bt_id_read_public_addr+0x28>
	memcpy(dst, src, sizeof(*dst));
    3b0a:	2206      	movs	r2, #6
    3b0c:	4629      	mov	r1, r5
    3b0e:	1c60      	adds	r0, r4, #1
    3b10:	f013 ff74 	bl	179fc <memcpy>
	net_buf_unref(rsp);
    3b14:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    3b16:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    3b18:	f00f fbee 	bl	132f8 <net_buf_unref>
	return 1U;
    3b1c:	2001      	movs	r0, #1
    3b1e:	e7eb      	b.n	3af8 <bt_id_read_public_addr+0x30>
    3b20:	0001cbc1 	.word	0x0001cbc1
    3b24:	0001cbbb 	.word	0x0001cbbb

00003b28 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    3b28:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    3b2a:	4668      	mov	r0, sp
    3b2c:	f7ff ffcc 	bl	3ac8 <bt_id_read_public_addr>
    3b30:	4b04      	ldr	r3, [pc, #16]	; (3b44 <bt_setup_public_id_addr+0x1c>)
    3b32:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    3b34:	b118      	cbz	r0, 3b3e <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    3b36:	4669      	mov	r1, sp
    3b38:	2000      	movs	r0, #0
    3b3a:	f7ff ff4d 	bl	39d8 <id_create.constprop.0>
}
    3b3e:	b003      	add	sp, #12
    3b40:	f85d fb04 	ldr.w	pc, [sp], #4
    3b44:	20000000 	.word	0x20000000

00003b48 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    3b48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    3b4c:	4b16      	ldr	r3, [pc, #88]	; (3ba8 <bt_read_static_addr+0x60>)
    3b4e:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    3b52:	07db      	lsls	r3, r3, #31
{
    3b54:	4607      	mov	r7, r0
    3b56:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    3b58:	d404      	bmi.n	3b64 <bt_read_static_addr+0x1c>
		LOG_WRN("Read Static Addresses command not available");
		return 0;
    3b5a:	2600      	movs	r6, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
    3b5c:	4630      	mov	r0, r6
    3b5e:	b002      	add	sp, #8
    3b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    3b64:	aa01      	add	r2, sp, #4
    3b66:	2100      	movs	r1, #0
    3b68:	f64f 4009 	movw	r0, #64521	; 0xfc09
    3b6c:	f7ff f926 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
    3b70:	4604      	mov	r4, r0
    3b72:	2800      	cmp	r0, #0
    3b74:	d1f1      	bne.n	3b5a <bt_read_static_addr+0x12>
	rp = (void *)rsp->data;
    3b76:	9b01      	ldr	r3, [sp, #4]
    3b78:	68dd      	ldr	r5, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
    3b7a:	786e      	ldrb	r6, [r5, #1]
    3b7c:	4546      	cmp	r6, r8
    3b7e:	bf28      	it	cs
    3b80:	4646      	movcs	r6, r8
	for (i = 0; i < cnt; i++) {
    3b82:	3502      	adds	r5, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    3b84:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
    3b88:	42a6      	cmp	r6, r4
    3b8a:	dc03      	bgt.n	3b94 <bt_read_static_addr+0x4c>
	net_buf_unref(rsp);
    3b8c:	9801      	ldr	r0, [sp, #4]
    3b8e:	f00f fbb3 	bl	132f8 <net_buf_unref>
	if (!cnt) {
    3b92:	e7e3      	b.n	3b5c <bt_read_static_addr+0x14>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    3b94:	4629      	mov	r1, r5
    3b96:	fb08 7004 	mla	r0, r8, r4, r7
    3b9a:	2216      	movs	r2, #22
    3b9c:	f013 ff2e 	bl	179fc <memcpy>
	for (i = 0; i < cnt; i++) {
    3ba0:	3401      	adds	r4, #1
    3ba2:	3516      	adds	r5, #22
    3ba4:	e7f0      	b.n	3b88 <bt_read_static_addr+0x40>
    3ba6:	bf00      	nop
    3ba8:	20000000 	.word	0x20000000

00003bac <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    3bac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    3bae:	4e15      	ldr	r6, [pc, #84]	; (3c04 <bt_setup_random_id_addr+0x58>)
    3bb0:	79f4      	ldrb	r4, [r6, #7]
{
    3bb2:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    3bb4:	b92c      	cbnz	r4, 3bc2 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    3bb6:	2101      	movs	r1, #1
    3bb8:	a802      	add	r0, sp, #8
    3bba:	f7ff ffc5 	bl	3b48 <bt_read_static_addr>
    3bbe:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    3bc0:	b9c8      	cbnz	r0, 3bf6 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    3bc2:	2100      	movs	r1, #0
    3bc4:	4608      	mov	r0, r1
}
    3bc6:	b009      	add	sp, #36	; 0x24
    3bc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    3bcc:	f7ff bf36 	b.w	3a3c <bt_id_create>
    3bd0:	ab02      	add	r3, sp, #8
    3bd2:	fb07 3105 	mla	r1, r7, r5, r3
    3bd6:	2206      	movs	r2, #6
    3bd8:	f10d 0001 	add.w	r0, sp, #1
    3bdc:	f013 ff0e 	bl	179fc <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    3be0:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    3be2:	4669      	mov	r1, sp
    3be4:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    3be6:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    3bea:	f7ff fef5 	bl	39d8 <id_create.constprop.0>
				if (err) {
    3bee:	3401      	adds	r4, #1
    3bf0:	b110      	cbz	r0, 3bf8 <bt_setup_random_id_addr+0x4c>
}
    3bf2:	b009      	add	sp, #36	; 0x24
    3bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    3bf6:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    3bf8:	79f3      	ldrb	r3, [r6, #7]
    3bfa:	b2e5      	uxtb	r5, r4
    3bfc:	42ab      	cmp	r3, r5
    3bfe:	d8e7      	bhi.n	3bd0 <bt_setup_random_id_addr+0x24>
			return 0;
    3c00:	2000      	movs	r0, #0
    3c02:	e7f6      	b.n	3bf2 <bt_setup_random_id_addr+0x46>
    3c04:	20000000 	.word	0x20000000

00003c08 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    3c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c0c:	4690      	mov	r8, r2
    3c0e:	460e      	mov	r6, r1
    3c10:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    3c12:	4602      	mov	r2, r0
    3c14:	2800      	cmp	r0, #0
    3c16:	d04b      	beq.n	3cb0 <bt_id_set_adv_own_addr+0xa8>
    3c18:	2b00      	cmp	r3, #0
    3c1a:	d049      	beq.n	3cb0 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    3c1c:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    3c1e:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    3c20:	d531      	bpl.n	3c86 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    3c22:	4f25      	ldr	r7, [pc, #148]	; (3cb8 <bt_id_set_adv_own_addr+0xb0>)
    3c24:	f1b8 0f00 	cmp.w	r8, #0
    3c28:	d013      	beq.n	3c52 <bt_id_set_adv_own_addr+0x4a>
    3c2a:	0688      	lsls	r0, r1, #26
    3c2c:	d40a      	bmi.n	3c44 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    3c2e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    3c32:	5cfb      	ldrb	r3, [r7, r3]
    3c34:	2b01      	cmp	r3, #1
    3c36:	d015      	beq.n	3c64 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    3c38:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    3c3a:	06b2      	lsls	r2, r6, #26
    3c3c:	d50f      	bpl.n	3c5e <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    3c3e:	f043 0302 	orr.w	r3, r3, #2
    3c42:	e00b      	b.n	3c5c <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    3c44:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
    3c48:	0659      	lsls	r1, r3, #25
    3c4a:	d4f0      	bmi.n	3c2e <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    3c4c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3c50:	e006      	b.n	3c60 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    3c52:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    3c56:	5cfb      	ldrb	r3, [r7, r3]
    3c58:	2b01      	cmp	r3, #1
    3c5a:	d003      	beq.n	3c64 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    3c5c:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    3c5e:	2000      	movs	r0, #0
}
    3c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    3c64:	2107      	movs	r1, #7
    3c66:	fb01 7104 	mla	r1, r1, r4, r7
    3c6a:	3101      	adds	r1, #1
    3c6c:	4610      	mov	r0, r2
    3c6e:	f014 f9fe 	bl	1806e <bt_id_set_adv_random_addr>
				if (err) {
    3c72:	2800      	cmp	r0, #0
    3c74:	d1f4      	bne.n	3c60 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    3c76:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3c7a:	5d3b      	ldrb	r3, [r7, r4]
    3c7c:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    3c7e:	f1b8 0f00 	cmp.w	r8, #0
    3c82:	d0ec      	beq.n	3c5e <bt_id_set_adv_own_addr+0x56>
    3c84:	e7d9      	b.n	3c3a <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    3c86:	074b      	lsls	r3, r1, #29
    3c88:	d50e      	bpl.n	3ca8 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    3c8a:	4e0b      	ldr	r6, [pc, #44]	; (3cb8 <bt_id_set_adv_own_addr+0xb0>)
    3c8c:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    3c90:	5df3      	ldrb	r3, [r6, r7]
    3c92:	2b01      	cmp	r3, #1
    3c94:	d1e2      	bne.n	3c5c <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    3c96:	2107      	movs	r1, #7
    3c98:	fb11 3104 	smlabb	r1, r1, r4, r3
    3c9c:	4431      	add	r1, r6
    3c9e:	f014 f9e6 	bl	1806e <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    3ca2:	5df3      	ldrb	r3, [r6, r7]
    3ca4:	702b      	strb	r3, [r5, #0]
		if (err) {
    3ca6:	e7db      	b.n	3c60 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    3ca8:	f014 f9e9 	bl	1807e <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    3cac:	2301      	movs	r3, #1
    3cae:	e7f9      	b.n	3ca4 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    3cb0:	f06f 0015 	mvn.w	r0, #21
    3cb4:	e7d4      	b.n	3c60 <bt_id_set_adv_own_addr+0x58>
    3cb6:	bf00      	nop
    3cb8:	20000000 	.word	0x20000000

00003cbc <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    3cbc:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    3cbe:	4c0a      	ldr	r4, [pc, #40]	; (3ce8 <bt_id_init+0x2c>)
    3cc0:	79e3      	ldrb	r3, [r4, #7]
    3cc2:	b10b      	cbz	r3, 3cc8 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    3cc4:	2000      	movs	r0, #0
}
    3cc6:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    3cc8:	f7ff ff2e 	bl	3b28 <bt_setup_public_id_addr>
		if (err) {
    3ccc:	2800      	cmp	r0, #0
    3cce:	d1fa      	bne.n	3cc6 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    3cd0:	79e3      	ldrb	r3, [r4, #7]
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	d1f6      	bne.n	3cc4 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    3cd6:	f7ff ff69 	bl	3bac <bt_setup_random_id_addr>
		if (err) {
    3cda:	2800      	cmp	r0, #0
    3cdc:	d1f3      	bne.n	3cc6 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    3cde:	1c60      	adds	r0, r4, #1
}
    3ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    3ce4:	f7ff be4c 	b.w	3980 <set_random_address>
    3ce8:	20000000 	.word	0x20000000

00003cec <valid_adv_param>:

	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
    3cec:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    3cee:	6843      	ldr	r3, [r0, #4]
{
    3cf0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    3cf2:	0558      	lsls	r0, r3, #21
    3cf4:	d501      	bpl.n	3cfa <valid_adv_param+0xe>
		return false;
    3cf6:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    3cf8:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3cfa:	6922      	ldr	r2, [r4, #16]
    3cfc:	b10a      	cbz	r2, 3d02 <valid_adv_param+0x16>
    3cfe:	07d9      	lsls	r1, r3, #31
    3d00:	d5f9      	bpl.n	3cf6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    3d02:	4d19      	ldr	r5, [pc, #100]	; (3d68 <valid_adv_param+0x7c>)
    3d04:	7820      	ldrb	r0, [r4, #0]
    3d06:	79eb      	ldrb	r3, [r5, #7]
    3d08:	4283      	cmp	r3, r0
    3d0a:	d9f4      	bls.n	3cf6 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    3d0c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
    3d10:	4916      	ldr	r1, [pc, #88]	; (3d6c <valid_adv_param+0x80>)
    3d12:	2207      	movs	r2, #7
    3d14:	4428      	add	r0, r5
    3d16:	f013 fe61 	bl	179dc <memcmp>
	if (param->id >= bt_dev.id_count ||
    3d1a:	2800      	cmp	r0, #0
    3d1c:	d0eb      	beq.n	3cf6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3d1e:	6860      	ldr	r0, [r4, #4]
    3d20:	07c2      	lsls	r2, r0, #31
    3d22:	d406      	bmi.n	3d32 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3d24:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    3d28:	2b08      	cmp	r3, #8
    3d2a:	d802      	bhi.n	3d32 <valid_adv_param+0x46>
    3d2c:	68a3      	ldr	r3, [r4, #8]
    3d2e:	2b9f      	cmp	r3, #159	; 0x9f
    3d30:	d9e1      	bls.n	3cf6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    3d32:	f010 0f30 	tst.w	r0, #48	; 0x30
    3d36:	d002      	beq.n	3d3e <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    3d38:	6923      	ldr	r3, [r4, #16]
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d0db      	beq.n	3cf6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    3d3e:	06c3      	lsls	r3, r0, #27
    3d40:	d401      	bmi.n	3d46 <valid_adv_param+0x5a>
    3d42:	6923      	ldr	r3, [r4, #16]
    3d44:	b943      	cbnz	r3, 3d58 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
    3d46:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    3d4a:	429a      	cmp	r2, r3
    3d4c:	d8d3      	bhi.n	3cf6 <valid_adv_param+0xa>
    3d4e:	2a1f      	cmp	r2, #31
    3d50:	d9d1      	bls.n	3cf6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    3d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    3d56:	d8ce      	bhi.n	3cf6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    3d58:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    3d5c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    3d60:	bf18      	it	ne
    3d62:	2001      	movne	r0, #1
    3d64:	e7c8      	b.n	3cf8 <valid_adv_param+0xc>
    3d66:	bf00      	nop
    3d68:	20000000 	.word	0x20000000
    3d6c:	0001cbb4 	.word	0x0001cbb4

00003d70 <adv_is_directed>:

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
    3d70:	b508      	push	{r3, lr}
    3d72:	4904      	ldr	r1, [pc, #16]	; (3d84 <adv_is_directed+0x14>)
    3d74:	2207      	movs	r2, #7
    3d76:	3009      	adds	r0, #9
    3d78:	f013 fe30 	bl	179dc <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
    3d7c:	3800      	subs	r0, #0
    3d7e:	bf18      	it	ne
    3d80:	2001      	movne	r0, #1
    3d82:	bd08      	pop	{r3, pc}
    3d84:	0001cbb4 	.word	0x0001cbb4

00003d88 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    3d88:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    3d8a:	4b15      	ldr	r3, [pc, #84]	; (3de0 <le_adv_start_add_conn+0x58>)
    3d8c:	7802      	ldrb	r2, [r0, #0]
    3d8e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    3d92:	4604      	mov	r4, r0
    3d94:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
    3d96:	f7ff ffeb 	bl	3d70 <adv_is_directed>
    3d9a:	4603      	mov	r3, r0
    3d9c:	7820      	ldrb	r0, [r4, #0]
    3d9e:	b96b      	cbnz	r3, 3dbc <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    3da0:	4910      	ldr	r1, [pc, #64]	; (3de4 <le_adv_start_add_conn+0x5c>)
    3da2:	f000 fd8f 	bl	48c4 <bt_conn_add_le>
		if (!conn) {
    3da6:	4604      	mov	r4, r0
    3da8:	b910      	cbnz	r0, 3db0 <le_adv_start_add_conn+0x28>
			return -ENOMEM;
    3daa:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
    3dae:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    3db0:	2104      	movs	r1, #4
    3db2:	f000 fc25 	bl	4600 <bt_conn_set_state>
		*out_conn = conn;
    3db6:	602c      	str	r4, [r5, #0]
		return 0;
    3db8:	2000      	movs	r0, #0
    3dba:	e7f8      	b.n	3dae <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    3dbc:	f104 0609 	add.w	r6, r4, #9
    3dc0:	4631      	mov	r1, r6
    3dc2:	f014 fbc1 	bl	18548 <bt_conn_exists_le>
    3dc6:	b940      	cbnz	r0, 3dda <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    3dc8:	7820      	ldrb	r0, [r4, #0]
    3dca:	4631      	mov	r1, r6
    3dcc:	f000 fd7a 	bl	48c4 <bt_conn_add_le>
	if (!conn) {
    3dd0:	4604      	mov	r4, r0
    3dd2:	2800      	cmp	r0, #0
    3dd4:	d0e9      	beq.n	3daa <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    3dd6:	2105      	movs	r1, #5
    3dd8:	e7eb      	b.n	3db2 <le_adv_start_add_conn+0x2a>
		return -EINVAL;
    3dda:	f06f 0015 	mvn.w	r0, #21
    3dde:	e7e6      	b.n	3dae <le_adv_start_add_conn+0x26>
    3de0:	20000000 	.word	0x20000000
    3de4:	0001cbad 	.word	0x0001cbad

00003de8 <bt_le_adv_lookup_legacy>:
}
    3de8:	4800      	ldr	r0, [pc, #0]	; (3dec <bt_le_adv_lookup_legacy+0x4>)
    3dea:	4770      	bx	lr
    3dec:	20000018 	.word	0x20000018

00003df0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    3df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    3df4:	f8d1 9010 	ldr.w	r9, [r1, #16]
{
    3df8:	b08d      	sub	sp, #52	; 0x34
    3dfa:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    3dfc:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
    3dfe:	ebb9 0603 	subs.w	r6, r9, r3
{
    3e02:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3e04:	488d      	ldr	r0, [pc, #564]	; (403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>)
    3e06:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    3e08:	bf18      	it	ne
    3e0a:	2601      	movne	r6, #1
	struct bt_conn *conn = NULL;
    3e0c:	9307      	str	r3, [sp, #28]
    3e0e:	f014 f960 	bl	180d2 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    3e12:	0742      	lsls	r2, r0, #29
{
    3e14:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    3e16:	f140 8106 	bpl.w	4026 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x26>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    3e1a:	4608      	mov	r0, r1
    3e1c:	f7ff ff66 	bl	3cec <valid_adv_param>
    3e20:	b928      	cbnz	r0, 3e2e <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    3e22:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    3e26:	4658      	mov	r0, fp
    3e28:	b00d      	add	sp, #52	; 0x34
    3e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    3e2e:	4620      	mov	r0, r4
    3e30:	f014 f93c 	bl	180ac <bt_id_adv_random_addr_check>
    3e34:	4680      	mov	r8, r0
    3e36:	2800      	cmp	r0, #0
    3e38:	d0f3      	beq.n	3e22 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    3e3a:	f105 0710 	add.w	r7, r5, #16
    3e3e:	4638      	mov	r0, r7
    3e40:	f014 f947 	bl	180d2 <atomic_get>
    3e44:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    3e46:	f3c0 1bc0 	ubfx	fp, r0, #7, #1
    3e4a:	f100 80ef 	bmi.w	402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
	(void)memset(&set_param, 0, sizeof(set_param));
    3e4e:	220f      	movs	r2, #15
    3e50:	4659      	mov	r1, fp
    3e52:	a808      	add	r0, sp, #32
    3e54:	f013 fddd 	bl	17a12 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    3e58:	68a3      	ldr	r3, [r4, #8]
    3e5a:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
    3e5e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    3e60:	68e3      	ldr	r3, [r4, #12]
    3e62:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    3e66:	f014 f925 	bl	180b4 <get_adv_channel_map>
	if (adv->id != param->id) {
    3e6a:	782a      	ldrb	r2, [r5, #0]
    3e6c:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    3e6e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    3e72:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    3e74:	f88d b02e 	strb.w	fp, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
    3e78:	d004      	beq.n	3e84 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3e7a:	4870      	ldr	r0, [pc, #448]	; (403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>)
    3e7c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    3e80:	f014 f92d 	bl	180de <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    3e84:	4a6e      	ldr	r2, [pc, #440]	; (4040 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x40>)
	adv->id = param->id;
    3e86:	7823      	ldrb	r3, [r4, #0]
    3e88:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    3e8a:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    3e8e:	6861      	ldr	r1, [r4, #4]
    3e90:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    3e94:	4632      	mov	r2, r6
    3e96:	4628      	mov	r0, r5
    3e98:	f7ff feb6 	bl	3c08 <bt_id_set_adv_own_addr>
	if (err) {
    3e9c:	4683      	mov	fp, r0
    3e9e:	2800      	cmp	r0, #0
    3ea0:	d1c1      	bne.n	3e26 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    3ea2:	f105 0009 	add.w	r0, r5, #9
	memcpy(dst, src, sizeof(*dst));
    3ea6:	2207      	movs	r2, #7
	if (dir_adv) {
    3ea8:	f1b9 0f00 	cmp.w	r9, #0
    3eac:	d013      	beq.n	3ed6 <bt_le_adv_start_legacy+0xe6>
    3eae:	6921      	ldr	r1, [r4, #16]
    3eb0:	f013 fda4 	bl	179fc <memcpy>
	name_type = get_adv_name_type_param(param);
    3eb4:	4620      	mov	r0, r4
    3eb6:	f014 fa0e 	bl	182d6 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    3eba:	6862      	ldr	r2, [r4, #4]
	name_type = get_adv_name_type_param(param);
    3ebc:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    3ebe:	07d0      	lsls	r0, r2, #31
    3ec0:	d416      	bmi.n	3ef0 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    3ec2:	0592      	lsls	r2, r2, #22
    3ec4:	d403      	bmi.n	3ece <bt_le_adv_start_legacy+0xde>
    3ec6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3ec8:	b90b      	cbnz	r3, 3ece <bt_le_adv_start_legacy+0xde>
    3eca:	2e02      	cmp	r6, #2
    3ecc:	d14d      	bne.n	3f6a <bt_le_adv_start_legacy+0x17a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    3ece:	2302      	movs	r3, #2
    3ed0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    3ed4:	e01a      	b.n	3f0c <bt_le_adv_start_legacy+0x11c>
    3ed6:	495b      	ldr	r1, [pc, #364]	; (4044 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44>)
    3ed8:	f013 fd90 	bl	179fc <memcpy>
	name_type = get_adv_name_type_param(param);
    3edc:	4620      	mov	r0, r4
    3ede:	f014 f9fa 	bl	182d6 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    3ee2:	6862      	ldr	r2, [r4, #4]
    3ee4:	07d1      	lsls	r1, r2, #31
	name_type = get_adv_name_type_param(param);
    3ee6:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    3ee8:	d5eb      	bpl.n	3ec2 <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
    3eea:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
    3eee:	e00d      	b.n	3f0c <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    3ef0:	f012 0f10 	tst.w	r2, #16
    3ef4:	bf0c      	ite	eq
    3ef6:	2201      	moveq	r2, #1
    3ef8:	2204      	movne	r2, #4
    3efa:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    3efe:	6921      	ldr	r1, [r4, #16]
    3f00:	2207      	movs	r2, #7
    3f02:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    3f06:	f013 fd79 	bl	179fc <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    3f0a:	46d8      	mov	r8, fp
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    3f0c:	210f      	movs	r1, #15
    3f0e:	f242 0006 	movw	r0, #8198	; 0x2006
    3f12:	f7fe ff19 	bl	2d48 <bt_hci_cmd_create>
	if (!buf) {
    3f16:	4683      	mov	fp, r0
    3f18:	2800      	cmp	r0, #0
    3f1a:	f000 808a 	beq.w	4032 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x32>
    3f1e:	220f      	movs	r2, #15
    3f20:	a908      	add	r1, sp, #32
    3f22:	300c      	adds	r0, #12
    3f24:	f015 fcdb 	bl	198de <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    3f28:	2200      	movs	r2, #0
    3f2a:	4659      	mov	r1, fp
    3f2c:	f242 0006 	movw	r0, #8198	; 0x2006
    3f30:	f7fe ff44 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
    3f34:	2800      	cmp	r0, #0
    3f36:	d17f      	bne.n	4038 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38>
	if (!dir_adv) {
    3f38:	f1b9 0f00 	cmp.w	r9, #0
    3f3c:	d01b      	beq.n	3f76 <bt_le_adv_start_legacy+0x186>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3f3e:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    3f40:	07db      	lsls	r3, r3, #31
    3f42:	d426      	bmi.n	3f92 <bt_le_adv_start_legacy+0x1a2>
	return bt_le_adv_set_enable_legacy(adv, enable);
    3f44:	4628      	mov	r0, r5
    3f46:	2101      	movs	r1, #1
    3f48:	f014 f9d5 	bl	182f6 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    3f4c:	9d07      	ldr	r5, [sp, #28]
	if (err) {
    3f4e:	4683      	mov	fp, r0
    3f50:	2800      	cmp	r0, #0
    3f52:	d060      	beq.n	4016 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    3f54:	2d00      	cmp	r5, #0
    3f56:	f43f af66 	beq.w	3e26 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3f5a:	4628      	mov	r0, r5
    3f5c:	2100      	movs	r1, #0
    3f5e:	f000 fb4f 	bl	4600 <bt_conn_set_state>
			bt_conn_unref(conn);
    3f62:	4628      	mov	r0, r5
    3f64:	f014 fa89 	bl	1847a <bt_conn_unref>
    3f68:	e75d      	b.n	3e26 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    3f6a:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    3f6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    3f70:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    3f74:	e7ca      	b.n	3f0c <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    3f76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3f78:	9300      	str	r3, [sp, #0]
    3f7a:	e9cd 8601 	strd	r8, r6, [sp, #4]
    3f7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3f80:	9905      	ldr	r1, [sp, #20]
    3f82:	4652      	mov	r2, sl
    3f84:	4628      	mov	r0, r5
    3f86:	f014 f92f 	bl	181e8 <le_adv_update.constprop.0>
		if (err) {
    3f8a:	4683      	mov	fp, r0
    3f8c:	2800      	cmp	r0, #0
    3f8e:	d0d6      	beq.n	3f3e <bt_le_adv_start_legacy+0x14e>
    3f90:	e749      	b.n	3e26 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    3f92:	a907      	add	r1, sp, #28
    3f94:	4628      	mov	r0, r5
    3f96:	f7ff fef7 	bl	3d88 <le_adv_start_add_conn>
		if (err) {
    3f9a:	4683      	mov	fp, r0
    3f9c:	2800      	cmp	r0, #0
    3f9e:	d0d1      	beq.n	3f44 <bt_le_adv_start_legacy+0x154>
			if (err == -ENOMEM && !dir_adv &&
    3fa0:	f110 0f0c 	cmn.w	r0, #12
    3fa4:	f47f af3f 	bne.w	3e26 <bt_le_adv_start_legacy+0x36>
    3fa8:	f1b9 0f00 	cmp.w	r9, #0
    3fac:	f47f af3b 	bne.w	3e26 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    3fb0:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    3fb2:	0790      	lsls	r0, r2, #30
    3fb4:	f53f af37 	bmi.w	3e26 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    3fb8:	6863      	ldr	r3, [r4, #4]
    3fba:	f083 0302 	eor.w	r3, r3, #2
    3fbe:	f3c3 0b40 	ubfx	fp, r3, #1, #1
    3fc2:	f00b 0201 	and.w	r2, fp, #1
    3fc6:	210e      	movs	r1, #14
    3fc8:	4638      	mov	r0, r7
    3fca:	f014 f8f6 	bl	181ba <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    3fce:	1e73      	subs	r3, r6, #1
    3fd0:	425a      	negs	r2, r3
    3fd2:	415a      	adcs	r2, r3
    3fd4:	2108      	movs	r1, #8
    3fd6:	4638      	mov	r0, r7
    3fd8:	f014 f8ef 	bl	181ba <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    3fdc:	1eb1      	subs	r1, r6, #2
    3fde:	424a      	negs	r2, r1
    3fe0:	414a      	adcs	r2, r1
    3fe2:	4638      	mov	r0, r7
    3fe4:	2109      	movs	r1, #9
    3fe6:	f014 f8e8 	bl	181ba <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    3fea:	6862      	ldr	r2, [r4, #4]
    3fec:	210a      	movs	r1, #10
    3fee:	f002 0201 	and.w	r2, r2, #1
    3ff2:	4638      	mov	r0, r7
    3ff4:	f014 f8e1 	bl	181ba <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    3ff8:	4642      	mov	r2, r8
    3ffa:	210b      	movs	r1, #11
    3ffc:	4638      	mov	r0, r7
    3ffe:	f014 f8dc 	bl	181ba <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    4002:	6862      	ldr	r2, [r4, #4]
    4004:	210d      	movs	r1, #13
    4006:	f3c2 0280 	ubfx	r2, r2, #2, #1
    400a:	4638      	mov	r0, r7
    400c:	f014 f8d5 	bl	181ba <atomic_set_bit_to>
	return 0;
    4010:	f04f 0b00 	mov.w	fp, #0
    4014:	e707      	b.n	3e26 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    4016:	b115      	cbz	r5, 401e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e>
		bt_conn_unref(conn);
    4018:	4628      	mov	r0, r5
    401a:	f014 fa2e 	bl	1847a <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    401e:	f1b9 0f00 	cmp.w	r9, #0
    4022:	d1ce      	bne.n	3fc2 <bt_le_adv_start_legacy+0x1d2>
    4024:	e7c8      	b.n	3fb8 <bt_le_adv_start_legacy+0x1c8>
		return -EAGAIN;
    4026:	f06f 0b0a 	mvn.w	fp, #10
    402a:	e6fc      	b.n	3e26 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    402c:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    4030:	e6f9      	b.n	3e26 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    4032:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    4036:	e6f6      	b.n	3e26 <bt_le_adv_start_legacy+0x36>
    4038:	4683      	mov	fp, r0
    403a:	e6f4      	b.n	3e26 <bt_le_adv_start_legacy+0x36>
    403c:	200000cc 	.word	0x200000cc
    4040:	20000000 	.word	0x20000000
    4044:	0001cbb4 	.word	0x0001cbb4

00004048 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    4048:	b573      	push	{r0, r1, r4, r5, r6, lr}
    404a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    404c:	9a06      	ldr	r2, [sp, #24]
{
    404e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    4050:	e9cd 3200 	strd	r3, r2, [sp]
    4054:	462b      	mov	r3, r5
    4056:	460a      	mov	r2, r1
    4058:	4601      	mov	r1, r0
    405a:	4811      	ldr	r0, [pc, #68]	; (40a0 <bt_le_adv_start+0x58>)
    405c:	f7ff fec8 	bl	3df0 <bt_le_adv_start_legacy>
    4060:	4621      	mov	r1, r4
    4062:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    4064:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    4066:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    406a:	429d      	cmp	r5, r3
    406c:	d102      	bne.n	4074 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    406e:	4630      	mov	r0, r6
    4070:	b002      	add	sp, #8
    4072:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    4074:	880a      	ldrh	r2, [r1, #0]
    4076:	4282      	cmp	r2, r0
    4078:	d104      	bne.n	4084 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    407a:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    407c:	b112      	cbz	r2, 4084 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    407e:	7812      	ldrb	r2, [r2, #0]
    4080:	07d2      	lsls	r2, r2, #31
    4082:	d402      	bmi.n	408a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    4084:	3301      	adds	r3, #1
    4086:	3108      	adds	r1, #8
    4088:	e7ef      	b.n	406a <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    408a:	4906      	ldr	r1, [pc, #24]	; (40a4 <bt_le_adv_start+0x5c>)
    408c:	4806      	ldr	r0, [pc, #24]	; (40a8 <bt_le_adv_start+0x60>)
    408e:	f016 fc21 	bl	1a8d4 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    4092:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    4096:	2300      	movs	r3, #0
    4098:	4803      	ldr	r0, [pc, #12]	; (40a8 <bt_le_adv_start+0x60>)
    409a:	f012 f913 	bl	162c4 <k_work_reschedule>
    409e:	e7e6      	b.n	406e <bt_le_adv_start+0x26>
    40a0:	20000018 	.word	0x20000018
    40a4:	00018347 	.word	0x00018347
    40a8:	20000030 	.word	0x20000030

000040ac <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    40ac:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    40ae:	4819      	ldr	r0, [pc, #100]	; (4114 <bt_le_adv_stop+0x68>)
    40b0:	f014 f946 	bl	18340 <bt_le_lim_adv_cancel_timeout>
    40b4:	4818      	ldr	r0, [pc, #96]	; (4118 <bt_le_adv_stop+0x6c>)
    40b6:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    40ba:	f014 f810 	bl	180de <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    40be:	4816      	ldr	r0, [pc, #88]	; (4118 <bt_le_adv_stop+0x6c>)
    40c0:	f014 f807 	bl	180d2 <atomic_get>
    40c4:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    40c6:	061a      	lsls	r2, r3, #24
    40c8:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    40cc:	d521      	bpl.n	4112 <bt_le_adv_stop+0x66>
    40ce:	4812      	ldr	r0, [pc, #72]	; (4118 <bt_le_adv_stop+0x6c>)
    40d0:	f013 ffff 	bl	180d2 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    40d4:	0543      	lsls	r3, r0, #21
    40d6:	d512      	bpl.n	40fe <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
    40d8:	480e      	ldr	r0, [pc, #56]	; (4114 <bt_le_adv_stop+0x68>)
    40da:	f7ff fe49 	bl	3d70 <adv_is_directed>
    40de:	4b0f      	ldr	r3, [pc, #60]	; (411c <bt_le_adv_stop+0x70>)
    40e0:	b998      	cbnz	r0, 410a <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    40e2:	490f      	ldr	r1, [pc, #60]	; (4120 <bt_le_adv_stop+0x74>)
    40e4:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    40e6:	7e18      	ldrb	r0, [r3, #24]
    40e8:	f000 fc20 	bl	492c <bt_conn_lookup_state_le>
    40ec:	4604      	mov	r4, r0
	if (conn) {
    40ee:	b130      	cbz	r0, 40fe <bt_le_adv_stop+0x52>
		conn->err = status;
    40f0:	2100      	movs	r1, #0
    40f2:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    40f4:	f000 fa84 	bl	4600 <bt_conn_set_state>
		bt_conn_unref(conn);
    40f8:	4620      	mov	r0, r4
    40fa:	f014 f9be 	bl	1847a <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    40fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    4102:	4804      	ldr	r0, [pc, #16]	; (4114 <bt_le_adv_stop+0x68>)
    4104:	2100      	movs	r1, #0
    4106:	f014 b8f6 	b.w	182f6 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    410a:	2205      	movs	r2, #5
    410c:	f103 0121 	add.w	r1, r3, #33	; 0x21
    4110:	e7e9      	b.n	40e6 <bt_le_adv_stop+0x3a>
}
    4112:	bd10      	pop	{r4, pc}
    4114:	20000018 	.word	0x20000018
    4118:	20000028 	.word	0x20000028
    411c:	20000000 	.word	0x20000000
    4120:	0001cbad 	.word	0x0001cbad

00004124 <bt_le_adv_resume>:

	return options;
}

void bt_le_adv_resume(void)
{
    4124:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4126:	4832      	ldr	r0, [pc, #200]	; (41f0 <bt_le_adv_resume+0xcc>)
    4128:	4c31      	ldr	r4, [pc, #196]	; (41f0 <bt_le_adv_resume+0xcc>)
    412a:	f013 ffd2 	bl	180d2 <atomic_get>
	if (!adv) {
		LOG_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    412e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
    4132:	d05a      	beq.n	41ea <bt_le_adv_resume+0xc6>
    4134:	4620      	mov	r0, r4
    4136:	f013 ffcc 	bl	180d2 <atomic_get>
    413a:	0603      	lsls	r3, r0, #24
    413c:	d455      	bmi.n	41ea <bt_le_adv_resume+0xc6>
    413e:	4620      	mov	r0, r4
    4140:	f013 ffc7 	bl	180d2 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    4144:	0546      	lsls	r6, r0, #21
    4146:	d550      	bpl.n	41ea <bt_le_adv_resume+0xc6>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    4148:	a901      	add	r1, sp, #4
    414a:	f1a4 0010 	sub.w	r0, r4, #16
    414e:	f7ff fe1b 	bl	3d88 <le_adv_start_add_conn>
	if (err) {
    4152:	2800      	cmp	r0, #0
    4154:	d149      	bne.n	41ea <bt_le_adv_resume+0xc6>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	} else {
		uint8_t own_addr_type;
		bool dir_adv = adv_is_directed(adv);
    4156:	f1a4 0010 	sub.w	r0, r4, #16
    415a:	f7ff fe09 	bl	3d70 <adv_is_directed>
    415e:	4602      	mov	r2, r0
    4160:	4620      	mov	r0, r4
    4162:	f013 ffb6 	bl	180d2 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    4166:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    416a:	4620      	mov	r0, r4
    416c:	f013 ffb1 	bl	180d2 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
    4170:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    4174:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
    4176:	ea4f 0141 	mov.w	r1, r1, lsl #1
    417a:	481d      	ldr	r0, [pc, #116]	; (41f0 <bt_le_adv_resume+0xcc>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
    417c:	bf48      	it	mi
    417e:	f041 0101 	orrmi.w	r1, r1, #1
    4182:	f013 ffa6 	bl	180d2 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
    4186:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
    4188:	bf48      	it	mi
    418a:	f041 0104 	orrmi.w	r1, r1, #4
		uint32_t options = adv_get_options(adv);

		/* Always set the address. Don't assume it has not changed. */
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
    418e:	4819      	ldr	r0, [pc, #100]	; (41f4 <bt_le_adv_resume+0xd0>)
    4190:	f10d 0303 	add.w	r3, sp, #3
    4194:	f7ff fd38 	bl	3c08 <bt_id_set_adv_own_addr>
		if (err) {
    4198:	4605      	mov	r5, r0
    419a:	bb30      	cbnz	r0, 41ea <bt_le_adv_resume+0xc6>
	return bt_le_adv_set_enable_legacy(adv, enable);
    419c:	4815      	ldr	r0, [pc, #84]	; (41f4 <bt_le_adv_resume+0xd0>)
    419e:	2101      	movs	r1, #1
    41a0:	f014 f8a9 	bl	182f6 <bt_le_adv_set_enable_legacy>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    41a4:	9e01      	ldr	r6, [sp, #4]
	if (err) {
    41a6:	b928      	cbnz	r0, 41b4 <bt_le_adv_resume+0x90>
	bt_conn_unref(conn);
    41a8:	4630      	mov	r0, r6
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    41aa:	b002      	add	sp, #8
    41ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    41b0:	f014 b963 	b.w	1847a <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    41b4:	4629      	mov	r1, r5
    41b6:	4630      	mov	r0, r6
    41b8:	f000 fa22 	bl	4600 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    41bc:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    41c0:	480b      	ldr	r0, [pc, #44]	; (41f0 <bt_le_adv_resume+0xcc>)
    41c2:	f013 ff8c 	bl	180de <atomic_and>
    41c6:	4605      	mov	r5, r0
	bt_conn_unref(conn);
    41c8:	4630      	mov	r0, r6
    41ca:	f014 f956 	bl	1847a <bt_conn_unref>
	if (persist_paused) {
    41ce:	046b      	lsls	r3, r5, #17
    41d0:	d50b      	bpl.n	41ea <bt_le_adv_resume+0xc6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    41d2:	f3bf 8f5b 	dmb	ish
    41d6:	e854 3f00 	ldrex	r3, [r4]
    41da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    41de:	e844 3200 	strex	r2, r3, [r4]
    41e2:	2a00      	cmp	r2, #0
    41e4:	d1f7      	bne.n	41d6 <bt_le_adv_resume+0xb2>
    41e6:	f3bf 8f5b 	dmb	ish
}
    41ea:	b002      	add	sp, #8
    41ec:	bd70      	pop	{r4, r5, r6, pc}
    41ee:	bf00      	nop
    41f0:	20000028 	.word	0x20000028
    41f4:	20000018 	.word	0x20000018

000041f8 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
    41f8:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    41fa:	4b0b      	ldr	r3, [pc, #44]	; (4228 <notify_connected+0x30>)
    41fc:	681d      	ldr	r5, [r3, #0]
{
    41fe:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    4200:	b925      	cbnz	r5, 420c <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    4202:	4d0a      	ldr	r5, [pc, #40]	; (422c <notify_connected+0x34>)
    4204:	4e0a      	ldr	r6, [pc, #40]	; (4230 <notify_connected+0x38>)
    4206:	42b5      	cmp	r5, r6
    4208:	d307      	bcc.n	421a <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    420a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
    420c:	682b      	ldr	r3, [r5, #0]
    420e:	b113      	cbz	r3, 4216 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
    4210:	7a61      	ldrb	r1, [r4, #9]
    4212:	4620      	mov	r0, r4
    4214:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4216:	692d      	ldr	r5, [r5, #16]
    4218:	e7f2      	b.n	4200 <notify_connected+0x8>
		if (cb->connected) {
    421a:	682b      	ldr	r3, [r5, #0]
    421c:	b113      	cbz	r3, 4224 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
    421e:	7a61      	ldrb	r1, [r4, #9]
    4220:	4620      	mov	r0, r4
    4222:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    4224:	3514      	adds	r5, #20
    4226:	e7ee      	b.n	4206 <notify_connected+0xe>
    4228:	2000124c 	.word	0x2000124c
    422c:	0001b228 	.word	0x0001b228
    4230:	0001b23c 	.word	0x0001b23c

00004234 <tx_notify>:
{
    4234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
    4238:	4f15      	ldr	r7, [pc, #84]	; (4290 <tx_notify+0x5c>)
{
    423a:	4604      	mov	r4, r0
	tx->cb = NULL;
    423c:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    4240:	f04f 0220 	mov.w	r2, #32
    4244:	f3ef 8311 	mrs	r3, BASEPRI
    4248:	f382 8812 	msr	BASEPRI_MAX, r2
    424c:	f3bf 8f6f 	isb	sy
	return list->head;
    4250:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
    4252:	b929      	cbnz	r1, 4260 <tx_notify+0x2c>
	__asm__ volatile(
    4254:	f383 8811 	msr	BASEPRI, r3
    4258:	f3bf 8f6f 	isb	sy
}
    425c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4260:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
    4262:	680a      	ldr	r2, [r1, #0]
	list->head = node;
    4264:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4266:	4281      	cmp	r1, r0
	list->tail = node;
    4268:	bf08      	it	eq
    426a:	6262      	streq	r2, [r4, #36]	; 0x24
    426c:	f383 8811 	msr	BASEPRI, r3
    4270:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
    4274:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
    4278:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
    427c:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
    4280:	4638      	mov	r0, r7
    4282:	f016 fa47 	bl	1a714 <k_queue_append>
		cb(conn, user_data, 0);
    4286:	2200      	movs	r2, #0
    4288:	4631      	mov	r1, r6
    428a:	4620      	mov	r0, r4
    428c:	47a8      	blx	r5
	while (1) {
    428e:	e7d7      	b.n	4240 <tx_notify+0xc>
    4290:	20000910 	.word	0x20000910

00004294 <conn_tx_destroy>:
{
    4294:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
    4296:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
    429a:	2200      	movs	r2, #0
	tx->user_data = NULL;
    429c:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
    42a0:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
    42a2:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
    42a4:	4805      	ldr	r0, [pc, #20]	; (42bc <conn_tx_destroy+0x28>)
    42a6:	f016 fa35 	bl	1a714 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
    42aa:	4631      	mov	r1, r6
    42ac:	4620      	mov	r0, r4
    42ae:	462b      	mov	r3, r5
    42b0:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
    42b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	20000910 	.word	0x20000910

000042c0 <send_frag>:
{
    42c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
    42c4:	f8df 8178 	ldr.w	r8, [pc, #376]	; 4440 <send_frag+0x180>
{
    42c8:	461f      	mov	r7, r3
	if (bt_dev.le.acl_mtu) {
    42ca:	f8b8 30fc 	ldrh.w	r3, [r8, #252]	; 0xfc
	return NULL;
    42ce:	2b00      	cmp	r3, #0
{
    42d0:	4604      	mov	r4, r0
    42d2:	460d      	mov	r5, r1
	return NULL;
    42d4:	f508 7080 	add.w	r0, r8, #256	; 0x100
{
    42d8:	4616      	mov	r6, r2
	return NULL;
    42da:	bf08      	it	eq
    42dc:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
    42de:	2200      	movs	r2, #0
    42e0:	2300      	movs	r3, #0
    42e2:	f011 fddb 	bl	15e9c <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
    42e6:	2800      	cmp	r0, #0
    42e8:	f040 80a7 	bne.w	443a <send_frag+0x17a>
	if (frag) {
    42ec:	2e00      	cmp	r6, #0
    42ee:	d07a      	beq.n	43e6 <send_frag+0x126>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    42f0:	f106 0a0c 	add.w	sl, r6, #12
    42f4:	4650      	mov	r0, sl
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    42f6:	f8b8 b0fc 	ldrh.w	fp, [r8, #252]	; 0xfc
    42fa:	f015 fb25 	bl	19948 <net_buf_simple_tailroom>
    42fe:	4558      	cmp	r0, fp
    4300:	d96b      	bls.n	43da <send_frag+0x11a>
	return bt_dev.le.acl_mtu;
    4302:	f8b8 b0fc 	ldrh.w	fp, [r8, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    4306:	f855 1f0c 	ldr.w	r1, [r5, #12]!
    430a:	465a      	mov	r2, fp
    430c:	4650      	mov	r0, sl
    430e:	f015 fae6 	bl	198de <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    4312:	4659      	mov	r1, fp
    4314:	4628      	mov	r0, r5
    4316:	f015 fafb 	bl	19910 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
    431a:	7aa3      	ldrb	r3, [r4, #10]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    431c:	69b5      	ldr	r5, [r6, #24]
	if (conn->state != BT_CONN_CONNECTED) {
    431e:	2b07      	cmp	r3, #7
    4320:	f040 8088 	bne.w	4434 <send_frag+0x174>
	__asm__ volatile(
    4324:	f04f 0320 	mov.w	r3, #32
    4328:	f3ef 8211 	mrs	r2, BASEPRI
    432c:	f383 8812 	msr	BASEPRI_MAX, r3
    4330:	f3bf 8f6f 	isb	sy
	if (tx) {
    4334:	2d00      	cmp	r5, #0
    4336:	d061      	beq.n	43fc <send_frag+0x13c>
	parent->next = child;
    4338:	2300      	movs	r3, #0
    433a:	602b      	str	r3, [r5, #0]
	return list->tail;
    433c:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
    433e:	2b00      	cmp	r3, #0
    4340:	d159      	bne.n	43f6 <send_frag+0x136>
	list->head = node;
    4342:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    4346:	f382 8811 	msr	BASEPRI, r2
    434a:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    434e:	2104      	movs	r1, #4
    4350:	f106 000c 	add.w	r0, r6, #12
    4354:	f015 fad4 	bl	19900 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4358:	8823      	ldrh	r3, [r4, #0]
    435a:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
    435e:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
    4362:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4364:	8a33      	ldrh	r3, [r6, #16]
    4366:	3b04      	subs	r3, #4
    4368:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    436a:	2302      	movs	r3, #2
    436c:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
    436e:	4630      	mov	r0, r6
    4370:	f7fe fef0 	bl	3154 <bt_send>
	if (err) {
    4374:	4607      	mov	r7, r0
    4376:	b368      	cbz	r0, 43d4 <send_frag+0x114>
	__asm__ volatile(
    4378:	f04f 0320 	mov.w	r3, #32
    437c:	f3ef 8111 	mrs	r1, BASEPRI
    4380:	f383 8812 	msr	BASEPRI_MAX, r3
    4384:	f3bf 8f6f 	isb	sy
		if (tx) {
    4388:	2d00      	cmp	r5, #0
    438a:	d04d      	beq.n	4428 <send_frag+0x168>
	return list->head;
    438c:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    438e:	2200      	movs	r2, #0
    4390:	b15b      	cbz	r3, 43aa <send_frag+0xea>
    4392:	429d      	cmp	r5, r3
    4394:	d145      	bne.n	4422 <send_frag+0x162>
	return node->next;
    4396:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    4398:	2a00      	cmp	r2, #0
    439a:	d13c      	bne.n	4416 <send_frag+0x156>
    439c:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    439e:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    43a0:	4295      	cmp	r5, r2
    43a2:	d100      	bne.n	43a6 <send_frag+0xe6>
	list->tail = node;
    43a4:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    43a6:	2300      	movs	r3, #0
    43a8:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    43aa:	f381 8811 	msr	BASEPRI, r1
    43ae:	f3bf 8f6f 	isb	sy
		err = -EIO;
    43b2:	f06f 0704 	mvn.w	r7, #4
	if (bt_dev.le.acl_mtu) {
    43b6:	f8b8 30fc 	ldrh.w	r3, [r8, #252]	; 0xfc
	return NULL;
    43ba:	4822      	ldr	r0, [pc, #136]	; (4444 <send_frag+0x184>)
    43bc:	2b00      	cmp	r3, #0
    43be:	bf08      	it	eq
    43c0:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
    43c2:	f011 fd45 	bl	15e50 <z_impl_k_sem_give>
	if (tx) {
    43c6:	b12d      	cbz	r5, 43d4 <send_frag+0x114>
		tx_data(buf)->tx = NULL;
    43c8:	2300      	movs	r3, #0
    43ca:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
    43cc:	4629      	mov	r1, r5
    43ce:	4620      	mov	r0, r4
    43d0:	f7ff ff60 	bl	4294 <conn_tx_destroy>
}
    43d4:	4638      	mov	r0, r7
    43d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
    43da:	4650      	mov	r0, sl
    43dc:	f015 fab4 	bl	19948 <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    43e0:	fa1f fb80 	uxth.w	fp, r0
    43e4:	e78f      	b.n	4306 <send_frag+0x46>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    43e6:	2200      	movs	r2, #0
    43e8:	2300      	movs	r3, #0
    43ea:	f104 0038 	add.w	r0, r4, #56	; 0x38
    43ee:	f015 fa36 	bl	1985e <net_buf_get>
    43f2:	4606      	mov	r6, r0
		frag = buf;
    43f4:	e791      	b.n	431a <send_frag+0x5a>
    43f6:	601d      	str	r5, [r3, #0]
	list->tail = node;
    43f8:	61a5      	str	r5, [r4, #24]
}
    43fa:	e7a4      	b.n	4346 <send_frag+0x86>
	return list->tail;
    43fc:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    43fe:	b133      	cbz	r3, 440e <send_frag+0x14e>
			pending_no_cb = &tail_tx->pending_no_cb;
    4400:	f103 090c 	add.w	r9, r3, #12
    4404:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    4406:	3301      	adds	r3, #1
    4408:	f8c9 3000 	str.w	r3, [r9]
    440c:	e79b      	b.n	4346 <send_frag+0x86>
			pending_no_cb = &conn->pending_no_cb;
    440e:	69e3      	ldr	r3, [r4, #28]
    4410:	f104 091c 	add.w	r9, r4, #28
    4414:	e7f7      	b.n	4406 <send_frag+0x146>
	parent->next = child;
    4416:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    4418:	69a3      	ldr	r3, [r4, #24]
    441a:	429d      	cmp	r5, r3
	list->tail = node;
    441c:	bf08      	it	eq
    441e:	61a2      	streq	r2, [r4, #24]
}
    4420:	e7c1      	b.n	43a6 <send_frag+0xe6>
	return node->next;
    4422:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4424:	681b      	ldr	r3, [r3, #0]
    4426:	e7b3      	b.n	4390 <send_frag+0xd0>
			(*pending_no_cb)--;
    4428:	f8d9 3000 	ldr.w	r3, [r9]
    442c:	3b01      	subs	r3, #1
    442e:	f8c9 3000 	str.w	r3, [r9]
    4432:	e7ba      	b.n	43aa <send_frag+0xea>
		err = -ENOTCONN;
    4434:	f06f 077f 	mvn.w	r7, #127	; 0x7f
    4438:	e7bd      	b.n	43b6 <send_frag+0xf6>
		return -ENOBUFS;
    443a:	f06f 0768 	mvn.w	r7, #104	; 0x68
    443e:	e7c9      	b.n	43d4 <send_frag+0x114>
    4440:	20000000 	.word	0x20000000
    4444:	20000100 	.word	0x20000100

00004448 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
    4448:	4804      	ldr	r0, [pc, #16]	; (445c <bt_conn_get_pkts+0x14>)
    444a:	f8b0 30fc 	ldrh.w	r3, [r0, #252]	; 0xfc
	return NULL;
    444e:	2b00      	cmp	r3, #0
    4450:	f500 7080 	add.w	r0, r0, #256	; 0x100
}
    4454:	bf08      	it	eq
    4456:	2000      	moveq	r0, #0
    4458:	4770      	bx	lr
    445a:	bf00      	nop
    445c:	20000000 	.word	0x20000000

00004460 <bt_conn_new>:
{
    4460:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
    4462:	2200      	movs	r2, #0
    4464:	4604      	mov	r4, r0
    4466:	428a      	cmp	r2, r1
    4468:	d102      	bne.n	4470 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    446a:	2400      	movs	r4, #0
}
    446c:	4620      	mov	r0, r4
    446e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4470:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
    4474:	2001      	movs	r0, #1
    4476:	f3bf 8f5b 	dmb	ish
    447a:	e853 5f00 	ldrex	r5, [r3]
    447e:	2d00      	cmp	r5, #0
    4480:	d104      	bne.n	448c <bt_conn_new+0x2c>
    4482:	e843 0c00 	strex	ip, r0, [r3]
    4486:	f1bc 0f00 	cmp.w	ip, #0
    448a:	d1f6      	bne.n	447a <bt_conn_new+0x1a>
    448c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    4490:	d002      	beq.n	4498 <bt_conn_new+0x38>
    4492:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
    4494:	4402      	add	r2, r0
    4496:	e7e6      	b.n	4466 <bt_conn_new+0x6>
	if (!conn) {
    4498:	2c00      	cmp	r4, #0
    449a:	d0e6      	beq.n	446a <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    449c:	22bc      	movs	r2, #188	; 0xbc
    449e:	2100      	movs	r1, #0
    44a0:	4620      	mov	r0, r4
    44a2:	f013 fab6 	bl	17a12 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    44a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
    44aa:	4904      	ldr	r1, [pc, #16]	; (44bc <bt_conn_new+0x5c>)
    44ac:	f016 fa12 	bl	1a8d4 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    44b0:	4903      	ldr	r1, [pc, #12]	; (44c0 <bt_conn_new+0x60>)
    44b2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    44b6:	f016 f9c9 	bl	1a84c <k_work_init>
	return conn;
    44ba:	e7d7      	b.n	446c <bt_conn_new+0xc>
    44bc:	000049dd 	.word	0x000049dd
    44c0:	0001834b 	.word	0x0001834b

000044c4 <bt_conn_send_cb>:
{
    44c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44c6:	461f      	mov	r7, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
    44c8:	7acb      	ldrb	r3, [r1, #11]
    44ca:	2b07      	cmp	r3, #7
{
    44cc:	4606      	mov	r6, r0
    44ce:	460d      	mov	r5, r1
    44d0:	4614      	mov	r4, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
    44d2:	d930      	bls.n	4536 <bt_conn_send_cb+0x72>
	if (conn->state != BT_CONN_CONNECTED) {
    44d4:	7a83      	ldrb	r3, [r0, #10]
    44d6:	2b07      	cmp	r3, #7
    44d8:	d11b      	bne.n	4512 <bt_conn_send_cb+0x4e>
	if (cb) {
    44da:	b352      	cbz	r2, 4532 <bt_conn_send_cb+0x6e>
	return z_impl_z_current_get();
    44dc:	f012 fa08 	bl	168f0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    44e0:	4b18      	ldr	r3, [pc, #96]	; (4544 <bt_conn_send_cb+0x80>)
    44e2:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    44e4:	4818      	ldr	r0, [pc, #96]	; (4548 <bt_conn_send_cb+0x84>)
    44e6:	bf07      	ittee	eq
    44e8:	2200      	moveq	r2, #0
    44ea:	2300      	moveq	r3, #0
    44ec:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    44f0:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    44f4:	f011 fc78 	bl	15de8 <z_impl_k_queue_get>
    44f8:	4601      	mov	r1, r0
		if (!tx) {
    44fa:	b1f8      	cbz	r0, 453c <bt_conn_send_cb+0x78>
		if (conn->state != BT_CONN_CONNECTED) {
    44fc:	7ab3      	ldrb	r3, [r6, #10]
    44fe:	2b07      	cmp	r3, #7
    4500:	f04f 0200 	mov.w	r2, #0
    4504:	d008      	beq.n	4518 <bt_conn_send_cb+0x54>
	tx->user_data = NULL;
    4506:	e9c0 2201 	strd	r2, r2, [r0, #4]
	tx->pending_no_cb = 0U;
    450a:	60c2      	str	r2, [r0, #12]
	k_fifo_put(&free_tx, tx);
    450c:	480e      	ldr	r0, [pc, #56]	; (4548 <bt_conn_send_cb+0x84>)
    450e:	f016 f901 	bl	1a714 <k_queue_append>
		return -ENOTCONN;
    4512:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    4516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx->user_data = user_data;
    4518:	e9c0 4701 	strd	r4, r7, [r0, #4]
		tx->pending_no_cb = 0U;
    451c:	60c2      	str	r2, [r0, #12]
	tx_data(buf)->is_cont = false;
    451e:	2400      	movs	r4, #0
		tx_data(buf)->tx = tx;
    4520:	61a9      	str	r1, [r5, #24]
	net_buf_put(&conn->tx_queue, buf);
    4522:	f106 0038 	add.w	r0, r6, #56	; 0x38
	tx_data(buf)->is_cont = false;
    4526:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
    4528:	4629      	mov	r1, r5
    452a:	f015 f99a 	bl	19862 <net_buf_put>
	return 0;
    452e:	4620      	mov	r0, r4
    4530:	e7f1      	b.n	4516 <bt_conn_send_cb+0x52>
    4532:	4611      	mov	r1, r2
    4534:	e7f3      	b.n	451e <bt_conn_send_cb+0x5a>
		return -EINVAL;
    4536:	f06f 0015 	mvn.w	r0, #21
    453a:	e7ec      	b.n	4516 <bt_conn_send_cb+0x52>
			return -ENOBUFS;
    453c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    4540:	e7e9      	b.n	4516 <bt_conn_send_cb+0x52>
    4542:	bf00      	nop
    4544:	20001110 	.word	0x20001110
    4548:	20000910 	.word	0x20000910

0000454c <bt_conn_prepare_events>:
{
    454c:	b570      	push	{r4, r5, r6, lr}
    454e:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    4550:	4823      	ldr	r0, [pc, #140]	; (45e0 <bt_conn_prepare_events+0x94>)
    4552:	f016 fca6 	bl	1aea2 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4556:	4b22      	ldr	r3, [pc, #136]	; (45e0 <bt_conn_prepare_events+0x94>)
    4558:	2200      	movs	r2, #0
    455a:	4620      	mov	r0, r4
    455c:	2101      	movs	r1, #1
    455e:	f016 fc83 	bl	1ae68 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4562:	f3bf 8f5b 	dmb	ish
    4566:	4b1f      	ldr	r3, [pc, #124]	; (45e4 <bt_conn_prepare_events+0x98>)
    4568:	681a      	ldr	r2, [r3, #0]
    456a:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
    456e:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
    4572:	b90a      	cbnz	r2, 4578 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4574:	2001      	movs	r0, #1
}
    4576:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    4578:	f1a3 01bc 	sub.w	r1, r3, #188	; 0xbc
    457c:	f813 3cb2 	ldrb.w	r3, [r3, #-178]
    4580:	b993      	cbnz	r3, 45a8 <bt_conn_prepare_events+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4582:	f3bf 8f5b 	dmb	ish
    4586:	1d0b      	adds	r3, r1, #4
    4588:	e853 2f00 	ldrex	r2, [r3]
    458c:	f022 0540 	bic.w	r5, r2, #64	; 0x40
    4590:	e843 5600 	strex	r6, r5, [r3]
    4594:	2e00      	cmp	r6, #0
    4596:	d1f7      	bne.n	4588 <bt_conn_prepare_events+0x3c>
    4598:	f3bf 8f5b 	dmb	ish
    459c:	0653      	lsls	r3, r2, #25
    459e:	d503      	bpl.n	45a8 <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
    45a0:	4608      	mov	r0, r1
    45a2:	f013 fede 	bl	18362 <conn_cleanup>
		return -ENOTCONN;
    45a6:	e7e5      	b.n	4574 <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
    45a8:	7a8b      	ldrb	r3, [r1, #10]
    45aa:	2b07      	cmp	r3, #7
    45ac:	d1e2      	bne.n	4574 <bt_conn_prepare_events+0x28>
	if (bt_dev.le.acl_mtu) {
    45ae:	4b0e      	ldr	r3, [pc, #56]	; (45e8 <bt_conn_prepare_events+0x9c>)
    45b0:	f8b3 20fc 	ldrh.w	r2, [r3, #252]	; 0xfc
    45b4:	2a00      	cmp	r2, #0
    45b6:	d0dd      	beq.n	4574 <bt_conn_prepare_events+0x28>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    45b8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
	if (packets_waiting && !buffers_available) {
    45bc:	6b89      	ldr	r1, [r1, #56]	; 0x38
    45be:	b151      	cbz	r1, 45d6 <bt_conn_prepare_events+0x8a>
    45c0:	b94a      	cbnz	r2, 45d6 <bt_conn_prepare_events+0x8a>
		k_poll_event_init(&events[0],
    45c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
    45c6:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
    45c8:	f016 fc4e 	bl	1ae68 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    45cc:	2301      	movs	r3, #1
    45ce:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    45d2:	2002      	movs	r0, #2
	return ev_count;
    45d4:	e7cf      	b.n	4576 <bt_conn_prepare_events+0x2a>
		k_poll_event_init(&events[0],
    45d6:	4b05      	ldr	r3, [pc, #20]	; (45ec <bt_conn_prepare_events+0xa0>)
    45d8:	2200      	movs	r2, #0
    45da:	2104      	movs	r1, #4
    45dc:	e7f4      	b.n	45c8 <bt_conn_prepare_events+0x7c>
    45de:	bf00      	nop
    45e0:	200001e0 	.word	0x200001e0
    45e4:	20000c8c 	.word	0x20000c8c
    45e8:	20000000 	.word	0x20000000
    45ec:	20000c08 	.word	0x20000c08

000045f0 <bt_conn_lookup_handle>:
{
    45f0:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    45f2:	2101      	movs	r1, #1
    45f4:	4801      	ldr	r0, [pc, #4]	; (45fc <bt_conn_lookup_handle+0xc>)
    45f6:	f013 bf5c 	b.w	184b2 <conn_lookup_handle>
    45fa:	bf00      	nop
    45fc:	20000bd0 	.word	0x20000bd0

00004600 <bt_conn_set_state>:
{
    4600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    4604:	7a85      	ldrb	r5, [r0, #10]
    4606:	428d      	cmp	r5, r1
{
    4608:	4604      	mov	r4, r0
	if (conn->state == state) {
    460a:	f000 8094 	beq.w	4736 <bt_conn_set_state+0x136>
	conn->state = state;
    460e:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    4610:	b925      	cbnz	r5, 461c <bt_conn_set_state+0x1c>
		if (conn->type != BT_CONN_TYPE_ISO) {
    4612:	7883      	ldrb	r3, [r0, #2]
    4614:	2b08      	cmp	r3, #8
    4616:	d001      	beq.n	461c <bt_conn_set_state+0x1c>
			bt_conn_ref(conn);
    4618:	f013 ff13 	bl	18442 <bt_conn_ref>
	switch (conn->state) {
    461c:	7aa3      	ldrb	r3, [r4, #10]
    461e:	2b01      	cmp	r3, #1
    4620:	d11d      	bne.n	465e <bt_conn_set_state+0x5e>
	if (bt_dev.le.acl_mtu) {
    4622:	4d54      	ldr	r5, [pc, #336]	; (4774 <bt_conn_set_state+0x174>)
		tx->pending_no_cb = 0U;
    4624:	2700      	movs	r7, #0
	return NULL;
    4626:	f505 7680 	add.w	r6, r5, #256	; 0x100
	__asm__ volatile(
    462a:	f04f 0220 	mov.w	r2, #32
    462e:	f3ef 8311 	mrs	r3, BASEPRI
    4632:	f382 8812 	msr	BASEPRI_MAX, r2
    4636:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    463a:	69e2      	ldr	r2, [r4, #28]
    463c:	2a00      	cmp	r2, #0
    463e:	d074      	beq.n	472a <bt_conn_set_state+0x12a>
			conn->pending_no_cb--;
    4640:	3a01      	subs	r2, #1
    4642:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
    4644:	f383 8811 	msr	BASEPRI, r3
    4648:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
    464c:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	return NULL;
    4650:	2b00      	cmp	r3, #0
    4652:	bf14      	ite	ne
    4654:	4630      	movne	r0, r6
    4656:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
    4658:	f011 fbfa 	bl	15e50 <z_impl_k_sem_give>
}
    465c:	e7e5      	b.n	462a <bt_conn_set_state+0x2a>
	switch (conn->state) {
    465e:	2b07      	cmp	r3, #7
    4660:	d009      	beq.n	4676 <bt_conn_set_state+0x76>
    4662:	2b00      	cmp	r3, #0
    4664:	d167      	bne.n	4736 <bt_conn_set_state+0x136>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4666:	78a3      	ldrb	r3, [r4, #2]
    4668:	2b04      	cmp	r3, #4
    466a:	d121      	bne.n	46b0 <bt_conn_set_state+0xb0>
			bt_conn_unref(conn);
    466c:	4620      	mov	r0, r4
}
    466e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
    4672:	f013 bf02 	b.w	1847a <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4676:	78a3      	ldrb	r3, [r4, #2]
    4678:	2b04      	cmp	r3, #4
    467a:	d05c      	beq.n	4736 <bt_conn_set_state+0x136>
	z_impl_k_queue_init(queue);
    467c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    4680:	f016 f81c 	bl	1a6bc <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    4684:	483c      	ldr	r0, [pc, #240]	; (4778 <bt_conn_set_state+0x178>)
    4686:	2100      	movs	r1, #0
    4688:	f012 fb60 	bl	16d4c <z_impl_k_poll_signal_raise>
	list->head = NULL;
    468c:	2300      	movs	r3, #0
	list->tail = NULL;
    468e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4692:	78e3      	ldrb	r3, [r4, #3]
    4694:	2b01      	cmp	r3, #1
    4696:	d14e      	bne.n	4736 <bt_conn_set_state+0x136>
			conn->le.conn_param_retry_countdown =
    4698:	2303      	movs	r3, #3
    469a:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
    469e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    46a2:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    46a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
    46aa:	2300      	movs	r3, #0
    46ac:	f011 bdd6 	b.w	1625c <k_work_schedule>
		switch (old_state) {
    46b0:	3d01      	subs	r5, #1
    46b2:	2d05      	cmp	r5, #5
    46b4:	d83f      	bhi.n	4736 <bt_conn_set_state+0x136>
    46b6:	a301      	add	r3, pc, #4	; (adr r3, 46bc <bt_conn_set_state+0xbc>)
    46b8:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    46bc:	000046d5 	.word	0x000046d5
    46c0:	0000471d 	.word	0x0000471d
    46c4:	0000466d 	.word	0x0000466d
    46c8:	0000466d 	.word	0x0000466d
    46cc:	0000471d 	.word	0x0000471d
    46d0:	0000471d 	.word	0x0000471d
			tx_notify(conn);
    46d4:	4620      	mov	r0, r4
    46d6:	f7ff fdad 	bl	4234 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    46da:	78a3      	ldrb	r3, [r4, #2]
    46dc:	2b01      	cmp	r3, #1
    46de:	d10a      	bne.n	46f6 <bt_conn_set_state+0xf6>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
    46e0:	f104 0558 	add.w	r5, r4, #88	; 0x58
    46e4:	4628      	mov	r0, r5
    46e6:	f016 f901 	bl	1a8ec <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    46ea:	f010 0f0c 	tst.w	r0, #12
    46ee:	d002      	beq.n	46f6 <bt_conn_set_state+0xf6>
				k_work_cancel_delayable(&conn->deferred_work);
    46f0:	4628      	mov	r0, r5
    46f2:	f016 f8fd 	bl	1a8f0 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    46f6:	f3bf 8f5b 	dmb	ish
    46fa:	3404      	adds	r4, #4
    46fc:	e854 3f00 	ldrex	r3, [r4]
    4700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4704:	e844 3200 	strex	r2, r3, [r4]
    4708:	2a00      	cmp	r2, #0
    470a:	d1f7      	bne.n	46fc <bt_conn_set_state+0xfc>
    470c:	f3bf 8f5b 	dmb	ish
    4710:	4819      	ldr	r0, [pc, #100]	; (4778 <bt_conn_set_state+0x178>)
}
    4712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4716:	2100      	movs	r1, #0
    4718:	f012 bb18 	b.w	16d4c <z_impl_k_poll_signal_raise>
			if (conn->err) {
    471c:	7a63      	ldrb	r3, [r4, #9]
    471e:	2b00      	cmp	r3, #0
    4720:	d0a4      	beq.n	466c <bt_conn_set_state+0x6c>
				notify_connected(conn);
    4722:	4620      	mov	r0, r4
    4724:	f7ff fd68 	bl	41f8 <notify_connected>
    4728:	e7a0      	b.n	466c <bt_conn_set_state+0x6c>
	return list->head;
    472a:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
    472c:	b929      	cbnz	r1, 473a <bt_conn_set_state+0x13a>
    472e:	f383 8811 	msr	BASEPRI, r3
    4732:	f3bf 8f6f 	isb	sy
}
    4736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    473a:	69a0      	ldr	r0, [r4, #24]
	return node->next;
    473c:	680a      	ldr	r2, [r1, #0]
	list->head = node;
    473e:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4740:	4281      	cmp	r1, r0
	list->tail = node;
    4742:	bf08      	it	eq
    4744:	61a2      	streq	r2, [r4, #24]
    4746:	f383 8811 	msr	BASEPRI, r3
    474a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    474e:	f04f 0220 	mov.w	r2, #32
    4752:	f3ef 8311 	mrs	r3, BASEPRI
    4756:	f382 8812 	msr	BASEPRI_MAX, r2
    475a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    475e:	68ca      	ldr	r2, [r1, #12]
    4760:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    4762:	60cf      	str	r7, [r1, #12]
	__asm__ volatile(
    4764:	f383 8811 	msr	BASEPRI, r3
    4768:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
    476c:	4620      	mov	r0, r4
    476e:	f7ff fd91 	bl	4294 <conn_tx_destroy>
    4772:	e76b      	b.n	464c <bt_conn_set_state+0x4c>
    4774:	20000000 	.word	0x20000000
    4778:	200001e0 	.word	0x200001e0

0000477c <bt_conn_index>:
		index = conn - acl_conns;
    477c:	4b03      	ldr	r3, [pc, #12]	; (478c <bt_conn_index+0x10>)
    477e:	1ac0      	subs	r0, r0, r3
    4780:	4b03      	ldr	r3, [pc, #12]	; (4790 <bt_conn_index+0x14>)
    4782:	1180      	asrs	r0, r0, #6
    4784:	4358      	muls	r0, r3
}
    4786:	b2c0      	uxtb	r0, r0
    4788:	4770      	bx	lr
    478a:	bf00      	nop
    478c:	20000bd0 	.word	0x20000bd0
    4790:	aaaaaaab 	.word	0xaaaaaaab

00004794 <bt_conn_create_pdu_timeout>:
{
    4794:	b538      	push	{r3, r4, r5, lr}
    4796:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    4798:	4906      	ldr	r1, [pc, #24]	; (47b4 <bt_conn_create_pdu_timeout+0x20>)
    479a:	2800      	cmp	r0, #0
    479c:	bf08      	it	eq
    479e:	4608      	moveq	r0, r1
    47a0:	f015 f858 	bl	19854 <net_buf_alloc_fixed>
	if (!buf) {
    47a4:	4604      	mov	r4, r0
    47a6:	b118      	cbz	r0, 47b0 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
    47a8:	1d29      	adds	r1, r5, #4
    47aa:	300c      	adds	r0, #12
    47ac:	f015 f88d 	bl	198ca <net_buf_simple_reserve>
}
    47b0:	4620      	mov	r0, r4
    47b2:	bd38      	pop	{r3, r4, r5, pc}
    47b4:	20000928 	.word	0x20000928

000047b8 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    47b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    47ba:	f3bf 8f5b 	dmb	ish
    47be:	6842      	ldr	r2, [r0, #4]
    47c0:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    47c4:	0592      	lsls	r2, r2, #22
{
    47c6:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    47c8:	f100 0304 	add.w	r3, r0, #4
    47cc:	d519      	bpl.n	4802 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    47ce:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    47d2:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    47d6:	4291      	cmp	r1, r2
    47d8:	d813      	bhi.n	4802 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    47da:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    47de:	4291      	cmp	r1, r2
    47e0:	d30f      	bcc.n	4802 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    47e2:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    47e6:	4291      	cmp	r1, r2
    47e8:	d10b      	bne.n	4802 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    47ea:	f3bf 8f5b 	dmb	ish
    47ee:	e853 1f00 	ldrex	r1, [r3]
    47f2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
    47f6:	e843 1200 	strex	r2, r1, [r3]
    47fa:	2a00      	cmp	r2, #0
    47fc:	d1f7      	bne.n	47ee <notify_le_param_updated+0x36>
    47fe:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    4802:	4b10      	ldr	r3, [pc, #64]	; (4844 <notify_le_param_updated+0x8c>)
    4804:	681d      	ldr	r5, [r3, #0]
    4806:	b925      	cbnz	r5, 4812 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    4808:	4d0f      	ldr	r5, [pc, #60]	; (4848 <notify_le_param_updated+0x90>)
    480a:	4f10      	ldr	r7, [pc, #64]	; (484c <notify_le_param_updated+0x94>)
    480c:	42bd      	cmp	r5, r7
    480e:	d30c      	bcc.n	482a <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    4810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    4812:	68ee      	ldr	r6, [r5, #12]
    4814:	b13e      	cbz	r6, 4826 <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
    4816:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    481a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    481e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    4822:	4620      	mov	r0, r4
    4824:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    4826:	692d      	ldr	r5, [r5, #16]
    4828:	e7ed      	b.n	4806 <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
    482a:	68ee      	ldr	r6, [r5, #12]
    482c:	b13e      	cbz	r6, 483e <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
    482e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    4832:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    4836:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    483a:	4620      	mov	r0, r4
    483c:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    483e:	3514      	adds	r5, #20
    4840:	e7e4      	b.n	480c <notify_le_param_updated+0x54>
    4842:	bf00      	nop
    4844:	2000124c 	.word	0x2000124c
    4848:	0001b228 	.word	0x0001b228
    484c:	0001b23c 	.word	0x0001b23c

00004850 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    4850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4854:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    4856:	4608      	mov	r0, r1
{
    4858:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    485a:	f013 fb2f 	bl	17ebc <bt_le_conn_params_valid>
    485e:	4605      	mov	r5, r0
    4860:	b918      	cbnz	r0, 486a <le_param_req+0x1a>
		return false;
    4862:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    4864:	4628      	mov	r0, r5
    4866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    486a:	4b13      	ldr	r3, [pc, #76]	; (48b8 <le_param_req+0x68>)
    486c:	681e      	ldr	r6, [r3, #0]
    486e:	b946      	cbnz	r6, 4882 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    4870:	4e12      	ldr	r6, [pc, #72]	; (48bc <le_param_req+0x6c>)
    4872:	f8df 804c 	ldr.w	r8, [pc, #76]	; 48c0 <le_param_req+0x70>
    4876:	4546      	cmp	r6, r8
    4878:	d2f4      	bcs.n	4864 <le_param_req+0x14>
		if (!cb->le_param_req) {
    487a:	68b3      	ldr	r3, [r6, #8]
    487c:	b983      	cbnz	r3, 48a0 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    487e:	3614      	adds	r6, #20
    4880:	e7f9      	b.n	4876 <le_param_req+0x26>
		if (!cb->le_param_req) {
    4882:	68b3      	ldr	r3, [r6, #8]
    4884:	b90b      	cbnz	r3, 488a <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    4886:	6936      	ldr	r6, [r6, #16]
    4888:	e7f1      	b.n	486e <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    488a:	4621      	mov	r1, r4
    488c:	4638      	mov	r0, r7
    488e:	4798      	blx	r3
    4890:	2800      	cmp	r0, #0
    4892:	d0e6      	beq.n	4862 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    4894:	4620      	mov	r0, r4
    4896:	f013 fb11 	bl	17ebc <bt_le_conn_params_valid>
    489a:	2800      	cmp	r0, #0
    489c:	d1f3      	bne.n	4886 <le_param_req+0x36>
    489e:	e7e0      	b.n	4862 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    48a0:	4621      	mov	r1, r4
    48a2:	4638      	mov	r0, r7
    48a4:	4798      	blx	r3
    48a6:	2800      	cmp	r0, #0
    48a8:	d0db      	beq.n	4862 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    48aa:	4620      	mov	r0, r4
    48ac:	f013 fb06 	bl	17ebc <bt_le_conn_params_valid>
    48b0:	2800      	cmp	r0, #0
    48b2:	d1e4      	bne.n	487e <le_param_req+0x2e>
    48b4:	e7d5      	b.n	4862 <le_param_req+0x12>
    48b6:	bf00      	nop
    48b8:	2000124c 	.word	0x2000124c
    48bc:	0001b228 	.word	0x0001b228
    48c0:	0001b23c 	.word	0x0001b23c

000048c4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    48c4:	b570      	push	{r4, r5, r6, lr}
    48c6:	4606      	mov	r6, r0
    48c8:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    48ca:	4809      	ldr	r0, [pc, #36]	; (48f0 <bt_conn_add_le+0x2c>)
    48cc:	2101      	movs	r1, #1
    48ce:	f7ff fdc7 	bl	4460 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    48d2:	4604      	mov	r4, r0
    48d4:	b150      	cbz	r0, 48ec <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    48d6:	7206      	strb	r6, [r0, #8]
    48d8:	2207      	movs	r2, #7
    48da:	4629      	mov	r1, r5
    48dc:	3088      	adds	r0, #136	; 0x88
    48de:	f013 f88d 	bl	179fc <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    48e2:	2301      	movs	r3, #1
    48e4:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    48e6:	4b03      	ldr	r3, [pc, #12]	; (48f4 <bt_conn_add_le+0x30>)
    48e8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    48ec:	4620      	mov	r0, r4
    48ee:	bd70      	pop	{r4, r5, r6, pc}
    48f0:	20000bd0 	.word	0x20000bd0
    48f4:	00280018 	.word	0x00280018

000048f8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    48f8:	b570      	push	{r4, r5, r6, lr}
    48fa:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    48fc:	480a      	ldr	r0, [pc, #40]	; (4928 <bt_conn_lookup_addr_le+0x30>)
{
    48fe:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    4900:	f013 fd9f 	bl	18442 <bt_conn_ref>
    4904:	4604      	mov	r4, r0

		if (!conn) {
    4906:	b120      	cbz	r0, 4912 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    4908:	7883      	ldrb	r3, [r0, #2]
    490a:	2b01      	cmp	r3, #1
    490c:	d004      	beq.n	4918 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
    490e:	f013 fdb4 	bl	1847a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    4912:	2400      	movs	r4, #0
}
    4914:	4620      	mov	r0, r4
    4916:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    4918:	4632      	mov	r2, r6
    491a:	4629      	mov	r1, r5
    491c:	f013 fdf4 	bl	18508 <bt_conn_is_peer_addr_le>
    4920:	2800      	cmp	r0, #0
    4922:	d1f7      	bne.n	4914 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    4924:	4620      	mov	r0, r4
    4926:	e7f2      	b.n	490e <bt_conn_lookup_addr_le+0x16>
    4928:	20000bd0 	.word	0x20000bd0

0000492c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    492e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    4930:	480e      	ldr	r0, [pc, #56]	; (496c <bt_conn_lookup_state_le+0x40>)
{
    4932:	460e      	mov	r6, r1
    4934:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    4936:	f013 fd84 	bl	18442 <bt_conn_ref>

		if (!conn) {
    493a:	4604      	mov	r4, r0
    493c:	b120      	cbz	r0, 4948 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    493e:	7883      	ldrb	r3, [r0, #2]
    4940:	2b01      	cmp	r3, #1
    4942:	d003      	beq.n	494c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    4944:	f013 fd99 	bl	1847a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    4948:	2400      	movs	r4, #0
    494a:	e00d      	b.n	4968 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    494c:	b136      	cbz	r6, 495c <bt_conn_lookup_state_le+0x30>
    494e:	4632      	mov	r2, r6
    4950:	4629      	mov	r1, r5
    4952:	f013 fdd9 	bl	18508 <bt_conn_is_peer_addr_le>
    4956:	b908      	cbnz	r0, 495c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    4958:	4620      	mov	r0, r4
    495a:	e7f3      	b.n	4944 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    495c:	7aa3      	ldrb	r3, [r4, #10]
    495e:	42bb      	cmp	r3, r7
    4960:	d1fa      	bne.n	4958 <bt_conn_lookup_state_le+0x2c>
    4962:	7a23      	ldrb	r3, [r4, #8]
    4964:	42ab      	cmp	r3, r5
    4966:	d1f7      	bne.n	4958 <bt_conn_lookup_state_le+0x2c>
}
    4968:	4620      	mov	r0, r4
    496a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    496c:	20000bd0 	.word	0x20000bd0

00004970 <send_conn_le_param_update>:
{
    4970:	b538      	push	{r3, r4, r5, lr}
    4972:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    4974:	4608      	mov	r0, r1
{
    4976:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    4978:	f013 faa0 	bl	17ebc <bt_le_conn_params_valid>
    497c:	b348      	cbz	r0, 49d2 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    497e:	4b16      	ldr	r3, [pc, #88]	; (49d8 <send_conn_le_param_update+0x68>)
    4980:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    4984:	0799      	lsls	r1, r3, #30
    4986:	d407      	bmi.n	4998 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    4988:	78e3      	ldrb	r3, [r4, #3]
    498a:	b183      	cbz	r3, 49ae <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    498c:	4629      	mov	r1, r5
    498e:	4620      	mov	r0, r4
}
    4990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    4994:	f000 b9b0 	b.w	4cf8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    4998:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
    499c:	079a      	lsls	r2, r3, #30
    499e:	d5f3      	bpl.n	4988 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    49a0:	f3bf 8f5b 	dmb	ish
    49a4:	6863      	ldr	r3, [r4, #4]
    49a6:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    49aa:	055b      	lsls	r3, r3, #21
    49ac:	d4ec      	bmi.n	4988 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    49ae:	4629      	mov	r1, r5
    49b0:	4620      	mov	r0, r4
    49b2:	f013 fdd1 	bl	18558 <bt_conn_le_conn_update>
		if (rc == 0) {
    49b6:	b958      	cbnz	r0, 49d0 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
    49b8:	882b      	ldrh	r3, [r5, #0]
    49ba:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    49be:	886b      	ldrh	r3, [r5, #2]
    49c0:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    49c4:	88ab      	ldrh	r3, [r5, #4]
    49c6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    49ca:	88eb      	ldrh	r3, [r5, #6]
    49cc:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    49d0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    49d2:	f06f 0015 	mvn.w	r0, #21
    49d6:	e7fb      	b.n	49d0 <send_conn_le_param_update+0x60>
    49d8:	20000000 	.word	0x20000000

000049dc <deferred_work>:
{
    49dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    49de:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    49e2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    49e4:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    49e8:	b9fb      	cbnz	r3, 4a2a <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
    49ea:	4630      	mov	r0, r6
    49ec:	f013 fe09 	bl	18602 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    49f0:	4b34      	ldr	r3, [pc, #208]	; (4ac4 <deferred_work+0xe8>)
    49f2:	681d      	ldr	r5, [r3, #0]
    49f4:	b94d      	cbnz	r5, 4a0a <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    49f6:	4d34      	ldr	r5, [pc, #208]	; (4ac8 <deferred_work+0xec>)
    49f8:	4f34      	ldr	r7, [pc, #208]	; (4acc <deferred_work+0xf0>)
    49fa:	42bd      	cmp	r5, r7
    49fc:	d30d      	bcc.n	4a1a <deferred_work+0x3e>
		bt_conn_unref(conn);
    49fe:	4630      	mov	r0, r6
}
    4a00:	b003      	add	sp, #12
    4a02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    4a06:	f013 bd38 	b.w	1847a <bt_conn_unref>
		if (cb->disconnected) {
    4a0a:	686b      	ldr	r3, [r5, #4]
    4a0c:	b11b      	cbz	r3, 4a16 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
    4a0e:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    4a12:	4630      	mov	r0, r6
    4a14:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4a16:	692d      	ldr	r5, [r5, #16]
    4a18:	e7ec      	b.n	49f4 <deferred_work+0x18>
		if (cb->disconnected) {
    4a1a:	686b      	ldr	r3, [r5, #4]
    4a1c:	b11b      	cbz	r3, 4a26 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
    4a1e:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    4a22:	4630      	mov	r0, r6
    4a24:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    4a26:	3514      	adds	r5, #20
    4a28:	e7e7      	b.n	49fa <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    4a2a:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    4a2e:	2b01      	cmp	r3, #1
    4a30:	d130      	bne.n	4a94 <deferred_work+0xb8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4a32:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    4a36:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    4a3a:	e855 3f00 	ldrex	r3, [r5]
    4a3e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    4a42:	e845 2100 	strex	r1, r2, [r5]
    4a46:	2900      	cmp	r1, #0
    4a48:	d1f7      	bne.n	4a3a <deferred_work+0x5e>
    4a4a:	f3bf 8f5b 	dmb	ish
    4a4e:	059b      	lsls	r3, r3, #22
    4a50:	d522      	bpl.n	4a98 <deferred_work+0xbc>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4a52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4a54:	9300      	str	r3, [sp, #0]
		err = send_conn_le_param_update(conn, param);
    4a56:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4a58:	6d23      	ldr	r3, [r4, #80]	; 0x50
    4a5a:	9301      	str	r3, [sp, #4]
		err = send_conn_le_param_update(conn, param);
    4a5c:	4630      	mov	r0, r6
    4a5e:	f7ff ff87 	bl	4970 <send_conn_le_param_update>
		if (!err) {
    4a62:	b958      	cbnz	r0, 4a7c <deferred_work+0xa0>
    4a64:	f3bf 8f5b 	dmb	ish
    4a68:	e855 3f00 	ldrex	r3, [r5]
    4a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4a70:	e845 3200 	strex	r2, r3, [r5]
    4a74:	2a00      	cmp	r2, #0
    4a76:	d1f7      	bne.n	4a68 <deferred_work+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4a78:	f3bf 8f5b 	dmb	ish
    4a7c:	f3bf 8f5b 	dmb	ish
    4a80:	e855 3f00 	ldrex	r3, [r5]
    4a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4a88:	e845 3200 	strex	r2, r3, [r5]
    4a8c:	2a00      	cmp	r2, #0
    4a8e:	d1f7      	bne.n	4a80 <deferred_work+0xa4>
    4a90:	f3bf 8f5b 	dmb	ish
}
    4a94:	b003      	add	sp, #12
    4a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
    4a98:	4a0d      	ldr	r2, [pc, #52]	; (4ad0 <deferred_work+0xf4>)
    4a9a:	6810      	ldr	r0, [r2, #0]
    4a9c:	6851      	ldr	r1, [r2, #4]
    4a9e:	466b      	mov	r3, sp
    4aa0:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
    4aa2:	4669      	mov	r1, sp
    4aa4:	4630      	mov	r0, r6
    4aa6:	f7ff ff63 	bl	4970 <send_conn_le_param_update>
		if (!err) {
    4aaa:	2800      	cmp	r0, #0
    4aac:	d1e6      	bne.n	4a7c <deferred_work+0xa0>
    4aae:	f3bf 8f5b 	dmb	ish
    4ab2:	e855 3f00 	ldrex	r3, [r5]
    4ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4aba:	e845 3200 	strex	r2, r3, [r5]
    4abe:	2a00      	cmp	r2, #0
    4ac0:	d0da      	beq.n	4a78 <deferred_work+0x9c>
    4ac2:	e7f6      	b.n	4ab2 <deferred_work+0xd6>
    4ac4:	2000124c 	.word	0x2000124c
    4ac8:	0001b228 	.word	0x0001b228
    4acc:	0001b23c 	.word	0x0001b23c
    4ad0:	0001b3b0 	.word	0x0001b3b0

00004ad4 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    4ad4:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    4ad6:	4801      	ldr	r0, [pc, #4]	; (4adc <bt_conn_create_frag_timeout+0x8>)
    4ad8:	f7ff be5c 	b.w	4794 <bt_conn_create_pdu_timeout>
    4adc:	20000980 	.word	0x20000980

00004ae0 <bt_conn_process_tx>:
{
    4ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    4ae4:	7a83      	ldrb	r3, [r0, #10]
{
    4ae6:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    4ae8:	b993      	cbnz	r3, 4b10 <bt_conn_process_tx+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4aea:	f3bf 8f5b 	dmb	ish
    4aee:	1d03      	adds	r3, r0, #4
    4af0:	e853 2f00 	ldrex	r2, [r3]
    4af4:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    4af8:	e843 1400 	strex	r4, r1, [r3]
    4afc:	2c00      	cmp	r4, #0
    4afe:	d1f7      	bne.n	4af0 <bt_conn_process_tx+0x10>
    4b00:	f3bf 8f5b 	dmb	ish
    4b04:	0653      	lsls	r3, r2, #25
    4b06:	d503      	bpl.n	4b10 <bt_conn_process_tx+0x30>
}
    4b08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
    4b0c:	f013 bc29 	b.w	18362 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
    4b10:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4b14:	f015 fe13 	bl	1a73e <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
    4b18:	4604      	mov	r4, r0
    4b1a:	b960      	cbnz	r0, 4b36 <bt_conn_process_tx+0x56>
    4b1c:	4a33      	ldr	r2, [pc, #204]	; (4bec <bt_conn_process_tx+0x10c>)
    4b1e:	4934      	ldr	r1, [pc, #208]	; (4bf0 <bt_conn_process_tx+0x110>)
    4b20:	4834      	ldr	r0, [pc, #208]	; (4bf4 <bt_conn_process_tx+0x114>)
    4b22:	f44f 735d 	mov.w	r3, #884	; 0x374
    4b26:	f012 fcdc 	bl	174e2 <assert_print>
    4b2a:	4040      	eors	r0, r0
    4b2c:	f380 8811 	msr	BASEPRI, r0
    4b30:	f04f 0003 	mov.w	r0, #3
    4b34:	df02      	svc	2
	buf = net_buf_ref(buf);
    4b36:	4620      	mov	r0, r4
    4b38:	f014 fe95 	bl	19866 <net_buf_ref>
	return bt_dev.le.acl_mtu;
    4b3c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4bf8 <bt_conn_process_tx+0x118>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
    4b40:	8a02      	ldrh	r2, [r0, #16]
    4b42:	f8b9 30fc 	ldrh.w	r3, [r9, #252]	; 0xfc
    4b46:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
    4b48:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
    4b4a:	7f02      	ldrb	r2, [r0, #28]
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
    4b4c:	d807      	bhi.n	4b5e <bt_conn_process_tx+0x7e>
    4b4e:	b932      	cbnz	r2, 4b5e <bt_conn_process_tx+0x7e>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
    4b50:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
    4b52:	4621      	mov	r1, r4
    4b54:	4628      	mov	r0, r5
    4b56:	f7ff fbb3 	bl	42c0 <send_frag>
    4b5a:	4606      	mov	r6, r0
    4b5c:	e030      	b.n	4bc0 <bt_conn_process_tx+0xe0>
	if (tx_data(buf)->is_cont) {
    4b5e:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
    4b60:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
    4b64:	8a22      	ldrh	r2, [r4, #16]
    4b66:	f8b9 30fc 	ldrh.w	r3, [r9, #252]	; 0xfc
    4b6a:	429a      	cmp	r2, r3
    4b6c:	d804      	bhi.n	4b78 <bt_conn_process_tx+0x98>
	tx_data(buf)->is_cont = true;
    4b6e:	2301      	movs	r3, #1
    4b70:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
    4b72:	2200      	movs	r2, #0
    4b74:	2303      	movs	r3, #3
    4b76:	e7ec      	b.n	4b52 <bt_conn_process_tx+0x72>
		frag = bt_conn_create_frag(0);
    4b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4b80:	2000      	movs	r0, #0
    4b82:	f7ff ffa7 	bl	4ad4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    4b86:	7aab      	ldrb	r3, [r5, #10]
    4b88:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    4b8a:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
    4b8c:	d006      	beq.n	4b9c <bt_conn_process_tx+0xbc>
		net_buf_unref(frag);
    4b8e:	f00e fbb3 	bl	132f8 <net_buf_unref>
	net_buf_unref(buf);
    4b92:	4620      	mov	r0, r4
}
    4b94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
    4b98:	f00e bbae 	b.w	132f8 <net_buf_unref>
	tx_data(frag)->tx = NULL;
    4b9c:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
    4ba0:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
    4ba4:	4602      	mov	r2, r0
    4ba6:	463b      	mov	r3, r7
    4ba8:	4621      	mov	r1, r4
    4baa:	4628      	mov	r0, r5
    4bac:	f7ff fb88 	bl	42c0 <send_frag>
		if (err) {
    4bb0:	4606      	mov	r6, r0
    4bb2:	b1b8      	cbz	r0, 4be4 <bt_conn_process_tx+0x104>
			tx_data(buf)->is_cont = flags != FRAG_START;
    4bb4:	f007 0701 	and.w	r7, r7, #1
    4bb8:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
    4bba:	4640      	mov	r0, r8
    4bbc:	f00e fb9c 	bl	132f8 <net_buf_unref>
	net_buf_unref(buf);
    4bc0:	4620      	mov	r0, r4
    4bc2:	f00e fb99 	bl	132f8 <net_buf_unref>
	if (err  == -EIO) {
    4bc6:	3605      	adds	r6, #5
    4bc8:	d10e      	bne.n	4be8 <bt_conn_process_tx+0x108>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
    4bca:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
    4bcc:	2300      	movs	r3, #0
    4bce:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
    4bd0:	4620      	mov	r0, r4
    4bd2:	f00e fb91 	bl	132f8 <net_buf_unref>
		if (tx) {
    4bd6:	b13e      	cbz	r6, 4be8 <bt_conn_process_tx+0x108>
			conn_tx_destroy(conn, tx);
    4bd8:	4631      	mov	r1, r6
    4bda:	4628      	mov	r0, r5
}
    4bdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
    4be0:	f7ff bb58 	b.w	4294 <conn_tx_destroy>
		flags = FRAG_CONT;
    4be4:	2701      	movs	r7, #1
    4be6:	e7bd      	b.n	4b64 <bt_conn_process_tx+0x84>
}
    4be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bec:	0001cd24 	.word	0x0001cd24
    4bf0:	0001cda8 	.word	0x0001cda8
    4bf4:	0001cc26 	.word	0x0001cc26
    4bf8:	20000000 	.word	0x20000000

00004bfc <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    4bfc:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
    4bfe:	480c      	ldr	r0, [pc, #48]	; (4c30 <bt_conn_init+0x34>)
    4c00:	f015 fd5c 	bl	1a6bc <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    4c04:	490b      	ldr	r1, [pc, #44]	; (4c34 <bt_conn_init+0x38>)
    4c06:	480a      	ldr	r0, [pc, #40]	; (4c30 <bt_conn_init+0x34>)
    4c08:	f015 fd84 	bl	1a714 <k_queue_append>
    4c0c:	490a      	ldr	r1, [pc, #40]	; (4c38 <bt_conn_init+0x3c>)
    4c0e:	4808      	ldr	r0, [pc, #32]	; (4c30 <bt_conn_init+0x34>)
    4c10:	f015 fd80 	bl	1a714 <k_queue_append>
    4c14:	4909      	ldr	r1, [pc, #36]	; (4c3c <bt_conn_init+0x40>)
    4c16:	4806      	ldr	r0, [pc, #24]	; (4c30 <bt_conn_init+0x34>)
    4c18:	f015 fd7c 	bl	1a714 <k_queue_append>
	}

	bt_att_init();
    4c1c:	f000 fdf0 	bl	5800 <bt_att_init>

	err = bt_smp_init();
    4c20:	f014 fe15 	bl	1984e <bt_smp_init>
	if (err) {
    4c24:	4604      	mov	r4, r0
    4c26:	b908      	cbnz	r0, 4c2c <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
    4c28:	f013 fd75 	bl	18716 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    4c2c:	4620      	mov	r0, r4
    4c2e:	bd10      	pop	{r4, pc}
    4c30:	20000910 	.word	0x20000910
    4c34:	2000121c 	.word	0x2000121c
    4c38:	2000122c 	.word	0x2000122c
    4c3c:	2000123c 	.word	0x2000123c

00004c40 <l2cap_accept>:
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    4c40:	4b04      	ldr	r3, [pc, #16]	; (4c54 <l2cap_accept+0x14>)
    4c42:	6818      	ldr	r0, [r3, #0]
    4c44:	b918      	cbnz	r0, 4c4e <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    4c46:	4a04      	ldr	r2, [pc, #16]	; (4c58 <l2cap_accept+0x18>)
    4c48:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    4c4a:	600b      	str	r3, [r1, #0]

		return 0;
    4c4c:	4770      	bx	lr
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    4c4e:	f06f 000b 	mvn.w	r0, #11
}
    4c52:	4770      	bx	lr
    4c54:	20001250 	.word	0x20001250
    4c58:	0001b5d8 	.word	0x0001b5d8

00004c5c <bt_l2cap_connected>:
{
    4c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    4c5e:	4d24      	ldr	r5, [pc, #144]	; (4cf0 <bt_l2cap_connected+0x94>)
    4c60:	4f24      	ldr	r7, [pc, #144]	; (4cf4 <bt_l2cap_connected+0x98>)
{
    4c62:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4c64:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    4c66:	42bd      	cmp	r5, r7
    4c68:	d301      	bcc.n	4c6e <bt_l2cap_connected+0x12>
}
    4c6a:	b003      	add	sp, #12
    4c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
    4c6e:	686b      	ldr	r3, [r5, #4]
    4c70:	a901      	add	r1, sp, #4
    4c72:	4620      	mov	r0, r4
    4c74:	4798      	blx	r3
    4c76:	2800      	cmp	r0, #0
    4c78:	db34      	blt.n	4ce4 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
    4c7a:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
    4c7c:	882a      	ldrh	r2, [r5, #0]
    4c7e:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
    4c80:	849a      	strh	r2, [r3, #36]	; 0x24
    4c82:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    4c86:	68a8      	ldr	r0, [r5, #8]
    4c88:	f3bf 8f5b 	dmb	ish
    4c8c:	e852 1f00 	ldrex	r1, [r2]
    4c90:	e842 6c00 	strex	ip, r6, [r2]
    4c94:	f1bc 0f00 	cmp.w	ip, #0
    4c98:	d1f8      	bne.n	4c8c <bt_l2cap_connected+0x30>
    4c9a:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    4c9e:	609e      	str	r6, [r3, #8]
	return list->tail;
    4ca0:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    4ca2:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
    4ca6:	b9f9      	cbnz	r1, 4ce8 <bt_l2cap_connected+0x8c>
	list->head = node;
    4ca8:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
    4cac:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
    4cae:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
    4cb0:	9801      	ldr	r0, [sp, #4]
    4cb2:	6843      	ldr	r3, [r0, #4]
    4cb4:	681b      	ldr	r3, [r3, #0]
    4cb6:	b103      	cbz	r3, 4cba <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
    4cb8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4cba:	9b01      	ldr	r3, [sp, #4]
    4cbc:	f3bf 8f5b 	dmb	ish
    4cc0:	3310      	adds	r3, #16
    4cc2:	e853 1f00 	ldrex	r1, [r3]
    4cc6:	f041 0101 	orr.w	r1, r1, #1
    4cca:	e843 1200 	strex	r2, r1, [r3]
    4cce:	2a00      	cmp	r2, #0
    4cd0:	d1f7      	bne.n	4cc2 <bt_l2cap_connected+0x66>
    4cd2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    4cd6:	9801      	ldr	r0, [sp, #4]
    4cd8:	6843      	ldr	r3, [r0, #4]
    4cda:	69db      	ldr	r3, [r3, #28]
    4cdc:	b113      	cbz	r3, 4ce4 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
    4cde:	f100 0110 	add.w	r1, r0, #16
    4ce2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    4ce4:	350c      	adds	r5, #12
    4ce6:	e7be      	b.n	4c66 <bt_l2cap_connected+0xa>
	parent->next = child;
    4ce8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    4cea:	6562      	str	r2, [r4, #84]	; 0x54
}
    4cec:	e7de      	b.n	4cac <bt_l2cap_connected+0x50>
    4cee:	bf00      	nop
    4cf0:	0001b204 	.word	0x0001b204
    4cf4:	0001b228 	.word	0x0001b228

00004cf8 <bt_l2cap_update_conn_param>:
{
    4cf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    4cfa:	4b17      	ldr	r3, [pc, #92]	; (4d58 <bt_l2cap_update_conn_param+0x60>)
{
    4cfc:	460e      	mov	r6, r1
	ident++;
    4cfe:	7819      	ldrb	r1, [r3, #0]
    4d00:	3101      	adds	r1, #1
    4d02:	b2c9      	uxtb	r1, r1
    4d04:	2901      	cmp	r1, #1
    4d06:	bf38      	it	cc
    4d08:	2101      	movcc	r1, #1
{
    4d0a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4d0c:	2208      	movs	r2, #8
    4d0e:	2012      	movs	r0, #18
	ident++;
    4d10:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4d12:	f013 fc4a 	bl	185aa <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    4d16:	4604      	mov	r4, r0
    4d18:	b1d0      	cbz	r0, 4d50 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
    4d1a:	2108      	movs	r1, #8
    4d1c:	300c      	adds	r0, #12
    4d1e:	f014 fdd8 	bl	198d2 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    4d22:	8833      	ldrh	r3, [r6, #0]
    4d24:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    4d26:	8873      	ldrh	r3, [r6, #2]
    4d28:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    4d2a:	88b3      	ldrh	r3, [r6, #4]
    4d2c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    4d2e:	88f3      	ldrh	r3, [r6, #6]
    4d30:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    4d32:	2300      	movs	r3, #0
    4d34:	4628      	mov	r0, r5
    4d36:	9300      	str	r3, [sp, #0]
    4d38:	4622      	mov	r2, r4
    4d3a:	2105      	movs	r1, #5
    4d3c:	f013 fc7c 	bl	18638 <bt_l2cap_send_cb>
	if (err) {
    4d40:	4605      	mov	r5, r0
    4d42:	b110      	cbz	r0, 4d4a <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
    4d44:	4620      	mov	r0, r4
    4d46:	f00e fad7 	bl	132f8 <net_buf_unref>
}
    4d4a:	4628      	mov	r0, r5
    4d4c:	b002      	add	sp, #8
    4d4e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    4d50:	f06f 050b 	mvn.w	r5, #11
    4d54:	e7f9      	b.n	4d4a <bt_l2cap_update_conn_param+0x52>
    4d56:	bf00      	nop
    4d58:	20002630 	.word	0x20002630

00004d5c <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
    4d5c:	2823      	cmp	r0, #35	; 0x23
    4d5e:	d81f      	bhi.n	4da0 <att_op_get_type+0x44>
    4d60:	281a      	cmp	r0, #26
    4d62:	d804      	bhi.n	4d6e <att_op_get_type+0x12>
    4d64:	1e43      	subs	r3, r0, #1
    4d66:	2b18      	cmp	r3, #24
    4d68:	d90e      	bls.n	4d88 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    4d6a:	2006      	movs	r0, #6
    4d6c:	4770      	bx	lr
	switch (op) {
    4d6e:	f1a0 031b 	sub.w	r3, r0, #27
    4d72:	2b08      	cmp	r3, #8
    4d74:	d81e      	bhi.n	4db4 <att_op_get_type+0x58>
    4d76:	e8df f003 	tbb	[pc, r3]
    4d7a:	1d05      	.short	0x1d05
    4d7c:	191d231b 	.word	0x191d231b
    4d80:	1d25      	.short	0x1d25
    4d82:	05          	.byte	0x05
    4d83:	00          	.byte	0x00
		return ATT_NOTIFICATION;
    4d84:	2003      	movs	r0, #3
    4d86:	4770      	bx	lr
	switch (op) {
    4d88:	4a0f      	ldr	r2, [pc, #60]	; (4dc8 <att_op_get_type+0x6c>)
    4d8a:	2301      	movs	r3, #1
    4d8c:	4083      	lsls	r3, r0
    4d8e:	401a      	ands	r2, r3
    4d90:	b9c2      	cbnz	r2, 4dc4 <att_op_get_type+0x68>
    4d92:	4a0e      	ldr	r2, [pc, #56]	; (4dcc <att_op_get_type+0x70>)
    4d94:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
    4d96:	2a00      	cmp	r2, #0
    4d98:	bf14      	ite	ne
    4d9a:	2001      	movne	r0, #1
    4d9c:	2006      	moveq	r0, #6
    4d9e:	4770      	bx	lr
	switch (op) {
    4da0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    4da4:	2b52      	cmp	r3, #82	; 0x52
    4da6:	d105      	bne.n	4db4 <att_op_get_type+0x58>
		return ATT_COMMAND;
    4da8:	2000      	movs	r0, #0
}
    4daa:	4770      	bx	lr
		return ATT_REQUEST;
    4dac:	2001      	movs	r0, #1
    4dae:	4770      	bx	lr
		return ATT_INDICATION;
    4db0:	2005      	movs	r0, #5
    4db2:	4770      	bx	lr
		return ATT_COMMAND;
    4db4:	f010 0f40 	tst.w	r0, #64	; 0x40
    4db8:	bf0c      	ite	eq
    4dba:	2006      	moveq	r0, #6
    4dbc:	2000      	movne	r0, #0
    4dbe:	4770      	bx	lr
	switch (op) {
    4dc0:	2004      	movs	r0, #4
    4dc2:	4770      	bx	lr
		return ATT_RESPONSE;
    4dc4:	2002      	movs	r0, #2
    4dc6:	4770      	bx	lr
    4dc8:	028aaaaa 	.word	0x028aaaaa
    4dcc:	01455554 	.word	0x01455554

00004dd0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    4dd0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    4dd2:	3804      	subs	r0, #4
    4dd4:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    4dd6:	a901      	add	r1, sp, #4
    4dd8:	4802      	ldr	r0, [pc, #8]	; (4de4 <bt_att_released+0x14>)
    4dda:	f015 fbb3 	bl	1a544 <k_mem_slab_free>
}
    4dde:	b003      	add	sp, #12
    4de0:	f85d fb04 	ldr.w	pc, [sp], #4
    4de4:	200008c0 	.word	0x200008c0

00004de8 <tx_meta_data_free>:
{
    4de8:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
    4dea:	2100      	movs	r1, #0
{
    4dec:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
    4dee:	2214      	movs	r2, #20
    4df0:	f012 fe0f 	bl	17a12 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    4df4:	4621      	mov	r1, r4
    4df6:	4802      	ldr	r0, [pc, #8]	; (4e00 <tx_meta_data_free+0x18>)
}
    4df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
    4dfc:	f015 bc8a 	b.w	1a714 <k_queue_append>
    4e00:	200008f8 	.word	0x200008f8

00004e04 <chan_send>:
{
    4e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4e08:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
    4e0a:	f8d1 8018 	ldr.w	r8, [r1, #24]
	hdr = (void *)buf->data;
    4e0e:	68cb      	ldr	r3, [r1, #12]
{
    4e10:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
    4e12:	3034      	adds	r0, #52	; 0x34
    4e14:	2102      	movs	r1, #2
    4e16:	f013 fca3 	bl	18760 <atomic_test_bit>
    4e1a:	2800      	cmp	r0, #0
    4e1c:	d039      	beq.n	4e92 <chan_send+0x8e>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    4e1e:	781b      	ldrb	r3, [r3, #0]
    4e20:	2bd2      	cmp	r3, #210	; 0xd2
    4e22:	d110      	bne.n	4e46 <chan_send+0x42>
		err = bt_smp_sign(chan->att->conn, buf);
    4e24:	6833      	ldr	r3, [r6, #0]
    4e26:	4621      	mov	r1, r4
    4e28:	6818      	ldr	r0, [r3, #0]
    4e2a:	f014 fd0d 	bl	19848 <bt_smp_sign>
		if (err) {
    4e2e:	4605      	mov	r5, r0
    4e30:	b148      	cbz	r0, 4e46 <chan_send+0x42>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
    4e32:	69a0      	ldr	r0, [r4, #24]
    4e34:	f7ff ffd8 	bl	4de8 <tx_meta_data_free>
			net_buf_unref(buf);
    4e38:	4620      	mov	r0, r4
    4e3a:	f00e fa5d 	bl	132f8 <net_buf_unref>
}
    4e3e:	4628      	mov	r0, r5
    4e40:	b003      	add	sp, #12
    4e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    4e46:	f104 000c 	add.w	r0, r4, #12
    4e4a:	f014 fd79 	bl	19940 <net_buf_simple_headroom>
	state->len = buf->len;
    4e4e:	f8b4 9010 	ldrh.w	r9, [r4, #16]
	data->att_chan = chan;
    4e52:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    4e56:	6833      	ldr	r3, [r6, #0]
    4e58:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    4e5a:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    4e5c:	4607      	mov	r7, r0
    4e5e:	7818      	ldrb	r0, [r3, #0]
    4e60:	f7ff ff7c 	bl	4d5c <att_op_get_type>
	switch (op_type) {
    4e64:	2805      	cmp	r0, #5
    4e66:	bf96      	itet	ls
    4e68:	4b0b      	ldrls	r3, [pc, #44]	; (4e98 <chan_send+0x94>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    4e6a:	4b0c      	ldrhi	r3, [pc, #48]	; (4e9c <chan_send+0x98>)
    4e6c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    4e70:	f8cd 8000 	str.w	r8, [sp]
    4e74:	4628      	mov	r0, r5
    4e76:	4622      	mov	r2, r4
    4e78:	2104      	movs	r1, #4
    4e7a:	f013 fbdd 	bl	18638 <bt_l2cap_send_cb>
	if (err) {
    4e7e:	4605      	mov	r5, r0
    4e80:	2800      	cmp	r0, #0
    4e82:	d0dc      	beq.n	4e3e <chan_send+0x3a>
	buf->data = buf->__buf + state->offset;
    4e84:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    4e86:	f8a4 9010 	strh.w	r9, [r4, #16]
	buf->data = buf->__buf + state->offset;
    4e8a:	fa13 f787 	uxtah	r7, r3, r7
    4e8e:	60e7      	str	r7, [r4, #12]
}
    4e90:	e7d5      	b.n	4e3e <chan_send+0x3a>
		return -EINVAL;
    4e92:	f06f 0515 	mvn.w	r5, #21
    4e96:	e7d2      	b.n	4e3e <chan_send+0x3a>
    4e98:	0001b600 	.word	0x0001b600
    4e9c:	00018e49 	.word	0x00018e49

00004ea0 <bt_att_connected>:
{
    4ea0:	b510      	push	{r4, lr}
    4ea2:	f100 0330 	add.w	r3, r0, #48	; 0x30
    4ea6:	4604      	mov	r4, r0
    4ea8:	f3bf 8f5b 	dmb	ish
    4eac:	e853 1f00 	ldrex	r1, [r3]
    4eb0:	f041 0104 	orr.w	r1, r1, #4
    4eb4:	e843 1200 	strex	r2, r1, [r3]
    4eb8:	2a00      	cmp	r2, #0
    4eba:	d1f7      	bne.n	4eac <bt_att_connected+0xc>
    4ebc:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    4ec0:	2317      	movs	r3, #23
    4ec2:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    4ec4:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
    4ec6:	1f20      	subs	r0, r4, #4
    4ec8:	f013 fdaa 	bl	18a20 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    4ecc:	f104 0054 	add.w	r0, r4, #84	; 0x54
    4ed0:	4903      	ldr	r1, [pc, #12]	; (4ee0 <bt_att_connected+0x40>)
    4ed2:	f015 fcff 	bl	1a8d4 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
    4ed6:	6820      	ldr	r0, [r4, #0]
}
    4ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
    4edc:	f001 ba98 	b.w	6410 <bt_gatt_connected>
    4ee0:	00019061 	.word	0x00019061

00004ee4 <read_group_cb>:
{
    4ee4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4ee8:	4605      	mov	r5, r0
    4eea:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4eec:	f04f 0800 	mov.w	r8, #0
    4ef0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4ef4:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    4ef6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4ef8:	f88d 8008 	strb.w	r8, [sp, #8]
    4efc:	a902      	add	r1, sp, #8
{
    4efe:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4f00:	f8ad 300a 	strh.w	r3, [sp, #10]
    4f04:	f012 fda3 	bl	17a4e <bt_uuid_cmp>
    4f08:	b1a0      	cbz	r0, 4f34 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4f0a:	f642 0301 	movw	r3, #10241	; 0x2801
    4f0e:	6828      	ldr	r0, [r5, #0]
    4f10:	f88d 800c 	strb.w	r8, [sp, #12]
    4f14:	a903      	add	r1, sp, #12
    4f16:	f8ad 300e 	strh.w	r3, [sp, #14]
    4f1a:	f012 fd98 	bl	17a4e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4f1e:	b148      	cbz	r0, 4f34 <read_group_cb+0x50>
		if (data->group &&
    4f20:	6923      	ldr	r3, [r4, #16]
    4f22:	b11b      	cbz	r3, 4f2c <read_group_cb+0x48>
    4f24:	885a      	ldrh	r2, [r3, #2]
    4f26:	42b2      	cmp	r2, r6
    4f28:	d200      	bcs.n	4f2c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    4f2a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    4f2c:	2001      	movs	r0, #1
}
    4f2e:	b004      	add	sp, #16
    4f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4f34:	6861      	ldr	r1, [r4, #4]
    4f36:	6828      	ldr	r0, [r5, #0]
    4f38:	f012 fd89 	bl	17a4e <bt_uuid_cmp>
    4f3c:	b110      	cbz	r0, 4f44 <read_group_cb+0x60>
		data->group = NULL;
    4f3e:	2300      	movs	r3, #0
    4f40:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    4f42:	e7f3      	b.n	4f2c <read_group_cb+0x48>
	if (data->rsp->len &&
    4f44:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    4f46:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    4f48:	781a      	ldrb	r2, [r3, #0]
    4f4a:	b132      	cbz	r2, 4f5a <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    4f4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    4f4e:	8a01      	ldrh	r1, [r0, #16]
    4f50:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    4f52:	4293      	cmp	r3, r2
    4f54:	da01      	bge.n	4f5a <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
    4f56:	2000      	movs	r0, #0
    4f58:	e7e9      	b.n	4f2e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    4f5a:	2104      	movs	r1, #4
    4f5c:	300c      	adds	r0, #12
    4f5e:	f014 fcb8 	bl	198d2 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4f62:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
    4f64:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    4f66:	6923      	ldr	r3, [r4, #16]
    4f68:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    4f6a:	4b08      	ldr	r3, [pc, #32]	; (4f8c <read_group_cb+0xa8>)
    4f6c:	9300      	str	r3, [sp, #0]
    4f6e:	9401      	str	r4, [sp, #4]
    4f70:	68a2      	ldr	r2, [r4, #8]
    4f72:	2300      	movs	r3, #0
    4f74:	4629      	mov	r1, r5
    4f76:	4638      	mov	r0, r7
    4f78:	f013 fdae 	bl	18ad8 <att_chan_read>
	if (read < 0) {
    4f7c:	2800      	cmp	r0, #0
    4f7e:	dbea      	blt.n	4f56 <read_group_cb+0x72>
	if (!data->group) {
    4f80:	6920      	ldr	r0, [r4, #16]
    4f82:	3800      	subs	r0, #0
    4f84:	bf18      	it	ne
    4f86:	2001      	movne	r0, #1
    4f88:	e7d1      	b.n	4f2e <read_group_cb+0x4a>
    4f8a:	bf00      	nop
    4f8c:	00018a87 	.word	0x00018a87

00004f90 <read_type_cb>:
{
    4f90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    4f94:	6817      	ldr	r7, [r2, #0]
{
    4f96:	4605      	mov	r5, r0
    4f98:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4f9a:	6800      	ldr	r0, [r0, #0]
    4f9c:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    4f9e:	687e      	ldr	r6, [r7, #4]
{
    4fa0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4fa2:	f012 fd54 	bl	17a4e <bt_uuid_cmp>
    4fa6:	4681      	mov	r9, r0
    4fa8:	2800      	cmp	r0, #0
    4faa:	d13c      	bne.n	5026 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    4fac:	4630      	mov	r0, r6
    4fae:	2295      	movs	r2, #149	; 0x95
    4fb0:	4629      	mov	r1, r5
    4fb2:	f014 fb00 	bl	195b6 <bt_gatt_check_perm>
    4fb6:	4606      	mov	r6, r0
    4fb8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    4fba:	b140      	cbz	r0, 4fce <read_type_cb+0x3e>
		if (data->rsp->len) {
    4fbc:	68e3      	ldr	r3, [r4, #12]
    4fbe:	781b      	ldrb	r3, [r3, #0]
    4fc0:	b10b      	cbz	r3, 4fc6 <read_type_cb+0x36>
			data->err = 0x00;
    4fc2:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
    4fc6:	2000      	movs	r0, #0
}
    4fc8:	b003      	add	sp, #12
    4fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    4fce:	68a0      	ldr	r0, [r4, #8]
    4fd0:	f014 fc4d 	bl	1986e <net_buf_frag_last>
    4fd4:	2102      	movs	r1, #2
    4fd6:	300c      	adds	r0, #12
    4fd8:	f014 fc7b 	bl	198d2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    4fdc:	4b13      	ldr	r3, [pc, #76]	; (502c <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    4fde:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
    4fe0:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    4fe4:	9300      	str	r3, [sp, #0]
    4fe6:	9401      	str	r4, [sp, #4]
    4fe8:	68a2      	ldr	r2, [r4, #8]
    4fea:	4633      	mov	r3, r6
    4fec:	4629      	mov	r1, r5
    4fee:	4638      	mov	r0, r7
    4ff0:	f013 fd72 	bl	18ad8 <att_chan_read>
	if (read < 0) {
    4ff4:	2800      	cmp	r0, #0
    4ff6:	da07      	bge.n	5008 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
    4ff8:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    4ffc:	bf26      	itte	cs
    4ffe:	4240      	negcs	r0, r0
    5000:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    5002:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    5004:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    5006:	e7de      	b.n	4fc6 <read_type_cb+0x36>
	if (!data->item) {
    5008:	6923      	ldr	r3, [r4, #16]
    500a:	2b00      	cmp	r3, #0
    500c:	d0db      	beq.n	4fc6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    500e:	68a0      	ldr	r0, [r4, #8]
    5010:	f013 fb8c 	bl	1872c <net_buf_frags_len>
    5014:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    5016:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    5018:	68e3      	ldr	r3, [r4, #12]
    501a:	781b      	ldrb	r3, [r3, #0]
    501c:	4298      	cmp	r0, r3
    501e:	bf94      	ite	ls
    5020:	2000      	movls	r0, #0
    5022:	2001      	movhi	r0, #1
    5024:	e7d0      	b.n	4fc8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    5026:	2001      	movs	r0, #1
    5028:	e7ce      	b.n	4fc8 <read_type_cb+0x38>
    502a:	bf00      	nop
    502c:	0001873d 	.word	0x0001873d

00005030 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    5030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    5032:	2300      	movs	r3, #0
{
    5034:	4604      	mov	r4, r0
    5036:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    5038:	4829      	ldr	r0, [pc, #164]	; (50e0 <bt_att_accept+0xb0>)
    503a:	2200      	movs	r2, #0
    503c:	4669      	mov	r1, sp
    503e:	f010 fd19 	bl	15a74 <k_mem_slab_alloc>
    5042:	4605      	mov	r5, r0
    5044:	2800      	cmp	r0, #0
    5046:	d143      	bne.n	50d0 <bt_att_accept+0xa0>
	return z_impl_z_current_get();
    5048:	f011 fc52 	bl	168f0 <z_impl_z_current_get>
		LOG_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
    504c:	4b25      	ldr	r3, [pc, #148]	; (50e4 <bt_att_accept+0xb4>)

	(void)memset(att, 0, sizeof(*att));
    504e:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
    5050:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
    5052:	222c      	movs	r2, #44	; 0x2c
    5054:	9800      	ldr	r0, [sp, #0]
    5056:	f012 fcdc 	bl	17a12 <memset>
	att->conn = conn;
    505a:	9b00      	ldr	r3, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    505c:	4822      	ldr	r0, [pc, #136]	; (50e8 <bt_att_accept+0xb8>)
	att->conn = conn;
    505e:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
    5060:	9c00      	ldr	r4, [sp, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    5062:	9501      	str	r5, [sp, #4]
	list->tail = NULL;
    5064:	e9c4 5501 	strd	r5, r5, [r4, #4]
    5068:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    506c:	2200      	movs	r2, #0
    506e:	2300      	movs	r3, #0
    5070:	a901      	add	r1, sp, #4
    5072:	f010 fcff 	bl	15a74 <k_mem_slab_alloc>
    5076:	4605      	mov	r5, r0
    5078:	bb50      	cbnz	r0, 50d0 <bt_att_accept+0xa0>
	(void)memset(chan, 0, sizeof(*chan));
    507a:	4601      	mov	r1, r0
    507c:	2290      	movs	r2, #144	; 0x90
    507e:	9801      	ldr	r0, [sp, #4]
    5080:	f012 fcc7 	bl	17a12 <memset>
	chan->chan.chan.ops = &ops;
    5084:	9801      	ldr	r0, [sp, #4]
    5086:	4b19      	ldr	r3, [pc, #100]	; (50ec <bt_att_accept+0xbc>)
    5088:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
    508a:	303c      	adds	r0, #60	; 0x3c
    508c:	f015 fb16 	bl	1a6bc <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5090:	9b01      	ldr	r3, [sp, #4]
    5092:	f3bf 8f5b 	dmb	ish
    5096:	3334      	adds	r3, #52	; 0x34
    5098:	e853 2f00 	ldrex	r2, [r3]
    509c:	e843 5100 	strex	r1, r5, [r3]
    50a0:	2900      	cmp	r1, #0
    50a2:	d1f9      	bne.n	5098 <bt_att_accept+0x68>
    50a4:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    50a8:	9b01      	ldr	r3, [sp, #4]
    50aa:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
    50ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
    50ae:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
    50b0:	b91b      	cbnz	r3, 50ba <bt_att_accept+0x8a>
    50b2:	f104 000c 	add.w	r0, r4, #12
    50b6:	f015 fb01 	bl	1a6bc <z_impl_k_queue_init>
	return list->head;
    50ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
    50bc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
    50c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    50c2:	f107 0388 	add.w	r3, r7, #136	; 0x88
	list->head = node;
    50c6:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    50c8:	b902      	cbnz	r2, 50cc <bt_att_accept+0x9c>
	list->tail = node;
    50ca:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
    50cc:	9b01      	ldr	r3, [sp, #4]
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
    50ce:	b923      	cbnz	r3, 50da <bt_att_accept+0xaa>
		return -ENOMEM;
    50d0:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    50d4:	4628      	mov	r0, r5
    50d6:	b003      	add	sp, #12
    50d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*ch = &chan->chan.chan;
    50da:	3304      	adds	r3, #4
    50dc:	6033      	str	r3, [r6, #0]
	return 0;
    50de:	e7f9      	b.n	50d4 <bt_att_accept+0xa4>
    50e0:	200008a4 	.word	0x200008a4
    50e4:	200012bc 	.word	0x200012bc
    50e8:	200008c0 	.word	0x200008c0
    50ec:	200001f0 	.word	0x200001f0

000050f0 <bt_att_chan_create_pdu>:
{
    50f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    50f2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    50f4:	3201      	adds	r2, #1
    50f6:	429a      	cmp	r2, r3
{
    50f8:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    50fa:	d822      	bhi.n	5142 <bt_att_chan_create_pdu+0x52>
	switch (att_op_get_type(op)) {
    50fc:	4608      	mov	r0, r1
    50fe:	f7ff fe2d 	bl	4d5c <att_op_get_type>
    5102:	2802      	cmp	r0, #2
    5104:	d020      	beq.n	5148 <bt_att_chan_create_pdu+0x58>
    5106:	2804      	cmp	r0, #4
    5108:	d01e      	beq.n	5148 <bt_att_chan_create_pdu+0x58>
		timeout = K_FOREVER;
    510a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    510e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
    5112:	2100      	movs	r1, #0
    5114:	4632      	mov	r2, r6
    5116:	463b      	mov	r3, r7
    5118:	4608      	mov	r0, r1
    511a:	f013 fa8a 	bl	18632 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
    511e:	4604      	mov	r4, r0
    5120:	b178      	cbz	r0, 5142 <bt_att_chan_create_pdu+0x52>
	return z_impl_z_current_get();
    5122:	f011 fbe5 	bl	168f0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    5126:	4b0e      	ldr	r3, [pc, #56]	; (5160 <bt_att_chan_create_pdu+0x70>)
    5128:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    512a:	480e      	ldr	r0, [pc, #56]	; (5164 <bt_att_chan_create_pdu+0x74>)
    512c:	bf07      	ittee	eq
    512e:	2200      	moveq	r2, #0
    5130:	2300      	moveq	r3, #0
    5132:	4632      	movne	r2, r6
    5134:	463b      	movne	r3, r7
    5136:	f010 fe57 	bl	15de8 <z_impl_k_queue_get>
	if (!data) {
    513a:	b948      	cbnz	r0, 5150 <bt_att_chan_create_pdu+0x60>
		net_buf_unref(buf);
    513c:	4620      	mov	r0, r4
    513e:	f00e f8db 	bl	132f8 <net_buf_unref>
		return NULL;
    5142:	2400      	movs	r4, #0
}
    5144:	4620      	mov	r0, r4
    5146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
    5148:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
    514c:	2700      	movs	r7, #0
    514e:	e7e0      	b.n	5112 <bt_att_chan_create_pdu+0x22>
	bt_att_tx_meta_data(buf) = data;
    5150:	61a0      	str	r0, [r4, #24]
    5152:	2101      	movs	r1, #1
    5154:	f104 000c 	add.w	r0, r4, #12
    5158:	f014 fbbb 	bl	198d2 <net_buf_simple_add>
	hdr->code = op;
    515c:	7005      	strb	r5, [r0, #0]
	return buf;
    515e:	e7f1      	b.n	5144 <bt_att_chan_create_pdu+0x54>
    5160:	20001110 	.word	0x20001110
    5164:	200008f8 	.word	0x200008f8

00005168 <bt_att_recv>:
{
    5168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    516c:	8a0b      	ldrh	r3, [r1, #16]
{
    516e:	4605      	mov	r5, r0
    5170:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    5172:	2b00      	cmp	r3, #0
    5174:	d05d      	beq.n	5232 <bt_att_recv+0xca>
	return net_buf_simple_pull_mem(&buf->b, len);
    5176:	2101      	movs	r1, #1
    5178:	f104 000c 	add.w	r0, r4, #12
    517c:	f014 fbd0 	bl	19920 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    5180:	f855 3c04 	ldr.w	r3, [r5, #-4]
    5184:	4680      	mov	r8, r0
    5186:	2b00      	cmp	r3, #0
    5188:	d053      	beq.n	5232 <bt_att_recv+0xca>
		if (hdr->code == handlers[i].op) {
    518a:	7801      	ldrb	r1, [r0, #0]
    518c:	4e2b      	ldr	r6, [pc, #172]	; (523c <bt_att_recv+0xd4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    518e:	1f2f      	subs	r7, r5, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5190:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    5192:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
    5196:	428a      	cmp	r2, r1
    5198:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
    519c:	eb06 0bc3 	add.w	fp, r6, r3, lsl #3
    51a0:	d11e      	bne.n	51e0 <bt_att_recv+0x78>
		if (handler->type == ATT_REQUEST &&
    51a2:	f89b 9002 	ldrb.w	r9, [fp, #2]
    51a6:	f1b9 0f01 	cmp.w	r9, #1
    51aa:	d129      	bne.n	5200 <bt_att_recv+0x98>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
    51ac:	2100      	movs	r1, #0
    51ae:	f105 0030 	add.w	r0, r5, #48	; 0x30
    51b2:	f013 fd46 	bl	18c42 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
    51b6:	2800      	cmp	r0, #0
    51b8:	d13b      	bne.n	5232 <bt_att_recv+0xca>
	if (buf->len < handler->expect_len) {
    51ba:	8a22      	ldrh	r2, [r4, #16]
    51bc:	f89b 3001 	ldrb.w	r3, [fp, #1]
    51c0:	429a      	cmp	r2, r3
    51c2:	d339      	bcc.n	5238 <bt_att_recv+0xd0>
		err = handler->func(att_chan, buf);
    51c4:	4456      	add	r6, sl
    51c6:	4621      	mov	r1, r4
    51c8:	6873      	ldr	r3, [r6, #4]
    51ca:	4638      	mov	r0, r7
    51cc:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    51ce:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
    51d2:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    51d4:	d12d      	bne.n	5232 <bt_att_recv+0xca>
    51d6:	b360      	cbz	r0, 5232 <bt_att_recv+0xca>
		send_err_rsp(att_chan, hdr->code, 0, err);
    51d8:	f898 1000 	ldrb.w	r1, [r8]
	if (!req) {
    51dc:	b349      	cbz	r1, 5232 <bt_att_recv+0xca>
    51de:	e00a      	b.n	51f6 <bt_att_recv+0x8e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    51e0:	3301      	adds	r3, #1
    51e2:	2b0e      	cmp	r3, #14
    51e4:	d1d5      	bne.n	5192 <bt_att_recv+0x2a>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    51e6:	4608      	mov	r0, r1
    51e8:	f7ff fdb8 	bl	4d5c <att_op_get_type>
    51ec:	b308      	cbz	r0, 5232 <bt_att_recv+0xca>
    51ee:	2805      	cmp	r0, #5
    51f0:	d01f      	beq.n	5232 <bt_att_recv+0xca>
	if (!req) {
    51f2:	b1f1      	cbz	r1, 5232 <bt_att_recv+0xca>
    51f4:	2306      	movs	r3, #6
    51f6:	2200      	movs	r2, #0
    51f8:	4638      	mov	r0, r7
    51fa:	f013 fe80 	bl	18efe <send_err_rsp.part.0>
    51fe:	e018      	b.n	5232 <bt_att_recv+0xca>
		} else if (handler->type == ATT_INDICATION &&
    5200:	f1b9 0f05 	cmp.w	r9, #5
    5204:	d00a      	beq.n	521c <bt_att_recv+0xb4>
	if (buf->len < handler->expect_len) {
    5206:	8a22      	ldrh	r2, [r4, #16]
    5208:	f89b 3001 	ldrb.w	r3, [fp, #1]
    520c:	429a      	cmp	r2, r3
    520e:	d310      	bcc.n	5232 <bt_att_recv+0xca>
		err = handler->func(att_chan, buf);
    5210:	f8db 3004 	ldr.w	r3, [fp, #4]
    5214:	4621      	mov	r1, r4
    5216:	4638      	mov	r0, r7
    5218:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    521a:	e00a      	b.n	5232 <bt_att_recv+0xca>
			   atomic_test_and_set_bit(att_chan->flags,
    521c:	2101      	movs	r1, #1
    521e:	f105 0030 	add.w	r0, r5, #48	; 0x30
    5222:	f013 fd0e 	bl	18c42 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
    5226:	b920      	cbnz	r0, 5232 <bt_att_recv+0xca>
	if (buf->len < handler->expect_len) {
    5228:	f89b 2001 	ldrb.w	r2, [fp, #1]
    522c:	8a23      	ldrh	r3, [r4, #16]
    522e:	429a      	cmp	r2, r3
    5230:	d9c8      	bls.n	51c4 <bt_att_recv+0x5c>
}
    5232:	2000      	movs	r0, #0
    5234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = BT_ATT_ERR_INVALID_PDU;
    5238:	2304      	movs	r3, #4
    523a:	e7cd      	b.n	51d8 <bt_att_recv+0x70>
    523c:	0001b618 	.word	0x0001b618

00005240 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    5240:	b5f0      	push	{r4, r5, r6, r7, lr}
    5242:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    5244:	6803      	ldr	r3, [r0, #0]
    5246:	460d      	mov	r5, r1
    5248:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    524a:	b087      	sub	sp, #28
    524c:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    524e:	bf18      	it	ne
    5250:	2101      	movne	r1, #1
    5252:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    5254:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    5256:	f014 fa8c 	bl	19772 <bt_gatt_change_aware>
    525a:	b948      	cbnz	r0, 5270 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    525c:	2105      	movs	r1, #5
    525e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    5262:	f013 fcee 	bl	18c42 <atomic_test_and_set_bit>
    5266:	2800      	cmp	r0, #0
    5268:	d048      	beq.n	52fc <att_write_rsp.constprop.0+0xbc>
			return 0;
    526a:	2000      	movs	r0, #0
}
    526c:	b007      	add	sp, #28
    526e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
    5270:	2e00      	cmp	r6, #0
    5272:	d045      	beq.n	5300 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
    5274:	2218      	movs	r2, #24
    5276:	2100      	movs	r1, #0
    5278:	4668      	mov	r0, sp
    527a:	f012 fbca 	bl	17a12 <memset>
	if (rsp) {
    527e:	bb67      	cbnz	r7, 52da <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
    5280:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5282:	4a20      	ldr	r2, [pc, #128]	; (5304 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
    5284:	681b      	ldr	r3, [r3, #0]
    5286:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    5288:	2300      	movs	r3, #0
    528a:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    528e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5290:	9303      	str	r3, [sp, #12]
	data.len = len;
    5292:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    5296:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    529a:	2301      	movs	r3, #1
    529c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    52a0:	4631      	mov	r1, r6
    52a2:	466b      	mov	r3, sp
    52a4:	4630      	mov	r0, r6
	data.req = req;
    52a6:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    52aa:	f013 fac0 	bl	1882e <bt_gatt_foreach_attr>
	if (data.err) {
    52ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
    52b2:	b1e3      	cbz	r3, 52ee <att_write_rsp.constprop.0+0xae>
		if (rsp) {
    52b4:	2f00      	cmp	r7, #0
    52b6:	d0d8      	beq.n	526a <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    52b8:	9b01      	ldr	r3, [sp, #4]
    52ba:	6998      	ldr	r0, [r3, #24]
    52bc:	f7ff fd94 	bl	4de8 <tx_meta_data_free>
			net_buf_unref(data.buf);
    52c0:	9801      	ldr	r0, [sp, #4]
    52c2:	f00e f819 	bl	132f8 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
    52c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
    52ca:	2d00      	cmp	r5, #0
    52cc:	d0cd      	beq.n	526a <att_write_rsp.constprop.0+0x2a>
    52ce:	4632      	mov	r2, r6
    52d0:	4629      	mov	r1, r5
    52d2:	4620      	mov	r0, r4
    52d4:	f013 fe13 	bl	18efe <send_err_rsp.part.0>
    52d8:	e7c7      	b.n	526a <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    52da:	2200      	movs	r2, #0
    52dc:	4639      	mov	r1, r7
    52de:	4620      	mov	r0, r4
    52e0:	f7ff ff06 	bl	50f0 <bt_att_chan_create_pdu>
    52e4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    52e6:	2800      	cmp	r0, #0
    52e8:	d1ca      	bne.n	5280 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
    52ea:	200e      	movs	r0, #14
    52ec:	e7be      	b.n	526c <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
    52ee:	9901      	ldr	r1, [sp, #4]
    52f0:	2900      	cmp	r1, #0
    52f2:	d0ba      	beq.n	526a <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
    52f4:	4620      	mov	r0, r4
    52f6:	f013 faa5 	bl	18844 <bt_att_chan_send_rsp>
    52fa:	e7b6      	b.n	526a <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    52fc:	2012      	movs	r0, #18
    52fe:	e7b5      	b.n	526c <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
    5300:	2001      	movs	r0, #1
    5302:	e7b3      	b.n	526c <att_write_rsp.constprop.0+0x2c>
    5304:	000187cd 	.word	0x000187cd

00005308 <att_read_group_req>:
{
    5308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    530c:	8a0e      	ldrh	r6, [r1, #16]
    530e:	3e04      	subs	r6, #4
    5310:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
    5312:	2e02      	cmp	r6, #2
{
    5314:	4604      	mov	r4, r0
    5316:	b08c      	sub	sp, #48	; 0x30
    5318:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    531a:	d001      	beq.n	5320 <att_read_group_req+0x18>
    531c:	2e10      	cmp	r6, #16
    531e:	d16a      	bne.n	53f6 <att_read_group_req+0xee>
    5320:	2104      	movs	r1, #4
    5322:	300c      	adds	r0, #12
    5324:	f014 fafc 	bl	19920 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    5328:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    532c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    532e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    5330:	1d01      	adds	r1, r0, #4
    5332:	4632      	mov	r2, r6
    5334:	4640      	mov	r0, r8
    5336:	f012 fbb8 	bl	17aaa <bt_uuid_create>
    533a:	2800      	cmp	r0, #0
    533c:	d05d      	beq.n	53fa <att_read_group_req+0xf2>
	if (!start || !end) {
    533e:	2d00      	cmp	r5, #0
    5340:	d03a      	beq.n	53b8 <att_read_group_req+0xb0>
    5342:	2600      	movs	r6, #0
    5344:	2f00      	cmp	r7, #0
    5346:	d036      	beq.n	53b6 <att_read_group_req+0xae>
	if (start > end) {
    5348:	42bd      	cmp	r5, r7
    534a:	d835      	bhi.n	53b8 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    534c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5350:	a901      	add	r1, sp, #4
    5352:	4640      	mov	r0, r8
    5354:	f88d 6004 	strb.w	r6, [sp, #4]
    5358:	f8ad 3006 	strh.w	r3, [sp, #6]
    535c:	f012 fb77 	bl	17a4e <bt_uuid_cmp>
    5360:	bb70      	cbnz	r0, 53c0 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
    5362:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
    5364:	2214      	movs	r2, #20
    5366:	2100      	movs	r1, #0
    5368:	a807      	add	r0, sp, #28
    536a:	f012 fb52 	bl	17a12 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    536e:	2201      	movs	r2, #1
    5370:	2111      	movs	r1, #17
    5372:	4630      	mov	r0, r6
    5374:	f013 fe06 	bl	18f84 <bt_att_create_pdu>
    5378:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    537a:	2800      	cmp	r0, #0
    537c:	d03d      	beq.n	53fa <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
    537e:	2101      	movs	r1, #1
    5380:	300c      	adds	r0, #12
	data.uuid = uuid;
    5382:	e9cd 4807 	strd	r4, r8, [sp, #28]
    5386:	f014 faa4 	bl	198d2 <net_buf_simple_add>
	data.rsp->len = 0U;
    538a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    538c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    538e:	4a1c      	ldr	r2, [pc, #112]	; (5400 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
    5390:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5392:	4639      	mov	r1, r7
	data.group = NULL;
    5394:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5396:	4628      	mov	r0, r5
    5398:	ab07      	add	r3, sp, #28
    539a:	f013 fa48 	bl	1882e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    539e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    53a0:	781b      	ldrb	r3, [r3, #0]
    53a2:	bb1b      	cbnz	r3, 53ec <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    53a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    53a6:	6998      	ldr	r0, [r3, #24]
    53a8:	f7ff fd1e 	bl	4de8 <tx_meta_data_free>
		net_buf_unref(data.buf);
    53ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    53ae:	f00d ffa3 	bl	132f8 <net_buf_unref>
	if (!req) {
    53b2:	230a      	movs	r3, #10
    53b4:	e001      	b.n	53ba <att_read_group_req+0xb2>
			*err = 0U;
    53b6:	463d      	mov	r5, r7
	if (!req) {
    53b8:	2301      	movs	r3, #1
    53ba:	462a      	mov	r2, r5
    53bc:	2110      	movs	r1, #16
    53be:	e00e      	b.n	53de <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    53c0:	f642 0301 	movw	r3, #10241	; 0x2801
    53c4:	a907      	add	r1, sp, #28
    53c6:	4640      	mov	r0, r8
    53c8:	f88d 601c 	strb.w	r6, [sp, #28]
    53cc:	f8ad 301e 	strh.w	r3, [sp, #30]
    53d0:	f012 fb3d 	bl	17a4e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    53d4:	2800      	cmp	r0, #0
    53d6:	d0c4      	beq.n	5362 <att_read_group_req+0x5a>
	if (!req) {
    53d8:	2310      	movs	r3, #16
    53da:	462a      	mov	r2, r5
    53dc:	4619      	mov	r1, r3
    53de:	4620      	mov	r0, r4
    53e0:	f013 fd8d 	bl	18efe <send_err_rsp.part.0>
		return 0;
    53e4:	2000      	movs	r0, #0
}
    53e6:	b00c      	add	sp, #48	; 0x30
    53e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
    53ec:	9909      	ldr	r1, [sp, #36]	; 0x24
    53ee:	4620      	mov	r0, r4
    53f0:	f013 fa28 	bl	18844 <bt_att_chan_send_rsp>
	return 0;
    53f4:	e7f6      	b.n	53e4 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
    53f6:	2004      	movs	r0, #4
    53f8:	e7f5      	b.n	53e6 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
    53fa:	200e      	movs	r0, #14
    53fc:	e7f3      	b.n	53e6 <att_read_group_req+0xde>
    53fe:	bf00      	nop
    5400:	00004ee5 	.word	0x00004ee5

00005404 <att_read_mult_vl_req>:
{
    5404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    5408:	6846      	ldr	r6, [r0, #4]
{
    540a:	b085      	sub	sp, #20
    540c:	4604      	mov	r4, r0
    540e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    5410:	4630      	mov	r0, r6
    5412:	2101      	movs	r1, #1
    5414:	f014 f9ad 	bl	19772 <bt_gatt_change_aware>
    5418:	b950      	cbnz	r0, 5430 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    541a:	2105      	movs	r1, #5
    541c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    5420:	f013 fc0f 	bl	18c42 <atomic_test_and_set_bit>
    5424:	2800      	cmp	r0, #0
    5426:	d13b      	bne.n	54a0 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    5428:	2012      	movs	r0, #18
}
    542a:	b005      	add	sp, #20
    542c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
    5430:	2210      	movs	r2, #16
    5432:	2100      	movs	r1, #0
    5434:	4668      	mov	r0, sp
    5436:	f012 faec 	bl	17a12 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
    543a:	2200      	movs	r2, #0
    543c:	2121      	movs	r1, #33	; 0x21
    543e:	4630      	mov	r0, r6
    5440:	f013 fda0 	bl	18f84 <bt_att_create_pdu>
    5444:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    5446:	b368      	cbz	r0, 54a4 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    5448:	f8df 905c 	ldr.w	r9, [pc, #92]	; 54a8 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
    544c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    544e:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5452:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    5456:	8a2b      	ldrh	r3, [r5, #16]
    5458:	2b01      	cmp	r3, #1
    545a:	d804      	bhi.n	5466 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
    545c:	9902      	ldr	r1, [sp, #8]
    545e:	4620      	mov	r0, r4
    5460:	f013 f9f0 	bl	18844 <bt_att_chan_send_rsp>
	return 0;
    5464:	e01c      	b.n	54a0 <att_read_mult_vl_req+0x9c>
    5466:	4638      	mov	r0, r7
    5468:	f014 fa62 	bl	19930 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    546c:	466b      	mov	r3, sp
    546e:	464a      	mov	r2, r9
    5470:	4601      	mov	r1, r0
    5472:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5474:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    5478:	f013 f9d9 	bl	1882e <bt_gatt_foreach_attr>
		if (data.err) {
    547c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5480:	2b00      	cmp	r3, #0
    5482:	d0e8      	beq.n	5456 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    5484:	9b02      	ldr	r3, [sp, #8]
    5486:	6998      	ldr	r0, [r3, #24]
    5488:	f7ff fcae 	bl	4de8 <tx_meta_data_free>
			net_buf_unref(data.buf);
    548c:	9802      	ldr	r0, [sp, #8]
    548e:	f00d ff33 	bl	132f8 <net_buf_unref>
	if (!req) {
    5492:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5496:	4632      	mov	r2, r6
    5498:	2120      	movs	r1, #32
    549a:	4620      	mov	r0, r4
    549c:	f013 fd2f 	bl	18efe <send_err_rsp.part.0>
			return 0;
    54a0:	2000      	movs	r0, #0
    54a2:	e7c2      	b.n	542a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
    54a4:	200e      	movs	r0, #14
    54a6:	e7c0      	b.n	542a <att_read_mult_vl_req+0x26>
    54a8:	00018cb3 	.word	0x00018cb3

000054ac <att_read_mult_req>:
{
    54ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    54b0:	6846      	ldr	r6, [r0, #4]
{
    54b2:	b085      	sub	sp, #20
    54b4:	4604      	mov	r4, r0
    54b6:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    54b8:	4630      	mov	r0, r6
    54ba:	2101      	movs	r1, #1
    54bc:	f014 f959 	bl	19772 <bt_gatt_change_aware>
    54c0:	b950      	cbnz	r0, 54d8 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    54c2:	2105      	movs	r1, #5
    54c4:	f104 0034 	add.w	r0, r4, #52	; 0x34
    54c8:	f013 fbbb 	bl	18c42 <atomic_test_and_set_bit>
    54cc:	2800      	cmp	r0, #0
    54ce:	d13b      	bne.n	5548 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    54d0:	2012      	movs	r0, #18
}
    54d2:	b005      	add	sp, #20
    54d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
    54d8:	2210      	movs	r2, #16
    54da:	2100      	movs	r1, #0
    54dc:	4668      	mov	r0, sp
    54de:	f012 fa98 	bl	17a12 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    54e2:	2200      	movs	r2, #0
    54e4:	210f      	movs	r1, #15
    54e6:	4630      	mov	r0, r6
    54e8:	f013 fd4c 	bl	18f84 <bt_att_create_pdu>
    54ec:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    54ee:	b368      	cbz	r0, 554c <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    54f0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 5550 <att_read_mult_req+0xa4>
	data.chan = chan;
    54f4:	9400      	str	r4, [sp, #0]
    54f6:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    54fa:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    54fe:	8a2b      	ldrh	r3, [r5, #16]
    5500:	2b01      	cmp	r3, #1
    5502:	d804      	bhi.n	550e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
    5504:	9902      	ldr	r1, [sp, #8]
    5506:	4620      	mov	r0, r4
    5508:	f013 f99c 	bl	18844 <bt_att_chan_send_rsp>
	return 0;
    550c:	e01c      	b.n	5548 <att_read_mult_req+0x9c>
    550e:	4638      	mov	r0, r7
    5510:	f014 fa0e 	bl	19930 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5514:	466b      	mov	r3, sp
    5516:	464a      	mov	r2, r9
    5518:	4601      	mov	r1, r0
    551a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    551c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5520:	f013 f985 	bl	1882e <bt_gatt_foreach_attr>
		if (data.err) {
    5524:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5528:	2b00      	cmp	r3, #0
    552a:	d0e8      	beq.n	54fe <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    552c:	9b02      	ldr	r3, [sp, #8]
    552e:	6998      	ldr	r0, [r3, #24]
    5530:	f7ff fc5a 	bl	4de8 <tx_meta_data_free>
			net_buf_unref(data.buf);
    5534:	9802      	ldr	r0, [sp, #8]
    5536:	f00d fedf 	bl	132f8 <net_buf_unref>
	if (!req) {
    553a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    553e:	4632      	mov	r2, r6
    5540:	210e      	movs	r1, #14
    5542:	4620      	mov	r0, r4
    5544:	f013 fcdb 	bl	18efe <send_err_rsp.part.0>
			return 0;
    5548:	2000      	movs	r0, #0
    554a:	e7c2      	b.n	54d2 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
    554c:	200e      	movs	r0, #14
    554e:	e7c0      	b.n	54d2 <att_read_mult_req+0x26>
    5550:	00018c6d 	.word	0x00018c6d

00005554 <att_read_rsp>:
{
    5554:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    5558:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
    555c:	4604      	mov	r4, r0
    555e:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
    5560:	4640      	mov	r0, r8
    5562:	2101      	movs	r1, #1
{
    5564:	4617      	mov	r7, r2
    5566:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
    5568:	f014 f903 	bl	19772 <bt_gatt_change_aware>
    556c:	b948      	cbnz	r0, 5582 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    556e:	2105      	movs	r1, #5
    5570:	f104 0034 	add.w	r0, r4, #52	; 0x34
    5574:	f013 fb65 	bl	18c42 <atomic_test_and_set_bit>
    5578:	bb78      	cbnz	r0, 55da <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    557a:	2012      	movs	r0, #18
}
    557c:	b004      	add	sp, #16
    557e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
    5582:	b38d      	cbz	r5, 55e8 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
    5584:	2210      	movs	r2, #16
    5586:	2100      	movs	r1, #0
    5588:	4668      	mov	r0, sp
    558a:	f012 fa42 	bl	17a12 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    558e:	2200      	movs	r2, #0
    5590:	4639      	mov	r1, r7
    5592:	4640      	mov	r0, r8
    5594:	f013 fcf6 	bl	18f84 <bt_att_create_pdu>
    5598:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    559a:	b338      	cbz	r0, 55ec <att_read_rsp+0x98>
	data.offset = offset;
    559c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    55a0:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    55a4:	2301      	movs	r3, #1
    55a6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    55aa:	4a11      	ldr	r2, [pc, #68]	; (55f0 <att_read_rsp+0x9c>)
	data.chan = chan;
    55ac:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    55ae:	466b      	mov	r3, sp
    55b0:	4629      	mov	r1, r5
    55b2:	4628      	mov	r0, r5
    55b4:	f013 f93b 	bl	1882e <bt_gatt_foreach_attr>
	if (data.err) {
    55b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    55bc:	b17b      	cbz	r3, 55de <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    55be:	9b02      	ldr	r3, [sp, #8]
    55c0:	6998      	ldr	r0, [r3, #24]
    55c2:	f7ff fc11 	bl	4de8 <tx_meta_data_free>
		net_buf_unref(data.buf);
    55c6:	9802      	ldr	r0, [sp, #8]
    55c8:	f00d fe96 	bl	132f8 <net_buf_unref>
	if (!req) {
    55cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    55d0:	462a      	mov	r2, r5
    55d2:	4631      	mov	r1, r6
    55d4:	4620      	mov	r0, r4
    55d6:	f013 fc92 	bl	18efe <send_err_rsp.part.0>
			return 0;
    55da:	2000      	movs	r0, #0
    55dc:	e7ce      	b.n	557c <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
    55de:	9902      	ldr	r1, [sp, #8]
    55e0:	4620      	mov	r0, r4
    55e2:	f013 f92f 	bl	18844 <bt_att_chan_send_rsp>
	return 0;
    55e6:	e7f8      	b.n	55da <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
    55e8:	2001      	movs	r0, #1
    55ea:	e7c7      	b.n	557c <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
    55ec:	200e      	movs	r0, #14
    55ee:	e7c5      	b.n	557c <att_read_rsp+0x28>
    55f0:	00018c6d 	.word	0x00018c6d

000055f4 <att_read_type_req>:
{
    55f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    55f8:	8a0d      	ldrh	r5, [r1, #16]
    55fa:	3d04      	subs	r5, #4
    55fc:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
    55fe:	2d02      	cmp	r5, #2
{
    5600:	4604      	mov	r4, r0
    5602:	b08c      	sub	sp, #48	; 0x30
    5604:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    5606:	d001      	beq.n	560c <att_read_type_req+0x18>
    5608:	2d10      	cmp	r5, #16
    560a:	d150      	bne.n	56ae <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
    560c:	2104      	movs	r1, #4
    560e:	300c      	adds	r0, #12
    5610:	f014 f986 	bl	19920 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    5614:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    5618:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    561a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    561c:	1d01      	adds	r1, r0, #4
    561e:	462a      	mov	r2, r5
    5620:	4640      	mov	r0, r8
    5622:	f012 fa42 	bl	17aaa <bt_uuid_create>
    5626:	b188      	cbz	r0, 564c <att_read_type_req+0x58>
	if (!start || !end) {
    5628:	b19e      	cbz	r6, 5652 <att_read_type_req+0x5e>
    562a:	b18f      	cbz	r7, 5650 <att_read_type_req+0x5c>
	if (start > end) {
    562c:	42b7      	cmp	r7, r6
    562e:	d310      	bcc.n	5652 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    5630:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    5632:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
    5634:	2100      	movs	r1, #0
    5636:	eb0d 0002 	add.w	r0, sp, r2
    563a:	f012 f9ea 	bl	17a12 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    563e:	2201      	movs	r2, #1
    5640:	2109      	movs	r1, #9
    5642:	4628      	mov	r0, r5
    5644:	f013 fc9e 	bl	18f84 <bt_att_create_pdu>
    5648:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    564a:	b960      	cbnz	r0, 5666 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
    564c:	200e      	movs	r0, #14
    564e:	e007      	b.n	5660 <att_read_type_req+0x6c>
			*err = 0U;
    5650:	463e      	mov	r6, r7
	if (!req) {
    5652:	2301      	movs	r3, #1
    5654:	4632      	mov	r2, r6
    5656:	2108      	movs	r1, #8
    5658:	4620      	mov	r0, r4
    565a:	f013 fc50 	bl	18efe <send_err_rsp.part.0>
		return 0;
    565e:	2000      	movs	r0, #0
}
    5660:	b00c      	add	sp, #48	; 0x30
    5662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    5666:	2101      	movs	r1, #1
    5668:	300c      	adds	r0, #12
	data.uuid = uuid;
    566a:	e9cd 4806 	strd	r4, r8, [sp, #24]
    566e:	f014 f930 	bl	198d2 <net_buf_simple_add>
	data.rsp->len = 0U;
    5672:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5674:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
    5676:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5678:	230a      	movs	r3, #10
    567a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    567e:	4a0d      	ldr	r2, [pc, #52]	; (56b4 <att_read_type_req+0xc0>)
    5680:	ab06      	add	r3, sp, #24
    5682:	4639      	mov	r1, r7
    5684:	4630      	mov	r0, r6
    5686:	f013 f8d2 	bl	1882e <bt_gatt_foreach_attr>
	if (data.err) {
    568a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    568e:	b14b      	cbz	r3, 56a4 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    5690:	9b08      	ldr	r3, [sp, #32]
    5692:	6998      	ldr	r0, [r3, #24]
    5694:	f7ff fba8 	bl	4de8 <tx_meta_data_free>
		net_buf_unref(data.buf);
    5698:	9808      	ldr	r0, [sp, #32]
    569a:	f00d fe2d 	bl	132f8 <net_buf_unref>
	if (!req) {
    569e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    56a2:	e7d7      	b.n	5654 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
    56a4:	9908      	ldr	r1, [sp, #32]
    56a6:	4620      	mov	r0, r4
    56a8:	f013 f8cc 	bl	18844 <bt_att_chan_send_rsp>
	return 0;
    56ac:	e7d7      	b.n	565e <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
    56ae:	2004      	movs	r0, #4
    56b0:	e7d6      	b.n	5660 <att_read_type_req+0x6c>
    56b2:	bf00      	nop
    56b4:	00004f91 	.word	0x00004f91

000056b8 <att_find_type_req>:
{
    56b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56bc:	460f      	mov	r7, r1
    56be:	b086      	sub	sp, #24
    56c0:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    56c2:	2106      	movs	r1, #6
    56c4:	f107 000c 	add.w	r0, r7, #12
    56c8:	f014 f92a 	bl	19920 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    56cc:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    56ce:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
    56d2:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
    56d4:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
    56d8:	b1c5      	cbz	r5, 570c <att_find_type_req+0x54>
    56da:	2300      	movs	r3, #0
    56dc:	f1b8 0f00 	cmp.w	r8, #0
    56e0:	d013      	beq.n	570a <att_find_type_req+0x52>
	if (start > end) {
    56e2:	4545      	cmp	r5, r8
    56e4:	d812      	bhi.n	570c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    56e6:	f88d 3000 	strb.w	r3, [sp]
    56ea:	f88d 3004 	strb.w	r3, [sp, #4]
    56ee:	a901      	add	r1, sp, #4
    56f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    56f4:	4668      	mov	r0, sp
    56f6:	f8ad 2002 	strh.w	r2, [sp, #2]
    56fa:	f8ad 3006 	strh.w	r3, [sp, #6]
    56fe:	f012 f9a6 	bl	17a4e <bt_uuid_cmp>
    5702:	4606      	mov	r6, r0
    5704:	b160      	cbz	r0, 5720 <att_find_type_req+0x68>
	if (!req) {
    5706:	230a      	movs	r3, #10
    5708:	e001      	b.n	570e <att_find_type_req+0x56>
			*err = 0U;
    570a:	4645      	mov	r5, r8
	if (!req) {
    570c:	2301      	movs	r3, #1
    570e:	462a      	mov	r2, r5
    5710:	2106      	movs	r1, #6
    5712:	4620      	mov	r0, r4
    5714:	f013 fbf3 	bl	18efe <send_err_rsp.part.0>
		return 0;
    5718:	2000      	movs	r0, #0
}
    571a:	b006      	add	sp, #24
    571c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
    5720:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    5724:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
    5726:	4601      	mov	r1, r0
    5728:	2214      	movs	r2, #20
    572a:	a801      	add	r0, sp, #4
    572c:	f012 f971 	bl	17a12 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    5730:	4632      	mov	r2, r6
    5732:	2107      	movs	r1, #7
    5734:	4650      	mov	r0, sl
    5736:	f013 fc25 	bl	18f84 <bt_att_create_pdu>
    573a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    573c:	b1f8      	cbz	r0, 577e <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    573e:	230a      	movs	r3, #10
    5740:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5744:	4a0f      	ldr	r2, [pc, #60]	; (5784 <att_find_type_req+0xcc>)
	data.chan = chan;
    5746:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5748:	ab01      	add	r3, sp, #4
    574a:	4641      	mov	r1, r8
    574c:	4628      	mov	r0, r5
	data.value = value;
    574e:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
    5752:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5756:	f013 f86a 	bl	1882e <bt_gatt_foreach_attr>
	if (data.err) {
    575a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    575e:	b14b      	cbz	r3, 5774 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    5760:	9b02      	ldr	r3, [sp, #8]
    5762:	6998      	ldr	r0, [r3, #24]
    5764:	f7ff fb40 	bl	4de8 <tx_meta_data_free>
		net_buf_unref(data.buf);
    5768:	9802      	ldr	r0, [sp, #8]
    576a:	f00d fdc5 	bl	132f8 <net_buf_unref>
	if (!req) {
    576e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    5772:	e7cc      	b.n	570e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
    5774:	9902      	ldr	r1, [sp, #8]
    5776:	4620      	mov	r0, r4
    5778:	f013 f864 	bl	18844 <bt_att_chan_send_rsp>
	return 0;
    577c:	e7cc      	b.n	5718 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
    577e:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    5780:	e7cb      	b.n	571a <att_find_type_req+0x62>
    5782:	bf00      	nop
    5784:	00018861 	.word	0x00018861

00005788 <att_find_info_req>:
{
    5788:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    578a:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
    578c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    578e:	885e      	ldrh	r6, [r3, #2]
{
    5790:	b085      	sub	sp, #20
    5792:	4604      	mov	r4, r0
	if (!start || !end) {
    5794:	b195      	cbz	r5, 57bc <att_find_info_req+0x34>
    5796:	b186      	cbz	r6, 57ba <att_find_info_req+0x32>
	if (start > end) {
    5798:	42b5      	cmp	r5, r6
    579a:	d80f      	bhi.n	57bc <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    579c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
    579e:	2210      	movs	r2, #16
    57a0:	2100      	movs	r1, #0
    57a2:	4668      	mov	r0, sp
    57a4:	f012 f935 	bl	17a12 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    57a8:	2200      	movs	r2, #0
    57aa:	2105      	movs	r1, #5
    57ac:	4638      	mov	r0, r7
    57ae:	f013 fbe9 	bl	18f84 <bt_att_create_pdu>
    57b2:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    57b4:	b958      	cbnz	r0, 57ce <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    57b6:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    57b8:	e007      	b.n	57ca <att_find_info_req+0x42>
			*err = 0U;
    57ba:	4635      	mov	r5, r6
	if (!req) {
    57bc:	2301      	movs	r3, #1
    57be:	462a      	mov	r2, r5
    57c0:	2104      	movs	r1, #4
    57c2:	4620      	mov	r0, r4
    57c4:	f013 fb9b 	bl	18efe <send_err_rsp.part.0>
		return 0;
    57c8:	2000      	movs	r0, #0
}
    57ca:	b005      	add	sp, #20
    57cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    57ce:	466b      	mov	r3, sp
    57d0:	4a0a      	ldr	r2, [pc, #40]	; (57fc <att_find_info_req+0x74>)
	data.chan = chan;
    57d2:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    57d4:	4631      	mov	r1, r6
    57d6:	4628      	mov	r0, r5
    57d8:	f013 f829 	bl	1882e <bt_gatt_foreach_attr>
	if (!data.rsp) {
    57dc:	9b02      	ldr	r3, [sp, #8]
    57de:	b943      	cbnz	r3, 57f2 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    57e0:	9b01      	ldr	r3, [sp, #4]
    57e2:	6998      	ldr	r0, [r3, #24]
    57e4:	f7ff fb00 	bl	4de8 <tx_meta_data_free>
		net_buf_unref(data.buf);
    57e8:	9801      	ldr	r0, [sp, #4]
    57ea:	f00d fd85 	bl	132f8 <net_buf_unref>
	if (!req) {
    57ee:	230a      	movs	r3, #10
    57f0:	e7e5      	b.n	57be <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
    57f2:	9901      	ldr	r1, [sp, #4]
    57f4:	4620      	mov	r0, r4
    57f6:	f013 f825 	bl	18844 <bt_att_chan_send_rsp>
	return 0;
    57fa:	e7e5      	b.n	57c8 <att_find_info_req+0x40>
    57fc:	00018989 	.word	0x00018989

00005800 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
    5800:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
    5802:	4c0b      	ldr	r4, [pc, #44]	; (5830 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
    5804:	4d0b      	ldr	r5, [pc, #44]	; (5834 <bt_att_init+0x34>)
    5806:	4620      	mov	r0, r4
    5808:	f014 ff58 	bl	1a6bc <z_impl_k_queue_init>
    580c:	4629      	mov	r1, r5
    580e:	4620      	mov	r0, r4
    5810:	f014 ff80 	bl	1a714 <k_queue_append>
    5814:	f105 0114 	add.w	r1, r5, #20
    5818:	4620      	mov	r0, r4
    581a:	f014 ff7b 	bl	1a714 <k_queue_append>
    581e:	f105 0128 	add.w	r1, r5, #40	; 0x28
    5822:	4620      	mov	r0, r4
    5824:	f014 ff76 	bl	1a714 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
    5828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
    582c:	f000 ba46 	b.w	5cbc <bt_gatt_init>
    5830:	200008f8 	.word	0x200008f8
    5834:	20001280 	.word	0x20001280

00005838 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    5838:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
    583a:	2300      	movs	r3, #0
{
    583c:	4605      	mov	r5, r0
    583e:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    5840:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    5842:	f011 f855 	bl	168f0 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
    5846:	4b0b      	ldr	r3, [pc, #44]	; (5874 <bt_att_req_alloc+0x3c>)
    5848:	681b      	ldr	r3, [r3, #0]
    584a:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
    584c:	bf04      	itt	eq
    584e:	2500      	moveq	r5, #0
    5850:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    5852:	a901      	add	r1, sp, #4
    5854:	4808      	ldr	r0, [pc, #32]	; (5878 <bt_att_req_alloc+0x40>)
    5856:	462a      	mov	r2, r5
    5858:	4623      	mov	r3, r4
    585a:	f010 f90b 	bl	15a74 <k_mem_slab_alloc>
    585e:	4601      	mov	r1, r0
    5860:	b930      	cbnz	r0, 5870 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    5862:	9801      	ldr	r0, [sp, #4]
    5864:	2210      	movs	r2, #16
    5866:	f012 f8d4 	bl	17a12 <memset>

	return req;
    586a:	9801      	ldr	r0, [sp, #4]
}
    586c:	b003      	add	sp, #12
    586e:	bd30      	pop	{r4, r5, pc}
		return NULL;
    5870:	2000      	movs	r0, #0
    5872:	e7fb      	b.n	586c <bt_att_req_alloc+0x34>
    5874:	200012bc 	.word	0x200012bc
    5878:	200008dc 	.word	0x200008dc

0000587c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    587c:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
    587e:	6883      	ldr	r3, [r0, #8]
{
    5880:	9001      	str	r0, [sp, #4]
	if (req->buf) {
    5882:	b14b      	cbz	r3, 5898 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
    5884:	6998      	ldr	r0, [r3, #24]
    5886:	f7ff faaf 	bl	4de8 <tx_meta_data_free>
		net_buf_unref(req->buf);
    588a:	9b01      	ldr	r3, [sp, #4]
    588c:	6898      	ldr	r0, [r3, #8]
    588e:	f00d fd33 	bl	132f8 <net_buf_unref>
		req->buf = NULL;
    5892:	9b01      	ldr	r3, [sp, #4]
    5894:	2200      	movs	r2, #0
    5896:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    5898:	4803      	ldr	r0, [pc, #12]	; (58a8 <bt_att_req_free+0x2c>)
    589a:	a901      	add	r1, sp, #4
    589c:	f014 fe52 	bl	1a544 <k_mem_slab_free>
}
    58a0:	b003      	add	sp, #12
    58a2:	f85d fb04 	ldr.w	pc, [sp], #4
    58a6:	bf00      	nop
    58a8:	200008dc 	.word	0x200008dc

000058ac <att_handle_rsp>:
{
    58ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    58b0:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    58b2:	3058      	adds	r0, #88	; 0x58
{
    58b4:	460e      	mov	r6, r1
    58b6:	4617      	mov	r7, r2
    58b8:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
    58ba:	f015 f819 	bl	1a8f0 <k_work_cancel_delayable>
	if (!chan->req) {
    58be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    58c0:	b930      	cbnz	r0, 58d0 <att_handle_rsp+0x24>
	att_req_send_process(chan->att);
    58c2:	6820      	ldr	r0, [r4, #0]
    58c4:	f013 fa56 	bl	18d74 <att_req_send_process>
}
    58c8:	2000      	movs	r0, #0
    58ca:	b002      	add	sp, #8
    58cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
    58d0:	4b10      	ldr	r3, [pc, #64]	; (5914 <att_handle_rsp+0x68>)
    58d2:	4298      	cmp	r0, r3
    58d4:	f04f 0800 	mov.w	r8, #0
    58d8:	d102      	bne.n	58e0 <att_handle_rsp+0x34>
		chan->req = NULL;
    58da:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    58de:	e7f0      	b.n	58c2 <att_handle_rsp+0x16>
	func = chan->req->func;
    58e0:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
    58e4:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
    58e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    58ea:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
    58ee:	f7ff ffc5 	bl	587c <bt_att_req_free>
	att_req_send_process(chan->att);
    58f2:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
    58f4:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
    58f8:	f013 fa3c 	bl	18d74 <att_req_send_process>
	if (func) {
    58fc:	f1b9 0f00 	cmp.w	r9, #0
    5900:	d0e2      	beq.n	58c8 <att_handle_rsp+0x1c>
		func(chan->att->conn, err, pdu, len, params);
    5902:	6820      	ldr	r0, [r4, #0]
    5904:	f8cd a000 	str.w	sl, [sp]
    5908:	6800      	ldr	r0, [r0, #0]
    590a:	463b      	mov	r3, r7
    590c:	4632      	mov	r2, r6
    590e:	4629      	mov	r1, r5
    5910:	47c8      	blx	r9
    5912:	e7d9      	b.n	58c8 <att_handle_rsp+0x1c>
    5914:	200012c0 	.word	0x200012c0

00005918 <bt_att_disconnected>:
{
    5918:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
    591c:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
    5920:	4604      	mov	r4, r0
	if (!att_chan->att) {
    5922:	2e00      	cmp	r6, #0
    5924:	d05a      	beq.n	59dc <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    5926:	f100 0184 	add.w	r1, r0, #132	; 0x84
    592a:	f106 0024 	add.w	r0, r6, #36	; 0x24
    592e:	f013 f95e 	bl	18bee <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    5932:	1f27      	subs	r7, r4, #4
    5934:	f104 0838 	add.w	r8, r4, #56	; 0x38
    5938:	2200      	movs	r2, #0
    593a:	2300      	movs	r3, #0
    593c:	4640      	mov	r0, r8
    593e:	f013 ff8e 	bl	1985e <net_buf_get>
    5942:	4605      	mov	r5, r0
    5944:	bb48      	cbnz	r0, 599a <bt_att_disconnected+0x82>
	if (chan->req) {
    5946:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5948:	b12b      	cbz	r3, 5956 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    594a:	4602      	mov	r2, r0
    594c:	4601      	mov	r1, r0
    594e:	230e      	movs	r3, #14
    5950:	4638      	mov	r0, r7
    5952:	f7ff ffab 	bl	58ac <att_handle_rsp>
	chan->att = NULL;
    5956:	2300      	movs	r3, #0
    5958:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
    595c:	2102      	movs	r1, #2
    595e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5962:	f013 f95d 	bl	18c20 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
    5966:	6a73      	ldr	r3, [r6, #36]	; 0x24
    5968:	2b00      	cmp	r3, #0
    596a:	d137      	bne.n	59dc <bt_att_disconnected+0xc4>
	att_reset(att);
    596c:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    596e:	9803      	ldr	r0, [sp, #12]
    5970:	2200      	movs	r2, #0
    5972:	2300      	movs	r3, #0
    5974:	300c      	adds	r0, #12
    5976:	f013 ff72 	bl	1985e <net_buf_get>
    597a:	4605      	mov	r5, r0
    597c:	b9a0      	cbnz	r0, 59a8 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
    597e:	9803      	ldr	r0, [sp, #12]
	return list->head;
    5980:	6845      	ldr	r5, [r0, #4]
    5982:	b9c5      	cbnz	r5, 59b6 <bt_att_disconnected+0x9e>
	att->conn = NULL;
    5984:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    5986:	a903      	add	r1, sp, #12
    5988:	4816      	ldr	r0, [pc, #88]	; (59e4 <bt_att_disconnected+0xcc>)
    598a:	f014 fddb 	bl	1a544 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
    598e:	6820      	ldr	r0, [r4, #0]
}
    5990:	b004      	add	sp, #16
    5992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
    5996:	f000 bd5f 	b.w	6458 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    599a:	69a8      	ldr	r0, [r5, #24]
    599c:	f7ff fa24 	bl	4de8 <tx_meta_data_free>
		net_buf_unref(buf);
    59a0:	4628      	mov	r0, r5
    59a2:	f00d fca9 	bl	132f8 <net_buf_unref>
    59a6:	e7c7      	b.n	5938 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    59a8:	69a8      	ldr	r0, [r5, #24]
    59aa:	f7ff fa1d 	bl	4de8 <tx_meta_data_free>
		net_buf_unref(buf);
    59ae:	4628      	mov	r0, r5
    59b0:	f00d fca2 	bl	132f8 <net_buf_unref>
    59b4:	e7db      	b.n	596e <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    59b6:	6882      	ldr	r2, [r0, #8]
	return node->next;
    59b8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    59ba:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    59bc:	4295      	cmp	r5, r2
	list->tail = node;
    59be:	bf08      	it	eq
    59c0:	6083      	streq	r3, [r0, #8]
		if (req->func) {
    59c2:	686e      	ldr	r6, [r5, #4]
    59c4:	b136      	cbz	r6, 59d4 <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    59c6:	68eb      	ldr	r3, [r5, #12]
    59c8:	9300      	str	r3, [sp, #0]
    59ca:	2300      	movs	r3, #0
    59cc:	6800      	ldr	r0, [r0, #0]
    59ce:	461a      	mov	r2, r3
    59d0:	210e      	movs	r1, #14
    59d2:	47b0      	blx	r6
		bt_att_req_free(req);
    59d4:	4628      	mov	r0, r5
    59d6:	f7ff ff51 	bl	587c <bt_att_req_free>
    59da:	e7d0      	b.n	597e <bt_att_disconnected+0x66>
}
    59dc:	b004      	add	sp, #16
    59de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59e2:	bf00      	nop
    59e4:	200008a4 	.word	0x200008a4

000059e8 <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    59e8:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    59ea:	b930      	cbnz	r0, 59fa <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
    59ec:	4907      	ldr	r1, [pc, #28]	; (5a0c <find_cf_cfg+0x24>)
    59ee:	4808      	ldr	r0, [pc, #32]	; (5a10 <find_cf_cfg+0x28>)
    59f0:	f013 fc28 	bl	19244 <bt_addr_le_eq>
    59f4:	b138      	cbz	r0, 5a06 <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    59f6:	4807      	ldr	r0, [pc, #28]	; (5a14 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
    59f8:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    59fa:	4a05      	ldr	r2, [pc, #20]	; (5a10 <find_cf_cfg+0x28>)
    59fc:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    5a00:	f012 fd82 	bl	18508 <bt_conn_is_peer_addr_le>
    5a04:	e7f6      	b.n	59f4 <find_cf_cfg+0xc>
	return NULL;
    5a06:	2000      	movs	r0, #0
    5a08:	e7f6      	b.n	59f8 <find_cf_cfg+0x10>
    5a0a:	bf00      	nop
    5a0c:	0001cbb4 	.word	0x0001cbb4
    5a10:	200012e9 	.word	0x200012e9
    5a14:	200012e8 	.word	0x200012e8

00005a18 <find_sc_cfg>:
{
    5a18:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    5a1a:	4c06      	ldr	r4, [pc, #24]	; (5a34 <find_sc_cfg+0x1c>)
    5a1c:	7823      	ldrb	r3, [r4, #0]
    5a1e:	4283      	cmp	r3, r0
    5a20:	d103      	bne.n	5a2a <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
    5a22:	1c60      	adds	r0, r4, #1
    5a24:	f013 fc0e 	bl	19244 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
    5a28:	b908      	cbnz	r0, 5a2e <find_sc_cfg+0x16>
	return NULL;
    5a2a:	2000      	movs	r0, #0
}
    5a2c:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    5a2e:	4620      	mov	r0, r4
    5a30:	e7fc      	b.n	5a2c <find_sc_cfg+0x14>
    5a32:	bf00      	nop
    5a34:	2000260e 	.word	0x2000260e

00005a38 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
    5a38:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
    5a3a:	1c4a      	adds	r2, r1, #1
{
    5a3c:	460c      	mov	r4, r1
		if (conn) {
    5a3e:	b138      	cbz	r0, 5a50 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
    5a40:	7809      	ldrb	r1, [r1, #0]
    5a42:	f012 fd61 	bl	18508 <bt_conn_is_peer_addr_le>
    5a46:	b108      	cbz	r0, 5a4c <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    5a48:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
    5a4a:	bd10      	pop	{r4, pc}
	return NULL;
    5a4c:	2000      	movs	r0, #0
    5a4e:	e7fc      	b.n	5a4a <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
    5a50:	4902      	ldr	r1, [pc, #8]	; (5a5c <find_ccc_cfg+0x24>)
    5a52:	4610      	mov	r0, r2
    5a54:	f013 fbf6 	bl	19244 <bt_addr_le_eq>
    5a58:	e7f5      	b.n	5a46 <find_ccc_cfg+0xe>
    5a5a:	bf00      	nop
    5a5c:	0001cbb4 	.word	0x0001cbb4

00005a60 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
    5a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a64:	461e      	mov	r6, r3
    5a66:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    5a6a:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
    5a6e:	4681      	mov	r9, r0
    5a70:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
    5a72:	2b00      	cmp	r3, #0
    5a74:	d13d      	bne.n	5af2 <bt_gatt_attr_write_ccc+0x92>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
    5a76:	1e73      	subs	r3, r6, #1
    5a78:	2b01      	cmp	r3, #1
    5a7a:	d83d      	bhi.n	5af8 <bt_gatt_attr_write_ccc+0x98>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
    5a7c:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
    5a7e:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
    5a80:	7815      	ldrb	r5, [r2, #0]
    5a82:	bf18      	it	ne
    5a84:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
    5a86:	f7ff ffd7 	bl	5a38 <find_ccc_cfg>
	if (!cfg) {
    5a8a:	4604      	mov	r4, r0
    5a8c:	b980      	cbnz	r0, 5ab0 <bt_gatt_attr_write_ccc+0x50>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
    5a8e:	b915      	cbnz	r5, 5a96 <bt_gatt_attr_write_ccc+0x36>
			return len;
    5a90:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
    5a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    5a96:	4641      	mov	r1, r8
    5a98:	f7ff ffce 	bl	5a38 <find_ccc_cfg>
		if (!cfg) {
    5a9c:	4604      	mov	r4, r0
    5a9e:	b370      	cbz	r0, 5afe <bt_gatt_attr_write_ccc+0x9e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    5aa0:	f109 0188 	add.w	r1, r9, #136	; 0x88
    5aa4:	3001      	adds	r0, #1
    5aa6:	f013 fbe4 	bl	19272 <bt_addr_le_copy>
		cfg->id = conn->id;
    5aaa:	f899 3008 	ldrb.w	r3, [r9, #8]
    5aae:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    5ab0:	f8d8 3010 	ldr.w	r3, [r8, #16]
    5ab4:	b98b      	cbnz	r3, 5ada <bt_gatt_attr_write_ccc+0x7a>
	cfg->value = value;
    5ab6:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    5ab8:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    5abc:	42ab      	cmp	r3, r5
    5abe:	d003      	beq.n	5ac8 <bt_gatt_attr_write_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
    5ac0:	4641      	mov	r1, r8
    5ac2:	4638      	mov	r0, r7
    5ac4:	f013 fb4a 	bl	1915c <gatt_ccc_changed>
	if (!value) {
    5ac8:	2d00      	cmp	r5, #0
    5aca:	d1e1      	bne.n	5a90 <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    5acc:	490d      	ldr	r1, [pc, #52]	; (5b04 <bt_gatt_attr_write_ccc+0xa4>)
    5ace:	1c60      	adds	r0, r4, #1
    5ad0:	f013 fbcf 	bl	19272 <bt_addr_le_copy>
	cfg->id = 0U;
    5ad4:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    5ad6:	8125      	strh	r5, [r4, #8]
}
    5ad8:	e7da      	b.n	5a90 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    5ada:	462a      	mov	r2, r5
    5adc:	4639      	mov	r1, r7
    5ade:	4648      	mov	r0, r9
    5ae0:	4798      	blx	r3
		if (write < 0) {
    5ae2:	2800      	cmp	r0, #0
    5ae4:	dbd5      	blt.n	5a92 <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
    5ae6:	3801      	subs	r0, #1
    5ae8:	2801      	cmp	r0, #1
    5aea:	d9e4      	bls.n	5ab6 <bt_gatt_attr_write_ccc+0x56>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    5aec:	f06f 000d 	mvn.w	r0, #13
    5af0:	e7cf      	b.n	5a92 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5af2:	f06f 0006 	mvn.w	r0, #6
    5af6:	e7cc      	b.n	5a92 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    5af8:	f06f 000c 	mvn.w	r0, #12
    5afc:	e7c9      	b.n	5a92 <bt_gatt_attr_write_ccc+0x32>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    5afe:	f06f 0010 	mvn.w	r0, #16
    5b02:	e7c6      	b.n	5a92 <bt_gatt_attr_write_ccc+0x32>
    5b04:	0001cbb4 	.word	0x0001cbb4

00005b08 <clear_cf_cfg>:
{
    5b08:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    5b0a:	490c      	ldr	r1, [pc, #48]	; (5b3c <clear_cf_cfg+0x34>)
{
    5b0c:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    5b0e:	3001      	adds	r0, #1
    5b10:	f013 fbaf 	bl	19272 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
    5b14:	f104 0008 	add.w	r0, r4, #8
    5b18:	2201      	movs	r2, #1
    5b1a:	2100      	movs	r1, #0
    5b1c:	f011 ff79 	bl	17a12 <memset>
    5b20:	f3bf 8f5b 	dmb	ish
    5b24:	340c      	adds	r4, #12
    5b26:	2300      	movs	r3, #0
    5b28:	e854 2f00 	ldrex	r2, [r4]
    5b2c:	e844 3100 	strex	r1, r3, [r4]
    5b30:	2900      	cmp	r1, #0
    5b32:	d1f9      	bne.n	5b28 <clear_cf_cfg+0x20>
    5b34:	f3bf 8f5b 	dmb	ish
}
    5b38:	bd10      	pop	{r4, pc}
    5b3a:	bf00      	nop
    5b3c:	0001cbb4 	.word	0x0001cbb4

00005b40 <sc_save>:
{
    5b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b44:	4680      	mov	r8, r0
    5b46:	460f      	mov	r7, r1
    5b48:	4616      	mov	r6, r2
    5b4a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    5b4c:	f7ff ff64 	bl	5a18 <find_sc_cfg>
	if (!cfg) {
    5b50:	4604      	mov	r4, r0
    5b52:	b948      	cbnz	r0, 5b68 <sc_save+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    5b54:	490b      	ldr	r1, [pc, #44]	; (5b84 <sc_save+0x44>)
    5b56:	f7ff ff5f 	bl	5a18 <find_sc_cfg>
		if (!cfg) {
    5b5a:	4604      	mov	r4, r0
    5b5c:	b180      	cbz	r0, 5b80 <sc_save+0x40>
		cfg->id = id;
    5b5e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    5b62:	4639      	mov	r1, r7
    5b64:	f013 fb85 	bl	19272 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    5b68:	8922      	ldrh	r2, [r4, #8]
    5b6a:	8963      	ldrh	r3, [r4, #10]
    5b6c:	b91a      	cbnz	r2, 5b76 <sc_save+0x36>
    5b6e:	b92b      	cbnz	r3, 5b7c <sc_save+0x3c>
		cfg->data.start = start;
    5b70:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    5b72:	8165      	strh	r5, [r4, #10]
    5b74:	e004      	b.n	5b80 <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
    5b76:	4296      	cmp	r6, r2
		*start = new_start;
    5b78:	bf38      	it	cc
    5b7a:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
    5b7c:	429d      	cmp	r5, r3
    5b7e:	d8f8      	bhi.n	5b72 <sc_save+0x32>
}
    5b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b84:	0001cbb4 	.word	0x0001cbb4

00005b88 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    5b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    5b8c:	4b23      	ldr	r3, [pc, #140]	; (5c1c <disconnected_cb+0x94>)
{
    5b8e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    5b90:	6882      	ldr	r2, [r0, #8]
    5b92:	429a      	cmp	r2, r3
{
    5b94:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    5b96:	d102      	bne.n	5b9e <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    5b98:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    5b9a:	8963      	ldrh	r3, [r4, #10]
    5b9c:	bb33      	cbnz	r3, 5bec <disconnected_cb+0x64>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    5b9e:	2001      	movs	r0, #1
    5ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
    5ba4:	f012 fc69 	bl	1847a <bt_conn_unref>
		if (ccc->cfg_changed) {
    5ba8:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    5baa:	2100      	movs	r1, #0
    5bac:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    5bae:	2b00      	cmp	r3, #0
    5bb0:	d0f5      	beq.n	5b9e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    5bb2:	4638      	mov	r0, r7
    5bb4:	4798      	blx	r3
    5bb6:	e7f2      	b.n	5b9e <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    5bb8:	f105 0888 	add.w	r8, r5, #136	; 0x88
    5bbc:	7a28      	ldrb	r0, [r5, #8]
    5bbe:	4641      	mov	r1, r8
    5bc0:	f012 fa0f 	bl	17fe2 <bt_addr_le_is_bonded>
    5bc4:	b968      	cbnz	r0, 5be2 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
    5bc6:	4b16      	ldr	r3, [pc, #88]	; (5c20 <disconnected_cb+0x98>)
    5bc8:	429c      	cmp	r4, r3
    5bca:	d102      	bne.n	5bd2 <disconnected_cb+0x4a>
					sc_clear(conn);
    5bcc:	4628      	mov	r0, r5
    5bce:	f013 fb53 	bl	19278 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    5bd2:	4914      	ldr	r1, [pc, #80]	; (5c24 <disconnected_cb+0x9c>)
    5bd4:	4630      	mov	r0, r6
    5bd6:	f013 fb4c 	bl	19272 <bt_addr_le_copy>
	cfg->id = 0U;
    5bda:	2300      	movs	r3, #0
    5bdc:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
    5bde:	8123      	strh	r3, [r4, #8]
}
    5be0:	e7e2      	b.n	5ba8 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    5be2:	4641      	mov	r1, r8
    5be4:	4630      	mov	r0, r6
    5be6:	f013 fb44 	bl	19272 <bt_addr_le_copy>
    5bea:	e7dd      	b.n	5ba8 <disconnected_cb+0x20>
		if (!cfg->value) {
    5bec:	8923      	ldrh	r3, [r4, #8]
    5bee:	2b00      	cmp	r3, #0
    5bf0:	d0da      	beq.n	5ba8 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    5bf2:	4626      	mov	r6, r4
    5bf4:	4628      	mov	r0, r5
    5bf6:	f816 1b01 	ldrb.w	r1, [r6], #1
    5bfa:	4632      	mov	r2, r6
    5bfc:	f012 fc84 	bl	18508 <bt_conn_is_peer_addr_le>
    5c00:	2800      	cmp	r0, #0
    5c02:	d1d9      	bne.n	5bb8 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    5c04:	7820      	ldrb	r0, [r4, #0]
    5c06:	4631      	mov	r1, r6
    5c08:	f7fe fe76 	bl	48f8 <bt_conn_lookup_addr_le>
			if (tmp) {
    5c0c:	2800      	cmp	r0, #0
    5c0e:	d0cb      	beq.n	5ba8 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
    5c10:	7a83      	ldrb	r3, [r0, #10]
    5c12:	2b07      	cmp	r3, #7
    5c14:	d1c6      	bne.n	5ba4 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
    5c16:	f012 fc30 	bl	1847a <bt_conn_unref>
	if (!value_used) {
    5c1a:	e7c0      	b.n	5b9e <disconnected_cb+0x16>
    5c1c:	00005a61 	.word	0x00005a61
    5c20:	20000230 	.word	0x20000230
    5c24:	0001cbb4 	.word	0x0001cbb4

00005c28 <read_ppcp>:
{
    5c28:	b513      	push	{r0, r1, r4, lr}
    5c2a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
    5c2e:	4c0b      	ldr	r4, [pc, #44]	; (5c5c <read_ppcp+0x34>)
{
    5c30:	4610      	mov	r0, r2
	if (offset > value_len) {
    5c32:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
    5c34:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    5c38:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    5c3c:	d80b      	bhi.n	5c56 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    5c3e:	f1c1 0408 	rsb	r4, r1, #8
    5c42:	429c      	cmp	r4, r3
    5c44:	bfa8      	it	ge
    5c46:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    5c48:	4622      	mov	r2, r4
    5c4a:	4469      	add	r1, sp
    5c4c:	f011 fed6 	bl	179fc <memcpy>
}
    5c50:	4620      	mov	r0, r4
    5c52:	b002      	add	sp, #8
    5c54:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5c56:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    5c5a:	e7f9      	b.n	5c50 <read_ppcp+0x28>
    5c5c:	00280018 	.word	0x00280018

00005c60 <sc_indicate_rsp>:
{
    5c60:	b510      	push	{r4, lr}
    5c62:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5c64:	4814      	ldr	r0, [pc, #80]	; (5cb8 <sc_indicate_rsp+0x58>)
    5c66:	f3bf 8f5b 	dmb	ish
    5c6a:	e850 3f00 	ldrex	r3, [r0]
    5c6e:	f023 0302 	bic.w	r3, r3, #2
    5c72:	e840 3200 	strex	r2, r3, [r0]
    5c76:	2a00      	cmp	r2, #0
    5c78:	d1f7      	bne.n	5c6a <sc_indicate_rsp+0xa>
    5c7a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5c7e:	f3bf 8f5b 	dmb	ish
    5c82:	6803      	ldr	r3, [r0, #0]
    5c84:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    5c88:	07da      	lsls	r2, r3, #31
    5c8a:	d504      	bpl.n	5c96 <sc_indicate_rsp+0x36>
	k_work_reschedule(&gatt_sc.work, timeout);
    5c8c:	2200      	movs	r2, #0
    5c8e:	2300      	movs	r3, #0
    5c90:	3830      	subs	r0, #48	; 0x30
    5c92:	f010 fb17 	bl	162c4 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
    5c96:	4620      	mov	r0, r4
    5c98:	f013 fa38 	bl	1910c <bt_att_fixed_chan_only>
    5c9c:	b150      	cbz	r0, 5cb4 <sc_indicate_rsp+0x54>
		cfg = find_cf_cfg(conn);
    5c9e:	4620      	mov	r0, r4
    5ca0:	f7ff fea2 	bl	59e8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
    5ca4:	b130      	cbz	r0, 5cb4 <sc_indicate_rsp+0x54>
    5ca6:	7a03      	ldrb	r3, [r0, #8]
    5ca8:	07db      	lsls	r3, r3, #31
    5caa:	d503      	bpl.n	5cb4 <sc_indicate_rsp+0x54>
}
    5cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
    5cb0:	f013 bbad 	b.w	1940e <set_change_aware_no_store.constprop.0.isra.0>
}
    5cb4:	bd10      	pop	{r4, pc}
    5cb6:	bf00      	nop
    5cb8:	20000d48 	.word	0x20000d48

00005cbc <bt_gatt_init>:
{
    5cbc:	b510      	push	{r4, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    5cbe:	4817      	ldr	r0, [pc, #92]	; (5d1c <bt_gatt_init+0x60>)
    5cc0:	2101      	movs	r1, #1
    5cc2:	f013 fac7 	bl	19254 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
    5cc6:	07c3      	lsls	r3, r0, #31
    5cc8:	d427      	bmi.n	5d1a <bt_gatt_init+0x5e>
    5cca:	2102      	movs	r1, #2
    5ccc:	4813      	ldr	r0, [pc, #76]	; (5d1c <bt_gatt_init+0x60>)
    5cce:	f013 fac1 	bl	19254 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
    5cd2:	4008      	ands	r0, r1
    5cd4:	d107      	bne.n	5ce6 <bt_gatt_init+0x2a>
    5cd6:	4912      	ldr	r1, [pc, #72]	; (5d20 <bt_gatt_init+0x64>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    5cd8:	4a12      	ldr	r2, [pc, #72]	; (5d24 <bt_gatt_init+0x68>)
    5cda:	880b      	ldrh	r3, [r1, #0]
    5cdc:	4c12      	ldr	r4, [pc, #72]	; (5d28 <bt_gatt_init+0x6c>)
    5cde:	42a2      	cmp	r2, r4
    5ce0:	d315      	bcc.n	5d0e <bt_gatt_init+0x52>
    5ce2:	b100      	cbz	r0, 5ce6 <bt_gatt_init+0x2a>
    5ce4:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    5ce6:	4b11      	ldr	r3, [pc, #68]	; (5d2c <bt_gatt_init+0x70>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    5ce8:	4911      	ldr	r1, [pc, #68]	; (5d30 <bt_gatt_init+0x74>)
    5cea:	4812      	ldr	r0, [pc, #72]	; (5d34 <bt_gatt_init+0x78>)
    5cec:	2200      	movs	r2, #0
	list->tail = NULL;
    5cee:	e9c3 2200 	strd	r2, r2, [r3]
    5cf2:	f014 fdef 	bl	1a8d4 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    5cf6:	480f      	ldr	r0, [pc, #60]	; (5d34 <bt_gatt_init+0x78>)
    5cf8:	f44f 72a4 	mov.w	r2, #328	; 0x148
    5cfc:	2300      	movs	r3, #0
    5cfe:	f7fc feaf 	bl	2a60 <bt_long_wq_schedule>
}
    5d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    5d06:	490c      	ldr	r1, [pc, #48]	; (5d38 <bt_gatt_init+0x7c>)
    5d08:	480c      	ldr	r0, [pc, #48]	; (5d3c <bt_gatt_init+0x80>)
    5d0a:	f014 bde3 	b.w	1a8d4 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    5d0e:	6850      	ldr	r0, [r2, #4]
    5d10:	4403      	add	r3, r0
    5d12:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    5d14:	3208      	adds	r2, #8
    5d16:	2001      	movs	r0, #1
    5d18:	e7e1      	b.n	5cde <bt_gatt_init+0x22>
}
    5d1a:	bd10      	pop	{r4, pc}
    5d1c:	200012f8 	.word	0x200012f8
    5d20:	2000261a 	.word	0x2000261a
    5d24:	0001b23c 	.word	0x0001b23c
    5d28:	0001b25c 	.word	0x0001b25c
    5d2c:	200012fc 	.word	0x200012fc
    5d30:	00005f3d 	.word	0x00005f3d
    5d34:	20000ca0 	.word	0x20000ca0
    5d38:	0000611d 	.word	0x0000611d
    5d3c:	20000d18 	.word	0x20000d18

00005d40 <bt_gatt_attr_get_handle>:
{
    5d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    5d44:	4603      	mov	r3, r0
    5d46:	b148      	cbz	r0, 5d5c <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    5d48:	8a00      	ldrh	r0, [r0, #16]
    5d4a:	b938      	cbnz	r0, 5d5c <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    5d4c:	4912      	ldr	r1, [pc, #72]	; (5d98 <bt_gatt_attr_get_handle+0x58>)
    5d4e:	f8df e04c 	ldr.w	lr, [pc, #76]	; 5d9c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    5d52:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    5d54:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    5d58:	4571      	cmp	r1, lr
    5d5a:	d301      	bcc.n	5d60 <bt_gatt_attr_get_handle+0x20>
}
    5d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    5d60:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    5d64:	42bb      	cmp	r3, r7
    5d66:	d304      	bcc.n	5d72 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    5d68:	fb0c 7206 	mla	r2, ip, r6, r7
    5d6c:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    5d6e:	4293      	cmp	r3, r2
    5d70:	d90e      	bls.n	5d90 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    5d72:	4434      	add	r4, r6
    5d74:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    5d76:	3108      	adds	r1, #8
    5d78:	4614      	mov	r4, r2
    5d7a:	e7ed      	b.n	5d58 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    5d7c:	fb0c 7805 	mla	r8, ip, r5, r7
    5d80:	4543      	cmp	r3, r8
    5d82:	d007      	beq.n	5d94 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    5d84:	3501      	adds	r5, #1
    5d86:	1962      	adds	r2, r4, r5
    5d88:	42b5      	cmp	r5, r6
    5d8a:	b292      	uxth	r2, r2
    5d8c:	d1f6      	bne.n	5d7c <bt_gatt_attr_get_handle+0x3c>
    5d8e:	e7f2      	b.n	5d76 <bt_gatt_attr_get_handle+0x36>
    5d90:	2500      	movs	r5, #0
    5d92:	e7f8      	b.n	5d86 <bt_gatt_attr_get_handle+0x46>
    5d94:	4610      	mov	r0, r2
    5d96:	e7e1      	b.n	5d5c <bt_gatt_attr_get_handle+0x1c>
    5d98:	0001b23c 	.word	0x0001b23c
    5d9c:	0001b25c 	.word	0x0001b25c

00005da0 <bt_gatt_foreach_attr_type>:
{
    5da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5da4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    5da8:	9100      	str	r1, [sp, #0]
    5daa:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    5dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5db0:	2d00      	cmp	r5, #0
    5db2:	bf08      	it	eq
    5db4:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    5db6:	4b24      	ldr	r3, [pc, #144]	; (5e48 <bt_gatt_foreach_attr_type+0xa8>)
    5db8:	881b      	ldrh	r3, [r3, #0]
    5dba:	4283      	cmp	r3, r0
{
    5dbc:	4607      	mov	r7, r0
    5dbe:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    5dc0:	d23c      	bcs.n	5e3c <bt_gatt_foreach_attr_type+0x9c>
}
    5dc2:	b003      	add	sp, #12
    5dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    5dc8:	6873      	ldr	r3, [r6, #4]
    5dca:	4423      	add	r3, r4
    5dcc:	42bb      	cmp	r3, r7
    5dce:	d232      	bcs.n	5e36 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    5dd0:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    5dd2:	3608      	adds	r6, #8
    5dd4:	4b1d      	ldr	r3, [pc, #116]	; (5e4c <bt_gatt_foreach_attr_type+0xac>)
    5dd6:	429e      	cmp	r6, r3
    5dd8:	d3f6      	bcc.n	5dc8 <bt_gatt_foreach_attr_type+0x28>
    5dda:	e7f2      	b.n	5dc2 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    5ddc:	5889      	ldr	r1, [r1, r2]
    5dde:	9301      	str	r3, [sp, #4]
    5de0:	4640      	mov	r0, r8
    5de2:	f011 fe34 	bl	17a4e <bt_uuid_cmp>
    5de6:	9b01      	ldr	r3, [sp, #4]
    5de8:	b190      	cbz	r0, 5e10 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    5dea:	3401      	adds	r4, #1
    5dec:	f10a 0a01 	add.w	sl, sl, #1
    5df0:	b2a4      	uxth	r4, r4
    5df2:	6873      	ldr	r3, [r6, #4]
    5df4:	4553      	cmp	r3, sl
    5df6:	d9ec      	bls.n	5dd2 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    5df8:	9b00      	ldr	r3, [sp, #0]
    5dfa:	429c      	cmp	r4, r3
    5dfc:	d8e1      	bhi.n	5dc2 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    5dfe:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
    5e00:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
    5e02:	d3f2      	bcc.n	5dea <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    5e04:	fb0b f20a 	mul.w	r2, fp, sl
    5e08:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    5e0a:	f1b8 0f00 	cmp.w	r8, #0
    5e0e:	d1e5      	bne.n	5ddc <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    5e10:	f1b9 0f00 	cmp.w	r9, #0
    5e14:	d10b      	bne.n	5e2e <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    5e16:	3d01      	subs	r5, #1
    5e18:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    5e1a:	4618      	mov	r0, r3
    5e1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5e20:	4621      	mov	r1, r4
    5e22:	4798      	blx	r3
	if (!*num_matches) {
    5e24:	2d00      	cmp	r5, #0
    5e26:	d0cc      	beq.n	5dc2 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    5e28:	2800      	cmp	r0, #0
    5e2a:	d1de      	bne.n	5dea <bt_gatt_foreach_attr_type+0x4a>
    5e2c:	e7c9      	b.n	5dc2 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    5e2e:	68da      	ldr	r2, [r3, #12]
    5e30:	4591      	cmp	r9, r2
    5e32:	d1da      	bne.n	5dea <bt_gatt_foreach_attr_type+0x4a>
    5e34:	e7ef      	b.n	5e16 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    5e36:	f04f 0a00 	mov.w	sl, #0
    5e3a:	e7da      	b.n	5df2 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    5e3c:	4e04      	ldr	r6, [pc, #16]	; (5e50 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    5e3e:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    5e40:	f04f 0b14 	mov.w	fp, #20
    5e44:	e7c6      	b.n	5dd4 <bt_gatt_foreach_attr_type+0x34>
    5e46:	bf00      	nop
    5e48:	2000261a 	.word	0x2000261a
    5e4c:	0001b25c 	.word	0x0001b25c
    5e50:	0001b23c 	.word	0x0001b23c

00005e54 <db_hash_gen>:
{
    5e54:	b510      	push	{r4, lr}
    5e56:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    5e58:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    5e5a:	aa1c      	add	r2, sp, #112	; 0x70
    5e5c:	4669      	mov	r1, sp
    5e5e:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    5e60:	e9cd 3300 	strd	r3, r3, [sp]
    5e64:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    5e68:	f011 fcc3 	bl	177f2 <tc_cmac_setup>
    5e6c:	b1d8      	cbz	r0, 5ea6 <db_hash_gen+0x52>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    5e6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5e72:	2001      	movs	r0, #1
    5e74:	4a0d      	ldr	r2, [pc, #52]	; (5eac <db_hash_gen+0x58>)
    5e76:	ab04      	add	r3, sp, #16
    5e78:	f013 fb92 	bl	195a0 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    5e7c:	480c      	ldr	r0, [pc, #48]	; (5eb0 <db_hash_gen+0x5c>)
    5e7e:	a904      	add	r1, sp, #16
    5e80:	f011 fd4c 	bl	1791c <tc_cmac_final>
    5e84:	b178      	cbz	r0, 5ea6 <db_hash_gen+0x52>
    5e86:	4b0a      	ldr	r3, [pc, #40]	; (5eb0 <db_hash_gen+0x5c>)
    5e88:	2208      	movs	r2, #8
    5e8a:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    5e8e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    5e90:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    5e94:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    5e98:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    5e9a:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    5e9c:	d1f7      	bne.n	5e8e <db_hash_gen+0x3a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5e9e:	4805      	ldr	r0, [pc, #20]	; (5eb4 <db_hash_gen+0x60>)
    5ea0:	2108      	movs	r1, #8
    5ea2:	f013 f9d7 	bl	19254 <atomic_or>
}
    5ea6:	b048      	add	sp, #288	; 0x120
    5ea8:	bd10      	pop	{r4, pc}
    5eaa:	bf00      	nop
    5eac:	0001919f 	.word	0x0001919f
    5eb0:	20000c90 	.word	0x20000c90
    5eb4:	20000d48 	.word	0x20000d48

00005eb8 <db_hash_read>:
{
    5eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    5eba:	491d      	ldr	r1, [pc, #116]	; (5f30 <db_hash_read+0x78>)
{
    5ebc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    5ec0:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    5ec2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    5ec6:	461f      	mov	r7, r3
    5ec8:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    5eca:	f014 fd25 	bl	1a918 <k_work_cancel_delayable_sync>
    5ece:	f3bf 8f5b 	dmb	ish
    5ed2:	4b18      	ldr	r3, [pc, #96]	; (5f34 <db_hash_read+0x7c>)
    5ed4:	681b      	ldr	r3, [r3, #0]
    5ed6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    5eda:	0719      	lsls	r1, r3, #28
    5edc:	d401      	bmi.n	5ee2 <db_hash_read+0x2a>
		db_hash_gen();
    5ede:	f7ff ffb9 	bl	5e54 <db_hash_gen>
	cfg = find_cf_cfg(conn);
    5ee2:	4620      	mov	r0, r4
    5ee4:	f7ff fd80 	bl	59e8 <find_cf_cfg>
	if (cfg &&
    5ee8:	4601      	mov	r1, r0
    5eea:	b170      	cbz	r0, 5f0a <db_hash_read+0x52>
    5eec:	7a03      	ldrb	r3, [r0, #8]
    5eee:	07da      	lsls	r2, r3, #31
    5ef0:	d50b      	bpl.n	5f0a <db_hash_read+0x52>
    5ef2:	f3bf 8f5b 	dmb	ish
    5ef6:	68cb      	ldr	r3, [r1, #12]
    5ef8:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
    5efc:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
    5efe:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
    5f02:	d402      	bmi.n	5f0a <db_hash_read+0x52>
    5f04:	2102      	movs	r1, #2
    5f06:	f013 f9a5 	bl	19254 <atomic_or>
	if (offset > value_len) {
    5f0a:	2e10      	cmp	r6, #16
    5f0c:	d80c      	bhi.n	5f28 <db_hash_read+0x70>
	len = MIN(buf_len, value_len - offset);
    5f0e:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    5f12:	4909      	ldr	r1, [pc, #36]	; (5f38 <db_hash_read+0x80>)
	len = MIN(buf_len, value_len - offset);
    5f14:	42bc      	cmp	r4, r7
    5f16:	bfa8      	it	ge
    5f18:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    5f1a:	4622      	mov	r2, r4
    5f1c:	4431      	add	r1, r6
    5f1e:	4628      	mov	r0, r5
    5f20:	f011 fd6c 	bl	179fc <memcpy>
}
    5f24:	4620      	mov	r0, r4
    5f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5f28:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    5f2c:	e7fa      	b.n	5f24 <db_hash_read+0x6c>
    5f2e:	bf00      	nop
    5f30:	20000cd0 	.word	0x20000cd0
    5f34:	20000d48 	.word	0x20000d48
    5f38:	20000c90 	.word	0x20000c90

00005f3c <db_hash_process>:
    5f3c:	4b05      	ldr	r3, [pc, #20]	; (5f54 <db_hash_process+0x18>)
    5f3e:	f3bf 8f5b 	dmb	ish
    5f42:	681b      	ldr	r3, [r3, #0]
    5f44:	f3bf 8f5b 	dmb	ish
	if (new_hash) {
    5f48:	071b      	lsls	r3, r3, #28
    5f4a:	d401      	bmi.n	5f50 <db_hash_process+0x14>
		db_hash_gen();
    5f4c:	f7ff bf82 	b.w	5e54 <db_hash_gen>
}
    5f50:	4770      	bx	lr
    5f52:	bf00      	nop
    5f54:	20000d48 	.word	0x20000d48

00005f58 <bt_gatt_attr_next>:
{
    5f58:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
    5f5a:	2300      	movs	r3, #0
    5f5c:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
    5f5e:	f7ff feef 	bl	5d40 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
    5f62:	1c41      	adds	r1, r0, #1
    5f64:	b289      	uxth	r1, r1
    5f66:	4608      	mov	r0, r1
    5f68:	4a03      	ldr	r2, [pc, #12]	; (5f78 <bt_gatt_attr_next+0x20>)
    5f6a:	ab01      	add	r3, sp, #4
    5f6c:	f013 fb18 	bl	195a0 <bt_gatt_foreach_attr>
}
    5f70:	9801      	ldr	r0, [sp, #4]
    5f72:	b003      	add	sp, #12
    5f74:	f85d fb04 	ldr.w	pc, [sp], #4
    5f78:	00019157 	.word	0x00019157

00005f7c <gatt_indicate>:
{
    5f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f80:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
    5f82:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
    5f84:	8a4f      	ldrh	r7, [r1, #18]
    5f86:	f017 0714 	ands.w	r7, r7, #20
{
    5f8a:	4680      	mov	r8, r0
    5f8c:	4615      	mov	r5, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
    5f8e:	d142      	bne.n	6016 <gatt_indicate+0x9a>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
    5f90:	2202      	movs	r2, #2
    5f92:	f013 fb2c 	bl	195ee <bt_gatt_is_subscribed>
    5f96:	2800      	cmp	r0, #0
    5f98:	d040      	beq.n	601c <gatt_indicate+0xa0>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    5f9a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    5f9e:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    5fa0:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    5fa2:	f7ff fc49 	bl	5838 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    5fa6:	3602      	adds	r6, #2
	if (!req) {
    5fa8:	4604      	mov	r4, r0
    5faa:	b160      	cbz	r0, 5fc6 <gatt_indicate+0x4a>
	req->func = func;
    5fac:	4b1d      	ldr	r3, [pc, #116]	; (6024 <gatt_indicate+0xa8>)
    5fae:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    5fb0:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    5fb2:	4632      	mov	r2, r6
    5fb4:	211d      	movs	r1, #29
    5fb6:	4640      	mov	r0, r8
    5fb8:	f012 ffe4 	bl	18f84 <bt_att_create_pdu>
	if (!buf) {
    5fbc:	4606      	mov	r6, r0
    5fbe:	b938      	cbnz	r0, 5fd0 <gatt_indicate+0x54>
		bt_att_req_free(req);
    5fc0:	4620      	mov	r0, r4
    5fc2:	f7ff fc5b 	bl	587c <bt_att_req_free>
		return -ENOMEM;
    5fc6:	f06f 050b 	mvn.w	r5, #11
}
    5fca:	4628      	mov	r0, r5
    5fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
    5fd0:	2301      	movs	r3, #1
    5fd2:	463a      	mov	r2, r7
    5fd4:	4639      	mov	r1, r7
	return net_buf_simple_add(&buf->b, len);
    5fd6:	f106 0a0c 	add.w	sl, r6, #12
    5fda:	f013 f8b5 	bl	19148 <bt_att_set_tx_meta_data>
    5fde:	2102      	movs	r1, #2
    5fe0:	4650      	mov	r0, sl
    5fe2:	f013 fc76 	bl	198d2 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    5fe6:	4607      	mov	r7, r0
    5fe8:	4650      	mov	r0, sl
    5fea:	f827 9b02 	strh.w	r9, [r7], #2
    5fee:	8aa9      	ldrh	r1, [r5, #20]
    5ff0:	f013 fc6f 	bl	198d2 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    5ff4:	8aaa      	ldrh	r2, [r5, #20]
    5ff6:	6929      	ldr	r1, [r5, #16]
    5ff8:	4638      	mov	r0, r7
    5ffa:	f011 fcff 	bl	179fc <memcpy>
	req->buf = buf;
    5ffe:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    6000:	4621      	mov	r1, r4
    6002:	4640      	mov	r0, r8
    6004:	f013 f86d 	bl	190e2 <bt_att_req_send>
	if (err) {
    6008:	4605      	mov	r5, r0
    600a:	2800      	cmp	r0, #0
    600c:	d0dd      	beq.n	5fca <gatt_indicate+0x4e>
		bt_att_req_free(req);
    600e:	4620      	mov	r0, r4
    6010:	f7ff fc34 	bl	587c <bt_att_req_free>
    6014:	e7d9      	b.n	5fca <gatt_indicate+0x4e>
		return -EPERM;
    6016:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    601a:	e7d6      	b.n	5fca <gatt_indicate+0x4e>
			return -EINVAL;
    601c:	f06f 0515 	mvn.w	r5, #21
    6020:	e7d3      	b.n	5fca <gatt_indicate+0x4e>
    6022:	bf00      	nop
    6024:	00019171 	.word	0x00019171

00006028 <bt_gatt_indicate>:
{
    6028:	b530      	push	{r4, r5, lr}
    602a:	4b39      	ldr	r3, [pc, #228]	; (6110 <bt_gatt_indicate+0xe8>)
    602c:	f3bf 8f5b 	dmb	ish
    6030:	681b      	ldr	r3, [r3, #0]
    6032:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6036:	075a      	lsls	r2, r3, #29
{
    6038:	b08b      	sub	sp, #44	; 0x2c
    603a:	4604      	mov	r4, r0
    603c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    603e:	d561      	bpl.n	6104 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    6040:	b110      	cbz	r0, 6048 <bt_gatt_indicate+0x20>
    6042:	7a83      	ldrb	r3, [r0, #10]
    6044:	2b07      	cmp	r3, #7
    6046:	d160      	bne.n	610a <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
    6048:	6868      	ldr	r0, [r5, #4]
    604a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    604c:	f7ff fe78 	bl	5d40 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    6050:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    6052:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    6056:	b33a      	cbz	r2, 60a8 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    6058:	a905      	add	r1, sp, #20
    605a:	9102      	str	r1, [sp, #8]
    605c:	492d      	ldr	r1, [pc, #180]	; (6114 <bt_gatt_indicate+0xec>)
    605e:	9101      	str	r1, [sp, #4]
    6060:	2101      	movs	r1, #1
	found->attr = NULL;
    6062:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    6064:	9100      	str	r1, [sp, #0]
    6066:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    606a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    606c:	f7ff fe98 	bl	5da0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    6070:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    6072:	b91b      	cbnz	r3, 607c <bt_gatt_indicate+0x54>
			return -ENOENT;
    6074:	f06f 0001 	mvn.w	r0, #1
}
    6078:	b00b      	add	sp, #44	; 0x2c
    607a:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    607c:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    607e:	9b05      	ldr	r3, [sp, #20]
    6080:	6818      	ldr	r0, [r3, #0]
    6082:	2300      	movs	r3, #0
    6084:	f88d 3010 	strb.w	r3, [sp, #16]
    6088:	a904      	add	r1, sp, #16
    608a:	f642 0303 	movw	r3, #10243	; 0x2803
    608e:	f8ad 3012 	strh.w	r3, [sp, #18]
    6092:	f011 fcdc 	bl	17a4e <bt_uuid_cmp>
    6096:	b970      	cbnz	r0, 60b6 <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    6098:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    609a:	68c3      	ldr	r3, [r0, #12]
    609c:	799b      	ldrb	r3, [r3, #6]
    609e:	069b      	lsls	r3, r3, #26
    60a0:	d405      	bmi.n	60ae <bt_gatt_indicate+0x86>
			return -EINVAL;
    60a2:	f06f 0015 	mvn.w	r0, #21
    60a6:	e7e7      	b.n	6078 <bt_gatt_indicate+0x50>
		if (!data.handle) {
    60a8:	2800      	cmp	r0, #0
    60aa:	d1e8      	bne.n	607e <bt_gatt_indicate+0x56>
    60ac:	e7e2      	b.n	6074 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    60ae:	f013 fa29 	bl	19504 <bt_gatt_attr_value_handle>
    60b2:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    60b6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    60ba:	b13c      	cbz	r4, 60cc <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    60bc:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    60be:	4601      	mov	r1, r0
		params->_ref = 1;
    60c0:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    60c2:	462a      	mov	r2, r5
    60c4:	4620      	mov	r0, r4
    60c6:	f7ff ff59 	bl	5f7c <gatt_indicate>
    60ca:	e7d5      	b.n	6078 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
    60cc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    60d0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    60d2:	2302      	movs	r3, #2
    60d4:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    60d8:	f642 1302 	movw	r3, #10498	; 0x2902
    60dc:	f8ad 3012 	strh.w	r3, [sp, #18]
    60e0:	ab05      	add	r3, sp, #20
	params->_ref = 0;
    60e2:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    60e4:	9302      	str	r3, [sp, #8]
    60e6:	4b0c      	ldr	r3, [pc, #48]	; (6118 <bt_gatt_indicate+0xf0>)
    60e8:	9301      	str	r3, [sp, #4]
    60ea:	2301      	movs	r3, #1
    60ec:	9300      	str	r3, [sp, #0]
    60ee:	aa04      	add	r2, sp, #16
    60f0:	4623      	mov	r3, r4
    60f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    60f6:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    60f8:	f88d 4010 	strb.w	r4, [sp, #16]
    60fc:	f7ff fe50 	bl	5da0 <bt_gatt_foreach_attr_type>
	return data.err;
    6100:	9807      	ldr	r0, [sp, #28]
    6102:	e7b9      	b.n	6078 <bt_gatt_indicate+0x50>
		return -EAGAIN;
    6104:	f06f 000a 	mvn.w	r0, #10
    6108:	e7b6      	b.n	6078 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
    610a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    610e:	e7b3      	b.n	6078 <bt_gatt_indicate+0x50>
    6110:	200000cc 	.word	0x200000cc
    6114:	00019197 	.word	0x00019197
    6118:	0000631d 	.word	0x0000631d

0000611c <sc_process>:
{
    611c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    611e:	f850 2c08 	ldr.w	r2, [r0, #-8]
    6122:	9201      	str	r2, [sp, #4]
{
    6124:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    6126:	f1a0 0120 	sub.w	r1, r0, #32
    612a:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    612e:	f3bf 8f5b 	dmb	ish
    6132:	e854 2f00 	ldrex	r2, [r4]
    6136:	f022 0201 	bic.w	r2, r2, #1
    613a:	e844 2000 	strex	r0, r2, [r4]
    613e:	2800      	cmp	r0, #0
    6140:	d1f7      	bne.n	6132 <sc_process+0x16>
    6142:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    6146:	4a0d      	ldr	r2, [pc, #52]	; (617c <sc_process+0x60>)
    6148:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    614c:	4a0c      	ldr	r2, [pc, #48]	; (6180 <sc_process+0x64>)
    614e:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    6152:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    6154:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    6156:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    615a:	2204      	movs	r2, #4
	sc->start = 0U;
    615c:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    6160:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    6164:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    6168:	f7ff ff5e 	bl	6028 <bt_gatt_indicate>
    616c:	b918      	cbnz	r0, 6176 <sc_process+0x5a>
    616e:	2102      	movs	r1, #2
    6170:	4620      	mov	r0, r4
    6172:	f013 f86f 	bl	19254 <atomic_or>
}
    6176:	b002      	add	sp, #8
    6178:	bd10      	pop	{r4, pc}
    617a:	bf00      	nop
    617c:	0001b6b0 	.word	0x0001b6b0
    6180:	00005c61 	.word	0x00005c61

00006184 <update_ccc>:
{
    6184:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    6186:	4b25      	ldr	r3, [pc, #148]	; (621c <update_ccc+0x98>)
	struct bt_conn *conn = data->conn;
    6188:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    618a:	6882      	ldr	r2, [r0, #8]
    618c:	429a      	cmp	r2, r3
{
    618e:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    6190:	d140      	bne.n	6214 <update_ccc+0x90>
	ccc = attr->user_data;
    6192:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    6194:	8933      	ldrh	r3, [r6, #8]
    6196:	2b00      	cmp	r3, #0
    6198:	d03c      	beq.n	6214 <update_ccc+0x90>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    619a:	4632      	mov	r2, r6
    619c:	4620      	mov	r0, r4
    619e:	f812 1b01 	ldrb.w	r1, [r2], #1
    61a2:	f012 f9b1 	bl	18508 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    61a6:	2800      	cmp	r0, #0
    61a8:	d034      	beq.n	6214 <update_ccc+0x90>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    61aa:	f44f 7295 	mov.w	r2, #298	; 0x12a
    61ae:	4629      	mov	r1, r5
    61b0:	4620      	mov	r0, r4
    61b2:	f013 fa00 	bl	195b6 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    61b6:	2803      	cmp	r0, #3
    61b8:	d02c      	beq.n	6214 <update_ccc+0x90>
		gatt_ccc_changed(attr, ccc);
    61ba:	4631      	mov	r1, r6
    61bc:	4628      	mov	r0, r5
    61be:	f012 ffcd 	bl	1915c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    61c2:	4b17      	ldr	r3, [pc, #92]	; (6220 <update_ccc+0x9c>)
    61c4:	429e      	cmp	r6, r3
    61c6:	d125      	bne.n	6214 <update_ccc+0x90>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    61c8:	7a20      	ldrb	r0, [r4, #8]
    61ca:	f104 0188 	add.w	r1, r4, #136	; 0x88
    61ce:	f7ff fc23 	bl	5a18 <find_sc_cfg>
	if (!cfg) {
    61d2:	b1f8      	cbz	r0, 6214 <update_ccc+0x90>
	if (!(cfg->data.start || cfg->data.end)) {
    61d4:	8902      	ldrh	r2, [r0, #8]
    61d6:	8943      	ldrh	r3, [r0, #10]
    61d8:	ea53 0102 	orrs.w	r1, r3, r2
    61dc:	d01a      	beq.n	6214 <update_ccc+0x90>
	index = bt_conn_index(conn);
    61de:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    61e0:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    61e4:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    61e8:	f7fe fac8 	bl	477c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    61ec:	490d      	ldr	r1, [pc, #52]	; (6224 <update_ccc+0xa0>)
    61ee:	4a0e      	ldr	r2, [pc, #56]	; (6228 <update_ccc+0xa4>)
    61f0:	2318      	movs	r3, #24
    61f2:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    61f6:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    61f8:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    61fa:	4a0c      	ldr	r2, [pc, #48]	; (622c <update_ccc+0xa8>)
    61fc:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    61fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
    6202:	aa01      	add	r2, sp, #4
    6204:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    6206:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
    620a:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    620c:	4620      	mov	r0, r4
	sc_restore_params[index].len = sizeof(sc_range);
    620e:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    6210:	f7ff ff0a 	bl	6028 <bt_gatt_indicate>
}
    6214:	2001      	movs	r0, #1
    6216:	b002      	add	sp, #8
    6218:	bd70      	pop	{r4, r5, r6, pc}
    621a:	bf00      	nop
    621c:	00005a61 	.word	0x00005a61
    6220:	20000230 	.word	0x20000230
    6224:	200012d0 	.word	0x200012d0
    6228:	0001b6b0 	.word	0x0001b6b0
    622c:	0001949b 	.word	0x0001949b

00006230 <bt_gatt_notify_cb>:
{
    6230:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6232:	4b37      	ldr	r3, [pc, #220]	; (6310 <bt_gatt_notify_cb+0xe0>)
    6234:	f3bf 8f5b 	dmb	ish
    6238:	681b      	ldr	r3, [r3, #0]
    623a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    623e:	075a      	lsls	r2, r3, #29
{
    6240:	b08b      	sub	sp, #44	; 0x2c
    6242:	4604      	mov	r4, r0
    6244:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6246:	d55d      	bpl.n	6304 <bt_gatt_notify_cb+0xd4>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    6248:	b110      	cbz	r0, 6250 <bt_gatt_notify_cb+0x20>
    624a:	7a83      	ldrb	r3, [r0, #10]
    624c:	2b07      	cmp	r3, #7
    624e:	d15c      	bne.n	630a <bt_gatt_notify_cb+0xda>
	data.attr = params->attr;
    6250:	6868      	ldr	r0, [r5, #4]
    6252:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    6254:	f7ff fd74 	bl	5d40 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    6258:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    625a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    625e:	b33a      	cbz	r2, 62b0 <bt_gatt_notify_cb+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    6260:	a905      	add	r1, sp, #20
    6262:	9102      	str	r1, [sp, #8]
    6264:	492b      	ldr	r1, [pc, #172]	; (6314 <bt_gatt_notify_cb+0xe4>)
    6266:	9101      	str	r1, [sp, #4]
    6268:	2101      	movs	r1, #1
	found->attr = NULL;
    626a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    626c:	9100      	str	r1, [sp, #0]
    626e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    6272:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    6274:	f7ff fd94 	bl	5da0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    6278:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    627a:	b91b      	cbnz	r3, 6284 <bt_gatt_notify_cb+0x54>
			return -ENOENT;
    627c:	f06f 0001 	mvn.w	r0, #1
}
    6280:	b00b      	add	sp, #44	; 0x2c
    6282:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    6284:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    6286:	9b05      	ldr	r3, [sp, #20]
    6288:	6818      	ldr	r0, [r3, #0]
    628a:	2300      	movs	r3, #0
    628c:	f88d 3010 	strb.w	r3, [sp, #16]
    6290:	a904      	add	r1, sp, #16
    6292:	f642 0303 	movw	r3, #10243	; 0x2803
    6296:	f8ad 3012 	strh.w	r3, [sp, #18]
    629a:	f011 fbd8 	bl	17a4e <bt_uuid_cmp>
    629e:	b970      	cbnz	r0, 62be <bt_gatt_notify_cb+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    62a0:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    62a2:	68c3      	ldr	r3, [r0, #12]
    62a4:	799b      	ldrb	r3, [r3, #6]
    62a6:	06db      	lsls	r3, r3, #27
    62a8:	d405      	bmi.n	62b6 <bt_gatt_notify_cb+0x86>
			return -EINVAL;
    62aa:	f06f 0015 	mvn.w	r0, #21
    62ae:	e7e7      	b.n	6280 <bt_gatt_notify_cb+0x50>
		if (!data.handle) {
    62b0:	2800      	cmp	r0, #0
    62b2:	d1e8      	bne.n	6286 <bt_gatt_notify_cb+0x56>
    62b4:	e7e2      	b.n	627c <bt_gatt_notify_cb+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    62b6:	f013 f925 	bl	19504 <bt_gatt_attr_value_handle>
    62ba:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
    62be:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    62c2:	b12c      	cbz	r4, 62d0 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
    62c4:	4601      	mov	r1, r0
    62c6:	462a      	mov	r2, r5
    62c8:	4620      	mov	r0, r4
    62ca:	f013 fa14 	bl	196f6 <gatt_notify>
    62ce:	e7d7      	b.n	6280 <bt_gatt_notify_cb+0x50>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    62d0:	f642 1202 	movw	r2, #10498	; 0x2902
    62d4:	f8ad 2012 	strh.w	r2, [sp, #18]
    62d8:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    62da:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    62de:	9202      	str	r2, [sp, #8]
    62e0:	4a0d      	ldr	r2, [pc, #52]	; (6318 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
    62e2:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    62e4:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    62e6:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    62ea:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    62ee:	aa04      	add	r2, sp, #16
    62f0:	4623      	mov	r3, r4
    62f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    62f6:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    62f8:	f88d 4010 	strb.w	r4, [sp, #16]
    62fc:	f7ff fd50 	bl	5da0 <bt_gatt_foreach_attr_type>
	return data.err;
    6300:	9807      	ldr	r0, [sp, #28]
    6302:	e7bd      	b.n	6280 <bt_gatt_notify_cb+0x50>
		return -EAGAIN;
    6304:	f06f 000a 	mvn.w	r0, #10
    6308:	e7ba      	b.n	6280 <bt_gatt_notify_cb+0x50>
		return -ENOTCONN;
    630a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    630e:	e7b7      	b.n	6280 <bt_gatt_notify_cb+0x50>
    6310:	200000cc 	.word	0x200000cc
    6314:	00019197 	.word	0x00019197
    6318:	0000631d 	.word	0x0000631d

0000631c <notify_cb>:
{
    631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    631e:	4b38      	ldr	r3, [pc, #224]	; (6400 <notify_cb+0xe4>)
{
    6320:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    6322:	6882      	ldr	r2, [r0, #8]
    6324:	429a      	cmp	r2, r3
{
    6326:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    6328:	d001      	beq.n	632e <notify_cb+0x12>
		return BT_GATT_ITER_CONTINUE;
    632a:	2001      	movs	r0, #1
}
    632c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ccc = attr->user_data;
    632e:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    6330:	4b34      	ldr	r3, [pc, #208]	; (6404 <notify_cb+0xe8>)
    6332:	429e      	cmp	r6, r3
    6334:	d04a      	beq.n	63cc <notify_cb+0xb0>
		if (cfg->value != data->type) {
    6336:	8932      	ldrh	r2, [r6, #8]
    6338:	89ab      	ldrh	r3, [r5, #12]
    633a:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    633c:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
    6340:	d1f3      	bne.n	632a <notify_cb+0xe>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    6342:	7830      	ldrb	r0, [r6, #0]
    6344:	f7fe fad8 	bl	48f8 <bt_conn_lookup_addr_le>
		if (!conn) {
    6348:	4604      	mov	r4, r0
    634a:	2800      	cmp	r0, #0
    634c:	d0ed      	beq.n	632a <notify_cb+0xe>
		if (conn->state != BT_CONN_CONNECTED) {
    634e:	7a83      	ldrb	r3, [r0, #10]
    6350:	2b07      	cmp	r3, #7
    6352:	d005      	beq.n	6360 <notify_cb+0x44>
			bt_conn_unref(conn);
    6354:	f012 f891 	bl	1847a <bt_conn_unref>
			continue;
    6358:	e7e7      	b.n	632a <notify_cb+0xe>
			bt_conn_unref(conn);
    635a:	f012 f88e 	bl	1847a <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    635e:	e7ea      	b.n	6336 <notify_cb+0x1a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    6360:	6973      	ldr	r3, [r6, #20]
    6362:	b123      	cbz	r3, 636e <notify_cb+0x52>
    6364:	4639      	mov	r1, r7
    6366:	4798      	blx	r3
    6368:	b908      	cbnz	r0, 636e <notify_cb+0x52>
			bt_conn_unref(conn);
    636a:	4620      	mov	r0, r4
    636c:	e7f2      	b.n	6354 <notify_cb+0x38>
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
    636e:	8a7b      	ldrh	r3, [r7, #18]
    6370:	f003 0314 	and.w	r3, r3, #20
    6374:	2b00      	cmp	r3, #0
    6376:	d1f8      	bne.n	636a <notify_cb+0x4e>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
    6378:	89ab      	ldrh	r3, [r5, #12]
    637a:	2b02      	cmp	r3, #2
    637c:	d114      	bne.n	63a8 <notify_cb+0x8c>
    637e:	8933      	ldrh	r3, [r6, #8]
    6380:	079a      	lsls	r2, r3, #30
    6382:	d405      	bmi.n	6390 <notify_cb+0x74>
		bt_conn_unref(conn);
    6384:	4620      	mov	r0, r4
    6386:	f012 f878 	bl	1847a <bt_conn_unref>
		data->err = 0;
    638a:	2300      	movs	r3, #0
    638c:	60ab      	str	r3, [r5, #8]
    638e:	e7cc      	b.n	632a <notify_cb+0xe>
			err = gatt_indicate(conn, data->handle, data->ind_params);
    6390:	692a      	ldr	r2, [r5, #16]
    6392:	88a9      	ldrh	r1, [r5, #4]
    6394:	4620      	mov	r0, r4
    6396:	f7ff fdf1 	bl	5f7c <gatt_indicate>
			if (err == 0) {
    639a:	4606      	mov	r6, r0
    639c:	b978      	cbnz	r0, 63be <notify_cb+0xa2>
				data->ind_params->_ref++;
    639e:	692a      	ldr	r2, [r5, #16]
    63a0:	7d93      	ldrb	r3, [r2, #22]
    63a2:	3301      	adds	r3, #1
    63a4:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    63a6:	e7ed      	b.n	6384 <notify_cb+0x68>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
    63a8:	2b01      	cmp	r3, #1
    63aa:	d1eb      	bne.n	6384 <notify_cb+0x68>
    63ac:	8933      	ldrh	r3, [r6, #8]
    63ae:	07db      	lsls	r3, r3, #31
    63b0:	d5e8      	bpl.n	6384 <notify_cb+0x68>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    63b2:	692a      	ldr	r2, [r5, #16]
    63b4:	88a9      	ldrh	r1, [r5, #4]
    63b6:	4620      	mov	r0, r4
    63b8:	f013 f99d 	bl	196f6 <gatt_notify>
    63bc:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    63be:	4620      	mov	r0, r4
    63c0:	f012 f85b 	bl	1847a <bt_conn_unref>
		if (err < 0) {
    63c4:	2e00      	cmp	r6, #0
    63c6:	dae0      	bge.n	638a <notify_cb+0x6e>
			return BT_GATT_ITER_STOP;
    63c8:	2000      	movs	r0, #0
    63ca:	e7af      	b.n	632c <notify_cb+0x10>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
    63cc:	4c0e      	ldr	r4, [pc, #56]	; (6408 <notify_cb+0xec>)
    63ce:	490f      	ldr	r1, [pc, #60]	; (640c <notify_cb+0xf0>)
    63d0:	4620      	mov	r0, r4
    63d2:	f012 ff37 	bl	19244 <bt_addr_le_eq>
    63d6:	2800      	cmp	r0, #0
    63d8:	d1ad      	bne.n	6336 <notify_cb+0x1a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    63da:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    63de:	2207      	movs	r2, #7
    63e0:	4621      	mov	r1, r4
    63e2:	f7fe faa3 	bl	492c <bt_conn_lookup_state_le>
			if (!conn) {
    63e6:	2800      	cmp	r0, #0
    63e8:	d1b7      	bne.n	635a <notify_cb+0x3e>
				sc = (struct sc_data *)data->ind_params->data;
    63ea:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
    63ec:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    63f0:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    63f2:	4621      	mov	r1, r4
    63f4:	8853      	ldrh	r3, [r2, #2]
    63f6:	8812      	ldrh	r2, [r2, #0]
    63f8:	f7ff fba2 	bl	5b40 <sc_save>
				continue;
    63fc:	e79b      	b.n	6336 <notify_cb+0x1a>
    63fe:	bf00      	nop
    6400:	00005a61 	.word	0x00005a61
    6404:	20000230 	.word	0x20000230
    6408:	2000260f 	.word	0x2000260f
    640c:	0001cbb4 	.word	0x0001cbb4

00006410 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    6410:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    6412:	4a06      	ldr	r2, [pc, #24]	; (642c <bt_gatt_connected+0x1c>)
	data.conn = conn;
    6414:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    6416:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    6418:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    641a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    641e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    6422:	f013 f8bd 	bl	195a0 <bt_gatt_foreach_attr>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
    6426:	b003      	add	sp, #12
    6428:	f85d fb04 	ldr.w	pc, [sp], #4
    642c:	00006185 	.word	0x00006185

00006430 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    6430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    6432:	4b08      	ldr	r3, [pc, #32]	; (6454 <bt_gatt_att_max_mtu_changed+0x24>)
    6434:	681c      	ldr	r4, [r3, #0]
    6436:	4605      	mov	r5, r0
    6438:	460e      	mov	r6, r1
    643a:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    643c:	b14c      	cbz	r4, 6452 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    643e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    6442:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    6444:	b11b      	cbz	r3, 644e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    6446:	463a      	mov	r2, r7
    6448:	4631      	mov	r1, r6
    644a:	4628      	mov	r0, r5
    644c:	4798      	blx	r3
	return node->next;
    644e:	6864      	ldr	r4, [r4, #4]
    6450:	e7f4      	b.n	643c <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    6452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6454:	200012fc 	.word	0x200012fc

00006458 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    6458:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    645a:	4603      	mov	r3, r0
    645c:	4a0f      	ldr	r2, [pc, #60]	; (649c <bt_gatt_disconnected+0x44>)
{
    645e:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6460:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6464:	2001      	movs	r0, #1
    6466:	f013 f89b 	bl	195a0 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    646a:	4620      	mov	r0, r4
    646c:	f7ff fabc 	bl	59e8 <find_cf_cfg>
	if (!cfg) {
    6470:	4605      	mov	r5, r0
    6472:	b188      	cbz	r0, 6498 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    6474:	f104 0688 	add.w	r6, r4, #136	; 0x88
    6478:	7a20      	ldrb	r0, [r4, #8]
    647a:	4631      	mov	r1, r6
    647c:	f011 fdb1 	bl	17fe2 <bt_addr_le_is_bonded>
    6480:	b920      	cbnz	r0, 648c <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    6482:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    6484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    6488:	f7ff bb3e 	b.w	5b08 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    648c:	4631      	mov	r1, r6
    648e:	1c68      	adds	r0, r5, #1
}
    6490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    6494:	f012 beed 	b.w	19272 <bt_addr_le_copy>
}
    6498:	bd70      	pop	{r4, r5, r6, pc}
    649a:	bf00      	nop
    649c:	00005b89 	.word	0x00005b89

000064a0 <bt_smp_accept>:
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    64a0:	4b04      	ldr	r3, [pc, #16]	; (64b4 <bt_smp_accept+0x14>)
    64a2:	6818      	ldr	r0, [r3, #0]
    64a4:	b918      	cbnz	r0, 64ae <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    64a6:	4a04      	ldr	r2, [pc, #16]	; (64b8 <bt_smp_accept+0x18>)
    64a8:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    64aa:	600b      	str	r3, [r1, #0]

		return 0;
    64ac:	4770      	bx	lr
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    64ae:	f06f 000b 	mvn.w	r0, #11
}
    64b2:	4770      	bx	lr
    64b4:	20001304 	.word	0x20001304
    64b8:	0001b7b4 	.word	0x0001b7b4

000064bc <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    64bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64c0:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    64c2:	1dc2      	adds	r2, r0, #7
    64c4:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    64c8:	1e75      	subs	r5, r6, #1
{
    64ca:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    64cc:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
    64ce:	6018      	str	r0, [r3, #0]
{
    64d0:	b082      	sub	sp, #8
    64d2:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    64d4:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    64d6:	2100      	movs	r1, #0
    64d8:	2204      	movs	r2, #4
    64da:	fb07 0005 	mla	r0, r7, r5, r0
    64de:	f011 fa98 	bl	17a12 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    64e2:	b1bd      	cbz	r5, 6514 <mem_init+0x58>
    64e4:	3e02      	subs	r6, #2
    64e6:	b2b6      	uxth	r6, r6
    64e8:	fb06 7307 	mla	r3, r6, r7, r7
    64ec:	fb06 f807 	mul.w	r8, r6, r7
    64f0:	441c      	add	r4, r3
    64f2:	eba8 0803 	sub.w	r8, r8, r3
    64f6:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    64f8:	2204      	movs	r2, #4
    64fa:	eb04 0008 	add.w	r0, r4, r8
    64fe:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
    6502:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    6504:	f011 fa7a 	bl	179fc <memcpy>
	while (mem_count--) {
    6508:	42b5      	cmp	r5, r6
    650a:	eba4 0407 	sub.w	r4, r4, r7
    650e:	f105 0501 	add.w	r5, r5, #1
    6512:	d1f1      	bne.n	64f8 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    6514:	b002      	add	sp, #8
    6516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    651a:	bf00      	nop

0000651c <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    651c:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    651e:	6805      	ldr	r5, [r0, #0]
{
    6520:	b082      	sub	sp, #8
	if (*mem_head) {
    6522:	b19d      	cbz	r5, 654c <mem_acquire+0x30>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    6524:	1deb      	adds	r3, r5, #7
    6526:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    652a:	2204      	movs	r2, #4
    652c:	4604      	mov	r4, r0
    652e:	4629      	mov	r1, r5
    6530:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    6534:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    6536:	f011 fa61 	bl	179fc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    653a:	9b01      	ldr	r3, [sp, #4]
    653c:	b12b      	cbz	r3, 654a <mem_acquire+0x2e>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    653e:	3307      	adds	r3, #7
    6540:	f023 0303 	bic.w	r3, r3, #3
		free_count--;
    6544:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    6546:	801e      	strh	r6, [r3, #0]
				free_count;
		}

		*mem_head = head;
    6548:	9b01      	ldr	r3, [sp, #4]
    654a:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    654c:	4628      	mov	r0, r5
    654e:	b002      	add	sp, #8
    6550:	bd70      	pop	{r4, r5, r6, pc}
    6552:	bf00      	nop

00006554 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    6554:	b570      	push	{r4, r5, r6, lr}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    6556:	680b      	ldr	r3, [r1, #0]
{
    6558:	460c      	mov	r4, r1
    655a:	4605      	mov	r5, r0
	if (*mem_head) {
    655c:	b183      	cbz	r3, 6580 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    655e:	3307      	adds	r3, #7
    6560:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    6564:	881e      	ldrh	r6, [r3, #0]
    6566:	3601      	adds	r6, #1
    6568:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
    656a:	2204      	movs	r2, #4
    656c:	4621      	mov	r1, r4
    656e:	4628      	mov	r0, r5
    6570:	f011 fa44 	bl	179fc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    6574:	1deb      	adds	r3, r5, #7
    6576:	f023 0303 	bic.w	r3, r3, #3
    657a:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    657c:	6025      	str	r5, [r4, #0]
}
    657e:	bd70      	pop	{r4, r5, r6, pc}
    6580:	2601      	movs	r6, #1
    6582:	e7f2      	b.n	656a <mem_release+0x16>

00006584 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    6584:	fb02 0001 	mla	r0, r2, r1, r0
    6588:	4770      	bx	lr
    658a:	bf00      	nop

0000658c <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size;
    658c:	1a40      	subs	r0, r0, r1
    658e:	fb90 f0f2 	sdiv	r0, r0, r2
}
    6592:	b280      	uxth	r0, r0
    6594:	4770      	bx	lr
    6596:	bf00      	nop

00006598 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    6598:	1e53      	subs	r3, r2, #1
	src += len;
    659a:	4411      	add	r1, r2
	while (len--) {
    659c:	b29b      	uxth	r3, r3
    659e:	b142      	cbz	r2, 65b2 <mem_rcopy+0x1a>
    65a0:	43db      	mvns	r3, r3
    65a2:	3801      	subs	r0, #1
    65a4:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    65a6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    65aa:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    65ae:	4291      	cmp	r1, r2
    65b0:	d1f9      	bne.n	65a6 <mem_rcopy+0xe>
	}
}
    65b2:	4770      	bx	lr

000065b4 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    65b4:	4401      	add	r1, r0
    65b6:	e002      	b.n	65be <mem_nz+0xa>
		if (*src++) {
    65b8:	f810 3b01 	ldrb.w	r3, [r0], #1
    65bc:	b91b      	cbnz	r3, 65c6 <mem_nz+0x12>
	while (len--) {
    65be:	4288      	cmp	r0, r1
    65c0:	d1fa      	bne.n	65b8 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    65c2:	2000      	movs	r0, #0
    65c4:	4770      	bx	lr
			return 1;
    65c6:	2001      	movs	r0, #1
}
    65c8:	4770      	bx	lr
    65ca:	bf00      	nop

000065cc <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    65cc:	6010      	str	r0, [r2, #0]
    65ce:	6008      	str	r0, [r1, #0]

	return link;
}
    65d0:	4770      	bx	lr
    65d2:	bf00      	nop

000065d4 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    65d4:	680a      	ldr	r2, [r1, #0]
{
    65d6:	4603      	mov	r3, r0
	if (*head != *tail) {
    65d8:	6800      	ldr	r0, [r0, #0]
    65da:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    65dc:	bf05      	ittet	eq
    65de:	2200      	moveq	r2, #0
    65e0:	600a      	streq	r2, [r1, #0]
		return NULL;
    65e2:	2000      	movne	r0, #0
	*head = *tail = NULL;
    65e4:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    65e6:	4770      	bx	lr

000065e8 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    65e8:	f8d2 c000 	ldr.w	ip, [r2]
    65ec:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    65f0:	f8d2 c000 	ldr.w	ip, [r2]
    65f4:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
    65f8:	6010      	str	r0, [r2, #0]

	return link;
}
    65fa:	4770      	bx	lr

000065fc <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    65fc:	4288      	cmp	r0, r1
    65fe:	d003      	beq.n	6608 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    6600:	b11a      	cbz	r2, 660a <memq_peek+0xe>
		*mem = head->mem;
    6602:	6843      	ldr	r3, [r0, #4]
    6604:	6013      	str	r3, [r2, #0]
    6606:	4770      	bx	lr
		return NULL;
    6608:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    660a:	4770      	bx	lr

0000660c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    660c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    660e:	4283      	cmp	r3, r0
    6610:	d009      	beq.n	6626 <memq_dequeue+0x1a>
	if (mem) {
    6612:	b12a      	cbz	r2, 6620 <memq_dequeue+0x14>
		*mem = head->mem;
    6614:	6858      	ldr	r0, [r3, #4]
    6616:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    6618:	681a      	ldr	r2, [r3, #0]
    661a:	600a      	str	r2, [r1, #0]

	return old_head;
}
    661c:	4618      	mov	r0, r3
    661e:	4770      	bx	lr
	if (old_head == NULL) {
    6620:	2b00      	cmp	r3, #0
    6622:	d1f9      	bne.n	6618 <memq_dequeue+0xc>
    6624:	e7fa      	b.n	661c <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    6626:	2300      	movs	r3, #0
    6628:	e7f8      	b.n	661c <memq_dequeue+0x10>
    662a:	bf00      	nop

0000662c <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    662c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6630:	f8df 8030 	ldr.w	r8, [pc, #48]	; 6664 <mayfly_init+0x38>
    6634:	4e0c      	ldr	r6, [pc, #48]	; (6668 <mayfly_init+0x3c>)
    6636:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    6638:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    663c:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    663e:	1d22      	adds	r2, r4, #4
    6640:	4621      	mov	r1, r4
    6642:	4628      	mov	r0, r5
		while (caller_id--) {
    6644:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    6646:	f7ff ffc1 	bl	65cc <memq_init>
		while (caller_id--) {
    664a:	42a6      	cmp	r6, r4
    664c:	f1a5 0508 	sub.w	r5, r5, #8
    6650:	d1f5      	bne.n	663e <mayfly_init+0x12>
	while (callee_id--) {
    6652:	3f04      	subs	r7, #4
    6654:	1d3b      	adds	r3, r7, #4
    6656:	f1a8 0820 	sub.w	r8, r8, #32
    665a:	f1a6 0630 	sub.w	r6, r6, #48	; 0x30
    665e:	d1eb      	bne.n	6638 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    6660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6664:	200013b0 	.word	0x200013b0
    6668:	2000143c 	.word	0x2000143c

0000666c <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    666c:	b410      	push	{r4}
    666e:	4603      	mov	r3, r0
    6670:	468c      	mov	ip, r1
	if (enable) {
    6672:	b19a      	cbz	r2, 669c <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    6674:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6678:	4814      	ldr	r0, [pc, #80]	; (66cc <mayfly_enable+0x60>)
    667a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    667e:	0109      	lsls	r1, r1, #4
    6680:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    6684:	4401      	add	r1, r0
    6686:	7a48      	ldrb	r0, [r1, #9]
    6688:	7a0c      	ldrb	r4, [r1, #8]
    668a:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    668c:	bf04      	itt	eq
    668e:	3001      	addeq	r0, #1
    6690:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    6692:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
    6694:	4661      	mov	r1, ip
    6696:	4618      	mov	r0, r3
    6698:	f00c bb92 	b.w	12dc0 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    669c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    66a0:	4c0a      	ldr	r4, [pc, #40]	; (66cc <mayfly_enable+0x60>)
    66a2:	0112      	lsls	r2, r2, #4
    66a4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    66a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    66ac:	4423      	add	r3, r4
    66ae:	7a9c      	ldrb	r4, [r3, #10]
    66b0:	7ada      	ldrb	r2, [r3, #11]
    66b2:	42a2      	cmp	r2, r4
    66b4:	d001      	beq.n	66ba <mayfly_enable+0x4e>
}
    66b6:	bc10      	pop	{r4}
    66b8:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
    66ba:	3201      	adds	r2, #1
    66bc:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    66be:	4b04      	ldr	r3, [pc, #16]	; (66d0 <mayfly_enable+0x64>)
    66c0:	2201      	movs	r2, #1
    66c2:	545a      	strb	r2, [r3, r1]
}
    66c4:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
    66c6:	f00c bbcf 	b.w	12e68 <mayfly_pend>
    66ca:	bf00      	nop
    66cc:	200013b8 	.word	0x200013b8
    66d0:	20001334 	.word	0x20001334

000066d4 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    66d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66d6:	4606      	mov	r6, r0
    66d8:	461c      	mov	r4, r3
    66da:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    66dc:	b302      	cbz	r2, 6720 <mayfly_enqueue+0x4c>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    66de:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    66e0:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    66e2:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    66e4:	f012 0203 	ands.w	r2, r2, #3
    66e8:	d13a      	bne.n	6760 <mayfly_enqueue+0x8c>
    66ea:	4f27      	ldr	r7, [pc, #156]	; (6788 <mayfly_enqueue+0xb4>)
    66ec:	0071      	lsls	r1, r6, #1
    66ee:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    66f2:	4431      	add	r1, r6
    66f4:	44ac      	add	ip, r5
    66f6:	0089      	lsls	r1, r1, #2
    66f8:	eb01 110c 	add.w	r1, r1, ip, lsl #4
	m->_req = ack + 1;
    66fc:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    66fe:	3104      	adds	r1, #4
	m->_req = ack + 1;
    6700:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    6702:	187a      	adds	r2, r7, r1
    6704:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    6706:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    6708:	4621      	mov	r1, r4
    670a:	f7ff ff6d 	bl	65e8 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    670e:	4b1f      	ldr	r3, [pc, #124]	; (678c <mayfly_enqueue+0xb8>)
    6710:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    6712:	4629      	mov	r1, r5
    6714:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    6716:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    6718:	f00c fba6 	bl	12e68 <mayfly_pend>
		return 0;
    671c:	2000      	movs	r0, #0

	return 0;
}
    671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6720:	f00c fb8c 	bl	12e3c <mayfly_prio_is_equal>
    6724:	2800      	cmp	r0, #0
    6726:	d0da      	beq.n	66de <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    6728:	4629      	mov	r1, r5
    672a:	4630      	mov	r0, r6
    672c:	f00c fb66 	bl	12dfc <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6730:	2800      	cmp	r0, #0
    6732:	d0d4      	beq.n	66de <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    6734:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6738:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    673c:	4f12      	ldr	r7, [pc, #72]	; (6788 <mayfly_enqueue+0xb4>)
	ack = m->_ack;
    673e:	7863      	ldrb	r3, [r4, #1]
		(mft[callee_id][caller_id].disable_req !=
    6740:	0112      	lsls	r2, r2, #4
    6742:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    6746:	443a      	add	r2, r7
    6748:	0071      	lsls	r1, r6, #1
		!mayfly_is_enabled(caller_id, callee_id) ||
    674a:	7a90      	ldrb	r0, [r2, #10]
    674c:	7ad2      	ldrb	r2, [r2, #11]
    674e:	4290      	cmp	r0, r2
		(mft[callee_id][caller_id].disable_req !=
    6750:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		!mayfly_is_enabled(caller_id, callee_id) ||
    6754:	d00c      	beq.n	6770 <mayfly_enqueue+0x9c>
	state = (m->_req - ack) & 0x03;
    6756:	7820      	ldrb	r0, [r4, #0]
    6758:	1ac0      	subs	r0, r0, r3
	if (state != 0U) {
    675a:	f010 0203 	ands.w	r2, r0, #3
    675e:	d0c8      	beq.n	66f2 <mayfly_enqueue+0x1e>
			if (state != 1U) {
    6760:	2a01      	cmp	r2, #1
    6762:	d003      	beq.n	676c <mayfly_enqueue+0x98>
				m->_req = ack + 1;
    6764:	3301      	adds	r3, #1
    6766:	b2db      	uxtb	r3, r3
    6768:	7023      	strb	r3, [r4, #0]
				goto mayfly_enqueue_pend;
    676a:	e7d0      	b.n	670e <mayfly_enqueue+0x3a>
			return 1;
    676c:	4610      	mov	r0, r2
}
    676e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	state = (m->_req - ack) & 0x03;
    6770:	7822      	ldrb	r2, [r4, #0]
    6772:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    6774:	0792      	lsls	r2, r2, #30
    6776:	d002      	beq.n	677e <mayfly_enqueue+0xaa>
		m->_req = ack + 2;
    6778:	3302      	adds	r3, #2
    677a:	b2db      	uxtb	r3, r3
    677c:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    677e:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    6782:	4798      	blx	r3
		return 0;
    6784:	e7ca      	b.n	671c <mayfly_enqueue+0x48>
    6786:	bf00      	nop
    6788:	200013b8 	.word	0x200013b8
    678c:	20001334 	.word	0x20001334

00006790 <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
    6790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    6794:	f8df 9140 	ldr.w	r9, [pc, #320]	; 68d8 <mayfly_run+0x148>
    6798:	f819 3000 	ldrb.w	r3, [r9, r0]
{
    679c:	b089      	sub	sp, #36	; 0x24
	if (!mfp[callee_id]) {
    679e:	2b00      	cmp	r3, #0
    67a0:	d060      	beq.n	6864 <mayfly_run+0xd4>
		return;
	}
	mfp[callee_id] = 0U;
    67a2:	f8df a138 	ldr.w	sl, [pc, #312]	; 68dc <mayfly_run+0x14c>
    67a6:	9003      	str	r0, [sp, #12]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    67a8:	223c      	movs	r2, #60	; 0x3c
    67aa:	2304      	movs	r3, #4
	mfp[callee_id] = 0U;
    67ac:	2500      	movs	r5, #0
    67ae:	eb00 0b40 	add.w	fp, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    67b2:	fb12 3300 	smlabb	r3, r2, r0, r3

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    67b6:	2403      	movs	r4, #3
    67b8:	e9cd 5504 	strd	r5, r5, [sp, #16]
	mfp[callee_id] = 0U;
    67bc:	f809 5000 	strb.w	r5, [r9, r0]
	while (caller_id--) {
    67c0:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    67c4:	9302      	str	r3, [sp, #8]
    67c6:	4625      	mov	r5, r4
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    67c8:	465c      	mov	r4, fp
		struct mayfly *m = 0;
    67ca:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    67cc:	f8db 1028 	ldr.w	r1, [fp, #40]	; 0x28
    67d0:	f854 0f24 	ldr.w	r0, [r4, #36]!
		struct mayfly *m = 0;
    67d4:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    67d6:	aa07      	add	r2, sp, #28
    67d8:	f7ff ff10 	bl	65fc <memq_peek>
    67dc:	9501      	str	r5, [sp, #4]
    67de:	4607      	mov	r7, r0
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    67e0:	2f00      	cmp	r7, #0
    67e2:	d04b      	beq.n	687c <mayfly_run+0xec>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    67e4:	9d07      	ldr	r5, [sp, #28]
    67e6:	7868      	ldrb	r0, [r5, #1]
    67e8:	782e      	ldrb	r6, [r5, #0]
    67ea:	1a36      	subs	r6, r6, r0
    67ec:	f006 0603 	and.w	r6, r6, #3
			if (state == 1U) {
    67f0:	2e01      	cmp	r6, #1
    67f2:	d107      	bne.n	6804 <mayfly_run+0x74>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    67f4:	3801      	subs	r0, #1
    67f6:	7068      	strb	r0, [r5, #1]

				/* call the mayfly function */
				m->fp(m->param);
    67f8:	9b07      	ldr	r3, [sp, #28]
    67fa:	e9d3 0302 	ldrd	r0, r3, [r3, #8]
    67fe:	4798      	blx	r3
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    6800:	9d07      	ldr	r5, [sp, #28]
	if (((req - m->_ack) & 0x03) != 1U) {
    6802:	7868      	ldrb	r0, [r5, #1]
	req = m->_req;
    6804:	782b      	ldrb	r3, [r5, #0]
		memq_dequeue(mft[callee_id][caller_id].tail,
    6806:	f8db c028 	ldr.w	ip, [fp, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    680a:	1a18      	subs	r0, r3, r0
    680c:	f000 0003 	and.w	r0, r0, #3
    6810:	2801      	cmp	r0, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    6812:	f04f 0200 	mov.w	r2, #0
    6816:	4621      	mov	r1, r4
	req = m->_req;
    6818:	fa5f f883 	uxtb.w	r8, r3
		memq_dequeue(mft[callee_id][caller_id].tail,
    681c:	4660      	mov	r0, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    681e:	d00d      	beq.n	683c <mayfly_run+0xac>
		memq_dequeue(mft[callee_id][caller_id].tail,
    6820:	f7ff fef4 	bl	660c <memq_dequeue>
		ack = m->_ack;
    6824:	7869      	ldrb	r1, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    6826:	782a      	ldrb	r2, [r5, #0]
		m->_link = link;
    6828:	606f      	str	r7, [r5, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    682a:	1a52      	subs	r2, r2, r1
    682c:	f002 0203 	and.w	r2, r2, #3
    6830:	2a01      	cmp	r2, #1
		m->_ack = req;
    6832:	f885 8001 	strb.w	r8, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    6836:	d018      	beq.n	686a <mayfly_run+0xda>
    6838:	f8db c028 	ldr.w	ip, [fp, #40]	; 0x28

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    683c:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    6840:	aa07      	add	r2, sp, #28
    6842:	4661      	mov	r1, ip
    6844:	f7ff feda 	bl	65fc <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    6848:	2e01      	cmp	r6, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    684a:	4607      	mov	r7, r0
			if (state == 1U) {
    684c:	d1c8      	bne.n	67e0 <mayfly_run+0x50>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    684e:	9d01      	ldr	r5, [sp, #4]
    6850:	2d00      	cmp	r5, #0
    6852:	d03d      	beq.n	68d0 <mayfly_run+0x140>
					/* set mayfly callee pending */
					mfp[callee_id] = 1U;
    6854:	9f03      	ldr	r7, [sp, #12]
    6856:	2301      	movs	r3, #1

					/* pend the callee for execution */
					mayfly_pend(callee_id, callee_id);
    6858:	4639      	mov	r1, r7
    685a:	4638      	mov	r0, r7
					mfp[callee_id] = 1U;
    685c:	f809 3007 	strb.w	r3, [r9, r7]
					mayfly_pend(callee_id, callee_id);
    6860:	f00c fb02 	bl	12e68 <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    6864:	b009      	add	sp, #36	; 0x24
    6866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    686a:	9b02      	ldr	r3, [sp, #8]
			m->_ack = ack;
    686c:	7069      	strb	r1, [r5, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    686e:	4638      	mov	r0, r7
    6870:	4629      	mov	r1, r5
    6872:	eb0a 0203 	add.w	r2, sl, r3
    6876:	f7ff feb7 	bl	65e8 <memq_enqueue>
    687a:	e7dd      	b.n	6838 <mayfly_run+0xa8>
    687c:	9d01      	ldr	r5, [sp, #4]
		if (mft[callee_id][caller_id].disable_req !=
    687e:	f89b 302e 	ldrb.w	r3, [fp, #46]	; 0x2e
    6882:	f89b 202f 	ldrb.w	r2, [fp, #47]	; 0x2f
    6886:	429a      	cmp	r2, r3
    6888:	d003      	beq.n	6892 <mayfly_run+0x102>
			mft[callee_id][caller_id].disable_ack =
    688a:	f88b 302f 	strb.w	r3, [fp, #47]	; 0x2f
			disable = 1U;
    688e:	2301      	movs	r3, #1
    6890:	9304      	str	r3, [sp, #16]
		if (mft[callee_id][caller_id].enable_req !=
    6892:	f89b 302c 	ldrb.w	r3, [fp, #44]	; 0x2c
    6896:	f89b 202d 	ldrb.w	r2, [fp, #45]	; 0x2d
    689a:	429a      	cmp	r2, r3
    689c:	d003      	beq.n	68a6 <mayfly_run+0x116>
			mft[callee_id][caller_id].enable_ack =
    689e:	f88b 302d 	strb.w	r3, [fp, #45]	; 0x2d
			enable = 1U;
    68a2:	2301      	movs	r3, #1
    68a4:	9305      	str	r3, [sp, #20]
	while (caller_id--) {
    68a6:	3d01      	subs	r5, #1
    68a8:	b2ed      	uxtb	r5, r5
    68aa:	2dff      	cmp	r5, #255	; 0xff
    68ac:	f1ab 0b0c 	sub.w	fp, fp, #12
    68b0:	d18a      	bne.n	67c8 <mayfly_run+0x38>
	if (disable && !enable) {
    68b2:	e9dd 2504 	ldrd	r2, r5, [sp, #16]
    68b6:	9f03      	ldr	r7, [sp, #12]
    68b8:	2a00      	cmp	r2, #0
    68ba:	d0d3      	beq.n	6864 <mayfly_run+0xd4>
    68bc:	2d00      	cmp	r5, #0
    68be:	d1d1      	bne.n	6864 <mayfly_run+0xd4>
		mayfly_enable_cb(callee_id, callee_id, 0);
    68c0:	462a      	mov	r2, r5
    68c2:	4639      	mov	r1, r7
    68c4:	4638      	mov	r0, r7
}
    68c6:	b009      	add	sp, #36	; 0x24
    68c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    68cc:	f00c ba78 	b.w	12dc0 <mayfly_enable_cb>
				if (caller_id || link) {
    68d0:	2800      	cmp	r0, #0
    68d2:	d0d4      	beq.n	687e <mayfly_run+0xee>
    68d4:	e7be      	b.n	6854 <mayfly_run+0xc4>
    68d6:	bf00      	nop
    68d8:	20001334 	.word	0x20001334
    68dc:	200013b8 	.word	0x200013b8

000068e0 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    68e0:	1e4b      	subs	r3, r1, #1
    68e2:	b2db      	uxtb	r3, r3
    68e4:	b171      	cbz	r1, 6904 <util_ones_count_get+0x24>
    68e6:	1e41      	subs	r1, r0, #1
    68e8:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
    68ec:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    68ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    68f2:	b123      	cbz	r3, 68fe <util_ones_count_get+0x1e>
			bite &= (bite - 1);
    68f4:	1e5a      	subs	r2, r3, #1
			one_count++;
    68f6:	3001      	adds	r0, #1
		while (bite) {
    68f8:	4013      	ands	r3, r2
			one_count++;
    68fa:	b2c0      	uxtb	r0, r0
		while (bite) {
    68fc:	d1fa      	bne.n	68f4 <util_ones_count_get+0x14>
	while (octets_len--) {
    68fe:	4561      	cmp	r1, ip
    6900:	d1f5      	bne.n	68ee <util_ones_count_get+0xe>
    6902:	4770      	bx	lr
	uint8_t one_count = 0U;
    6904:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
    6906:	4770      	bx	lr

00006908 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
    6908:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
    690a:	7e03      	ldrb	r3, [r0, #24]
	node = &instance->nodes[0];
    690c:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    690e:	2bff      	cmp	r3, #255	; 0xff
    6910:	d014      	beq.n	693c <ticker_dequeue+0x34>
		ticker_current = &node[current];
    6912:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
    6916:	428b      	cmp	r3, r1
		ticker_current = &node[current];
    6918:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
    691c:	d027      	beq.n	696e <ticker_dequeue+0x66>
	total = 0U;
    691e:	f04f 0c00 	mov.w	ip, #0
    6922:	e001      	b.n	6928 <ticker_dequeue+0x20>
		if (current == id) {
    6924:	4299      	cmp	r1, r3
    6926:	d00b      	beq.n	6940 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
    6928:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
    692a:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
    692c:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
    692e:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
    6930:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
    6934:	44a4      	add	ip, r4
		ticker_current = &node[current];
    6936:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
    693a:	d1f3      	bne.n	6924 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
    693c:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    693e:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
    6940:	4571      	cmp	r1, lr
    6942:	d017      	beq.n	6974 <ticker_dequeue+0x6c>
	node[previous].next = ticker_current->next;
    6944:	fa0f fe8e 	sxth.w	lr, lr
    6948:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
    694a:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
    694c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    6950:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
	if (ticker_current->next != TICKER_NULL) {
    6954:	2bff      	cmp	r3, #255	; 0xff
	node[previous].next = ticker_current->next;
    6956:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
    695a:	d006      	beq.n	696a <ticker_dequeue+0x62>
		node[ticker_current->next].ticks_to_expire += timeout;
    695c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6960:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    6964:	689a      	ldr	r2, [r3, #8]
    6966:	4402      	add	r2, r0
    6968:	609a      	str	r2, [r3, #8]
	return (total + timeout);
    696a:	4460      	add	r0, ip
}
    696c:	bd30      	pop	{r4, r5, pc}
	previous = instance->ticker_id_head;
    696e:	469e      	mov	lr, r3
	total = 0U;
    6970:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
    6974:	7813      	ldrb	r3, [r2, #0]
    6976:	7603      	strb	r3, [r0, #24]
    6978:	e7e4      	b.n	6944 <ticker_dequeue+0x3c>
    697a:	bf00      	nop

0000697c <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    697c:	eba2 0c01 	sub.w	ip, r2, r1
    6980:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
    6984:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    6986:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    6988:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    698a:	d10a      	bne.n	69a2 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    698c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    6990:	4463      	add	r3, ip
	if (ticks_to_expire > ticks_to_expire_minus) {
    6992:	42a3      	cmp	r3, r4
    6994:	d80d      	bhi.n	69b2 <ticks_to_expire_prep+0x36>
		ticks_to_expire_minus -= ticks_to_expire;
    6996:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
    6998:	2300      	movs	r3, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    699a:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
    699c:	6083      	str	r3, [r0, #8]
}
    699e:	bc10      	pop	{r4}
    69a0:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    69a2:	1a89      	subs	r1, r1, r2
    69a4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    69a8:	428b      	cmp	r3, r1
    69aa:	d908      	bls.n	69be <ticks_to_expire_prep+0x42>
			ticks_to_expire -= delta_current_start;
    69ac:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    69ae:	42a3      	cmp	r3, r4
    69b0:	d9f1      	bls.n	6996 <ticks_to_expire_prep+0x1a>
		ticks_to_expire -= ticks_to_expire_minus;
    69b2:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    69b4:	2400      	movs	r4, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    69b6:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
    69b8:	6083      	str	r3, [r0, #8]
}
    69ba:	bc10      	pop	{r4}
    69bc:	4770      	bx	lr
			ticks_to_expire_minus +=
    69be:	440c      	add	r4, r1
    69c0:	1ae4      	subs	r4, r4, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    69c2:	e7e9      	b.n	6998 <ticks_to_expire_prep+0x1c>

000069c4 <ticker_job_list_insert>:
{
    69c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69c8:	b087      	sub	sp, #28
    69ca:	4603      	mov	r3, r0
    69cc:	9003      	str	r0, [sp, #12]
	count_user = instance->count_user;
    69ce:	7a40      	ldrb	r0, [r0, #9]
	users = &instance->users[0];
    69d0:	e9d3 4500 	ldrd	r4, r5, [r3]
	while (count_user--) {
    69d4:	2800      	cmp	r0, #0
    69d6:	f000 8109 	beq.w	6bec <ticker_job_list_insert+0x228>
    69da:	1e42      	subs	r2, r0, #1
    69dc:	b2d2      	uxtb	r2, r2
    69de:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
    69e2:	46a3      	mov	fp, r4
    69e4:	9505      	str	r5, [sp, #20]
    69e6:	4689      	mov	r9, r1
		user_ops = (void *)&user->user_op[0];
    69e8:	6873      	ldr	r3, [r6, #4]
    69ea:	9304      	str	r3, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    69ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		user_ops_first = user->first;
    69f0:	f896 8001 	ldrb.w	r8, [r6, #1]
		while ((insert_head != TICKER_NULL) ||
    69f4:	4633      	mov	r3, r6
    69f6:	d064      	beq.n	6ac2 <ticker_job_list_insert+0xfe>
				ticker = &node[id_insert];
    69f8:	fa0f f489 	sxth.w	r4, r9
    69fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6a00:	0126      	lsls	r6, r4, #4
				user_op = NULL;
    6a02:	2500      	movs	r5, #0
				insert_head = ticker->next;
    6a04:	f81b a006 	ldrb.w	sl, [fp, r6]
				ticker = &node[id_insert];
    6a08:	eb0b 1404 	add.w	r4, fp, r4, lsl #4
	node = &instance->nodes[0];
    6a0c:	9a03      	ldr	r2, [sp, #12]
	ticker->next = TICKER_NULL;
    6a0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    6a12:	f884 c000 	strb.w	ip, [r4]
	node = &instance->nodes[0];
    6a16:	6817      	ldr	r7, [r2, #0]
	current = instance->ticker_id_head;
    6a18:	7e12      	ldrb	r2, [r2, #24]
	ticker_new = &node[id];
    6a1a:	eb07 0e06 	add.w	lr, r7, r6
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    6a1e:	4562      	cmp	r2, ip
	ticks_to_expire = ticker_new->ticks_to_expire;
    6a20:	f8de 1008 	ldr.w	r1, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    6a24:	f000 80dd 	beq.w	6be2 <ticker_job_list_insert+0x21e>
	previous = TICKER_NULL;
    6a28:	e9cd 8b01 	strd	r8, fp, [sp, #4]
    6a2c:	e00d      	b.n	6a4a <ticker_job_list_insert+0x86>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    6a2e:	1a09      	subs	r1, r1, r0
    6a30:	d106      	bne.n	6a40 <ticker_job_list_insert+0x7c>
    6a32:	f8be b01e 	ldrh.w	fp, [lr, #30]
    6a36:	f8b8 801e 	ldrh.w	r8, [r8, #30]
    6a3a:	45c3      	cmp	fp, r8
    6a3c:	f200 80c4 	bhi.w	6bc8 <ticker_job_list_insert+0x204>
		current = ticker_current->next;
    6a40:	5db8      	ldrb	r0, [r7, r6]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    6a42:	28ff      	cmp	r0, #255	; 0xff
    6a44:	4694      	mov	ip, r2
    6a46:	d06e      	beq.n	6b26 <ticker_job_list_insert+0x162>
		current = ticker_current->next;
    6a48:	4602      	mov	r2, r0
		(ticker_current = &node[current])->ticks_to_expire))) {
    6a4a:	eb02 0642 	add.w	r6, r2, r2, lsl #1
    6a4e:	eb07 1806 	add.w	r8, r7, r6, lsl #4
    6a52:	0136      	lsls	r6, r6, #4
		(ticks_to_expire_current =
    6a54:	f8d8 0008 	ldr.w	r0, [r8, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    6a58:	4288      	cmp	r0, r1
    6a5a:	d9e8      	bls.n	6a2e <ticker_job_list_insert+0x6a>
    6a5c:	e9dd 8b01 	ldrd	r8, fp, [sp, #4]
	if (previous == TICKER_NULL) {
    6a60:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
    6a64:	f8ce 1008 	str.w	r1, [lr, #8]
	ticker_new->next = current;
    6a68:	f88e 2000 	strb.w	r2, [lr]
	if (previous == TICKER_NULL) {
    6a6c:	d065      	beq.n	6b3a <ticker_job_list_insert+0x176>
		node[previous].next = id;
    6a6e:	fa0f fc8c 	sxth.w	ip, ip
    6a72:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    6a76:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    6a7a:	f807 900c 	strb.w	r9, [r7, ip]
	if (current != TICKER_NULL) {
    6a7e:	2aff      	cmp	r2, #255	; 0xff
    6a80:	d006      	beq.n	6a90 <ticker_job_list_insert+0xcc>
		node[current].ticks_to_expire -= ticks_to_expire;
    6a82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6a86:	eb07 1702 	add.w	r7, r7, r2, lsl #4
    6a8a:	68ba      	ldr	r2, [r7, #8]
    6a8c:	1a52      	subs	r2, r2, r1
    6a8e:	60ba      	str	r2, [r7, #8]
	ticker->req = ticker->ack + 1;
    6a90:	78a2      	ldrb	r2, [r4, #2]
    6a92:	3201      	adds	r2, #1
    6a94:	7062      	strb	r2, [r4, #1]
			if (user_op) {
    6a96:	b185      	cbz	r5, 6aba <ticker_job_list_insert+0xf6>
				status = ticker_job_insert(instance, id_insert, ticker,
    6a98:	2000      	movs	r0, #0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    6a9a:	f04f 0200 	mov.w	r2, #0
    6a9e:	702a      	strb	r2, [r5, #0]
	if (user_op->fp_op_func) {
    6aa0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	user_op->status = status;
    6aa2:	70a8      	strb	r0, [r5, #2]
	if (user_op->fp_op_func) {
    6aa4:	b11a      	cbz	r2, 6aae <ticker_job_list_insert+0xea>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    6aa6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    6aa8:	9301      	str	r3, [sp, #4]
    6aaa:	4790      	blx	r2
    6aac:	9b01      	ldr	r3, [sp, #4]
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    6aae:	6862      	ldr	r2, [r4, #4]
    6ab0:	b91a      	cbnz	r2, 6aba <ticker_job_list_insert+0xf6>
						user_op->fp_op_func;
    6ab2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
					ticker->fp_op_func =
    6ab4:	6222      	str	r2, [r4, #32]
						user_op->op_context;
    6ab6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
					ticker->op_context =
    6ab8:	6262      	str	r2, [r4, #36]	; 0x24
    6aba:	46d1      	mov	r9, sl
		while ((insert_head != TICKER_NULL) ||
    6abc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    6ac0:	d19a      	bne.n	69f8 <ticker_job_list_insert+0x34>
    6ac2:	789a      	ldrb	r2, [r3, #2]
    6ac4:	9f04      	ldr	r7, [sp, #16]
    6ac6:	469a      	mov	sl, r3
				user_op = &user_ops[user_ops_first];
    6ac8:	eb08 0148 	add.w	r1, r8, r8, lsl #1
				first = user_ops_first + 1;
    6acc:	f108 0001 	add.w	r0, r8, #1
		while ((insert_head != TICKER_NULL) ||
    6ad0:	4542      	cmp	r2, r8
				user_op = &user_ops[user_ops_first];
    6ad2:	ea4f 1c01 	mov.w	ip, r1, lsl #4
				first = user_ops_first + 1;
    6ad6:	fa5f f880 	uxtb.w	r8, r0
				user_op = &user_ops[user_ops_first];
    6ada:	eb07 1501 	add.w	r5, r7, r1, lsl #4
		while ((insert_head != TICKER_NULL) ||
    6ade:	d077      	beq.n	6bd0 <ticker_job_list_insert+0x20c>
				if (first == user->count_user_op) {
    6ae0:	f89a 0000 	ldrb.w	r0, [sl]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    6ae4:	f817 100c 	ldrb.w	r1, [r7, ip]
					first = 0U;
    6ae8:	4540      	cmp	r0, r8
    6aea:	bf08      	it	eq
    6aec:	f04f 0800 	moveq.w	r8, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    6af0:	2904      	cmp	r1, #4
    6af2:	d1e9      	bne.n	6ac8 <ticker_job_list_insert+0x104>
				id_insert = user_op->id;
    6af4:	786a      	ldrb	r2, [r5, #1]
				ticker = &node[id_insert];
    6af6:	eb02 0642 	add.w	r6, r2, r2, lsl #1
    6afa:	eb0b 1406 	add.w	r4, fp, r6, lsl #4
	user_op->status = status;
    6afe:	2001      	movs	r0, #1
				if (((ticker->req -
    6b00:	f894 e001 	ldrb.w	lr, [r4, #1]
    6b04:	78a1      	ldrb	r1, [r4, #2]
    6b06:	458e      	cmp	lr, r1
				ticker = &node[id_insert];
    6b08:	ea4f 1606 	mov.w	r6, r6, lsl #4
				if (((ticker->req -
    6b0c:	d019      	beq.n	6b42 <ticker_job_list_insert+0x17e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    6b0e:	f04f 0300 	mov.w	r3, #0
    6b12:	f807 300c 	strb.w	r3, [r7, ip]
	if (user_op->fp_op_func) {
    6b16:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	user_op->status = status;
    6b18:	70a8      	strb	r0, [r5, #2]
	if (user_op->fp_op_func) {
    6b1a:	b10a      	cbz	r2, 6b20 <ticker_job_list_insert+0x15c>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    6b1c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    6b1e:	4790      	blx	r2
    6b20:	f89a 2002 	ldrb.w	r2, [sl, #2]
		while ((insert_head != TICKER_NULL) ||
    6b24:	e7d0      	b.n	6ac8 <ticker_job_list_insert+0x104>
    6b26:	4602      	mov	r2, r0
	if (previous == TICKER_NULL) {
    6b28:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    6b2c:	e9dd 8b01 	ldrd	r8, fp, [sp, #4]
	ticker_new->ticks_to_expire = ticks_to_expire;
    6b30:	f8ce 1008 	str.w	r1, [lr, #8]
	ticker_new->next = current;
    6b34:	f88e 2000 	strb.w	r2, [lr]
	if (previous == TICKER_NULL) {
    6b38:	d199      	bne.n	6a6e <ticker_job_list_insert+0xaa>
		instance->ticker_id_head = id;
    6b3a:	9803      	ldr	r0, [sp, #12]
    6b3c:	f880 9018 	strb.w	r9, [r0, #24]
    6b40:	e79d      	b.n	6a7e <ticker_job_list_insert+0xba>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    6b42:	8aa8      	ldrh	r0, [r5, #20]
				status = ticker_job_op_start(instance, ticker, user_op,
    6b44:	9903      	ldr	r1, [sp, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    6b46:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    6b4a:	42b8      	cmp	r0, r7
				status = ticker_job_op_start(instance, ticker, user_op,
    6b4c:	6949      	ldr	r1, [r1, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    6b4e:	4653      	mov	r3, sl
    6b50:	d007      	beq.n	6b62 <ticker_job_list_insert+0x19e>
		ticker->must_expire =
    6b52:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6b56:	1bc0      	subs	r0, r0, r7
    6b58:	fab0 f080 	clz	r0, r0
    6b5c:	0940      	lsrs	r0, r0, #5
    6b5e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    6b62:	6a68      	ldr	r0, [r5, #36]	; 0x24
    6b64:	62a0      	str	r0, [r4, #40]	; 0x28
	if (ticker->ext_data) {
    6b66:	b158      	cbz	r0, 6b80 <ticker_job_list_insert+0x1bc>
		ticker->ext_data->other_expire_info = NULL;
    6b68:	2700      	movs	r7, #0
    6b6a:	6107      	str	r7, [r0, #16]
		if (ticker->ext_data->ext_timeout_func &&
    6b6c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    6b6e:	6838      	ldr	r0, [r7, #0]
    6b70:	b130      	cbz	r0, 6b80 <ticker_job_list_insert+0x1bc>
    6b72:	7b78      	ldrb	r0, [r7, #13]
    6b74:	28ff      	cmp	r0, #255	; 0xff
    6b76:	d003      	beq.n	6b80 <ticker_job_list_insert+0x1bc>
    6b78:	f04f 0aff 	mov.w	sl, #255	; 0xff
				status = ticker_job_op_start(instance, ticker, user_op,
    6b7c:	2001      	movs	r0, #1
    6b7e:	e78c      	b.n	6a9a <ticker_job_list_insert+0xd6>
				id_insert = user_op->id;
    6b80:	4691      	mov	r9, r2
	ticker->ticks_periodic = start->ticks_periodic;
    6b82:	68ea      	ldr	r2, [r5, #12]
    6b84:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    6b86:	692a      	ldr	r2, [r5, #16]
    6b88:	6222      	str	r2, [r4, #32]
		(start->lazy < TICKER_LAZY_MUST_EXPIRE_KEEP) ? start->lazy :
    6b8a:	8aaa      	ldrh	r2, [r5, #20]
    6b8c:	9301      	str	r3, [sp, #4]
	ticker->lazy_periodic =
    6b8e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    6b92:	429a      	cmp	r2, r3
    6b94:	bf88      	it	hi
    6b96:	2200      	movhi	r2, #0
    6b98:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    6b9a:	69aa      	ldr	r2, [r5, #24]
    6b9c:	61a2      	str	r2, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    6b9e:	69ea      	ldr	r2, [r5, #28]
    6ba0:	60e2      	str	r2, [r4, #12]
	ticker->context = start->context;
    6ba2:	6a2a      	ldr	r2, [r5, #32]
    6ba4:	6122      	str	r2, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    6ba6:	68aa      	ldr	r2, [r5, #8]
    6ba8:	60a2      	str	r2, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    6baa:	2300      	movs	r3, #0
    6bac:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    6bae:	686a      	ldr	r2, [r5, #4]
    6bb0:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
    6bb2:	461f      	mov	r7, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    6bb4:	f7ff fee2 	bl	697c <ticks_to_expire_prep>
	ticker->force = 1U;
    6bb8:	2201      	movs	r2, #1
    6bba:	9b01      	ldr	r3, [sp, #4]
	ticker->remainder_current = 0U;
    6bbc:	6267      	str	r7, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    6bbe:	83e7      	strh	r7, [r4, #30]
	ticker->force = 1U;
    6bc0:	70e2      	strb	r2, [r4, #3]
    6bc2:	f04f 0aff 	mov.w	sl, #255	; 0xff
    6bc6:	e721      	b.n	6a0c <ticker_job_list_insert+0x48>
		(ticks_to_expire_current =
    6bc8:	e9dd 8b01 	ldrd	r8, fp, [sp, #4]
    6bcc:	4601      	mov	r1, r0
    6bce:	e747      	b.n	6a60 <ticker_job_list_insert+0x9c>
		user->first = user_ops_first;
    6bd0:	f88a 2001 	strb.w	r2, [sl, #1]
	while (count_user--) {
    6bd4:	9a05      	ldr	r2, [sp, #20]
    6bd6:	4552      	cmp	r2, sl
    6bd8:	f1aa 0308 	sub.w	r3, sl, #8
    6bdc:	d006      	beq.n	6bec <ticker_job_list_insert+0x228>
    6bde:	461e      	mov	r6, r3
    6be0:	e702      	b.n	69e8 <ticker_job_list_insert+0x24>
	ticker_new->next = current;
    6be2:	55ba      	strb	r2, [r7, r6]
		instance->ticker_id_head = id;
    6be4:	9a03      	ldr	r2, [sp, #12]
    6be6:	f882 9018 	strb.w	r9, [r2, #24]
	if (current != TICKER_NULL) {
    6bea:	e751      	b.n	6a90 <ticker_job_list_insert+0xcc>
}
    6bec:	b007      	add	sp, #28
    6bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6bf2:	bf00      	nop

00006bf4 <ticker_worker>:
{
    6bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    6bf8:	7e44      	ldrb	r4, [r0, #25]
	instance->worker_trigger = 1U;
    6bfa:	2301      	movs	r3, #1
{
    6bfc:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
    6bfe:	7683      	strb	r3, [r0, #26]
	if (instance->job_guard) {
    6c00:	2c00      	cmp	r4, #0
    6c02:	f040 80d3 	bne.w	6dac <ticker_worker+0x1b8>
	if (instance->ticker_id_head == TICKER_NULL) {
    6c06:	7e03      	ldrb	r3, [r0, #24]
    6c08:	2bff      	cmp	r3, #255	; 0xff
    6c0a:	4606      	mov	r6, r0
    6c0c:	f000 80cd 	beq.w	6daa <ticker_worker+0x1b6>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    6c10:	f00b fc72 	bl	124f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    6c14:	6972      	ldr	r2, [r6, #20]
	if (instance->ticks_slot_previous > ticks_elapsed) {
    6c16:	69f3      	ldr	r3, [r6, #28]
	ticker_id_head = instance->ticker_id_head;
    6c18:	7e35      	ldrb	r5, [r6, #24]
	node = &instance->nodes[0];
    6c1a:	f8d6 a000 	ldr.w	sl, [r6]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    6c1e:	1a80      	subs	r0, r0, r2
    6c20:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
	if (instance->ticks_slot_previous > ticks_elapsed) {
    6c24:	454b      	cmp	r3, r9
    6c26:	bf94      	ite	ls
    6c28:	2300      	movls	r3, #0
    6c2a:	2301      	movhi	r3, #1
	while (ticker_id_head != TICKER_NULL) {
    6c2c:	2dff      	cmp	r5, #255	; 0xff
	if (instance->ticks_slot_previous > ticks_elapsed) {
    6c2e:	9302      	str	r3, [sp, #8]
	ticks_expired = 0U;
    6c30:	46a3      	mov	fp, r4
	while (ticker_id_head != TICKER_NULL) {
    6c32:	f000 809e 	beq.w	6d72 <ticker_worker+0x17e>
			ticker->ext_data->ticks_drift = 0U;
    6c36:	9406      	str	r4, [sp, #24]
    6c38:	46b0      	mov	r8, r6
		ticker = &node[ticker_id_head];
    6c3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    6c3e:	eb0a 1405 	add.w	r4, sl, r5, lsl #4
    6c42:	012d      	lsls	r5, r5, #4
		ticks_to_expire = ticker->ticks_to_expire;
    6c44:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    6c46:	454b      	cmp	r3, r9
    6c48:	f200 8091 	bhi.w	6d6e <ticker_worker+0x17a>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    6c4c:	78a0      	ldrb	r0, [r4, #2]
		ticker_id_head = ticker->next;
    6c4e:	f81a 5005 	ldrb.w	r5, [sl, r5]
		ticks_elapsed -= ticks_to_expire;
    6c52:	eba9 0903 	sub.w	r9, r9, r3
		ticks_expired += ticks_to_expire;
    6c56:	449b      	add	fp, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    6c58:	7863      	ldrb	r3, [r4, #1]
    6c5a:	1a1b      	subs	r3, r3, r0
    6c5c:	b2db      	uxtb	r3, r3
    6c5e:	2b01      	cmp	r3, #1
    6c60:	f040 8082 	bne.w	6d68 <ticker_worker+0x174>
		if (((ticker->ticks_slot != 0U) ||
    6c64:	69a3      	ldr	r3, [r4, #24]
		      TICKER_HAS_SLOT_WINDOW(ticker)) &&
    6c66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		if (((ticker->ticks_slot != 0U) ||
    6c68:	9303      	str	r3, [sp, #12]
    6c6a:	2b00      	cmp	r3, #0
    6c6c:	f040 80a1 	bne.w	6db2 <ticker_worker+0x1be>
    6c70:	2a00      	cmp	r2, #0
    6c72:	f000 80d5 	beq.w	6e20 <ticker_worker+0x22c>
		      TICKER_HAS_SLOT_WINDOW(ticker)) &&
    6c76:	6857      	ldr	r7, [r2, #4]
    6c78:	2f00      	cmp	r7, #0
    6c7a:	f000 80bf 	beq.w	6dfc <ticker_worker+0x208>
    6c7e:	9b02      	ldr	r3, [sp, #8]
    6c80:	2b00      	cmp	r3, #0
    6c82:	f000 80f4 	beq.w	6e6e <ticker_worker+0x27a>
			    ext_data->ticks_slot_window != 0U &&
    6c86:	7b13      	ldrb	r3, [r2, #12]
    6c88:	2b00      	cmp	r3, #0
    6c8a:	f000 80e8 	beq.w	6e5e <ticker_worker+0x26a>
				ext_data->reschedule_state =
    6c8e:	f04f 0300 	mov.w	r3, #0
    6c92:	7313      	strb	r3, [r2, #12]
			ticker->lazy_current++;
    6c94:	8be3      	ldrh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    6c96:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    6c9a:	3301      	adds	r3, #1
    6c9c:	b29b      	uxth	r3, r3
    6c9e:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    6ca0:	2a00      	cmp	r2, #0
    6ca2:	f000 8098 	beq.w	6dd6 <ticker_worker+0x1e2>
    6ca6:	8ba2      	ldrh	r2, [r4, #28]
    6ca8:	429a      	cmp	r2, r3
    6caa:	f080 8094 	bcs.w	6dd6 <ticker_worker+0x1e2>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    6cae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    6cb0:	2a00      	cmp	r2, #0
    6cb2:	f000 8159 	beq.w	6f68 <ticker_worker+0x374>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    6cb6:	7b13      	ldrb	r3, [r2, #12]
    6cb8:	2b01      	cmp	r3, #1
    6cba:	f000 808c 	beq.w	6dd6 <ticker_worker+0x1e2>
			must_expire_skip = 1U;
    6cbe:	2601      	movs	r6, #1
			ticks_drift = ticker->ext_data->ticks_drift;
    6cc0:	6893      	ldr	r3, [r2, #8]
    6cc2:	9303      	str	r3, [sp, #12]
			ticker->ext_data->ticks_drift = 0U;
    6cc4:	2300      	movs	r3, #0
    6cc6:	6093      	str	r3, [r2, #8]
			ticker->ext_data->reschedule_state =
    6cc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6cca:	f04f 0200 	mov.w	r2, #0
    6cce:	731a      	strb	r2, [r3, #12]
		ticker->ack--;
    6cd0:	78a3      	ldrb	r3, [r4, #2]
		if (ticker->timeout_func
    6cd2:	68e7      	ldr	r7, [r4, #12]
		    || (ticker->ext_data && ticker->ext_data->ext_timeout_func)
    6cd4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		ticker->ack--;
    6cd6:	3b01      	subs	r3, #1
    6cd8:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func
    6cda:	2f00      	cmp	r7, #0
    6cdc:	f000 80ac 	beq.w	6e38 <ticker_worker+0x244>
					   ticks_expired -
    6ce0:	6963      	ldr	r3, [r4, #20]
    6ce2:	f8d8 1014 	ldr.w	r1, [r8, #20]
    6ce6:	ebab 0303 	sub.w	r3, fp, r3
    6cea:	440b      	add	r3, r1
			ticks_at_expire = (instance->ticks_current +
    6cec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6cf0:	9304      	str	r3, [sp, #16]
			if (ticker->ext_data && ticker->ext_data->ext_timeout_func) {
    6cf2:	2a00      	cmp	r2, #0
    6cf4:	f000 8084 	beq.w	6e00 <ticker_worker+0x20c>
		    || (ticker->ext_data && ticker->ext_data->ext_timeout_func)
    6cf8:	6813      	ldr	r3, [r2, #0]
    6cfa:	9305      	str	r3, [sp, #20]
			if (ticker->ext_data && ticker->ext_data->ext_timeout_func) {
    6cfc:	2b00      	cmp	r3, #0
    6cfe:	d07f      	beq.n	6e00 <ticker_worker+0x20c>
				if (ticker->ext_data->expire_info_id != TICKER_NULL) {
    6d00:	7b53      	ldrb	r3, [r2, #13]
				expire_info = ticker->ext_data->other_expire_info;
    6d02:	6917      	ldr	r7, [r2, #16]
				if (ticker->ext_data->expire_info_id != TICKER_NULL) {
    6d04:	2bff      	cmp	r3, #255	; 0xff
    6d06:	d011      	beq.n	6d2c <ticker_worker+0x138>
					LL_ASSERT(expire_info && !expire_info->outdated);
    6d08:	b11f      	cbz	r7, 6d12 <ticker_worker+0x11e>
    6d0a:	7afb      	ldrb	r3, [r7, #11]
    6d0c:	07da      	lsls	r2, r3, #31
    6d0e:	f140 8114 	bpl.w	6f3a <ticker_worker+0x346>
    6d12:	4a9c      	ldr	r2, [pc, #624]	; (6f84 <ticker_worker+0x390>)
    6d14:	499c      	ldr	r1, [pc, #624]	; (6f88 <ticker_worker+0x394>)
    6d16:	489d      	ldr	r0, [pc, #628]	; (6f8c <ticker_worker+0x398>)
    6d18:	f44f 63a8 	mov.w	r3, #1344	; 0x540
    6d1c:	f010 fbe1 	bl	174e2 <assert_print>
    6d20:	4040      	eors	r0, r0
    6d22:	f380 8811 	msr	BASEPRI, r0
    6d26:	f04f 0003 	mov.w	r0, #3
    6d2a:	df02      	svc	2
				ext_context.context = ticker->context;
    6d2c:	6923      	ldr	r3, [r4, #16]
    6d2e:	930a      	str	r3, [sp, #40]	; 0x28
				if (expire_info && expire_info->found) {
    6d30:	b117      	cbz	r7, 6d38 <ticker_worker+0x144>
    6d32:	7afb      	ldrb	r3, [r7, #11]
    6d34:	079b      	lsls	r3, r3, #30
    6d36:	d400      	bmi.n	6d3a <ticker_worker+0x146>
					ext_context.other_expire_info = NULL;
    6d38:	2700      	movs	r7, #0
				timeout_func(ticks_at_expire,
    6d3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6d3c:	970b      	str	r7, [sp, #44]	; 0x2c
    6d3e:	2e00      	cmp	r6, #0
    6d40:	f040 808a 	bne.w	6e58 <ticker_worker+0x264>
    6d44:	8be3      	ldrh	r3, [r4, #30]
    6d46:	a90a      	add	r1, sp, #40	; 0x28
    6d48:	9101      	str	r1, [sp, #4]
    6d4a:	78e7      	ldrb	r7, [r4, #3]
    6d4c:	9700      	str	r7, [sp, #0]
    6d4e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    6d52:	9f05      	ldr	r7, [sp, #20]
    6d54:	47b8      	blx	r7
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    6d56:	b93e      	cbnz	r6, 6d68 <ticker_worker+0x174>
				if (ticker->ticks_slot != 0U) {
    6d58:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
    6d5a:	83e6      	strh	r6, [r4, #30]
					slot_reserved = 1U;
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	9b02      	ldr	r3, [sp, #8]
				ticker->force = 0U;
    6d60:	70e6      	strb	r6, [r4, #3]
					slot_reserved = 1U;
    6d62:	bf18      	it	ne
    6d64:	2301      	movne	r3, #1
    6d66:	9302      	str	r3, [sp, #8]
	while (ticker_id_head != TICKER_NULL) {
    6d68:	2dff      	cmp	r5, #255	; 0xff
    6d6a:	f47f af66 	bne.w	6c3a <ticker_worker+0x46>
    6d6e:	9c06      	ldr	r4, [sp, #24]
    6d70:	4646      	mov	r6, r8
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    6d72:	7af3      	ldrb	r3, [r6, #11]
    6d74:	7ab2      	ldrb	r2, [r6, #10]
    6d76:	429a      	cmp	r2, r3
    6d78:	d107      	bne.n	6d8a <ticker_worker+0x196>
	uint8_t idx = *ticks_elapsed_index + 1;
    6d7a:	3201      	adds	r2, #1
    6d7c:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    6d7e:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    6d80:	bf1a      	itte	ne
    6d82:	4614      	movne	r4, r2
    6d84:	4623      	movne	r3, r4
    6d86:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    6d88:	72f4      	strb	r4, [r6, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    6d8a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
	instance->worker_trigger = 0U;
    6d8e:	2200      	movs	r2, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    6d90:	f8c3 b00c 	str.w	fp, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    6d94:	6ab4      	ldr	r4, [r6, #40]	; 0x28
	instance->worker_trigger = 0U;
    6d96:	76b2      	strb	r2, [r6, #26]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    6d98:	4633      	mov	r3, r6
    6d9a:	2201      	movs	r2, #1
    6d9c:	2104      	movs	r1, #4
    6d9e:	2003      	movs	r0, #3
    6da0:	46a4      	mov	ip, r4
}
    6da2:	b00d      	add	sp, #52	; 0x34
    6da4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    6da8:	4760      	bx	ip
		instance->worker_trigger = 0U;
    6daa:	7684      	strb	r4, [r0, #26]
}
    6dac:	b00d      	add	sp, #52	; 0x34
    6dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		      TICKER_HAS_SLOT_WINDOW(ticker)) &&
    6db2:	9b02      	ldr	r3, [sp, #8]
    6db4:	b91b      	cbnz	r3, 6dbe <ticker_worker+0x1ca>
		    (slot_reserved ||
    6db6:	f8d8 301c 	ldr.w	r3, [r8, #28]
    6dba:	455b      	cmp	r3, fp
    6dbc:	d962      	bls.n	6e84 <ticker_worker+0x290>
			if (ext_data &&
    6dbe:	2a00      	cmp	r2, #0
    6dc0:	f43f af68 	beq.w	6c94 <ticker_worker+0xa0>
    6dc4:	6857      	ldr	r7, [r2, #4]
    6dc6:	2f00      	cmp	r7, #0
    6dc8:	f43f af61 	beq.w	6c8e <ticker_worker+0x9a>
			    ext_data->ticks_slot_window != 0U &&
    6dcc:	7b13      	ldrb	r3, [r2, #12]
    6dce:	2b00      	cmp	r3, #0
    6dd0:	f47f af5d 	bne.w	6c8e <ticker_worker+0x9a>
    6dd4:	e043      	b.n	6e5e <ticker_worker+0x26a>
				ticker->ack--;
    6dd6:	78a3      	ldrb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    6dd8:	2dff      	cmp	r5, #255	; 0xff
				ticker->ack--;
    6dda:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    6dde:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    6de0:	f47f af2b 	bne.w	6c3a <ticker_worker+0x46>
    6de4:	e7c3      	b.n	6d6e <ticker_worker+0x17a>
    6de6:	4622      	mov	r2, r4
    6de8:	9809      	ldr	r0, [sp, #36]	; 0x24
    6dea:	f8dd 9014 	ldr.w	r9, [sp, #20]
    6dee:	9d08      	ldr	r5, [sp, #32]
    6df0:	465c      	mov	r4, fp
    6df2:	f8dd b01c 	ldr.w	fp, [sp, #28]
		if (ticker->ext_data) {
    6df6:	2a00      	cmp	r2, #0
    6df8:	f000 80ca 	beq.w	6f90 <ticker_worker+0x39c>
    6dfc:	2600      	movs	r6, #0
    6dfe:	e75f      	b.n	6cc0 <ticker_worker+0xcc>
				ticker->timeout_func(ticks_at_expire,
    6e00:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6e02:	b9b6      	cbnz	r6, 6e32 <ticker_worker+0x23e>
    6e04:	8be3      	ldrh	r3, [r4, #30]
    6e06:	2600      	movs	r6, #0
    6e08:	f8d4 c010 	ldr.w	ip, [r4, #16]
    6e0c:	f8cd c004 	str.w	ip, [sp, #4]
    6e10:	f894 c003 	ldrb.w	ip, [r4, #3]
    6e14:	f8cd c000 	str.w	ip, [sp]
    6e18:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    6e1c:	47b8      	blx	r7
    6e1e:	e79a      	b.n	6d56 <ticker_worker+0x162>
		must_expire_skip = 0U;
    6e20:	4616      	mov	r6, r2
		if (ticker->timeout_func
    6e22:	68e7      	ldr	r7, [r4, #12]
		ticker->ack--;
    6e24:	3801      	subs	r0, #1
    6e26:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func
    6e28:	2f00      	cmp	r7, #0
    6e2a:	d09d      	beq.n	6d68 <ticker_worker+0x174>
    6e2c:	2200      	movs	r2, #0
			ticks_drift = 0U;
    6e2e:	9203      	str	r2, [sp, #12]
    6e30:	e756      	b.n	6ce0 <ticker_worker+0xec>
				ticker->timeout_func(ticks_at_expire,
    6e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6e36:	e7e7      	b.n	6e08 <ticker_worker+0x214>
		    || (ticker->ext_data && ticker->ext_data->ext_timeout_func)
    6e38:	2a00      	cmp	r2, #0
    6e3a:	d095      	beq.n	6d68 <ticker_worker+0x174>
    6e3c:	6813      	ldr	r3, [r2, #0]
    6e3e:	9305      	str	r3, [sp, #20]
    6e40:	2b00      	cmp	r3, #0
    6e42:	d091      	beq.n	6d68 <ticker_worker+0x174>
					   ticks_expired -
    6e44:	6963      	ldr	r3, [r4, #20]
    6e46:	f8d8 1014 	ldr.w	r1, [r8, #20]
    6e4a:	ebab 0303 	sub.w	r3, fp, r3
    6e4e:	440b      	add	r3, r1
			ticks_at_expire = (instance->ticks_current +
    6e50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6e54:	9304      	str	r3, [sp, #16]
			if (ticker->ext_data && ticker->ext_data->ext_timeout_func) {
    6e56:	e753      	b.n	6d00 <ticker_worker+0x10c>
				timeout_func(ticks_at_expire,
    6e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6e5c:	e773      	b.n	6d46 <ticker_worker+0x152>
			    TICKER_RESCHEDULE_STATE_NONE &&
    6e5e:	8ba1      	ldrh	r1, [r4, #28]
    6e60:	8be3      	ldrh	r3, [r4, #30]
    6e62:	4299      	cmp	r1, r3
    6e64:	f63f af13 	bhi.w	6c8e <ticker_worker+0x9a>
				ext_data->reschedule_state =
    6e68:	2301      	movs	r3, #1
    6e6a:	7313      	strb	r3, [r2, #12]
    6e6c:	e712      	b.n	6c94 <ticker_worker+0xa0>
		    (slot_reserved ||
    6e6e:	f8d8 301c 	ldr.w	r3, [r8, #28]
    6e72:	459b      	cmp	fp, r3
    6e74:	f4ff af07 	bcc.w	6c86 <ticker_worker+0x92>
	if (ticker->next != TICKER_NULL) {
    6e78:	2dff      	cmp	r5, #255	; 0xff
    6e7a:	d0bf      	beq.n	6dfc <ticker_worker+0x208>
			ticker_ticks_slot = HAL_TICKER_RESCHEDULE_MARGIN;
    6e7c:	2304      	movs	r3, #4
		uint16_t lazy_current = ticker->lazy_current;
    6e7e:	8be1      	ldrh	r1, [r4, #30]
			ticker_ticks_slot = HAL_TICKER_RESCHEDULE_MARGIN;
    6e80:	461e      	mov	r6, r3
    6e82:	e004      	b.n	6e8e <ticker_worker+0x29a>
	if (ticker->next != TICKER_NULL) {
    6e84:	2dff      	cmp	r5, #255	; 0xff
    6e86:	d0b6      	beq.n	6df6 <ticker_worker+0x202>
		if (((ticker->ticks_slot != 0U) ||
    6e88:	9b03      	ldr	r3, [sp, #12]
		uint16_t lazy_current = ticker->lazy_current;
    6e8a:	8be1      	ldrh	r1, [r4, #30]
		if (((ticker->ticks_slot != 0U) ||
    6e8c:	461e      	mov	r6, r3
		if (lazy_current >= ticker->lazy_periodic) {
    6e8e:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    6e90:	6867      	ldr	r7, [r4, #4]
		if (lazy_current >= ticker->lazy_periodic) {
    6e92:	428b      	cmp	r3, r1
			lazy_current -= ticker->lazy_periodic;
    6e94:	bf9c      	itt	ls
    6e96:	1acb      	subls	r3, r1, r3
    6e98:	b299      	uxthls	r1, r3
			struct ticker_node *ticker_next = &nodes[id_head];
    6e9a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    6e9e:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
		uint32_t current_age = ticker->ticks_periodic +
    6ea2:	fb01 7107 	mla	r1, r1, r7, r7
    6ea6:	9104      	str	r1, [sp, #16]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    6ea8:	6899      	ldr	r1, [r3, #8]
			if (acc_ticks_to_expire > ticker_ticks_slot) {
    6eaa:	428e      	cmp	r6, r1
    6eac:	46b6      	mov	lr, r6
    6eae:	d3a2      	bcc.n	6df6 <ticker_worker+0x202>
    6eb0:	f8cd 9014 	str.w	r9, [sp, #20]
    6eb4:	f8cd b01c 	str.w	fp, [sp, #28]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    6eb8:	460e      	mov	r6, r1
    6eba:	46a3      	mov	fp, r4
    6ebc:	9009      	str	r0, [sp, #36]	; 0x24
    6ebe:	9508      	str	r5, [sp, #32]
    6ec0:	46b9      	mov	r9, r7
    6ec2:	4614      	mov	r4, r2
    6ec4:	e01e      	b.n	6f04 <ticker_worker+0x310>
					  0U :
    6ec6:	2a00      	cmp	r2, #0
    6ec8:	d142      	bne.n	6f50 <ticker_worker+0x35c>
				 !ticker->ticks_slot &&
    6eca:	b174      	cbz	r4, 6eea <ticker_worker+0x2f6>
				(TICKER_HAS_SLOT_WINDOW(ticker) &&
    6ecc:	6867      	ldr	r7, [r4, #4]
    6ece:	b127      	cbz	r7, 6eda <ticker_worker+0x2e6>
    6ed0:	9903      	ldr	r1, [sp, #12]
    6ed2:	b911      	cbnz	r1, 6eda <ticker_worker+0x2e6>
				 ((acc_ticks_to_expire +
    6ed4:	4430      	add	r0, r6
				 !ticker->ticks_slot &&
    6ed6:	4287      	cmp	r7, r0
    6ed8:	d849      	bhi.n	6f6e <ticker_worker+0x37a>
			if (curr_has_ticks_slot_window ||
    6eda:	4565      	cmp	r5, ip
    6edc:	d305      	bcc.n	6eea <ticker_worker+0x2f6>
				(ticker->force == ticker_next->force);
    6ede:	f89b 0003 	ldrb.w	r0, [fp, #3]
    6ee2:	78d9      	ldrb	r1, [r3, #3]
			     (next_is_critical ||
    6ee4:	4288      	cmp	r0, r1
    6ee6:	d337      	bcc.n	6f58 <ticker_worker+0x364>
			      (equal_priority && equal_force && next_is_older &&
    6ee8:	d034      	beq.n	6f54 <ticker_worker+0x360>
			id_head = ticker_next->next;
    6eea:	781b      	ldrb	r3, [r3, #0]
		while (id_head != TICKER_NULL) {
    6eec:	2bff      	cmp	r3, #255	; 0xff
    6eee:	f43f af7a 	beq.w	6de6 <ticker_worker+0x1f2>
			struct ticker_node *ticker_next = &nodes[id_head];
    6ef2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6ef6:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    6efa:	6899      	ldr	r1, [r3, #8]
    6efc:	440e      	add	r6, r1
			if (acc_ticks_to_expire > ticker_ticks_slot) {
    6efe:	4576      	cmp	r6, lr
    6f00:	f63f af71 	bhi.w	6de6 <ticker_worker+0x1f2>
			if (ticker_next->ticks_slot == 0U) {
    6f04:	6998      	ldr	r0, [r3, #24]
    6f06:	2800      	cmp	r0, #0
    6f08:	d0ef      	beq.n	6eea <ticker_worker+0x2f6>
			uint16_t lazy_next = ticker_next->lazy_current;
    6f0a:	8bdd      	ldrh	r5, [r3, #30]
				ticker_next->lazy_periodic > lazy_next;
    6f0c:	f8b3 c01c 	ldrh.w	ip, [r3, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    6f10:	685a      	ldr	r2, [r3, #4]
			if (!lazy_next_periodic_skip) {
    6f12:	4565      	cmp	r5, ip
    6f14:	d3d7      	bcc.n	6ec6 <ticker_worker+0x2d2>
					  0U :
    6f16:	b1ba      	cbz	r2, 6f48 <ticker_worker+0x354>
				lazy_next -= ticker_next->lazy_periodic;
    6f18:	eba5 070c 	sub.w	r7, r5, ip
    6f1c:	b2bf      	uxth	r7, r7
				(ticker->ticks_periodic != 0U) &&
    6f1e:	f1b9 0f00 	cmp.w	r9, #0
    6f22:	d00d      	beq.n	6f40 <ticker_worker+0x34c>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    6f24:	fb07 2702 	mla	r7, r7, r2, r2
				(ticker->ticks_periodic != 0U) &&
    6f28:	9a04      	ldr	r2, [sp, #16]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    6f2a:	1a7f      	subs	r7, r7, r1
				(ticker->ticks_periodic != 0U) &&
    6f2c:	42ba      	cmp	r2, r7
    6f2e:	bf2c      	ite	cs
    6f30:	2200      	movcs	r2, #0
    6f32:	2201      	movcc	r2, #1
				 !ticker->ticks_slot &&
    6f34:	2c00      	cmp	r4, #0
    6f36:	d1c9      	bne.n	6ecc <ticker_worker+0x2d8>
    6f38:	e7cf      	b.n	6eda <ticker_worker+0x2e6>
				ext_context.context = ticker->context;
    6f3a:	6922      	ldr	r2, [r4, #16]
    6f3c:	920a      	str	r2, [sp, #40]	; 0x28
				if (expire_info && expire_info->found) {
    6f3e:	e6f9      	b.n	6d34 <ticker_worker+0x140>
				(ticker->ticks_periodic != 0U) &&
    6f40:	464a      	mov	r2, r9
				 !ticker->ticks_slot &&
    6f42:	2c00      	cmp	r4, #0
    6f44:	d1c2      	bne.n	6ecc <ticker_worker+0x2d8>
    6f46:	e7c8      	b.n	6eda <ticker_worker+0x2e6>
    6f48:	2c00      	cmp	r4, #0
    6f4a:	d1bf      	bne.n	6ecc <ticker_worker+0x2d8>
				(ticker->ticks_periodic != 0U) &&
    6f4c:	4622      	mov	r2, r4
    6f4e:	e7c6      	b.n	6ede <ticker_worker+0x2ea>
					  0U :
    6f50:	462f      	mov	r7, r5
    6f52:	e7e4      	b.n	6f1e <ticker_worker+0x32a>
			      (equal_priority && equal_force && next_is_older &&
    6f54:	2a00      	cmp	r2, #0
    6f56:	d0c8      	beq.n	6eea <ticker_worker+0x2f6>
    6f58:	4622      	mov	r2, r4
    6f5a:	f8dd 9014 	ldr.w	r9, [sp, #20]
    6f5e:	9d08      	ldr	r5, [sp, #32]
    6f60:	465c      	mov	r4, fp
    6f62:	f8dd b01c 	ldr.w	fp, [sp, #28]
    6f66:	e72a      	b.n	6dbe <ticker_worker+0x1ca>
				ticker->ack--;
    6f68:	78a0      	ldrb	r0, [r4, #2]
			must_expire_skip = 1U;
    6f6a:	2601      	movs	r6, #1
    6f6c:	e759      	b.n	6e22 <ticker_worker+0x22e>
    6f6e:	4622      	mov	r2, r4
    6f70:	f8dd 9014 	ldr.w	r9, [sp, #20]
    6f74:	9d08      	ldr	r5, [sp, #32]
    6f76:	465c      	mov	r4, fp
    6f78:	f8dd b01c 	ldr.w	fp, [sp, #28]
			if (ext_data &&
    6f7c:	2f00      	cmp	r7, #0
    6f7e:	f43f ae86 	beq.w	6c8e <ticker_worker+0x9a>
    6f82:	e723      	b.n	6dcc <ticker_worker+0x1d8>
    6f84:	0001b7dc 	.word	0x0001b7dc
    6f88:	0001b81c 	.word	0x0001b81c
    6f8c:	0001b844 	.word	0x0001b844
		if (ticker->timeout_func
    6f90:	68e7      	ldr	r7, [r4, #12]
		ticker->ack--;
    6f92:	3801      	subs	r0, #1
    6f94:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func
    6f96:	2f00      	cmp	r7, #0
    6f98:	f43f aee6 	beq.w	6d68 <ticker_worker+0x174>
					   ticks_expired -
    6f9c:	6963      	ldr	r3, [r4, #20]
			ticks_drift = 0U;
    6f9e:	9203      	str	r2, [sp, #12]
					   ticks_expired -
    6fa0:	f8d8 2014 	ldr.w	r2, [r8, #20]
    6fa4:	ebab 0303 	sub.w	r3, fp, r3
    6fa8:	4413      	add	r3, r2
			ticks_at_expire = (instance->ticks_current +
    6faa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticker->timeout_func(ticks_at_expire,
    6fae:	6a62      	ldr	r2, [r4, #36]	; 0x24
			ticks_at_expire = (instance->ticks_current +
    6fb0:	9304      	str	r3, [sp, #16]
				ticker->timeout_func(ticks_at_expire,
    6fb2:	e727      	b.n	6e04 <ticker_worker+0x210>

00006fb4 <ticker_job>:
	if (instance->worker_trigger) {
    6fb4:	7e83      	ldrb	r3, [r0, #26]
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	f040 834e 	bne.w	7658 <ticker_job+0x6a4>
{
    6fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    6fc0:	7e46      	ldrb	r6, [r0, #25]
{
    6fc2:	b08f      	sub	sp, #60	; 0x3c
    6fc4:	4682      	mov	sl, r0
	if (instance->job_guard) {
    6fc6:	2e00      	cmp	r6, #0
    6fc8:	d17c      	bne.n	70c4 <ticker_job+0x110>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    6fca:	7a83      	ldrb	r3, [r0, #10]
    6fcc:	7ac2      	ldrb	r2, [r0, #11]
	instance->job_guard = 1U;
    6fce:	2101      	movs	r1, #1
    6fd0:	7641      	strb	r1, [r0, #25]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    6fd2:	429a      	cmp	r2, r3
	ticks_previous = instance->ticks_current;
    6fd4:	6941      	ldr	r1, [r0, #20]
    6fd6:	9108      	str	r1, [sp, #32]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    6fd8:	f000 836a 	beq.w	76b0 <ticker_job+0x6fc>
	uint8_t idx = *ticks_elapsed_index + 1;
    6fdc:	3301      	adds	r3, #1
    6fde:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    6fe0:	2b02      	cmp	r3, #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];
    6fe2:	bf12      	itee	ne
    6fe4:	461a      	movne	r2, r3
    6fe6:	4632      	moveq	r2, r6
		idx = 0U;
    6fe8:	4633      	moveq	r3, r6
		ticks_elapsed =
    6fea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	*ticks_elapsed_index = idx;
    6fee:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
    6ff0:	68d2      	ldr	r2, [r2, #12]
		instance->ticks_current += ticks_elapsed;
    6ff2:	9b08      	ldr	r3, [sp, #32]
		ticks_elapsed =
    6ff4:	9206      	str	r2, [sp, #24]
		instance->ticks_current += ticks_elapsed;
    6ff6:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    6ff8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6ffc:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1U;
    6ffe:	2301      	movs	r3, #1
    7000:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_id_old_head = instance->ticker_id_head;
    7002:	f89a 3018 	ldrb.w	r3, [sl, #24]
    7006:	9309      	str	r3, [sp, #36]	; 0x24
	ticks_now = cntr_cnt_get();
    7008:	f00b fa76 	bl	124f8 <cntr_cnt_get>
	count_user = instance->count_user;
    700c:	f89a 2009 	ldrb.w	r2, [sl, #9]
	node = &instance->nodes[0];
    7010:	f8da 3000 	ldr.w	r3, [sl]
    7014:	9302      	str	r3, [sp, #8]
	while (count_user--) {
    7016:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
    7018:	f8da 5004 	ldr.w	r5, [sl, #4]
	ticks_now = cntr_cnt_get();
    701c:	9005      	str	r0, [sp, #20]
	while (count_user--) {
    701e:	b2db      	uxtb	r3, r3
    7020:	2a00      	cmp	r2, #0
    7022:	f000 8444 	beq.w	78ae <ticker_job+0x8fa>
    7026:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
	insert_head = TICKER_NULL;
    702a:	23ff      	movs	r3, #255	; 0xff
    702c:	9304      	str	r3, [sp, #16]
    702e:	960d      	str	r6, [sp, #52]	; 0x34
    7030:	f8cd a004 	str.w	sl, [sp, #4]
		user_ops = &user->user_op[0];
    7034:	f8d8 b004 	ldr.w	fp, [r8, #4]
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7038:	f04f 0a00 	mov.w	sl, #0
    703c:	462f      	mov	r7, r5
		while (user->middle != user->last) {
    703e:	f898 0003 	ldrb.w	r0, [r8, #3]
    7042:	f898 9002 	ldrb.w	r9, [r8, #2]
			user_op = &user_ops[user->middle];
    7046:	fa0f f489 	sxth.w	r4, r9
    704a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
			middle = user->middle + 1;
    704e:	f109 0301 	add.w	r3, r9, #1
		while (user->middle != user->last) {
    7052:	4548      	cmp	r0, r9
			user_op = &user_ops[user->middle];
    7054:	ea4f 1604 	mov.w	r6, r4, lsl #4
			middle = user->middle + 1;
    7058:	b2db      	uxtb	r3, r3
			user_op = &user_ops[user->middle];
    705a:	eb0b 1404 	add.w	r4, fp, r4, lsl #4
		while (user->middle != user->last) {
    705e:	f000 8121 	beq.w	72a4 <ticker_job+0x2f0>
			if (middle == user->count_user_op) {
    7062:	f898 2000 	ldrb.w	r2, [r8]
				middle = 0U;
    7066:	429a      	cmp	r2, r3
    7068:	bf08      	it	eq
    706a:	2300      	moveq	r3, #0
			user->middle = middle;
    706c:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    7070:	f81b 2006 	ldrb.w	r2, [fp, r6]
			ticker = &node[user_op->id];
    7074:	7861      	ldrb	r1, [r4, #1]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    7076:	2a04      	cmp	r2, #4
    7078:	d94d      	bls.n	7116 <ticker_job+0x162>
			ticker = &node[user_op->id];
    707a:	9802      	ldr	r0, [sp, #8]
    707c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    7080:	eb00 1503 	add.w	r5, r0, r3, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    7084:	2a08      	cmp	r2, #8
			ticker = &node[user_op->id];
    7086:	ea4f 1303 	mov.w	r3, r3, lsl #4
    708a:	9303      	str	r3, [sp, #12]
			state = (ticker->req - ticker->ack) & 0xff;
    708c:	78a8      	ldrb	r0, [r5, #2]
    708e:	786b      	ldrb	r3, [r5, #1]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    7090:	d835      	bhi.n	70fe <ticker_job+0x14a>
			state = (ticker->req - ticker->ack) & 0xff;
    7092:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    7094:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7098:	d11e      	bne.n	70d8 <ticker_job+0x124>
			    ((state == 0U) &&
    709a:	2a06      	cmp	r2, #6
    709c:	d12f      	bne.n	70fe <ticker_job+0x14a>
		if (instance->ticker_id_slot_previous == user_op->id) {
    709e:	9b01      	ldr	r3, [sp, #4]
    70a0:	7edb      	ldrb	r3, [r3, #27]
    70a2:	428b      	cmp	r3, r1
    70a4:	d054      	beq.n	7150 <ticker_job+0x19c>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    70a6:	f80b a006 	strb.w	sl, [fp, r6]
	if (user_op->fp_op_func) {
    70aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	user_op->status = status;
    70ac:	f884 a002 	strb.w	sl, [r4, #2]
	if (user_op->fp_op_func) {
    70b0:	2b00      	cmp	r3, #0
    70b2:	d0c4      	beq.n	703e <ticker_job+0x8a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    70b4:	2000      	movs	r0, #0
    70b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    70b8:	4798      	blx	r3
		while (user->middle != user->last) {
    70ba:	f898 0003 	ldrb.w	r0, [r8, #3]
    70be:	f898 9002 	ldrb.w	r9, [r8, #2]
    70c2:	e7c0      	b.n	7046 <ticker_job+0x92>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    70c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
    70c6:	2104      	movs	r1, #4
    70c8:	4603      	mov	r3, r0
    70ca:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    70cc:	2004      	movs	r0, #4
    70ce:	46a4      	mov	ip, r4
}
    70d0:	b00f      	add	sp, #60	; 0x3c
    70d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    70d6:	4760      	bx	ip
			     (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS)) ||
    70d8:	2a05      	cmp	r2, #5
    70da:	d130      	bne.n	713e <ticker_job+0x18a>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    70dc:	6862      	ldr	r2, [r4, #4]
    70de:	b9e2      	cbnz	r2, 711a <ticker_job+0x166>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    70e0:	68a2      	ldr	r2, [r4, #8]
    70e2:	b9d2      	cbnz	r2, 711a <ticker_job+0x166>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    70e4:	68e2      	ldr	r2, [r4, #12]
    70e6:	b9c2      	cbnz	r2, 711a <ticker_job+0x166>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    70e8:	6922      	ldr	r2, [r4, #16]
    70ea:	b9b2      	cbnz	r2, 711a <ticker_job+0x166>
			     (user_op->params.update.ticks_slot_minus == 0U) &&
    70ec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    70ee:	b112      	cbz	r2, 70f6 <ticker_job+0x142>
			     (!ticker->ext_data ||
    70f0:	7e22      	ldrb	r2, [r4, #24]
    70f2:	428a      	cmp	r2, r1
    70f4:	d111      	bne.n	711a <ticker_job+0x166>
			     (user_op->params.update.lazy == 0U) &&
    70f6:	6962      	ldr	r2, [r4, #20]
    70f8:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    70fc:	d10d      	bne.n	711a <ticker_job+0x166>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    70fe:	f80b a006 	strb.w	sl, [fp, r6]
	user_op->status = status;
    7102:	f04f 0301 	mov.w	r3, #1
    7106:	70a3      	strb	r3, [r4, #2]
	if (user_op->fp_op_func) {
    7108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    710a:	2b00      	cmp	r3, #0
    710c:	d097      	beq.n	703e <ticker_job+0x8a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    710e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7110:	2001      	movs	r0, #1
    7112:	4798      	blx	r3
    7114:	e793      	b.n	703e <ticker_job+0x8a>
    7116:	4699      	mov	r9, r3
    7118:	e795      	b.n	7046 <ticker_job+0x92>
			if ((state == 1U) ||
    711a:	2b01      	cmp	r3, #1
    711c:	d01a      	beq.n	7154 <ticker_job+0x1a0>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    711e:	9b01      	ldr	r3, [sp, #4]
    7120:	2104      	movs	r1, #4
    7122:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    7124:	463d      	mov	r5, r7
    7126:	2201      	movs	r2, #1
    7128:	4608      	mov	r0, r1
    712a:	47a0      	blx	r4
	while (count_user--) {
    712c:	45a8      	cmp	r8, r5
				user->middle = prev;
    712e:	f888 9002 	strb.w	r9, [r8, #2]
	while (count_user--) {
    7132:	f1a8 0308 	sub.w	r3, r8, #8
    7136:	f000 80bb 	beq.w	72b0 <ticker_job+0x2fc>
    713a:	4698      	mov	r8, r3
    713c:	e77a      	b.n	7034 <ticker_job+0x80>
			if ((state == 1U) ||
    713e:	2b01      	cmp	r3, #1
    7140:	f000 8193 	beq.w	746a <ticker_job+0x4b6>
    7144:	2a06      	cmp	r2, #6
    7146:	d1ea      	bne.n	711e <ticker_job+0x16a>
		if (instance->ticker_id_slot_previous == user_op->id) {
    7148:	9b01      	ldr	r3, [sp, #4]
    714a:	7edb      	ldrb	r3, [r3, #27]
    714c:	428b      	cmp	r3, r1
    714e:	d1aa      	bne.n	70a6 <ticker_job+0xf2>
				ticks_at_yield =
    7150:	6861      	ldr	r1, [r4, #4]
    7152:	e1b1      	b.n	74b8 <ticker_job+0x504>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7154:	f8dd 9004 	ldr.w	r9, [sp, #4]
    7158:	4648      	mov	r0, r9
    715a:	f7ff fbd5 	bl	6908 <ticker_dequeue>
    715e:	60a8      	str	r0, [r5, #8]
		ticker_job_node_update(instance, ticker, user_op, ticks_now,
    7160:	f8d9 1014 	ldr.w	r1, [r9, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    7164:	9b05      	ldr	r3, [sp, #20]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    7166:	9a06      	ldr	r2, [sp, #24]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    7168:	1a5b      	subs	r3, r3, r1
    716a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    716e:	4413      	add	r3, r2
	if (ticks_to_expire > ticks_elapsed) {
    7170:	4298      	cmp	r0, r3
    7172:	f240 81b9 	bls.w	74e8 <ticker_job+0x534>
		ticks_to_expire -= ticks_elapsed;
    7176:	1ac0      	subs	r0, r0, r3
	if ((ticker->ticks_periodic != 0U) &&
    7178:	686b      	ldr	r3, [r5, #4]
    717a:	2b00      	cmp	r3, #0
    717c:	d052      	beq.n	7224 <ticker_job+0x270>
	    (user_op->params.update.lazy != 0U)) {
    717e:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
    7180:	2b00      	cmp	r3, #0
    7182:	d04f      	beq.n	7224 <ticker_job+0x270>
		user_op->params.update.lazy--;
    7184:	3b01      	subs	r3, #1
    7186:	b29a      	uxth	r2, r3
    7188:	82a2      	strh	r2, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    718a:	f8d5 c004 	ldr.w	ip, [r5, #4]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    718e:	8beb      	ldrh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7190:	4584      	cmp	ip, r0
    7192:	d223      	bcs.n	71dc <ticker_job+0x228>
			ticks_to_expire += ticker->ticks_periodic +
    7194:	f10c 0901 	add.w	r9, ip, #1
    7198:	9707      	str	r7, [sp, #28]
    719a:	910a      	str	r1, [sp, #40]	; 0x28
    719c:	e01a      	b.n	71d4 <ticker_job+0x220>
	if ((ticker->remainder_current >= BIT(31)) ||
    719e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    71a0:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 729c <ticker_job+0x2e8>
    71a4:	493e      	ldr	r1, [pc, #248]	; (72a0 <ticker_job+0x2ec>)
    71a6:	4496      	add	lr, r2
    71a8:	458e      	cmp	lr, r1
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    71aa:	bf84      	itt	hi
    71ac:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    71b0:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
    71b4:	464f      	mov	r7, r9
	ticker->remainder_current -= ticker->remainder_periodic;
    71b6:	6a29      	ldr	r1, [r5, #32]
    71b8:	bf94      	ite	ls
    71ba:	4667      	movls	r7, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    71bc:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
			ticker->lazy_current--;
    71c0:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
    71c2:	1bc0      	subs	r0, r0, r7
	ticker->remainder_current -= ticker->remainder_periodic;
    71c4:	1a52      	subs	r2, r2, r1
			ticker->lazy_current--;
    71c6:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    71c8:	4584      	cmp	ip, r0
	ticker->remainder_current -= ticker->remainder_periodic;
    71ca:	626a      	str	r2, [r5, #36]	; 0x24
			ticker->lazy_current--;
    71cc:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    71ce:	f080 81ea 	bcs.w	75a6 <ticker_job+0x5f2>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    71d2:	8aa2      	ldrh	r2, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    71d4:	429a      	cmp	r2, r3
    71d6:	d3e2      	bcc.n	719e <ticker_job+0x1ea>
    71d8:	9f07      	ldr	r7, [sp, #28]
    71da:	990a      	ldr	r1, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
    71dc:	4293      	cmp	r3, r2
    71de:	d220      	bcs.n	7222 <ticker_job+0x26e>
			ticks_to_expire += ticker->ticks_periodic +
    71e0:	e9cd 710a 	strd	r7, r1, [sp, #40]	; 0x28
    71e4:	f10c 0201 	add.w	r2, ip, #1
	return ticker_add_to_remainder(&ticker->remainder_current, ticker->remainder_periodic);
    71e8:	f8d5 e020 	ldr.w	lr, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
    71ec:	9207      	str	r2, [sp, #28]
	*remainder += to_add;
    71ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if ((*remainder < BIT(31)) &&
    71f0:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 729c <ticker_job+0x2e8>
    71f4:	492a      	ldr	r1, [pc, #168]	; (72a0 <ticker_job+0x2ec>)
	*remainder += to_add;
    71f6:	4472      	add	r2, lr
	if ((*remainder < BIT(31)) &&
    71f8:	4491      	add	r9, r2
    71fa:	4589      	cmp	r9, r1
    71fc:	4667      	mov	r7, ip
    71fe:	d806      	bhi.n	720e <ticker_job+0x25a>
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    7200:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
    7204:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
    7208:	9f07      	ldr	r7, [sp, #28]
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    720a:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
			ticker->lazy_current++;
    720e:	3301      	adds	r3, #1
    7210:	b29b      	uxth	r3, r3
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    7212:	626a      	str	r2, [r5, #36]	; 0x24
			ticker->lazy_current++;
    7214:	83eb      	strh	r3, [r5, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7216:	8aa2      	ldrh	r2, [r4, #20]
    7218:	429a      	cmp	r2, r3
			ticks_to_expire += ticker->ticks_periodic +
    721a:	4438      	add	r0, r7
		while (ticker->lazy_current < user_op->params.update.lazy) {
    721c:	d8e7      	bhi.n	71ee <ticker_job+0x23a>
    721e:	e9dd 710a 	ldrd	r7, r1, [sp, #40]	; 0x28
		ticker->lazy_periodic = user_op->params.update.lazy;
    7222:	83aa      	strh	r2, [r5, #28]
	ticker->ticks_to_expire = ticks_to_expire +
    7224:	6863      	ldr	r3, [r4, #4]
    7226:	4403      	add	r3, r0
    7228:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
    722a:	68a2      	ldr	r2, [r4, #8]
    722c:	696b      	ldr	r3, [r5, #20]
	struct ticker_ext *ext_data = ticker->ext_data;
    722e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
    7230:	4413      	add	r3, r2
    7232:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    7234:	b128      	cbz	r0, 7242 <ticker_job+0x28e>
    7236:	6843      	ldr	r3, [r0, #4]
    7238:	b11b      	cbz	r3, 7242 <ticker_job+0x28e>
			user_op->params.update.ticks_drift_plus -
    723a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    723e:	1a9b      	subs	r3, r3, r2
		ext_data->ticks_drift =
    7240:	6083      	str	r3, [r0, #8]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    7242:	9a05      	ldr	r2, [sp, #20]
    7244:	4628      	mov	r0, r5
    7246:	f7ff fb99 	bl	697c <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    724a:	68e2      	ldr	r2, [r4, #12]
    724c:	69ab      	ldr	r3, [r5, #24]
    724e:	4413      	add	r3, r2
    7250:	61ab      	str	r3, [r5, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    7252:	6922      	ldr	r2, [r4, #16]
    7254:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    7256:	bf8c      	ite	hi
    7258:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    725a:	2300      	movls	r3, #0
    725c:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    725e:	7da3      	ldrb	r3, [r4, #22]
    7260:	b103      	cbz	r3, 7264 <ticker_job+0x2b0>
		ticker->force = user_op->params.update.force;
    7262:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
    7264:	7de3      	ldrb	r3, [r4, #23]
    7266:	b113      	cbz	r3, 726e <ticker_job+0x2ba>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    7268:	3b01      	subs	r3, #1
    726a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	if (ticker->ext_data && user_op->params.update.expire_info_id != user_op->id) {
    726e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7270:	b14b      	cbz	r3, 7286 <ticker_job+0x2d2>
    7272:	7e22      	ldrb	r2, [r4, #24]
    7274:	7861      	ldrb	r1, [r4, #1]
    7276:	4291      	cmp	r1, r2
    7278:	d005      	beq.n	7286 <ticker_job+0x2d2>
		if (user_op->params.update.expire_info_id != TICKER_NULL &&
    727a:	2aff      	cmp	r2, #255	; 0xff
		    !ticker->ext_data->other_expire_info) {
    727c:	6919      	ldr	r1, [r3, #16]
		if (user_op->params.update.expire_info_id != TICKER_NULL &&
    727e:	f000 8139 	beq.w	74f4 <ticker_job+0x540>
    7282:	b131      	cbz	r1, 7292 <ticker_job+0x2de>
		ticker->ext_data->expire_info_id = user_op->params.update.expire_info_id;
    7284:	735a      	strb	r2, [r3, #13]
	ticker->next = *insert_head;
    7286:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    728a:	9b04      	ldr	r3, [sp, #16]
    728c:	5453      	strb	r3, [r2, r1]
	*insert_head = user_op->id;
    728e:	7863      	ldrb	r3, [r4, #1]
    7290:	9304      	str	r3, [sp, #16]
		ticker->req++;
    7292:	786b      	ldrb	r3, [r5, #1]
    7294:	3301      	adds	r3, #1
    7296:	706b      	strb	r3, [r5, #1]
    7298:	e705      	b.n	70a6 <ticker_job+0xf2>
    729a:	bf00      	nop
    729c:	ff172b5a 	.word	0xff172b5a
    72a0:	7f172b59 	.word	0x7f172b59
    72a4:	463d      	mov	r5, r7
	while (count_user--) {
    72a6:	45a8      	cmp	r8, r5
    72a8:	f1a8 0308 	sub.w	r3, r8, #8
    72ac:	f47f af45 	bne.w	713a <ticker_job+0x186>
    72b0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    72b2:	f8dd a004 	ldr.w	sl, [sp, #4]
	if (instance->ticker_id_head != ticker_id_old_head) {
    72b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    72b8:	f89a b018 	ldrb.w	fp, [sl, #24]
    72bc:	ebbb 0803 	subs.w	r8, fp, r3
	if (flag_elapsed) {
    72c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (instance->ticker_id_head != ticker_id_old_head) {
    72c2:	bf18      	it	ne
    72c4:	f04f 0801 	movne.w	r8, #1
	if (flag_elapsed) {
    72c8:	2b00      	cmp	r3, #0
    72ca:	f000 8184 	beq.w	75d6 <ticker_job+0x622>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    72ce:	9b05      	ldr	r3, [sp, #20]
    72d0:	9a08      	ldr	r2, [sp, #32]
    72d2:	1a9b      	subs	r3, r3, r2
    72d4:	f023 497f 	bic.w	r9, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    72d8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
    72dc:	f8da 3000 	ldr.w	r3, [sl]
    72e0:	9301      	str	r3, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
    72e2:	d04f      	beq.n	7384 <ticker_job+0x3d0>
	ticks_expired = 0U;
    72e4:	2500      	movs	r5, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    72e6:	9f06      	ldr	r7, [sp, #24]
			instance->ticks_slot_previous = 0U;
    72e8:	9605      	str	r6, [sp, #20]
    72ea:	f8cd 801c 	str.w	r8, [sp, #28]
    72ee:	462e      	mov	r6, r5
		ticker = &node[id_expired];
    72f0:	9a01      	ldr	r2, [sp, #4]
    72f2:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    72f6:	eb02 1403 	add.w	r4, r2, r3, lsl #4
    72fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    72fe:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7300:	42bb      	cmp	r3, r7
    7302:	f200 82ab 	bhi.w	785c <ticker_job+0x8a8>
		state = (ticker->req - ticker->ack) & 0xff;
    7306:	78a1      	ldrb	r1, [r4, #2]
    7308:	7862      	ldrb	r2, [r4, #1]
		skip_collision = (ticker->lazy_current != 0U);
    730a:	8be0      	ldrh	r0, [r4, #30]
		state = (ticker->req - ticker->ack) & 0xff;
    730c:	1a52      	subs	r2, r2, r1
		if (instance->ticks_slot_previous > ticks_to_expire) {
    730e:	f8da 101c 	ldr.w	r1, [sl, #28]
    7312:	428b      	cmp	r3, r1
		ticks_elapsed -= ticks_to_expire;
    7314:	eba7 0703 	sub.w	r7, r7, r3
		ticks_expired += ticks_to_expire;
    7318:	441e      	add	r6, r3
		ticks_latency -= ticks_to_expire;
    731a:	eba9 0903 	sub.w	r9, r9, r3
			instance->ticks_slot_previous -= ticks_to_expire;
    731e:	bf31      	iteee	cc
    7320:	1ac9      	subcc	r1, r1, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7322:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
			instance->ticks_slot_previous = 0U;
    7326:	2100      	movcs	r1, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
    7328:	f88a 301b 	strbcs.w	r3, [sl, #27]
    732c:	f8ca 101c 	str.w	r1, [sl, #28]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    7330:	69a3      	ldr	r3, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    7332:	b2d2      	uxtb	r2, r2
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    7334:	b113      	cbz	r3, 733c <ticker_job+0x388>
    7336:	2a02      	cmp	r2, #2
    7338:	f000 8139 	beq.w	75ae <ticker_job+0x5fa>
		ticker->ticks_to_expire = 0U;
    733c:	2300      	movs	r3, #0
    733e:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
    7340:	9b01      	ldr	r3, [sp, #4]
    7342:	f813 3008 	ldrb.w	r3, [r3, r8]
    7346:	f88a 3018 	strb.w	r3, [sl, #24]
		if ((ticker->ticks_periodic != 0U) ||
    734a:	6861      	ldr	r1, [r4, #4]
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    734c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
    734e:	2900      	cmp	r1, #0
    7350:	f040 80f3 	bne.w	753a <ticker_job+0x586>
    7354:	b11b      	cbz	r3, 735e <ticker_job+0x3aa>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    7356:	7b1b      	ldrb	r3, [r3, #12]
    7358:	2b01      	cmp	r3, #1
    735a:	f000 80d3 	beq.w	7504 <ticker_job+0x550>
			if (state && ((state == 1U) || skip_collision) &&
    735e:	b13a      	cbz	r2, 7370 <ticker_job+0x3bc>
    7360:	2a01      	cmp	r2, #1
    7362:	d000      	beq.n	7366 <ticker_job+0x3b2>
    7364:	b120      	cbz	r0, 7370 <ticker_job+0x3bc>
			    ticker->fp_op_func) {
    7366:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    7368:	b113      	cbz	r3, 7370 <ticker_job+0x3bc>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    736a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    736c:	2001      	movs	r0, #1
    736e:	4798      	blx	r3
			ticker->req = ticker->ack;
    7370:	78a3      	ldrb	r3, [r4, #2]
    7372:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    7374:	f89a b018 	ldrb.w	fp, [sl, #24]
    7378:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    737c:	d1b8      	bne.n	72f0 <ticker_job+0x33c>
    737e:	9e05      	ldr	r6, [sp, #20]
    7380:	f8dd 801c 	ldr.w	r8, [sp, #28]
			flag_compare_update = 1U;
    7384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7386:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
    7388:	9904      	ldr	r1, [sp, #16]
    738a:	4650      	mov	r0, sl
			flag_compare_update = 1U;
    738c:	455a      	cmp	r2, fp
    738e:	bf18      	it	ne
    7390:	4698      	movne	r8, r3
		ticker_job_list_insert(instance, insert_head);
    7392:	f7ff fb17 	bl	69c4 <ticker_job_list_insert>
	nodes = &instance->nodes[0];
    7396:	f8da b000 	ldr.w	fp, [sl]
	while (rescheduling) {
    739a:	4630      	mov	r0, r6
    739c:	4657      	mov	r7, sl
    739e:	4646      	mov	r6, r8
		ticker_id_head = instance->ticker_id_head;
    73a0:	7e3a      	ldrb	r2, [r7, #24]
		while (ticker_id_head != TICKER_NULL) {
    73a2:	2aff      	cmp	r2, #255	; 0xff
    73a4:	f000 829e 	beq.w	78e4 <ticker_job+0x930>
		ticker_id_head = instance->ticker_id_head;
    73a8:	4611      	mov	r1, r2
			ticker = &nodes[ticker_id_head];
    73aa:	b20b      	sxth	r3, r1
    73ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    73b0:	eb0b 1503 	add.w	r5, fp, r3, lsl #4
    73b4:	011b      	lsls	r3, r3, #4
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    73b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
    73b8:	b12c      	cbz	r4, 73c6 <ticker_job+0x412>
    73ba:	f894 c00c 	ldrb.w	ip, [r4, #12]
    73be:	f1bc 0f01 	cmp.w	ip, #1
    73c2:	f000 8183 	beq.w	76cc <ticker_job+0x718>
			ticker_id_head = ticker->next;
    73c6:	f81b 1003 	ldrb.w	r1, [fp, r3]
		while (ticker_id_head != TICKER_NULL) {
    73ca:	29ff      	cmp	r1, #255	; 0xff
    73cc:	d1ed      	bne.n	73aa <ticker_job+0x3f6>
	if (instance->expire_infos_outdated) {
    73ce:	f897 3020 	ldrb.w	r3, [r7, #32]
    73d2:	46b0      	mov	r8, r6
    73d4:	46ba      	mov	sl, r7
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    73d6:	2800      	cmp	r0, #0
    73d8:	f000 8105 	beq.w	75e6 <ticker_job+0x632>
	if (instance->ticker_id_head != ticker_id_old_head) {
    73dc:	9909      	ldr	r1, [sp, #36]	; 0x24
    73de:	4291      	cmp	r1, r2
    73e0:	f000 8268 	beq.w	78b4 <ticker_job+0x900>
	if (instance->expire_infos_outdated) {
    73e4:	2b00      	cmp	r3, #0
    73e6:	f040 825e 	bne.w	78a6 <ticker_job+0x8f2>
	if (ticker_id_old_head == TICKER_NULL) {
    73ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    73ec:	2bff      	cmp	r3, #255	; 0xff
    73ee:	f000 826c 	beq.w	78ca <ticker_job+0x916>
	ticks_to_expire = ticker->ticks_to_expire;
    73f2:	f8da 3000 	ldr.w	r3, [sl]
	ticker = &instance->nodes[instance->ticker_id_head];
    73f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    73fa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    73fe:	689e      	ldr	r6, [r3, #8]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) && !ticks_to_expire) {
    7400:	2e00      	cmp	r6, #0
    7402:	f000 823d 	beq.w	7880 <ticker_job+0x8cc>
	ctr_curr = cntr_cnt_get();
    7406:	f00b f877 	bl	124f8 <cntr_cnt_get>
		LL_ASSERT(i);
    740a:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 76b8 <ticker_job+0x704>
    740e:	4fab      	ldr	r7, [pc, #684]	; (76bc <ticker_job+0x708>)
	ctr_curr = cntr_cnt_get();
    7410:	4683      	mov	fp, r0
	i = 10U;
    7412:	250a      	movs	r5, #10
		cc = instance->ticks_current;
    7414:	f8da 3014 	ldr.w	r3, [sl, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    7418:	ebab 0203 	sub.w	r2, fp, r3
    741c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    7420:	4296      	cmp	r6, r2
		i--;
    7422:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		ticks_elapsed = ticks_diff + HAL_TICKER_CNTR_CMP_OFFSET_MIN +
    7426:	f102 0203 	add.w	r2, r2, #3
		if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    742a:	f240 824a 	bls.w	78c2 <ticker_job+0x90e>
		cc += MAX(ticks_elapsed, ticks_to_expire);
    742e:	42b2      	cmp	r2, r6
    7430:	bf2c      	ite	cs
    7432:	189b      	addcs	r3, r3, r2
    7434:	199b      	addcc	r3, r3, r6
		cc &= HAL_TICKER_CNTR_MASK;
    7436:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    743a:	4620      	mov	r0, r4
    743c:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    7440:	4798      	blx	r3
		ctr_curr = cntr_cnt_get();
    7442:	f00b f859 	bl	124f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    7446:	eba0 020b 	sub.w	r2, r0, fp
    744a:	eba4 030b 	sub.w	r3, r4, fp
    744e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_curr, ctr_prev) +
    7452:	3203      	adds	r2, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    7454:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
    7458:	429a      	cmp	r2, r3
		ctr_curr = cntr_cnt_get();
    745a:	4681      	mov	r9, r0
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
    745c:	f240 80f2 	bls.w	7644 <ticker_job+0x690>
		LL_ASSERT(i);
    7460:	2d00      	cmp	r5, #0
    7462:	f000 80e0 	beq.w	7626 <ticker_job+0x672>
		ctr_curr = cntr_cnt_get();
    7466:	46cb      	mov	fp, r9
    7468:	e7d4      	b.n	7414 <ticker_job+0x460>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    746a:	2a06      	cmp	r2, #6
    746c:	f43f ae17 	beq.w	709e <ticker_job+0xea>
			ticker->ticks_to_expire = ticker_dequeue(instance,
    7470:	9801      	ldr	r0, [sp, #4]
    7472:	f7ff fa49 	bl	6908 <ticker_dequeue>
			if (ticker->ext_data && ticker->ext_data->expire_info_id != TICKER_NULL) {
    7476:	6aab      	ldr	r3, [r5, #40]	; 0x28
			ticker->ticks_to_expire = ticker_dequeue(instance,
    7478:	60a8      	str	r0, [r5, #8]
			if (ticker->ext_data && ticker->ext_data->expire_info_id != TICKER_NULL) {
    747a:	b123      	cbz	r3, 7486 <ticker_job+0x4d2>
    747c:	7b5a      	ldrb	r2, [r3, #13]
    747e:	2aff      	cmp	r2, #255	; 0xff
				ticker->ext_data->other_expire_info = NULL;
    7480:	bf1c      	itt	ne
    7482:	2200      	movne	r2, #0
    7484:	611a      	strne	r2, [r3, #16]
			ticker->req = ticker->ack;
    7486:	78ab      	ldrb	r3, [r5, #2]
    7488:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    748a:	9b01      	ldr	r3, [sp, #4]
    748c:	7eda      	ldrb	r2, [r3, #27]
    748e:	7863      	ldrb	r3, [r4, #1]
    7490:	429a      	cmp	r2, r3
    7492:	f47f ae08 	bne.w	70a6 <ticker_job+0xf2>
			if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    7496:	f81b 3006 	ldrb.w	r3, [fp, r6]
    749a:	2b06      	cmp	r3, #6
    749c:	f43f ae58 	beq.w	7150 <ticker_job+0x19c>
				instance->ticker_id_slot_previous = TICKER_NULL;
    74a0:	9a01      	ldr	r2, [sp, #4]
    74a2:	23ff      	movs	r3, #255	; 0xff
    74a4:	76d3      	strb	r3, [r2, #27]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
    74a6:	f81b 3006 	ldrb.w	r3, [fp, r6]
    74aa:	2b06      	cmp	r3, #6
    74ac:	f43f ae50 	beq.w	7150 <ticker_job+0x19c>
    74b0:	2b08      	cmp	r3, #8
    74b2:	f43f ae4d 	beq.w	7150 <ticker_job+0x19c>
				ticks_at_yield = ticks_now;
    74b6:	9905      	ldr	r1, [sp, #20]
			ticks_current = instance->ticks_current;
    74b8:	9b01      	ldr	r3, [sp, #4]
    74ba:	695a      	ldr	r2, [r3, #20]
			if (!((ticks_at_yield - ticks_current) &
    74bc:	1a8b      	subs	r3, r1, r2
    74be:	021d      	lsls	r5, r3, #8
    74c0:	d409      	bmi.n	74d6 <ticker_job+0x522>
				ticks_used = ticks_elapsed +
    74c2:	9a06      	ldr	r2, [sp, #24]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    74c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    74c8:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    74ca:	9901      	ldr	r1, [sp, #4]
    74cc:	69ca      	ldr	r2, [r1, #28]
    74ce:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    74d0:	bf88      	it	hi
    74d2:	61cb      	strhi	r3, [r1, #28]
    74d4:	e5e7      	b.n	70a6 <ticker_job+0xf2>
				if (ticks_elapsed > ticks_used) {
    74d6:	9b06      	ldr	r3, [sp, #24]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    74d8:	1a52      	subs	r2, r2, r1
    74da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    74de:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
    74e0:	bf8c      	ite	hi
    74e2:	1a9b      	subhi	r3, r3, r2
					ticks_used = 0;
    74e4:	2300      	movls	r3, #0
    74e6:	e7f0      	b.n	74ca <ticker_job+0x516>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    74e8:	696a      	ldr	r2, [r5, #20]
    74ea:	4413      	add	r3, r2
    74ec:	1a1b      	subs	r3, r3, r0
    74ee:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
    74f0:	2000      	movs	r0, #0
    74f2:	e641      	b.n	7178 <ticker_job+0x1c4>
		} else if (user_op->params.update.expire_info_id == TICKER_NULL &&
    74f4:	2900      	cmp	r1, #0
    74f6:	f43f aec5 	beq.w	7284 <ticker_job+0x2d0>
			ticker->ext_data->other_expire_info = NULL;
    74fa:	2200      	movs	r2, #0
    74fc:	611a      	str	r2, [r3, #16]
		ticker->ext_data->expire_info_id = user_op->params.update.expire_info_id;
    74fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7500:	7e22      	ldrb	r2, [r4, #24]
    7502:	e6bf      	b.n	7284 <ticker_job+0x2d0>
				ticker->req = ticker->ack;
    7504:	78a3      	ldrb	r3, [r4, #2]
				ticker->ticks_to_expire = ticks_elapsed;
    7506:	60a7      	str	r7, [r4, #8]
				ticker->req = ticker->ack;
    7508:	7063      	strb	r3, [r4, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    750a:	9b08      	ldr	r3, [sp, #32]
    750c:	f8da 1014 	ldr.w	r1, [sl, #20]
    7510:	199a      	adds	r2, r3, r6
    7512:	4620      	mov	r0, r4
    7514:	f7ff fa32 	bl	697c <ticks_to_expire_prep>
			ticker->next = *insert_head;
    7518:	9a01      	ldr	r2, [sp, #4]
    751a:	9b04      	ldr	r3, [sp, #16]
    751c:	f802 3008 	strb.w	r3, [r2, r8]
			ticker->req++;
    7520:	7863      	ldrb	r3, [r4, #1]
    7522:	f8cd b010 	str.w	fp, [sp, #16]
    7526:	3301      	adds	r3, #1
    7528:	b2db      	uxtb	r3, r3
			ticker->req = ticker->ack;
    752a:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    752c:	f89a b018 	ldrb.w	fp, [sl, #24]
    7530:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    7534:	f47f aedc 	bne.w	72f0 <ticker_job+0x33c>
    7538:	e721      	b.n	737e <ticker_job+0x3ca>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    753a:	b113      	cbz	r3, 7542 <ticker_job+0x58e>
    753c:	7b1b      	ldrb	r3, [r3, #12]
    753e:	2b01      	cmp	r3, #1
    7540:	d0e0      	beq.n	7504 <ticker_job+0x550>
				if (!ticker->lazy_current) {
    7542:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    7546:	f1bc 0f00 	cmp.w	ip, #0
    754a:	d13f      	bne.n	75cc <ticker_job+0x618>
					lazy_periodic = ticker->lazy_periodic;
    754c:	f8b4 c01c 	ldrh.w	ip, [r4, #28]
				while (count--) {
    7550:	46e6      	mov	lr, ip
    7552:	1c48      	adds	r0, r1, #1
    7554:	e9cd 0402 	strd	r0, r4, [sp, #8]
    7558:	e9d4 5308 	ldrd	r5, r3, [r4, #32]
				ticks_to_expire = 0U;
    755c:	2200      	movs	r2, #0
    755e:	4670      	mov	r0, lr
    7560:	e004      	b.n	756c <ticker_job+0x5b8>
				while (count--) {
    7562:	3801      	subs	r0, #1
	if ((*remainder < BIT(31)) &&
    7564:	468e      	mov	lr, r1
				while (count--) {
    7566:	1c44      	adds	r4, r0, #1
					ticks_to_expire +=
    7568:	4472      	add	r2, lr
				while (count--) {
    756a:	d012      	beq.n	7592 <ticker_job+0x5de>
	if ((*remainder < BIT(31)) &&
    756c:	f8df e150 	ldr.w	lr, [pc, #336]	; 76c0 <ticker_job+0x70c>
    7570:	4c54      	ldr	r4, [pc, #336]	; (76c4 <ticker_job+0x710>)
	*remainder += to_add;
    7572:	442b      	add	r3, r5
	if ((*remainder < BIT(31)) &&
    7574:	449e      	add	lr, r3
    7576:	45a6      	cmp	lr, r4
    7578:	d8f3      	bhi.n	7562 <ticker_job+0x5ae>
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    757a:	f8dd e008 	ldr.w	lr, [sp, #8]
    757e:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
    7582:	3801      	subs	r0, #1
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    7584:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
				while (count--) {
    7588:	1c44      	adds	r4, r0, #1
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    758a:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
					ticks_to_expire +=
    758e:	4472      	add	r2, lr
				while (count--) {
    7590:	d1ec      	bne.n	756c <ticker_job+0x5b8>
    7592:	9c03      	ldr	r4, [sp, #12]
				} else if (!ticker->must_expire) {
    7594:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    7598:	6263      	str	r3, [r4, #36]	; 0x24
    759a:	2800      	cmp	r0, #0
    759c:	d05d      	beq.n	765a <ticker_job+0x6a6>
				ticker->ticks_to_expire = ticks_to_expire;
    759e:	60a2      	str	r2, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    75a0:	f8a4 c01e 	strh.w	ip, [r4, #30]
    75a4:	e7b1      	b.n	750a <ticker_job+0x556>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    75a6:	9f07      	ldr	r7, [sp, #28]
    75a8:	990a      	ldr	r1, [sp, #40]	; 0x28
    75aa:	8aa2      	ldrh	r2, [r4, #20]
    75ac:	e616      	b.n	71dc <ticker_job+0x228>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    75ae:	2800      	cmp	r0, #0
    75b0:	f47f aec4 	bne.w	733c <ticker_job+0x388>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    75b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    75b6:	b11b      	cbz	r3, 75c0 <ticker_job+0x60c>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    75b8:	7b1b      	ldrb	r3, [r3, #12]
    75ba:	2b01      	cmp	r3, #1
    75bc:	f43f aebe 	beq.w	733c <ticker_job+0x388>
			instance->ticker_id_slot_previous = id_expired;
    75c0:	f88a b01b 	strb.w	fp, [sl, #27]
			instance->ticks_slot_previous = ticker->ticks_slot;
    75c4:	69a3      	ldr	r3, [r4, #24]
    75c6:	f8ca 301c 	str.w	r3, [sl, #28]
    75ca:	e6b7      	b.n	733c <ticker_job+0x388>
					ticker->req = ticker->ack;
    75cc:	78a3      	ldrb	r3, [r4, #2]
    75ce:	7063      	strb	r3, [r4, #1]
				while (count--) {
    75d0:	f04f 0e00 	mov.w	lr, #0
    75d4:	e7bd      	b.n	7552 <ticker_job+0x59e>
		ticker_job_list_insert(instance, insert_head);
    75d6:	9904      	ldr	r1, [sp, #16]
    75d8:	4650      	mov	r0, sl
    75da:	f7ff f9f3 	bl	69c4 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    75de:	f89a 2018 	ldrb.w	r2, [sl, #24]
    75e2:	f89a 3020 	ldrb.w	r3, [sl, #32]
    75e6:	9909      	ldr	r1, [sp, #36]	; 0x24
    75e8:	4291      	cmp	r1, r2
    75ea:	f000 8127 	beq.w	783c <ticker_job+0x888>
	if (instance->expire_infos_outdated) {
    75ee:	b113      	cbz	r3, 75f6 <ticker_job+0x642>
	instance->expire_infos_outdated = false;
    75f0:	2300      	movs	r3, #0
    75f2:	f88a 3020 	strb.w	r3, [sl, #32]
	if (instance->ticker_id_head == TICKER_NULL) {
    75f6:	2aff      	cmp	r2, #255	; 0xff
    75f8:	f47f aef7 	bne.w	73ea <ticker_job+0x436>
		if (cntr_stop() == 0) {
    75fc:	f00a ff56 	bl	124ac <cntr_stop>
    7600:	4604      	mov	r4, r0
    7602:	b9f8      	cbnz	r0, 7644 <ticker_job+0x690>
			instance->ticks_slot_previous = 0U;
    7604:	f8ca 001c 	str.w	r0, [sl, #28]
			instance->ticks_current = cntr_cnt_get();
    7608:	f00a ff76 	bl	124f8 <cntr_cnt_get>
	if (instance->worker_trigger || compare_trigger) {
    760c:	f89a 301a 	ldrb.w	r3, [sl, #26]
			instance->ticks_current = cntr_cnt_get();
    7610:	f8ca 0014 	str.w	r0, [sl, #20]
	instance->job_guard = 0U;
    7614:	f88a 4019 	strb.w	r4, [sl, #25]
	if (instance->worker_trigger || compare_trigger) {
    7618:	b1db      	cbz	r3, 7652 <ticker_job+0x69e>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    761a:	f8da 4028 	ldr.w	r4, [sl, #40]	; 0x28
    761e:	4653      	mov	r3, sl
    7620:	2201      	movs	r2, #1
    7622:	2103      	movs	r1, #3
    7624:	e552      	b.n	70cc <ticker_job+0x118>
		LL_ASSERT(i);
    7626:	4828      	ldr	r0, [pc, #160]	; (76c8 <ticker_job+0x714>)
    7628:	f640 3369 	movw	r3, #2921	; 0xb69
    762c:	4642      	mov	r2, r8
    762e:	4639      	mov	r1, r7
    7630:	f00f ff57 	bl	174e2 <assert_print>
    7634:	4040      	eors	r0, r0
    7636:	f380 8811 	msr	BASEPRI, r0
    763a:	f04f 0003 	mov.w	r0, #3
    763e:	df02      	svc	2
		ctr_curr = cntr_cnt_get();
    7640:	46cb      	mov	fp, r9
    7642:	e6e7      	b.n	7414 <ticker_job+0x460>
	if (instance->worker_trigger || compare_trigger) {
    7644:	f89a 301a 	ldrb.w	r3, [sl, #26]
	instance->job_guard = 0U;
    7648:	2200      	movs	r2, #0
    764a:	f88a 2019 	strb.w	r2, [sl, #25]
	if (instance->worker_trigger || compare_trigger) {
    764e:	2b00      	cmp	r3, #0
    7650:	d1e3      	bne.n	761a <ticker_job+0x666>
}
    7652:	b00f      	add	sp, #60	; 0x3c
    7654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7658:	4770      	bx	lr
					while (ticks_to_expire <
    765a:	4591      	cmp	r9, r2
    765c:	d99f      	bls.n	759e <ticker_job+0x5ea>
				lazy = 0U;
    765e:	9002      	str	r0, [sp, #8]
    7660:	1c48      	adds	r0, r1, #1
    7662:	9003      	str	r0, [sp, #12]
    7664:	e9cd b40a 	strd	fp, r4, [sp, #40]	; 0x28
	if ((*remainder < BIT(31)) &&
    7668:	f8df e058 	ldr.w	lr, [pc, #88]	; 76c4 <ticker_job+0x710>
    766c:	e9dd 0402 	ldrd	r0, r4, [sp, #8]
    7670:	e005      	b.n	767e <ticker_job+0x6ca>
    7672:	468b      	mov	fp, r1
						ticks_to_expire +=
    7674:	445a      	add	r2, fp
						lazy++;
    7676:	3001      	adds	r0, #1
					while (ticks_to_expire <
    7678:	4591      	cmp	r9, r2
						lazy++;
    767a:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    767c:	d911      	bls.n	76a2 <ticker_job+0x6ee>
	if ((*remainder < BIT(31)) &&
    767e:	f8df b040 	ldr.w	fp, [pc, #64]	; 76c0 <ticker_job+0x70c>
	*remainder += to_add;
    7682:	442b      	add	r3, r5
	if ((*remainder < BIT(31)) &&
    7684:	449b      	add	fp, r3
    7686:	45f3      	cmp	fp, lr
    7688:	d8f3      	bhi.n	7672 <ticker_job+0x6be>
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    768a:	46a3      	mov	fp, r4
    768c:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
    7690:	445a      	add	r2, fp
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    7692:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
    7696:	3001      	adds	r0, #1
					while (ticks_to_expire <
    7698:	4591      	cmp	r9, r2
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    769a:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
    769e:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    76a0:	d8ed      	bhi.n	767e <ticker_job+0x6ca>
				ticker->lazy_current += (lazy_periodic + lazy);
    76a2:	e9dd b40a 	ldrd	fp, r4, [sp, #40]	; 0x28
    76a6:	4460      	add	r0, ip
    76a8:	6263      	str	r3, [r4, #36]	; 0x24
    76aa:	fa1f fc80 	uxth.w	ip, r0
    76ae:	e776      	b.n	759e <ticker_job+0x5ea>
		flag_elapsed = 0U;
    76b0:	960c      	str	r6, [sp, #48]	; 0x30
		ticks_elapsed = 0U;
    76b2:	9606      	str	r6, [sp, #24]
    76b4:	e4a5      	b.n	7002 <ticker_job+0x4e>
    76b6:	bf00      	nop
    76b8:	0001b7dc 	.word	0x0001b7dc
    76bc:	0001babc 	.word	0x0001babc
    76c0:	ff172b5a 	.word	0xff172b5a
    76c4:	7f172b59 	.word	0x7f172b59
    76c8:	0001b844 	.word	0x0001b844
		if (instance->ticks_slot_previous > ticks_elapsed) {
    76cc:	69fa      	ldr	r2, [r7, #28]
    76ce:	9806      	ldr	r0, [sp, #24]
    76d0:	9301      	str	r3, [sp, #4]
    76d2:	4290      	cmp	r0, r2
			window_start_ticks = instance->ticks_slot_previous -
    76d4:	bf35      	itete	cc
    76d6:	1a12      	subcc	r2, r2, r0
		uint32_t window_start_ticks = 0U;
    76d8:	2300      	movcs	r3, #0
			window_start_ticks = instance->ticks_slot_previous -
    76da:	9202      	strcc	r2, [sp, #8]
		uint32_t window_start_ticks = 0U;
    76dc:	9302      	strcs	r3, [sp, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
    76de:	9a01      	ldr	r2, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    76e0:	68a3      	ldr	r3, [r4, #8]
    76e2:	6860      	ldr	r0, [r4, #4]
		ticker_id_iter = nodes[ticker_id_head].next;
    76e4:	f81b c002 	ldrb.w	ip, [fp, r2]
		if (ticker->ticks_slot) {
    76e8:	69aa      	ldr	r2, [r5, #24]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    76ea:	9308      	str	r3, [sp, #32]
    76ec:	4283      	cmp	r3, r0
		ticker_id_iter = nodes[ticker_id_head].next;
    76ee:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
		if (ticker->ticks_slot) {
    76f2:	9207      	str	r2, [sp, #28]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    76f4:	f080 80ba 	bcs.w	786c <ticker_job+0x8b8>
			ticks_slot = HAL_TICKER_RESCHEDULE_MARGIN;
    76f8:	2a00      	cmp	r2, #0
			ticks_slot_window = ext_data->ticks_slot_window -
    76fa:	eba0 0903 	sub.w	r9, r0, r3
		while ((ticker_id_iter != TICKER_NULL) &&
    76fe:	4663      	mov	r3, ip
			ticks_slot = HAL_TICKER_RESCHEDULE_MARGIN;
    7700:	bf14      	ite	ne
    7702:	4692      	movne	sl, r2
    7704:	f04f 0a04 	moveq.w	sl, #4
		while ((ticker_id_iter != TICKER_NULL) &&
    7708:	2bff      	cmp	r3, #255	; 0xff
    770a:	f000 80b2 	beq.w	7872 <ticker_job+0x8be>
    770e:	45d1      	cmp	r9, sl
    7710:	f0c0 80af 	bcc.w	7872 <ticker_job+0x8be>
    7714:	2000      	movs	r0, #0
    7716:	e9cd 6503 	strd	r6, r5, [sp, #12]
    771a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    771c:	9e02      	ldr	r6, [sp, #8]
    771e:	9b07      	ldr	r3, [sp, #28]
    7720:	9405      	str	r4, [sp, #20]
		       ((ticks_start_offset + ticks_slot) <=
    7722:	46d6      	mov	lr, sl
		while ((ticker_id_iter != TICKER_NULL) &&
    7724:	4680      	mov	r8, r0
    7726:	4684      	mov	ip, r0
    7728:	e021      	b.n	776e <ticker_job+0x7ba>
			    !node->ticks_slot ||
    772a:	6864      	ldr	r4, [r4, #4]
    772c:	b374      	cbz	r4, 778c <ticker_job+0x7d8>
			if (ticks_to_expire_offset >
    772e:	f1bc 0f04 	cmp.w	ip, #4
    7732:	d92e      	bls.n	7792 <ticker_job+0x7de>
					MIN(ticks_slot_window,
    7734:	f1ac 0004 	sub.w	r0, ip, #4
    7738:	4440      	add	r0, r8
				window_end_ticks =
    773a:	4548      	cmp	r0, r9
    773c:	bf28      	it	cs
    773e:	4648      	movcs	r0, r9
			if (window_end_ticks > (ticks_start_offset +
    7740:	4570      	cmp	r0, lr
    7742:	d926      	bls.n	7792 <ticker_job+0x7de>
				if (!ticker->ticks_slot) {
    7744:	b363      	cbz	r3, 77a0 <ticker_job+0x7ec>
			if ((ticks_to_expire != 0U) &&
    7746:	ebb0 000a 	subs.w	r0, r0, sl
    774a:	d001      	beq.n	7750 <ticker_job+0x79c>
    774c:	42b0      	cmp	r0, r6
    774e:	d232      	bcs.n	77b6 <ticker_job+0x802>
			ticks_start_offset += ticks_to_expire_offset;
    7750:	44e0      	add	r8, ip
			window_start_ticks  = ticks_start_offset +
    7752:	eb05 0608 	add.w	r6, r5, r8
				ticks_to_expire = ticks_slot_window -
    7756:	eba9 000a 	sub.w	r0, r9, sl
			ticker_id_iter = node->next;
    775a:	f81b 2002 	ldrb.w	r2, [fp, r2]
			ticks_to_expire_offset = 0U;
    775e:	f04f 0c00 	mov.w	ip, #0
		while ((ticker_id_iter != TICKER_NULL) &&
    7762:	2aff      	cmp	r2, #255	; 0xff
    7764:	d027      	beq.n	77b6 <ticker_job+0x802>
		       ((ticks_start_offset + ticks_slot) <=
    7766:	eb0a 0e08 	add.w	lr, sl, r8
		while ((ticker_id_iter != TICKER_NULL) &&
    776a:	45f1      	cmp	r9, lr
    776c:	d323      	bcc.n	77b6 <ticker_job+0x802>
			node = &nodes[ticker_id_iter];
    776e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    7772:	eb0b 1402 	add.w	r4, fp, r2, lsl #4
    7776:	0112      	lsls	r2, r2, #4
			ticks_to_expire_offset += node->ticks_to_expire;
    7778:	68a5      	ldr	r5, [r4, #8]
    777a:	44ac      	add	ip, r5
			if (TICKER_RESCHEDULE_PENDING(node) ||
    777c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    777e:	b115      	cbz	r5, 7786 <ticker_job+0x7d2>
    7780:	7b2d      	ldrb	r5, [r5, #12]
    7782:	2d01      	cmp	r5, #1
    7784:	d002      	beq.n	778c <ticker_job+0x7d8>
			    !node->ticks_slot ||
    7786:	69a5      	ldr	r5, [r4, #24]
			if (TICKER_RESCHEDULE_PENDING(node) ||
    7788:	2d00      	cmp	r5, #0
    778a:	d1ce      	bne.n	772a <ticker_job+0x776>
				ticker_id_iter = node->next;
    778c:	f81b 2002 	ldrb.w	r2, [fp, r2]
				continue;
    7790:	e7e7      	b.n	7762 <ticker_job+0x7ae>
			ticks_start_offset += ticks_to_expire_offset;
    7792:	44e0      	add	r8, ip
			window_start_ticks  = ticks_start_offset +
    7794:	eb05 0008 	add.w	r0, r5, r8
    7798:	4606      	mov	r6, r0
			if (!ticker->ticks_slot) {
    779a:	2b00      	cmp	r3, #0
    779c:	d0dd      	beq.n	775a <ticker_job+0x7a6>
    779e:	e7da      	b.n	7756 <ticker_job+0x7a2>
			if ((ticks_to_expire != 0U) &&
    77a0:	b126      	cbz	r6, 77ac <ticker_job+0x7f8>
			    (ticks_to_expire <= (window_end_ticks -
    77a2:	eba0 000a 	sub.w	r0, r0, sl
			    (ticks_to_expire >= window_start_ticks) &&
    77a6:	42b0      	cmp	r0, r6
    77a8:	f080 80b2 	bcs.w	7910 <ticker_job+0x95c>
			ticks_start_offset += ticks_to_expire_offset;
    77ac:	44e0      	add	r8, ip
			window_start_ticks  = ticks_start_offset +
    77ae:	eb08 0005 	add.w	r0, r8, r5
    77b2:	4606      	mov	r6, r0
    77b4:	e7d1      	b.n	775a <ticker_job+0x7a6>
    77b6:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
    77ba:	9c05      	ldr	r4, [sp, #20]
		ext_data->ticks_drift += ticks_to_expire -
    77bc:	9a08      	ldr	r2, [sp, #32]
    77be:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
    77c0:	f8dd e004 	ldr.w	lr, [sp, #4]
		ext_data->ticks_drift += ticks_to_expire -
    77c4:	4402      	add	r2, r0
    77c6:	1ad2      	subs	r2, r2, r3
    77c8:	60a2      	str	r2, [r4, #8]
		ticker->ticks_to_expire = ticks_to_expire;
    77ca:	60a8      	str	r0, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
    77cc:	f81b c00e 	ldrb.w	ip, [fp, lr]
		while (ticker_id_iter != TICKER_NULL) {
    77d0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    77d4:	d02b      	beq.n	782e <ticker_job+0x87a>
		ticker_id_prev = TICKER_NULL;
    77d6:	f04f 08ff 	mov.w	r8, #255	; 0xff
    77da:	e000      	b.n	77de <ticker_job+0x82a>
			ticker_id_iter = node->next;
    77dc:	469c      	mov	ip, r3
			node = &nodes[ticker_id_iter];
    77de:	fa0f f28c 	sxth.w	r2, ip
    77e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    77e6:	eb0b 1902 	add.w	r9, fp, r2, lsl #4
    77ea:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    77ec:	f8d9 3008 	ldr.w	r3, [r9, #8]
    77f0:	4283      	cmp	r3, r0
    77f2:	f080 8085 	bcs.w	7900 <ticker_job+0x94c>
				ticker->ticks_to_expire -=
    77f6:	1ac0      	subs	r0, r0, r3
    77f8:	60a8      	str	r0, [r5, #8]
			ticker_id_iter = node->next;
    77fa:	f81b 3002 	ldrb.w	r3, [fp, r2]
		while (ticker_id_iter != TICKER_NULL) {
    77fe:	2bff      	cmp	r3, #255	; 0xff
    7800:	46e0      	mov	r8, ip
    7802:	d1eb      	bne.n	77dc <ticker_job+0x828>
    7804:	f8cd e004 	str.w	lr, [sp, #4]
		if (ticker_id_prev != TICKER_NULL) {
    7808:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    780c:	d00f      	beq.n	782e <ticker_job+0x87a>
			instance->ticker_id_head = nodes[ticker_id_head].next;
    780e:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    7810:	fa0f fc8c 	sxth.w	ip, ip
    7814:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
			instance->ticker_id_head = nodes[ticker_id_head].next;
    7818:	f81b 0003 	ldrb.w	r0, [fp, r3]
    781c:	7638      	strb	r0, [r7, #24]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    781e:	ea4f 120c 	mov.w	r2, ip, lsl #4
    7822:	f81b 0002 	ldrb.w	r0, [fp, r2]
    7826:	f80b 0003 	strb.w	r0, [fp, r3]
			nodes[ticker_id_prev].next = ticker_id_head;
    782a:	f80b 1002 	strb.w	r1, [fp, r2]
		ticker->lazy_current--;
    782e:	8beb      	ldrh	r3, [r5, #30]
    7830:	3b01      	subs	r3, #1
    7832:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
    7834:	2302      	movs	r3, #2
    7836:	7323      	strb	r3, [r4, #12]
		rescheduled  = 1U;
    7838:	2001      	movs	r0, #1
    783a:	e5b1      	b.n	73a0 <ticker_job+0x3ec>
	if (instance->expire_infos_outdated) {
    783c:	b113      	cbz	r3, 7844 <ticker_job+0x890>
	instance->expire_infos_outdated = false;
    783e:	2300      	movs	r3, #0
    7840:	f88a 3020 	strb.w	r3, [sl, #32]
	if (flag_compare_update) {
    7844:	f1b8 0f00 	cmp.w	r8, #0
    7848:	f47f aed5 	bne.w	75f6 <ticker_job+0x642>
	if (instance->worker_trigger || compare_trigger) {
    784c:	f89a 301a 	ldrb.w	r3, [sl, #26]
	instance->job_guard = 0U;
    7850:	f88a 8019 	strb.w	r8, [sl, #25]
	if (instance->worker_trigger || compare_trigger) {
    7854:	2b00      	cmp	r3, #0
    7856:	f47f aee0 	bne.w	761a <ticker_job+0x666>
    785a:	e6fa      	b.n	7652 <ticker_job+0x69e>
			ticker->ticks_to_expire -= ticks_elapsed;
    785c:	1bdb      	subs	r3, r3, r7
    785e:	60a3      	str	r3, [r4, #8]
    7860:	9e05      	ldr	r6, [sp, #20]
    7862:	f8dd 801c 	ldr.w	r8, [sp, #28]
		if (instance->ticker_id_head != ticker_id_old_head) {
    7866:	f89a b018 	ldrb.w	fp, [sl, #24]
			break;
    786a:	e58b      	b.n	7384 <ticker_job+0x3d0>
		if (ticker->ticks_slot) {
    786c:	9b07      	ldr	r3, [sp, #28]
    786e:	4303      	orrs	r3, r0
    7870:	d009      	beq.n	7886 <ticker_job+0x8d2>
		ext_data->ticks_drift += ticks_to_expire -
    7872:	68ab      	ldr	r3, [r5, #8]
    7874:	9a08      	ldr	r2, [sp, #32]
    7876:	1ad3      	subs	r3, r2, r3
    7878:	60a3      	str	r3, [r4, #8]
		ticker->ticks_to_expire = ticks_to_expire;
    787a:	2300      	movs	r3, #0
    787c:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
    787e:	e7d6      	b.n	782e <ticker_job+0x87a>
	instance->job_guard = 0U;
    7880:	f88a 6019 	strb.w	r6, [sl, #25]
	if (instance->worker_trigger || compare_trigger) {
    7884:	e6c9      	b.n	761a <ticker_job+0x666>
			LL_ASSERT(TICKER_HAS_SLOT_WINDOW(ticker));
    7886:	4a25      	ldr	r2, [pc, #148]	; (791c <ticker_job+0x968>)
    7888:	4925      	ldr	r1, [pc, #148]	; (7920 <ticker_job+0x96c>)
    788a:	4826      	ldr	r0, [pc, #152]	; (7924 <ticker_job+0x970>)
    788c:	f640 1323 	movw	r3, #2339	; 0x923
    7890:	f00f fe27 	bl	174e2 <assert_print>
    7894:	4040      	eors	r0, r0
    7896:	f380 8811 	msr	BASEPRI, r0
    789a:	f04f 0003 	mov.w	r0, #3
    789e:	df02      	svc	2
		ext_data->ticks_drift += ticks_to_expire -
    78a0:	68a3      	ldr	r3, [r4, #8]
    78a2:	9308      	str	r3, [sp, #32]
    78a4:	e7e5      	b.n	7872 <ticker_job+0x8be>
	instance->expire_infos_outdated = false;
    78a6:	2300      	movs	r3, #0
    78a8:	f887 3020 	strb.w	r3, [r7, #32]
	if (instance->ticker_id_head == TICKER_NULL) {
    78ac:	e59d      	b.n	73ea <ticker_job+0x436>
	insert_head = TICKER_NULL;
    78ae:	23ff      	movs	r3, #255	; 0xff
    78b0:	9304      	str	r3, [sp, #16]
    78b2:	e500      	b.n	72b6 <ticker_job+0x302>
	if (instance->expire_infos_outdated) {
    78b4:	2b00      	cmp	r3, #0
    78b6:	f43f ad9c 	beq.w	73f2 <ticker_job+0x43e>
	instance->expire_infos_outdated = false;
    78ba:	2300      	movs	r3, #0
    78bc:	f887 3020 	strb.w	r3, [r7, #32]
	if (instance->ticker_id_head == TICKER_NULL) {
    78c0:	e597      	b.n	73f2 <ticker_job+0x43e>
	instance->job_guard = 0U;
    78c2:	2300      	movs	r3, #0
    78c4:	f88a 3019 	strb.w	r3, [sl, #25]
	if (instance->worker_trigger || compare_trigger) {
    78c8:	e6a7      	b.n	761a <ticker_job+0x666>
		ticks_current = cntr_cnt_get();
    78ca:	f00a fe15 	bl	124f8 <cntr_cnt_get>
    78ce:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    78d0:	f00a fddc 	bl	1248c <cntr_start>
    78d4:	f89a 2018 	ldrb.w	r2, [sl, #24]
    78d8:	2800      	cmp	r0, #0
    78da:	f47f ad8a 	bne.w	73f2 <ticker_job+0x43e>
			instance->ticks_current = ticks_current;
    78de:	f8ca 4014 	str.w	r4, [sl, #20]
    78e2:	e586      	b.n	73f2 <ticker_job+0x43e>
	if (instance->expire_infos_outdated) {
    78e4:	f897 3020 	ldrb.w	r3, [r7, #32]
    78e8:	46b0      	mov	r8, r6
    78ea:	46ba      	mov	sl, r7
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    78ec:	2800      	cmp	r0, #0
    78ee:	f43f ae7a 	beq.w	75e6 <ticker_job+0x632>
	if (instance->expire_infos_outdated) {
    78f2:	2b00      	cmp	r3, #0
    78f4:	f43f ae82 	beq.w	75fc <ticker_job+0x648>
	instance->expire_infos_outdated = false;
    78f8:	2300      	movs	r3, #0
    78fa:	f887 3020 	strb.w	r3, [r7, #32]
	if (instance->ticker_id_head == TICKER_NULL) {
    78fe:	e67d      	b.n	75fc <ticker_job+0x648>
				node->ticks_to_expire -=
    7900:	4672      	mov	r2, lr
    7902:	1a18      	subs	r0, r3, r0
    7904:	469e      	mov	lr, r3
    7906:	9201      	str	r2, [sp, #4]
    7908:	f8c9 0008 	str.w	r0, [r9, #8]
				break;
    790c:	46c4      	mov	ip, r8
    790e:	e77b      	b.n	7808 <ticker_job+0x854>
    7910:	9602      	str	r6, [sp, #8]
    7912:	e9dd 5404 	ldrd	r5, r4, [sp, #16]
			    (ticks_to_expire >= window_start_ticks) &&
    7916:	e9dd 0602 	ldrd	r0, r6, [sp, #8]
    791a:	e74f      	b.n	77bc <ticker_job+0x808>
    791c:	0001b7dc 	.word	0x0001b7dc
    7920:	0001b864 	.word	0x0001b864
    7924:	0001b844 	.word	0x0001b844

00007928 <ticker_init>:
{
    7928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    792a:	9e06      	ldr	r6, [sp, #24]
    792c:	f89d 501c 	ldrb.w	r5, [sp, #28]
    7930:	9c08      	ldr	r4, [sp, #32]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    7932:	b9b8      	cbnz	r0, 7964 <ticker_init+0x3c>
	instance->count_node = count_node;
    7934:	4f14      	ldr	r7, [pc, #80]	; (7988 <ticker_init+0x60>)
	instance->nodes = node;
    7936:	603a      	str	r2, [r7, #0]
	while (count_user--) {
    7938:	1e5a      	subs	r2, r3, #1
	instance->count_node = count_node;
    793a:	7239      	strb	r1, [r7, #8]
	instance->count_user = count_user;
    793c:	727b      	strb	r3, [r7, #9]
	instance->users = user;
    793e:	607e      	str	r6, [r7, #4]
	while (count_user--) {
    7940:	b2d2      	uxtb	r2, r2
    7942:	b173      	cbz	r3, 7962 <ticker_init+0x3a>
    7944:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
		users[count_user].user_op = user_op_;
    7948:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    794a:	4611      	mov	r1, r2
    794c:	f812 3908 	ldrb.w	r3, [r2], #-8
	while (count_user--) {
    7950:	428e      	cmp	r6, r1
		user_op_ += users[count_user].count_user_op;
    7952:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
    7956:	eba5 0303 	sub.w	r3, r5, r3
		user_op_ += users[count_user].count_user_op;
    795a:	eb04 1400 	add.w	r4, r4, r0, lsl #4
		count_op -= users[count_user].count_user_op;
    795e:	b2dd      	uxtb	r5, r3
	while (count_user--) {
    7960:	d1f2      	bne.n	7948 <ticker_init+0x20>
	if (count_op) {
    7962:	b10d      	cbz	r5, 7968 <ticker_init+0x40>
		return TICKER_STATUS_FAILURE;
    7964:	2001      	movs	r0, #1
}
    7966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	instance->caller_id_get_cb = caller_id_get_cb;
    7968:	9b09      	ldr	r3, [sp, #36]	; 0x24
    796a:	627b      	str	r3, [r7, #36]	; 0x24
	instance->sched_cb = sched_cb;
    796c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    796e:	62bb      	str	r3, [r7, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    7970:	24ff      	movs	r4, #255	; 0xff
	instance->trigger_set_cb = trigger_set_cb;
    7972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7974:	62fb      	str	r3, [r7, #44]	; 0x2c
	instance->ticker_id_head = TICKER_NULL;
    7976:	763c      	strb	r4, [r7, #24]
	instance->ticks_current = cntr_cnt_get();
    7978:	f00a fdbe 	bl	124f8 <cntr_cnt_get>
	instance->ticks_elapsed_first = 0U;
    797c:	817d      	strh	r5, [r7, #10]
	instance->ticks_current = cntr_cnt_get();
    797e:	6178      	str	r0, [r7, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    7980:	76fc      	strb	r4, [r7, #27]
	instance->ticks_slot_previous = 0U;
    7982:	61fd      	str	r5, [r7, #28]
	return TICKER_STATUS_SUCCESS;
    7984:	4628      	mov	r0, r5
}
    7986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7988:	20001478 	.word	0x20001478

0000798c <ticker_trigger>:
{
    798c:	b410      	push	{r4}
	if (instance->sched_cb) {
    798e:	4b08      	ldr	r3, [pc, #32]	; (79b0 <ticker_trigger+0x24>)
    7990:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    7994:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    7998:	6a94      	ldr	r4, [r2, #40]	; 0x28
    799a:	b134      	cbz	r4, 79aa <ticker_trigger+0x1e>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    799c:	4613      	mov	r3, r2
    799e:	46a4      	mov	ip, r4
    79a0:	2201      	movs	r2, #1
}
    79a2:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    79a4:	2103      	movs	r1, #3
    79a6:	2002      	movs	r0, #2
    79a8:	4760      	bx	ip
}
    79aa:	bc10      	pop	{r4}
    79ac:	4770      	bx	lr
    79ae:	bf00      	nop
    79b0:	20001478 	.word	0x20001478

000079b4 <ticker_start_ext>:
{
    79b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    79b8:	4604      	mov	r4, r0
	struct ticker_instance *instance = &_instance[instance_index];
    79ba:	4d26      	ldr	r5, [pc, #152]	; (7a54 <ticker_start_ext+0xa0>)
{
    79bc:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
    79c0:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
    79c4:	eb05 1e0e 	add.w	lr, r5, lr, lsl #4
{
    79c8:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    79ca:	f8de 1004 	ldr.w	r1, [lr, #4]
    79ce:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
	if (last >= user->count_user_op) {
    79d2:	f811 8030 	ldrb.w	r8, [r1, r0, lsl #3]
	last = user->last + 1;
    79d6:	78f4      	ldrb	r4, [r6, #3]
	if (last == user->first) {
    79d8:	7871      	ldrb	r1, [r6, #1]
	last = user->last + 1;
    79da:	f104 0c01 	add.w	ip, r4, #1
    79de:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    79e2:	45e0      	cmp	r8, ip
    79e4:	bf98      	it	ls
    79e6:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    79ea:	4561      	cmp	r1, ip
    79ec:	d02e      	beq.n	7a4c <ticker_start_ext+0x98>
	user_op = &user->user_op[user->last];
    79ee:	6871      	ldr	r1, [r6, #4]
    79f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    79f4:	ea4f 1904 	mov.w	r9, r4, lsl #4
    79f8:	eb01 1404 	add.w	r4, r1, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_START;
    79fc:	f04f 0804 	mov.w	r8, #4
    7a00:	f801 8009 	strb.w	r8, [r1, r9]
	user_op->params.start.ticks_at_start = ticks_anchor;
    7a04:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    7a06:	9b08      	ldr	r3, [sp, #32]
    7a08:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    7a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7a0c:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    7a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7a10:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    7a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7a14:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    7a16:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7a18:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    7a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7a1c:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    7a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7a20:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    7a22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7a24:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7a26:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7a28:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    7a2a:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    7a2c:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
    7a2e:	82a7      	strh	r7, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
    7a30:	70a3      	strb	r3, [r4, #2]
	user->last = last;
    7a32:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7a36:	e9de 3609 	ldrd	r3, r6, [lr, #36]	; 0x24
    7a3a:	4675      	mov	r5, lr
    7a3c:	4798      	blx	r3
    7a3e:	462b      	mov	r3, r5
    7a40:	4641      	mov	r1, r8
    7a42:	2200      	movs	r2, #0
    7a44:	47b0      	blx	r6
	return user_op->status;
    7a46:	78a0      	ldrb	r0, [r4, #2]
}
    7a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    7a4c:	2001      	movs	r0, #1
}
    7a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7a52:	bf00      	nop
    7a54:	20001478 	.word	0x20001478

00007a58 <ticker_start>:
{
    7a58:	b510      	push	{r4, lr}
    7a5a:	b08a      	sub	sp, #40	; 0x28
    7a5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7a5e:	9400      	str	r4, [sp, #0]
{
    7a60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7a62:	9401      	str	r4, [sp, #4]
{
    7a64:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7a66:	9402      	str	r4, [sp, #8]
{
    7a68:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7a6c:	9403      	str	r4, [sp, #12]
{
    7a6e:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7a70:	9404      	str	r4, [sp, #16]
{
    7a72:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7a74:	9405      	str	r4, [sp, #20]
{
    7a76:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7a78:	9406      	str	r4, [sp, #24]
{
    7a7a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7a7c:	9407      	str	r4, [sp, #28]
{
    7a7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7a80:	9408      	str	r4, [sp, #32]
    7a82:	2400      	movs	r4, #0
    7a84:	9409      	str	r4, [sp, #36]	; 0x24
    7a86:	f7ff ff95 	bl	79b4 <ticker_start_ext>
}
    7a8a:	b00a      	add	sp, #40	; 0x28
    7a8c:	bd10      	pop	{r4, pc}
    7a8e:	bf00      	nop

00007a90 <ticker_update_ext>:
{
    7a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a94:	4604      	mov	r4, r0
	struct ticker_instance *instance = &_instance[instance_index];
    7a96:	4d2b      	ldr	r5, [pc, #172]	; (7b44 <ticker_update_ext+0xb4>)
	user = &instance->users[user_id];
    7a98:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
    7a9c:	eb05 1e0e 	add.w	lr, r5, lr, lsl #4
{
    7aa0:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    7aa2:	f8de 1004 	ldr.w	r1, [lr, #4]
    7aa6:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
	if (last >= user->count_user_op) {
    7aaa:	f811 7030 	ldrb.w	r7, [r1, r0, lsl #3]
	last = user->last + 1;
    7aae:	78f4      	ldrb	r4, [r6, #3]
	if (last == user->first) {
    7ab0:	7871      	ldrb	r1, [r6, #1]
	last = user->last + 1;
    7ab2:	f104 0c01 	add.w	ip, r4, #1
    7ab6:	fa5f fc8c 	uxtb.w	ip, ip
{
    7aba:	b083      	sub	sp, #12
		last = 0U;
    7abc:	4567      	cmp	r7, ip
    7abe:	bf98      	it	ls
    7ac0:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    7ac4:	4561      	cmp	r1, ip
{
    7ac6:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
    7aca:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    7ace:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
    7ad2:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
    7ad6:	9301      	str	r3, [sp, #4]
	if (last == user->first) {
    7ad8:	d02f      	beq.n	7b3a <ticker_update_ext+0xaa>
	user_op = &user->user_op[user->last];
    7ada:	f8d6 b004 	ldr.w	fp, [r6, #4]
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    7ade:	6873      	ldr	r3, [r6, #4]
	user_op = &user->user_op[user->last];
    7ae0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7ae4:	0121      	lsls	r1, r4, #4
    7ae6:	eb0b 1404 	add.w	r4, fp, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    7aea:	f04f 0b05 	mov.w	fp, #5
    7aee:	f803 b001 	strb.w	fp, [r3, r1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    7af2:	9b01      	ldr	r3, [sp, #4]
    7af4:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    7af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7af8:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    7afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7afc:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    7afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7b00:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    7b02:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7b04:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7b06:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7b08:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    7b0a:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    7b0c:	7062      	strb	r2, [r4, #1]
	user_op->params.update.lazy = lazy;
    7b0e:	f8a4 a014 	strh.w	sl, [r4, #20]
	user_op->params.update.force = force;
    7b12:	f884 9016 	strb.w	r9, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    7b16:	f884 8017 	strb.w	r8, [r4, #23]
	user_op->params.update.expire_info_id = expire_info_id;
    7b1a:	7627      	strb	r7, [r4, #24]
	user_op->status = TICKER_STATUS_BUSY;
    7b1c:	70a3      	strb	r3, [r4, #2]
	user->last = last;
    7b1e:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7b22:	e9de 3609 	ldrd	r3, r6, [lr, #36]	; 0x24
    7b26:	4675      	mov	r5, lr
    7b28:	4798      	blx	r3
    7b2a:	462b      	mov	r3, r5
    7b2c:	2200      	movs	r2, #0
    7b2e:	2104      	movs	r1, #4
    7b30:	47b0      	blx	r6
	return user_op->status;
    7b32:	78a0      	ldrb	r0, [r4, #2]
}
    7b34:	b003      	add	sp, #12
    7b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    7b3a:	2001      	movs	r0, #1
}
    7b3c:	b003      	add	sp, #12
    7b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b42:	bf00      	nop
    7b44:	20001478 	.word	0x20001478

00007b48 <ticker_update>:
{
    7b48:	b510      	push	{r4, lr}
    7b4a:	b08a      	sub	sp, #40	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
    7b4c:	2400      	movs	r4, #0
    7b4e:	9407      	str	r4, [sp, #28]
{
    7b50:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    7b52:	9400      	str	r4, [sp, #0]
{
    7b54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
    7b56:	9401      	str	r4, [sp, #4]
{
    7b58:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    7b5a:	9402      	str	r4, [sp, #8]
{
    7b5c:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    7b60:	9403      	str	r4, [sp, #12]
{
    7b62:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    7b66:	9404      	str	r4, [sp, #16]
    7b68:	9c11      	ldr	r4, [sp, #68]	; 0x44
    7b6a:	9405      	str	r4, [sp, #20]
    7b6c:	9c12      	ldr	r4, [sp, #72]	; 0x48
    7b6e:	9208      	str	r2, [sp, #32]
    7b70:	9406      	str	r4, [sp, #24]
    7b72:	f7ff ff8d 	bl	7a90 <ticker_update_ext>
}
    7b76:	b00a      	add	sp, #40	; 0x28
    7b78:	bd10      	pop	{r4, pc}
    7b7a:	bf00      	nop

00007b7c <ticker_stop>:
{
    7b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b80:	4604      	mov	r4, r0
    7b82:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    7b84:	491b      	ldr	r1, [pc, #108]	; (7bf4 <ticker_stop+0x78>)
    7b86:	eb04 0544 	add.w	r5, r4, r4, lsl #1
	user = &instance->users[user_id];
    7b8a:	eb01 1c05 	add.w	ip, r1, r5, lsl #4
    7b8e:	f8dc 4004 	ldr.w	r4, [ip, #4]
    7b92:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    7b96:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
    7b9a:	78cc      	ldrb	r4, [r1, #3]
	if (last == user->first) {
    7b9c:	784e      	ldrb	r6, [r1, #1]
	last = user->last + 1;
    7b9e:	f104 0e01 	add.w	lr, r4, #1
    7ba2:	fa5f fe8e 	uxtb.w	lr, lr
		last = 0U;
    7ba6:	4577      	cmp	r7, lr
    7ba8:	bf98      	it	ls
    7baa:	f04f 0e00 	movls.w	lr, #0
	if (last == user->first) {
    7bae:	4576      	cmp	r6, lr
    7bb0:	d01c      	beq.n	7bec <ticker_stop+0x70>
	user_op = &user->user_op[user->last];
    7bb2:	684e      	ldr	r6, [r1, #4]
    7bb4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7bb8:	0127      	lsls	r7, r4, #4
    7bba:	eb06 1404 	add.w	r4, r6, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    7bbe:	f04f 0807 	mov.w	r8, #7
    7bc2:	f806 8007 	strb.w	r8, [r6, r7]
	user_op->fp_op_func = fp_op_func;
    7bc6:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7bc8:	9b06      	ldr	r3, [sp, #24]
    7bca:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    7bcc:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    7bce:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7bd0:	70a3      	strb	r3, [r4, #2]
	user->last = last;
    7bd2:	f881 e003 	strb.w	lr, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7bd6:	e9dc 3609 	ldrd	r3, r6, [ip, #36]	; 0x24
    7bda:	4665      	mov	r5, ip
    7bdc:	4798      	blx	r3
    7bde:	462b      	mov	r3, r5
    7be0:	2200      	movs	r2, #0
    7be2:	2104      	movs	r1, #4
    7be4:	47b0      	blx	r6
	return user_op->status;
    7be6:	78a0      	ldrb	r0, [r4, #2]
}
    7be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    7bec:	2001      	movs	r0, #1
}
    7bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7bf2:	bf00      	nop
    7bf4:	20001478 	.word	0x20001478

00007bf8 <ticker_stop_abs>:
{
    7bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bfc:	4604      	mov	r4, r0
    7bfe:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    7c00:	491c      	ldr	r1, [pc, #112]	; (7c74 <ticker_stop_abs+0x7c>)
    7c02:	eb04 0544 	add.w	r5, r4, r4, lsl #1
	user = &instance->users[user_id];
    7c06:	eb01 1c05 	add.w	ip, r1, r5, lsl #4
    7c0a:	f8dc 4004 	ldr.w	r4, [ip, #4]
    7c0e:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    7c12:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
    7c16:	78cc      	ldrb	r4, [r1, #3]
	if (last == user->first) {
    7c18:	784e      	ldrb	r6, [r1, #1]
	last = user->last + 1;
    7c1a:	f104 0e01 	add.w	lr, r4, #1
    7c1e:	fa5f fe8e 	uxtb.w	lr, lr
		last = 0U;
    7c22:	4577      	cmp	r7, lr
    7c24:	bf98      	it	ls
    7c26:	f04f 0e00 	movls.w	lr, #0
	if (last == user->first) {
    7c2a:	4576      	cmp	r6, lr
    7c2c:	d01e      	beq.n	7c6c <ticker_stop_abs+0x74>
	user_op = &user->user_op[user->last];
    7c2e:	684e      	ldr	r6, [r1, #4]
    7c30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7c34:	0127      	lsls	r7, r4, #4
    7c36:	eb06 1404 	add.w	r4, r6, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_STOP_ABS;
    7c3a:	f04f 0808 	mov.w	r8, #8
    7c3e:	f806 8007 	strb.w	r8, [r6, r7]
	user_op->params.yield.ticks_at_yield = ticks_at_stop;
    7c42:	6063      	str	r3, [r4, #4]
	user_op->fp_op_func = fp_op_func;
    7c44:	9b06      	ldr	r3, [sp, #24]
    7c46:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7c48:	9b07      	ldr	r3, [sp, #28]
    7c4a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    7c4c:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    7c4e:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7c50:	70a3      	strb	r3, [r4, #2]
	user->last = last;
    7c52:	f881 e003 	strb.w	lr, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c56:	e9dc 3609 	ldrd	r3, r6, [ip, #36]	; 0x24
    7c5a:	4665      	mov	r5, ip
    7c5c:	4798      	blx	r3
    7c5e:	462b      	mov	r3, r5
    7c60:	2200      	movs	r2, #0
    7c62:	2104      	movs	r1, #4
    7c64:	47b0      	blx	r6
	return user_op->status;
    7c66:	78a0      	ldrb	r0, [r4, #2]
}
    7c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    7c6c:	2001      	movs	r0, #1
}
    7c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c72:	bf00      	nop
    7c74:	20001478 	.word	0x20001478

00007c78 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    7c78:	f00a bc3e 	b.w	124f8 <cntr_cnt_get>

00007c7c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    7c7c:	1a40      	subs	r0, r0, r1
}
    7c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7c82:	4770      	bx	lr

00007c84 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
    7c84:	4801      	ldr	r0, [pc, #4]	; (7c8c <ll_feat_get+0x8>)
    7c86:	2100      	movs	r1, #0
    7c88:	4770      	bx	lr
    7c8a:	bf00      	nop
    7c8c:	0001413f 	.word	0x0001413f

00007c90 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    7c90:	2802      	cmp	r0, #2
    7c92:	d001      	beq.n	7c98 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    7c94:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    7c96:	4770      	bx	lr
{
    7c98:	b538      	push	{r3, r4, r5, lr}
    7c9a:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    7c9c:	4608      	mov	r0, r1
    7c9e:	461d      	mov	r5, r3
    7ca0:	f003 fb22 	bl	b2e8 <ll_connected_get>
			if (!conn) {
    7ca4:	b110      	cbz	r0, 7cac <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    7ca6:	2000      	movs	r0, #0
    7ca8:	7028      	strb	r0, [r5, #0]
}
    7caa:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    7cac:	4620      	mov	r0, r4
}
    7cae:	bd38      	pop	{r3, r4, r5, pc}

00007cb0 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    7cb0:	2300      	movs	r3, #0
    7cb2:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    7cb4:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    7cb6:	4770      	bx	lr

00007cb8 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    7cb8:	b538      	push	{r3, r4, r5, lr}
    7cba:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    7cbc:	2000      	movs	r0, #0
{
    7cbe:	460c      	mov	r4, r1
		if (ull_adv_is_enabled(0)) {
    7cc0:	f003 f834 	bl	ad2c <ull_adv_is_enabled>
    7cc4:	b9a8      	cbnz	r0, 7cf2 <ll_addr_set+0x3a>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    7cc6:	b93d      	cbnz	r5, 7cd8 <ll_addr_set+0x20>
		} else {
			(void)memset(rnd_addr, 0, BDADDR_SIZE);
		}
	} else {
		if (bdaddr) {
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    7cc8:	480b      	ldr	r0, [pc, #44]	; (7cf8 <ll_addr_set+0x40>)
    7cca:	2206      	movs	r2, #6
    7ccc:	4621      	mov	r1, r4
		if (bdaddr) {
    7cce:	b16c      	cbz	r4, 7cec <ll_addr_set+0x34>
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    7cd0:	f00f fe94 	bl	179fc <memcpy>
		} else {
			(void)memset(pub_addr, 0, BDADDR_SIZE);
		}
	}

	return 0;
    7cd4:	2000      	movs	r0, #0
}
    7cd6:	bd38      	pop	{r3, r4, r5, pc}
		if (bdaddr) {
    7cd8:	b12c      	cbz	r4, 7ce6 <ll_addr_set+0x2e>
			(void)memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7cda:	2206      	movs	r2, #6
    7cdc:	4621      	mov	r1, r4
    7cde:	4807      	ldr	r0, [pc, #28]	; (7cfc <ll_addr_set+0x44>)
    7ce0:	f00f fe8c 	bl	179fc <memcpy>
    7ce4:	e7f6      	b.n	7cd4 <ll_addr_set+0x1c>
			(void)memset(rnd_addr, 0, BDADDR_SIZE);
    7ce6:	4805      	ldr	r0, [pc, #20]	; (7cfc <ll_addr_set+0x44>)
    7ce8:	2206      	movs	r2, #6
    7cea:	4621      	mov	r1, r4
    7cec:	f00f fe91 	bl	17a12 <memset>
    7cf0:	e7f0      	b.n	7cd4 <ll_addr_set+0x1c>
			return BT_HCI_ERR_CMD_DISALLOWED;
    7cf2:	200c      	movs	r0, #12
}
    7cf4:	bd38      	pop	{r3, r4, r5, pc}
    7cf6:	bf00      	nop
    7cf8:	200014b0 	.word	0x200014b0
    7cfc:	200014a8 	.word	0x200014a8

00007d00 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
    7d00:	2801      	cmp	r0, #1
{
    7d02:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    7d04:	d805      	bhi.n	7d12 <ll_addr_get+0x12>

	if (addr_type) {
		return rnd_addr;
	}

	return pub_addr;
    7d06:	4a04      	ldr	r2, [pc, #16]	; (7d18 <ll_addr_get+0x18>)
    7d08:	4804      	ldr	r0, [pc, #16]	; (7d1c <ll_addr_get+0x1c>)
    7d0a:	2b00      	cmp	r3, #0
    7d0c:	bf08      	it	eq
    7d0e:	4610      	moveq	r0, r2
    7d10:	4770      	bx	lr
		return NULL;
    7d12:	2000      	movs	r0, #0
}
    7d14:	4770      	bx	lr
    7d16:	bf00      	nop
    7d18:	200014b0 	.word	0x200014b0
    7d1c:	200014a8 	.word	0x200014a8

00007d20 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
    7d20:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
    7d22:	b510      	push	{r4, lr}
    7d24:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    7d26:	d80b      	bhi.n	7d40 <ll_addr_read+0x20>
	if (addr_type) {
    7d28:	4608      	mov	r0, r1
		return rnd_addr;
    7d2a:	4c07      	ldr	r4, [pc, #28]	; (7d48 <ll_addr_read+0x28>)
    7d2c:	4907      	ldr	r1, [pc, #28]	; (7d4c <ll_addr_read+0x2c>)
    7d2e:	2b00      	cmp	r3, #0
    7d30:	bf18      	it	ne
    7d32:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
    7d34:	2206      	movs	r2, #6
    7d36:	4621      	mov	r1, r4
    7d38:	f00f fe60 	bl	179fc <memcpy>
	}

	return addr;
}
    7d3c:	4620      	mov	r0, r4
    7d3e:	bd10      	pop	{r4, pc}
		return NULL;
    7d40:	2400      	movs	r4, #0
}
    7d42:	4620      	mov	r0, r4
    7d44:	bd10      	pop	{r4, pc}
    7d46:	bf00      	nop
    7d48:	200014b0 	.word	0x200014b0
    7d4c:	200014a8 	.word	0x200014a8

00007d50 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    7d50:	b510      	push	{r4, lr}
    7d52:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    7d54:	f008 fe84 	bl	10a60 <lll_reset>
	LL_ASSERT(!err);
    7d58:	b950      	cbnz	r0, 7d70 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    7d5a:	f009 fa7d 	bl	11258 <lll_adv_reset>
	LL_ASSERT(!err);
    7d5e:	b9c0      	cbnz	r0, 7d92 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    7d60:	f009 fe8a 	bl	11a78 <lll_conn_reset>
	LL_ASSERT(!err);
    7d64:	bb30      	cbnz	r0, 7db4 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
    7d66:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    7d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7d6c:	f00e b870 	b.w	15e50 <z_impl_k_sem_give>
	LL_ASSERT(!err);
    7d70:	4a19      	ldr	r2, [pc, #100]	; (7dd8 <perform_lll_reset+0x88>)
    7d72:	491a      	ldr	r1, [pc, #104]	; (7ddc <perform_lll_reset+0x8c>)
    7d74:	481a      	ldr	r0, [pc, #104]	; (7de0 <perform_lll_reset+0x90>)
    7d76:	f640 03f9 	movw	r3, #2297	; 0x8f9
    7d7a:	f00f fbb2 	bl	174e2 <assert_print>
    7d7e:	4040      	eors	r0, r0
    7d80:	f380 8811 	msr	BASEPRI, r0
    7d84:	f04f 0003 	mov.w	r0, #3
    7d88:	df02      	svc	2
	err = lll_adv_reset();
    7d8a:	f009 fa65 	bl	11258 <lll_adv_reset>
	LL_ASSERT(!err);
    7d8e:	2800      	cmp	r0, #0
    7d90:	d0e6      	beq.n	7d60 <perform_lll_reset+0x10>
    7d92:	4a11      	ldr	r2, [pc, #68]	; (7dd8 <perform_lll_reset+0x88>)
    7d94:	4911      	ldr	r1, [pc, #68]	; (7ddc <perform_lll_reset+0x8c>)
    7d96:	4812      	ldr	r0, [pc, #72]	; (7de0 <perform_lll_reset+0x90>)
    7d98:	f640 03fe 	movw	r3, #2302	; 0x8fe
    7d9c:	f00f fba1 	bl	174e2 <assert_print>
    7da0:	4040      	eors	r0, r0
    7da2:	f380 8811 	msr	BASEPRI, r0
    7da6:	f04f 0003 	mov.w	r0, #3
    7daa:	df02      	svc	2
	err = lll_conn_reset();
    7dac:	f009 fe64 	bl	11a78 <lll_conn_reset>
	LL_ASSERT(!err);
    7db0:	2800      	cmp	r0, #0
    7db2:	d0d8      	beq.n	7d66 <perform_lll_reset+0x16>
    7db4:	4a08      	ldr	r2, [pc, #32]	; (7dd8 <perform_lll_reset+0x88>)
    7db6:	4909      	ldr	r1, [pc, #36]	; (7ddc <perform_lll_reset+0x8c>)
    7db8:	4809      	ldr	r0, [pc, #36]	; (7de0 <perform_lll_reset+0x90>)
    7dba:	f640 130a 	movw	r3, #2314	; 0x90a
    7dbe:	f00f fb90 	bl	174e2 <assert_print>
    7dc2:	4040      	eors	r0, r0
    7dc4:	f380 8811 	msr	BASEPRI, r0
    7dc8:	f04f 0003 	mov.w	r0, #3
    7dcc:	df02      	svc	2
    7dce:	4620      	mov	r0, r4
}
    7dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7dd4:	f00e b83c 	b.w	15e50 <z_impl_k_sem_give>
    7dd8:	0001b8ac 	.word	0x0001b8ac
    7ddc:	0001b8e8 	.word	0x0001b8e8
    7de0:	0001b844 	.word	0x0001b844

00007de4 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    7de4:	6008      	str	r0, [r1, #0]
    7de6:	4801      	ldr	r0, [pc, #4]	; (7dec <ull_ticker_status_give+0x8>)
    7de8:	f00e b832 	b.w	15e50 <z_impl_k_sem_give>
    7dec:	200017ac 	.word	0x200017ac

00007df0 <disabled_cb>:
    7df0:	f00e b82e 	b.w	15e50 <z_impl_k_sem_give>

00007df4 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    7df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;
	uint8_t next;

	next = *first;
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    7df8:	4d2a      	ldr	r5, [pc, #168]	; (7ea4 <tx_cmplt_get+0xb0>)
	next = *first;
    7dfa:	780c      	ldrb	r4, [r1, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    7dfc:	78ab      	ldrb	r3, [r5, #2]
{
    7dfe:	468a      	mov	sl, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    7e00:	7929      	ldrb	r1, [r5, #4]
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
		*idx = first;
    7e02:	429c      	cmp	r4, r3
    7e04:	bf28      	it	cs
    7e06:	460c      	movcs	r4, r1
	}

	if (*idx == last) {
    7e08:	42a2      	cmp	r2, r4
    7e0a:	7829      	ldrb	r1, [r5, #0]
    7e0c:	d042      	beq.n	7e94 <tx_cmplt_get+0xa0>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    7e0e:	fb14 f101 	smulbb	r1, r4, r1
    7e12:	f105 0708 	add.w	r7, r5, #8
	i = *idx + 1;
    7e16:	3401      	adds	r4, #1
    7e18:	b2e4      	uxtb	r4, r4
		i = 0U;
    7e1a:	42a3      	cmp	r3, r4
    7e1c:	bf08      	it	eq
    7e1e:	2400      	moveq	r4, #0
	p = (void *)(fifo + (*idx) * size);
    7e20:	187b      	adds	r3, r7, r1
				    &next);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
    7e22:	5a79      	ldrh	r1, [r7, r1]
    7e24:	8001      	strh	r1, [r0, #0]
	cmplt = 0U;
    7e26:	4693      	mov	fp, r2
    7e28:	4681      	mov	r9, r0
    7e2a:	2600      	movs	r6, #0
			     (p->ll_id == PDU_DATA_LLID_DATA_START ||
			      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE)) ||
			    (!IS_NODE_TX_PTR(tx_node) &&
			     IS_NODE_TX_DATA(tx_node))) {
				/* data packet, hence count num cmplt */
				NODE_TX_DATA_SET(tx->node);
    7e2c:	f04f 0801 	mov.w	r8, #1
    7e30:	e01c      	b.n	7e6c <tx_cmplt_get+0x78>
			    (!IS_NODE_TX_PTR(tx_node) &&
    7e32:	2801      	cmp	r0, #1
    7e34:	d02b      	beq.n	7e8e <tx_cmplt_get+0x9a>
    7e36:	2212      	movs	r2, #18
    7e38:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
next_ack:
#endif /* CONFIG_BT_CTLR_ADV_ISO || CONFIG_BT_CTLR_CONN_ISO */

		*first = next;
    7e3a:	f88a 4000 	strb.w	r4, [sl]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    7e3e:	78a8      	ldrb	r0, [r5, #2]
    7e40:	792b      	ldrb	r3, [r5, #4]
    7e42:	7829      	ldrb	r1, [r5, #0]
	if (*idx >= count) {
    7e44:	42a0      	cmp	r0, r4
    7e46:	bf88      	it	hi
    7e48:	4623      	movhi	r3, r4
	if (*idx == last) {
    7e4a:	459b      	cmp	fp, r3
    7e4c:	d023      	beq.n	7e96 <tx_cmplt_get+0xa2>
	p = (void *)(fifo + (*idx) * size);
    7e4e:	fb13 f101 	smulbb	r1, r3, r1
	i = *idx + 1;
    7e52:	3301      	adds	r3, #1
    7e54:	b2dc      	uxtb	r4, r3
		i = 0U;
    7e56:	42a0      	cmp	r0, r4
    7e58:	bf08      	it	eq
    7e5a:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, &next);
	} while (tx && tx->handle == *handle);
    7e5c:	f837 c001 	ldrh.w	ip, [r7, r1]
    7e60:	f8b9 0000 	ldrh.w	r0, [r9]
    7e64:	4584      	cmp	ip, r0
	p = (void *)(fifo + (*idx) * size);
    7e66:	eb07 0301 	add.w	r3, r7, r1
    7e6a:	d114      	bne.n	7e96 <tx_cmplt_get+0xa2>
			tx_node = tx->node;
    7e6c:	6858      	ldr	r0, [r3, #4]
			if (!tx_node ||
    7e6e:	b160      	cbz	r0, 7e8a <tx_cmplt_get+0x96>
    7e70:	28ff      	cmp	r0, #255	; 0xff
    7e72:	d9de      	bls.n	7e32 <tx_cmplt_get+0x3e>
			     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    7e74:	7901      	ldrb	r1, [r0, #4]
    7e76:	f001 0103 	and.w	r1, r1, #3
			    (IS_NODE_TX_PTR(tx_node) &&
    7e7a:	3901      	subs	r1, #1
    7e7c:	2901      	cmp	r1, #1
    7e7e:	d90d      	bls.n	7e9c <tx_cmplt_get+0xa8>
				NODE_TX_CTRL_SET(tx->node);
    7e80:	2112      	movs	r1, #18
    7e82:	6059      	str	r1, [r3, #4]
				ll_tx_mem_release(tx_node);
    7e84:	f003 fa48 	bl	b318 <ll_tx_mem_release>
    7e88:	e7d7      	b.n	7e3a <tx_cmplt_get+0x46>
				NODE_TX_DATA_SET(tx->node);
    7e8a:	f8c3 8004 	str.w	r8, [r3, #4]
				cmplt++;
    7e8e:	3601      	adds	r6, #1
    7e90:	b2f6      	uxtb	r6, r6
			if (IS_NODE_TX_PTR(tx_node)) {
    7e92:	e7d2      	b.n	7e3a <tx_cmplt_get+0x46>
		return 0;
    7e94:	2600      	movs	r6, #0

	return cmplt;
}
    7e96:	4630      	mov	r0, r6
    7e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cmplt++;
    7e9c:	3601      	adds	r6, #1
    7e9e:	b2f6      	uxtb	r6, r6
				NODE_TX_DATA_SET(tx->node);
    7ea0:	2101      	movs	r1, #1
				cmplt++;
    7ea2:	e7ee      	b.n	7e82 <tx_cmplt_get+0x8e>
    7ea4:	200002b0 	.word	0x200002b0

00007ea8 <rx_replenish>:
{
    7ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (max > mem_link_rx.quota_pdu) {
    7eac:	4f3d      	ldr	r7, [pc, #244]	; (7fa4 <rx_replenish+0xfc>)
    7eae:	883b      	ldrh	r3, [r7, #0]
    7eb0:	4298      	cmp	r0, r3
    7eb2:	d968      	bls.n	7f86 <rx_replenish+0xde>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    7eb4:	f013 06ff 	ands.w	r6, r3, #255	; 0xff
    7eb8:	d02c      	beq.n	7f14 <rx_replenish+0x6c>
    7eba:	4d3b      	ldr	r5, [pc, #236]	; (7fa8 <rx_replenish+0x100>)
		link = mem_acquire(&mem_link_rx.free);
    7ebc:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 7fac <rx_replenish+0x104>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    7ec0:	796c      	ldrb	r4, [r5, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
    7ec2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 7fb0 <rx_replenish+0x108>
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    7ec6:	f105 0a08 	add.w	sl, r5, #8
	if (last == count) {
    7eca:	78aa      	ldrb	r2, [r5, #2]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    7ecc:	792b      	ldrb	r3, [r5, #4]
	last = last + 1;
    7ece:	3401      	adds	r4, #1
    7ed0:	b2e4      	uxtb	r4, r4
		last = 0U;
    7ed2:	42a2      	cmp	r2, r4
    7ed4:	bf08      	it	eq
    7ed6:	2400      	moveq	r4, #0
	if (last == first) {
    7ed8:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    7eda:	4640      	mov	r0, r8
    7edc:	d01c      	beq.n	7f18 <rx_replenish+0x70>
    7ede:	f7fe fb1d 	bl	651c <mem_acquire>
    7ee2:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    7ee4:	4648      	mov	r0, r9
		if (!link) {
    7ee6:	f1bb 0f00 	cmp.w	fp, #0
    7eea:	d013      	beq.n	7f14 <rx_replenish+0x6c>
		rx = mem_acquire(&mem_pdu_rx.free);
    7eec:	f7fe fb16 	bl	651c <mem_acquire>
		if (!rx) {
    7ef0:	2800      	cmp	r0, #0
    7ef2:	d04a      	beq.n	7f8a <rx_replenish+0xe2>
		rx->link = link;
    7ef4:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    7ef8:	796b      	ldrb	r3, [r5, #5]
    7efa:	782a      	ldrb	r2, [r5, #0]
    7efc:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    7f00:	f84a 0003 	str.w	r0, [sl, r3]
	mem_link_rx.quota_pdu += delta;
    7f04:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    7f06:	716c      	strb	r4, [r5, #5]
		max--;
    7f08:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
    7f0a:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    7f0c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    7f10:	803b      	strh	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    7f12:	d1da      	bne.n	7eca <rx_replenish+0x22>
}
    7f14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (mem_link_rx.quota_pdu &&
    7f18:	883b      	ldrh	r3, [r7, #0]
    7f1a:	2b00      	cmp	r3, #0
    7f1c:	d0fa      	beq.n	7f14 <rx_replenish+0x6c>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    7f1e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 7fb4 <rx_replenish+0x10c>
		link = mem_acquire(&mem_link_rx.free);
    7f22:	4d22      	ldr	r5, [pc, #136]	; (7fac <rx_replenish+0x104>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    7f24:	f899 4005 	ldrb.w	r4, [r9, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
    7f28:	4e21      	ldr	r6, [pc, #132]	; (7fb0 <rx_replenish+0x108>)
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    7f2a:	f109 0808 	add.w	r8, r9, #8
	if (last == count) {
    7f2e:	f899 2002 	ldrb.w	r2, [r9, #2]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    7f32:	f899 3004 	ldrb.w	r3, [r9, #4]
	last = last + 1;
    7f36:	3401      	adds	r4, #1
    7f38:	b2e4      	uxtb	r4, r4
		last = 0U;
    7f3a:	42a2      	cmp	r2, r4
    7f3c:	bf08      	it	eq
    7f3e:	2400      	moveq	r4, #0
	if (last == first) {
    7f40:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    7f42:	4628      	mov	r0, r5
    7f44:	d0e6      	beq.n	7f14 <rx_replenish+0x6c>
    7f46:	f7fe fae9 	bl	651c <mem_acquire>
    7f4a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    7f4c:	4630      	mov	r0, r6
		if (!link) {
    7f4e:	f1ba 0f00 	cmp.w	sl, #0
    7f52:	d0df      	beq.n	7f14 <rx_replenish+0x6c>
		rx = mem_acquire(&mem_pdu_rx.free);
    7f54:	f7fe fae2 	bl	651c <mem_acquire>
		link->mem = NULL;
    7f58:	2300      	movs	r3, #0
		if (!rx) {
    7f5a:	b1e0      	cbz	r0, 7f96 <rx_replenish+0xee>
		link->mem = NULL;
    7f5c:	f8ca 3004 	str.w	r3, [sl, #4]
		rx->link = link;
    7f60:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    7f64:	f899 3005 	ldrb.w	r3, [r9, #5]
    7f68:	f899 2000 	ldrb.w	r2, [r9]
    7f6c:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    7f70:	f848 0003 	str.w	r0, [r8, r3]
	mem_link_rx.quota_pdu += delta;
    7f74:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    7f76:	f889 4005 	strb.w	r4, [r9, #5]
    7f7a:	3b01      	subs	r3, #1
    7f7c:	b29b      	uxth	r3, r3
    7f7e:	803b      	strh	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
    7f80:	2b00      	cmp	r3, #0
    7f82:	d1d4      	bne.n	7f2e <rx_replenish+0x86>
    7f84:	e7c6      	b.n	7f14 <rx_replenish+0x6c>
    7f86:	4606      	mov	r6, r0
    7f88:	e797      	b.n	7eba <rx_replenish+0x12>
	mem_release(link, &mem_link_rx.free);
    7f8a:	4658      	mov	r0, fp
    7f8c:	4907      	ldr	r1, [pc, #28]	; (7fac <rx_replenish+0x104>)
}
    7f8e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mem_release(link, &mem_link_rx.free);
    7f92:	f7fe badf 	b.w	6554 <mem_release>
    7f96:	4650      	mov	r0, sl
    7f98:	4904      	ldr	r1, [pc, #16]	; (7fac <rx_replenish+0x104>)
}
    7f9a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mem_release(link, &mem_link_rx.free);
    7f9e:	f7fe bad9 	b.w	6554 <mem_release>
    7fa2:	bf00      	nop
    7fa4:	20001500 	.word	0x20001500
    7fa8:	200002ec 	.word	0x200002ec
    7fac:	20001504 	.word	0x20001504
    7fb0:	20001558 	.word	0x20001558
    7fb4:	200002d8 	.word	0x200002d8

00007fb8 <ull_done>:
}
#endif /* CONFIG_BT_CONN || CONFIG_BT_CTLR_ADV_ISO */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
    7fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7fbc:	4e3c      	ldr	r6, [pc, #240]	; (80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
    7fbe:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>
    7fc2:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>
{
    7fc6:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    7fc8:	e9d6 0100 	ldrd	r0, r1, [r6]
    7fcc:	aa01      	add	r2, sp, #4
    7fce:	f7fe fb15 	bl	65fc <memq_peek>
		if (link) {
    7fd2:	4604      	mov	r4, r0
    7fd4:	2800      	cmp	r0, #0
    7fd6:	d03e      	beq.n	8056 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56>
			(void)memq_dequeue(memq_ull_done.tail,
    7fd8:	6870      	ldr	r0, [r6, #4]
    7fda:	2200      	movs	r2, #0
    7fdc:	4631      	mov	r1, r6
    7fde:	f7fe fb15 	bl	660c <memq_dequeue>
			rx_demux_event_done(link, done);
    7fe2:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
    7fe4:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
    7fe6:	b135      	cbz	r5, 7ff6 <ull_done+0x3e>
    7fe8:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
    7fea:	2b00      	cmp	r3, #0
    7fec:	d052      	beq.n	8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>
	return hdr->ref--;
    7fee:	782b      	ldrb	r3, [r5, #0]
    7ff0:	3b01      	subs	r3, #1
    7ff2:	b2db      	uxtb	r3, r3
    7ff4:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
    7ff6:	f897 3020 	ldrb.w	r3, [r7, #32]
    7ffa:	b123      	cbz	r3, 8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7ffc:	2b01      	cmp	r3, #1
    7ffe:	d13b      	bne.n	8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
    8000:	4638      	mov	r0, r7
    8002:	f7f8 fcc1 	bl	988 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
    8006:	4a2d      	ldr	r2, [pc, #180]	; (80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>)
	last = last + 1;
    8008:	7953      	ldrb	r3, [r2, #5]
	if (last == count) {
    800a:	f892 c002 	ldrb.w	ip, [r2, #2]
    800e:	7910      	ldrb	r0, [r2, #4]
	last = last + 1;
    8010:	3301      	adds	r3, #1
	done->extra.type = 0U;
    8012:	2100      	movs	r1, #0
    8014:	b2db      	uxtb	r3, r3
		last = 0U;
    8016:	459c      	cmp	ip, r3
    8018:	bf08      	it	eq
    801a:	460b      	moveq	r3, r1
	if (last == first) {
    801c:	4298      	cmp	r0, r3
    801e:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
    8022:	7811      	ldrb	r1, [r2, #0]
    8024:	d01a      	beq.n	805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
    8026:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    8028:	7950      	ldrb	r0, [r2, #5]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    802a:	fb00 2101 	mla	r1, r0, r1, r2
    802e:	608f      	str	r7, [r1, #8]
	*last = idx; /* Commit: Update write index */
    8030:	7153      	strb	r3, [r2, #5]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    8032:	2d00      	cmp	r5, #0
    8034:	d0c8      	beq.n	7fc8 <ull_done+0x10>
	return hdr->ref;
    8036:	782b      	ldrb	r3, [r5, #0]
    8038:	2b00      	cmp	r3, #0
    803a:	d1c5      	bne.n	7fc8 <ull_done+0x10>
    803c:	696b      	ldr	r3, [r5, #20]
    803e:	2b00      	cmp	r3, #0
    8040:	d0c2      	beq.n	7fc8 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    8042:	69a8      	ldr	r0, [r5, #24]
    8044:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    8046:	e9d6 0100 	ldrd	r0, r1, [r6]
    804a:	aa01      	add	r2, sp, #4
    804c:	f7fe fad6 	bl	65fc <memq_peek>
		if (link) {
    8050:	4604      	mov	r4, r0
    8052:	2800      	cmp	r0, #0
    8054:	d1c0      	bne.n	7fd8 <ull_done+0x20>
}
    8056:	b003      	add	sp, #12
    8058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
    805c:	4918      	ldr	r1, [pc, #96]	; (80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>)
    805e:	4819      	ldr	r0, [pc, #100]	; (80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>)
    8060:	f640 33d8 	movw	r3, #3032	; 0xbd8
    8064:	4642      	mov	r2, r8
    8066:	f00f fa3c 	bl	174e2 <assert_print>
    806a:	4040      	eors	r0, r0
    806c:	f380 8811 	msr	BASEPRI, r0
    8070:	f04f 0003 	mov.w	r0, #3
    8074:	df02      	svc	2
    8076:	e7dc      	b.n	8032 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32>
		LL_ASSERT(0);
    8078:	4913      	ldr	r1, [pc, #76]	; (80c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8>)
    807a:	4812      	ldr	r0, [pc, #72]	; (80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>)
    807c:	f640 33d1 	movw	r3, #3025	; 0xbd1
    8080:	4642      	mov	r2, r8
    8082:	f00f fa2e 	bl	174e2 <assert_print>
    8086:	4040      	eors	r0, r0
    8088:	f380 8811 	msr	BASEPRI, r0
    808c:	f04f 0003 	mov.w	r0, #3
    8090:	df02      	svc	2
		break;
    8092:	e7b8      	b.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
		LL_ASSERT(ull_ref_get(ull_hdr));
    8094:	480b      	ldr	r0, [pc, #44]	; (80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>)
    8096:	f640 337a 	movw	r3, #2938	; 0xb7a
    809a:	4642      	mov	r2, r8
    809c:	4649      	mov	r1, r9
    809e:	f00f fa20 	bl	174e2 <assert_print>
    80a2:	4040      	eors	r0, r0
    80a4:	f380 8811 	msr	BASEPRI, r0
    80a8:	f04f 0003 	mov.w	r0, #3
    80ac:	df02      	svc	2
    80ae:	e79e      	b.n	7fee <ull_done+0x36>
    80b0:	200014e8 	.word	0x200014e8
    80b4:	0001b8ac 	.word	0x0001b8ac
    80b8:	0001b8f0 	.word	0x0001b8f0
    80bc:	200003f0 	.word	0x200003f0
    80c0:	0001b90c 	.word	0x0001b90c
    80c4:	0001b844 	.word	0x0001b844
    80c8:	0001b908 	.word	0x0001b908

000080cc <rx_demux>:
{
    80cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8280 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
    80d4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8284 <rx_demux+0x1b8>
			LL_ASSERT(rx);
    80d8:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8288 <rx_demux+0x1bc>
    80dc:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 828c <rx_demux+0x1c0>
{
    80e0:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    80e2:	e9d8 0100 	ldrd	r0, r1, [r8]
    80e6:	aa03      	add	r2, sp, #12
    80e8:	f7fe fa88 	bl	65fc <memq_peek>
		if (link) {
    80ec:	4605      	mov	r5, r0
    80ee:	2800      	cmp	r0, #0
    80f0:	d035      	beq.n	815e <rx_demux+0x92>
			LL_ASSERT(rx);
    80f2:	9b03      	ldr	r3, [sp, #12]
    80f4:	2b00      	cmp	r3, #0
    80f6:	f000 80a6 	beq.w	8246 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    80fa:	7818      	ldrb	r0, [r3, #0]
    80fc:	aa04      	add	r2, sp, #16
    80fe:	a902      	add	r1, sp, #8
    8100:	f003 fd46 	bl	bb90 <ull_conn_ack_by_last_peek>
			if (link_tx) {
    8104:	4604      	mov	r4, r0
    8106:	2800      	cmp	r0, #0
    8108:	d055      	beq.n	81b6 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    810a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    810e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    8112:	780f      	ldrb	r7, [r1, #0]
    8114:	f8ad 200a 	strh.w	r2, [sp, #10]
    8118:	ae05      	add	r6, sp, #20
    811a:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    811c:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    8120:	f003 fd50 	bl	bbc4 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    8124:	4621      	mov	r1, r4
    8126:	9a05      	ldr	r2, [sp, #20]
    8128:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    812c:	f003 fd92 	bl	bc54 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    8130:	4620      	mov	r0, r4
    8132:	f003 fd05 	bl	bb40 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    8136:	4632      	mov	r2, r6
    8138:	4629      	mov	r1, r5
    813a:	4638      	mov	r0, r7
    813c:	f003 fd28 	bl	bb90 <ull_conn_ack_by_last_peek>
	} while (link);
    8140:	4604      	mov	r4, r0
    8142:	2800      	cmp	r0, #0
    8144:	d1ec      	bne.n	8120 <rx_demux+0x54>
	k_sem_give(sem_recv);
    8146:	f8d9 0000 	ldr.w	r0, [r9]
    814a:	f00d fe81 	bl	15e50 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    814e:	e9d8 0100 	ldrd	r0, r1, [r8]
    8152:	aa03      	add	r2, sp, #12
    8154:	f7fe fa52 	bl	65fc <memq_peek>
		if (link) {
    8158:	4605      	mov	r5, r0
    815a:	2800      	cmp	r0, #0
    815c:	d1c9      	bne.n	80f2 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    815e:	aa04      	add	r2, sp, #16
    8160:	a902      	add	r1, sp, #8
    8162:	f10d 0007 	add.w	r0, sp, #7
    8166:	f003 fcf7 	bl	bb58 <ull_conn_ack_peek>
			if (link) {
    816a:	4604      	mov	r4, r0
    816c:	2800      	cmp	r0, #0
    816e:	d067      	beq.n	8240 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
    8170:	9b04      	ldr	r3, [sp, #16]
    8172:	9305      	str	r3, [sp, #20]
    8174:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    8178:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    817c:	f8ad 300a 	strh.w	r3, [sp, #10]
    8180:	ae05      	add	r6, sp, #20
    8182:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    8186:	f003 fd1d 	bl	bbc4 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    818a:	4621      	mov	r1, r4
    818c:	9a05      	ldr	r2, [sp, #20]
    818e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    8192:	f003 fd5f 	bl	bc54 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    8196:	4620      	mov	r0, r4
    8198:	f003 fcd2 	bl	bb40 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    819c:	4632      	mov	r2, r6
    819e:	4629      	mov	r1, r5
    81a0:	4638      	mov	r0, r7
    81a2:	f003 fcf5 	bl	bb90 <ull_conn_ack_by_last_peek>
	} while (link);
    81a6:	4604      	mov	r4, r0
    81a8:	2800      	cmp	r0, #0
    81aa:	d1ec      	bne.n	8186 <rx_demux+0xba>
	k_sem_give(sem_recv);
    81ac:	f8d9 0000 	ldr.w	r0, [r9]
    81b0:	f00d fe4e 	bl	15e50 <z_impl_k_sem_give>
	} while (link);
    81b4:	e7cb      	b.n	814e <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
    81b6:	9b03      	ldr	r3, [sp, #12]
    81b8:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    81ba:	791b      	ldrb	r3, [r3, #4]
    81bc:	3b01      	subs	r3, #1
    81be:	2b17      	cmp	r3, #23
    81c0:	d80d      	bhi.n	81de <rx_demux+0x112>
    81c2:	e8df f003 	tbb	[pc, r3]
    81c6:	0c1a      	.short	0x0c1a
    81c8:	0c0c0c38 	.word	0x0c0c0c38
    81cc:	0c0c0c0c 	.word	0x0c0c0c0c
    81d0:	0c0c0c0c 	.word	0x0c0c0c0c
    81d4:	0c0c0c0c 	.word	0x0c0c0c0c
    81d8:	0c0c0c0c 	.word	0x0c0c0c0c
    81dc:	1a2d      	.short	0x1a2d
		LL_ASSERT(0);
    81de:	4a2a      	ldr	r2, [pc, #168]	; (8288 <rx_demux+0x1bc>)
    81e0:	492b      	ldr	r1, [pc, #172]	; (8290 <rx_demux+0x1c4>)
    81e2:	482c      	ldr	r0, [pc, #176]	; (8294 <rx_demux+0x1c8>)
    81e4:	f640 3367 	movw	r3, #2919	; 0xb67
    81e8:	f00f f97b 	bl	174e2 <assert_print>
    81ec:	4040      	eors	r0, r0
    81ee:	f380 8811 	msr	BASEPRI, r0
    81f2:	f04f 0003 	mov.w	r0, #3
    81f6:	df02      	svc	2
			if (nack) {
    81f8:	e773      	b.n	80e2 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    81fa:	4921      	ldr	r1, [pc, #132]	; (8280 <rx_demux+0x1b4>)
    81fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8200:	2200      	movs	r2, #0
    8202:	f7fe fa03 	bl	660c <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    8206:	4b24      	ldr	r3, [pc, #144]	; (8298 <rx_demux+0x1cc>)
		ll_rx_put_sched(link, rx);
    8208:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    820a:	795b      	ldrb	r3, [r3, #5]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    820c:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
    820e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    8210:	4a22      	ldr	r2, [pc, #136]	; (829c <rx_demux+0x1d0>)
    8212:	f7fe f9e9 	bl	65e8 <memq_enqueue>
	k_sem_give(sem_recv);
    8216:	4b1b      	ldr	r3, [pc, #108]	; (8284 <rx_demux+0x1b8>)
    8218:	6818      	ldr	r0, [r3, #0]
    821a:	f00d fe19 	bl	15e50 <z_impl_k_sem_give>
			if (nack) {
    821e:	e760      	b.n	80e2 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    8220:	4917      	ldr	r1, [pc, #92]	; (8280 <rx_demux+0x1b4>)
    8222:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8226:	2200      	movs	r2, #0
    8228:	f7fe f9f0 	bl	660c <memq_dequeue>
		ull_conn_setup(link, rx);
    822c:	9905      	ldr	r1, [sp, #20]
    822e:	4628      	mov	r0, r5
    8230:	f003 fad4 	bl	b7dc <ull_conn_setup>
			if (nack) {
    8234:	e755      	b.n	80e2 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
    8236:	a905      	add	r1, sp, #20
    8238:	4628      	mov	r0, r5
    823a:	f003 faf7 	bl	b82c <ull_conn_rx>
		if (nack) {
    823e:	b188      	cbz	r0, 8264 <rx_demux+0x198>
}
    8240:	b007      	add	sp, #28
    8242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    8246:	4813      	ldr	r0, [pc, #76]	; (8294 <rx_demux+0x1c8>)
    8248:	f640 13a7 	movw	r3, #2471	; 0x9a7
    824c:	465a      	mov	r2, fp
    824e:	4651      	mov	r1, sl
    8250:	f00f f947 	bl	174e2 <assert_print>
    8254:	4040      	eors	r0, r0
    8256:	f380 8811 	msr	BASEPRI, r0
    825a:	f04f 0003 	mov.w	r0, #3
    825e:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    8260:	9b03      	ldr	r3, [sp, #12]
    8262:	e74a      	b.n	80fa <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    8264:	4906      	ldr	r1, [pc, #24]	; (8280 <rx_demux+0x1b4>)
    8266:	4602      	mov	r2, r0
    8268:	f8d8 0004 	ldr.w	r0, [r8, #4]
    826c:	f7fe f9ce 	bl	660c <memq_dequeue>
		if (rx) {
    8270:	9905      	ldr	r1, [sp, #20]
    8272:	2900      	cmp	r1, #0
    8274:	f43f af35 	beq.w	80e2 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    8278:	4b07      	ldr	r3, [pc, #28]	; (8298 <rx_demux+0x1cc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    827a:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
    827c:	795b      	ldrb	r3, [r3, #5]
    827e:	e7c6      	b.n	820e <rx_demux+0x142>
    8280:	200014f8 	.word	0x200014f8
    8284:	200017a8 	.word	0x200017a8
    8288:	0001b8ac 	.word	0x0001b8ac
    828c:	0001b91c 	.word	0x0001b91c
    8290:	0001b908 	.word	0x0001b908
    8294:	0001b844 	.word	0x0001b844
    8298:	200002b0 	.word	0x200002b0
    829c:	200014f4 	.word	0x200014f4

000082a0 <ll_rx_get>:
{
    82a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    82a4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8374 <ll_rx_get+0xd4>
    82a8:	4f33      	ldr	r7, [pc, #204]	; (8378 <ll_rx_get+0xd8>)
{
    82aa:	b082      	sub	sp, #8
    82ac:	4680      	mov	r8, r0
    82ae:	4689      	mov	r9, r1
			f = mfifo_tx_ack.f;
    82b0:	f1aa 0504 	sub.w	r5, sl, #4
	*node_rx = NULL;
    82b4:	2300      	movs	r3, #0
    82b6:	f8c8 3000 	str.w	r3, [r8]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    82ba:	e9d7 0100 	ldrd	r0, r1, [r7]
    82be:	aa01      	add	r2, sp, #4
    82c0:	f7fe f99c 	bl	65fc <memq_peek>
	if (link) {
    82c4:	4606      	mov	r6, r0
    82c6:	2800      	cmp	r0, #0
    82c8:	d042      	beq.n	8350 <ll_rx_get+0xb0>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    82ca:	9b01      	ldr	r3, [sp, #4]
    82cc:	4651      	mov	r1, sl
    82ce:	781a      	ldrb	r2, [r3, #0]
    82d0:	4648      	mov	r0, r9
    82d2:	f7ff fd8f 	bl	7df4 <tx_cmplt_get>
		if (!cmplt) {
    82d6:	4603      	mov	r3, r0
    82d8:	2800      	cmp	r0, #0
    82da:	d140      	bne.n	835e <ll_rx_get+0xbe>
			f = mfifo_tx_ack.f;
    82dc:	792a      	ldrb	r2, [r5, #4]
    82de:	f88d 2001 	strb.w	r2, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
    82e2:	796a      	ldrb	r2, [r5, #5]
    82e4:	f10d 0101 	add.w	r1, sp, #1
    82e8:	f10d 0002 	add.w	r0, sp, #2
    82ec:	461c      	mov	r4, r3
    82ee:	f7ff fd81 	bl	7df4 <tx_cmplt_get>
    82f2:	ea44 0200 	orr.w	r2, r4, r0
			} while ((cmplt_prev != 0U) ||
    82f6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
    82fa:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
    82fc:	d1f1      	bne.n	82e2 <ll_rx_get+0x42>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
    82fe:	9b01      	ldr	r3, [sp, #4]
    8300:	7919      	ldrb	r1, [r3, #4]
    8302:	2901      	cmp	r1, #1
    8304:	d12f      	bne.n	8366 <ll_rx_get+0xc6>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    8306:	4c1d      	ldr	r4, [pc, #116]	; (837c <ll_rx_get+0xdc>)
	(void)memq_dequeue(memq_ll_rx.tail,
    8308:	6878      	ldr	r0, [r7, #4]
    830a:	4639      	mov	r1, r7
    830c:	f7fe f97e 	bl	660c <memq_dequeue>
	mem_release(link, &mem_link_rx.free);
    8310:	1d21      	adds	r1, r4, #4
    8312:	4630      	mov	r0, r6
    8314:	f7fe f91e 	bl	6554 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    8318:	8823      	ldrh	r3, [r4, #0]
    831a:	2b05      	cmp	r3, #5
    831c:	d809      	bhi.n	8332 <ll_rx_get+0x92>
	mem_release(node_rx, &mem_pdu_rx.free);
    831e:	9801      	ldr	r0, [sp, #4]
    8320:	4917      	ldr	r1, [pc, #92]	; (8380 <ll_rx_get+0xe0>)
	mem_link_rx.quota_pdu += delta;
    8322:	3301      	adds	r3, #1
    8324:	8023      	strh	r3, [r4, #0]
	mem_release(node_rx, &mem_pdu_rx.free);
    8326:	f7fe f915 	bl	6554 <mem_release>
	rx_replenish(1U);
    832a:	2001      	movs	r0, #1
    832c:	f7ff fdbc 	bl	7ea8 <rx_replenish>
				goto ll_rx_get_again;
    8330:	e7c0      	b.n	82b4 <ll_rx_get+0x14>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    8332:	4a14      	ldr	r2, [pc, #80]	; (8384 <ll_rx_get+0xe4>)
    8334:	4914      	ldr	r1, [pc, #80]	; (8388 <ll_rx_get+0xe8>)
    8336:	4815      	ldr	r0, [pc, #84]	; (838c <ll_rx_get+0xec>)
    8338:	f240 6387 	movw	r3, #1671	; 0x687
    833c:	f00f f8d1 	bl	174e2 <assert_print>
    8340:	4040      	eors	r0, r0
    8342:	f380 8811 	msr	BASEPRI, r0
    8346:	f04f 0003 	mov.w	r0, #3
    834a:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    834c:	8823      	ldrh	r3, [r4, #0]
    834e:	e7e6      	b.n	831e <ll_rx_get+0x7e>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    8350:	490f      	ldr	r1, [pc, #60]	; (8390 <ll_rx_get+0xf0>)
    8352:	4648      	mov	r0, r9
    8354:	794a      	ldrb	r2, [r1, #5]
    8356:	3104      	adds	r1, #4
    8358:	f7ff fd4c 	bl	7df4 <tx_cmplt_get>
    835c:	4603      	mov	r3, r0
}
    835e:	4618      	mov	r0, r3
    8360:	b002      	add	sp, #8
    8362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*node_rx = rx;
    8366:	f8c8 3000 	str.w	r3, [r8]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    836a:	4613      	mov	r3, r2
}
    836c:	4618      	mov	r0, r3
    836e:	b002      	add	sp, #8
    8370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8374:	200002b4 	.word	0x200002b4
    8378:	200014f0 	.word	0x200014f0
    837c:	20001500 	.word	0x20001500
    8380:	20001558 	.word	0x20001558
    8384:	0001b8ac 	.word	0x0001b8ac
    8388:	0001b920 	.word	0x0001b920
    838c:	0001b844 	.word	0x0001b844
    8390:	200002b0 	.word	0x200002b0

00008394 <ll_rx_dequeue>:
{
    8394:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    8396:	495a      	ldr	r1, [pc, #360]	; (8500 <ll_rx_dequeue+0x16c>)
{
    8398:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    839a:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    839c:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    839e:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    83a0:	aa01      	add	r2, sp, #4
    83a2:	f7fe f933 	bl	660c <memq_dequeue>
	LL_ASSERT(link);
    83a6:	4604      	mov	r4, r0
    83a8:	2800      	cmp	r0, #0
    83aa:	d05c      	beq.n	8466 <ll_rx_dequeue+0xd2>
	mem_release(link, &mem_link_rx.free);
    83ac:	4955      	ldr	r1, [pc, #340]	; (8504 <ll_rx_dequeue+0x170>)
    83ae:	4620      	mov	r0, r4
    83b0:	f7fe f8d0 	bl	6554 <mem_release>
	switch (rx->type) {
    83b4:	9a01      	ldr	r2, [sp, #4]
    83b6:	7913      	ldrb	r3, [r2, #4]
    83b8:	2b1d      	cmp	r3, #29
    83ba:	d810      	bhi.n	83de <ll_rx_dequeue+0x4a>
    83bc:	e8df f003 	tbb	[pc, r3]
    83c0:	1e0f0f1e 	.word	0x1e0f0f1e
    83c4:	0f0f0f0f 	.word	0x0f0f0f0f
    83c8:	0f0f0f0f 	.word	0x0f0f0f0f
    83cc:	0f0f0f0f 	.word	0x0f0f0f0f
    83d0:	0f0f0f0f 	.word	0x0f0f0f0f
    83d4:	2f0f0f0f 	.word	0x2f0f0f0f
    83d8:	1e1e1e1e 	.word	0x1e1e1e1e
    83dc:	1e1e      	.short	0x1e1e
		LL_ASSERT(0);
    83de:	4a4a      	ldr	r2, [pc, #296]	; (8508 <ll_rx_dequeue+0x174>)
    83e0:	494a      	ldr	r1, [pc, #296]	; (850c <ll_rx_dequeue+0x178>)
    83e2:	484b      	ldr	r0, [pc, #300]	; (8510 <ll_rx_dequeue+0x17c>)
    83e4:	f240 533f 	movw	r3, #1343	; 0x53f
    83e8:	f00f f87b 	bl	174e2 <assert_print>
    83ec:	4040      	eors	r0, r0
    83ee:	f380 8811 	msr	BASEPRI, r0
    83f2:	f04f 0003 	mov.w	r0, #3
    83f6:	df02      	svc	2
}
    83f8:	b002      	add	sp, #8
    83fa:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    83fc:	2b00      	cmp	r3, #0
    83fe:	d1fb      	bne.n	83f8 <ll_rx_dequeue+0x64>
    8400:	4a41      	ldr	r2, [pc, #260]	; (8508 <ll_rx_dequeue+0x174>)
    8402:	4944      	ldr	r1, [pc, #272]	; (8514 <ll_rx_dequeue+0x180>)
    8404:	4842      	ldr	r0, [pc, #264]	; (8510 <ll_rx_dequeue+0x17c>)
    8406:	f240 533b 	movw	r3, #1339	; 0x53b
    840a:	f00f f86a 	bl	174e2 <assert_print>
    840e:	4040      	eors	r0, r0
    8410:	f380 8811 	msr	BASEPRI, r0
    8414:	f04f 0003 	mov.w	r0, #3
    8418:	df02      	svc	2
}
    841a:	b002      	add	sp, #8
    841c:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    841e:	7f13      	ldrb	r3, [r2, #28]
    8420:	2b3c      	cmp	r3, #60	; 0x3c
    8422:	d02e      	beq.n	8482 <ll_rx_dequeue+0xee>
    8424:	7f53      	ldrb	r3, [r2, #29]
    8426:	b183      	cbz	r3, 844a <ll_rx_dequeue+0xb6>
			adv = HDR_LLL2ULL(lll);
    8428:	6893      	ldr	r3, [r2, #8]
    842a:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
    842c:	6e60      	ldr	r0, [r4, #100]	; 0x64
    842e:	b120      	cbz	r0, 843a <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
    8430:	2300      	movs	r3, #0
	mem_release(node_rx, &mem_pdu_rx.free);
    8432:	4939      	ldr	r1, [pc, #228]	; (8518 <ll_rx_dequeue+0x184>)
					adv->node_rx_cc_free = NULL;
    8434:	6663      	str	r3, [r4, #100]	; 0x64
	mem_release(node_rx, &mem_pdu_rx.free);
    8436:	f7fe f88d 	bl	6554 <mem_release>
			adv->is_enabled = 0U;
    843a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    843e:	f36f 0300 	bfc	r3, #0, #1
    8442:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
    8446:	b002      	add	sp, #8
    8448:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
    844a:	4a2f      	ldr	r2, [pc, #188]	; (8508 <ll_rx_dequeue+0x174>)
    844c:	492f      	ldr	r1, [pc, #188]	; (850c <ll_rx_dequeue+0x178>)
    844e:	4830      	ldr	r0, [pc, #192]	; (8510 <ll_rx_dequeue+0x17c>)
    8450:	f240 43c4 	movw	r3, #1220	; 0x4c4
    8454:	f00f f845 	bl	174e2 <assert_print>
    8458:	4040      	eors	r0, r0
    845a:	f380 8811 	msr	BASEPRI, r0
    845e:	f04f 0003 	mov.w	r0, #3
    8462:	df02      	svc	2
    8464:	e7c8      	b.n	83f8 <ll_rx_dequeue+0x64>
	LL_ASSERT(link);
    8466:	4a28      	ldr	r2, [pc, #160]	; (8508 <ll_rx_dequeue+0x174>)
    8468:	492c      	ldr	r1, [pc, #176]	; (851c <ll_rx_dequeue+0x188>)
    846a:	4829      	ldr	r0, [pc, #164]	; (8510 <ll_rx_dequeue+0x17c>)
    846c:	f240 4307 	movw	r3, #1031	; 0x407
    8470:	f00f f837 	bl	174e2 <assert_print>
    8474:	4040      	eors	r0, r0
    8476:	f380 8811 	msr	BASEPRI, r0
    847a:	f04f 0003 	mov.w	r0, #3
    847e:	df02      	svc	2
    8480:	e794      	b.n	83ac <ll_rx_dequeue+0x18>
			lll = ftr->param;
    8482:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
    8484:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
    8488:	b1ed      	cbz	r5, 84c6 <ll_rx_dequeue+0x132>
				lll->conn = NULL;
    848a:	2300      	movs	r3, #0
    848c:	6073      	str	r3, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
    848e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    8490:	b163      	cbz	r3, 84ac <ll_rx_dequeue+0x118>
    8492:	4a1d      	ldr	r2, [pc, #116]	; (8508 <ll_rx_dequeue+0x174>)
    8494:	4922      	ldr	r1, [pc, #136]	; (8520 <ll_rx_dequeue+0x18c>)
    8496:	481e      	ldr	r0, [pc, #120]	; (8510 <ll_rx_dequeue+0x17c>)
    8498:	f44f 6390 	mov.w	r3, #1152	; 0x480
    849c:	f00f f821 	bl	174e2 <assert_print>
    84a0:	4040      	eors	r0, r0
    84a2:	f380 8811 	msr	BASEPRI, r0
    84a6:	f04f 0003 	mov.w	r0, #3
    84aa:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    84ac:	f105 0160 	add.w	r1, r5, #96	; 0x60
    84b0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    84b4:	f7fe f88e 	bl	65d4 <memq_deinit>
				LL_ASSERT(link);
    84b8:	4606      	mov	r6, r0
    84ba:	b190      	cbz	r0, 84e2 <ll_rx_dequeue+0x14e>
				ll_conn_release(conn);
    84bc:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
    84be:	66ee      	str	r6, [r5, #108]	; 0x6c
				ll_conn_release(conn);
    84c0:	f002 fefc 	bl	b2bc <ll_conn_release>
    84c4:	e7b9      	b.n	843a <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
    84c6:	4a10      	ldr	r2, [pc, #64]	; (8508 <ll_rx_dequeue+0x174>)
    84c8:	4916      	ldr	r1, [pc, #88]	; (8524 <ll_rx_dequeue+0x190>)
    84ca:	4811      	ldr	r0, [pc, #68]	; (8510 <ll_rx_dequeue+0x17c>)
    84cc:	f240 437d 	movw	r3, #1149	; 0x47d
    84d0:	f00f f807 	bl	174e2 <assert_print>
    84d4:	4040      	eors	r0, r0
    84d6:	f380 8811 	msr	BASEPRI, r0
    84da:	f04f 0003 	mov.w	r0, #3
    84de:	df02      	svc	2
    84e0:	e7d3      	b.n	848a <ll_rx_dequeue+0xf6>
				LL_ASSERT(link);
    84e2:	4a09      	ldr	r2, [pc, #36]	; (8508 <ll_rx_dequeue+0x174>)
    84e4:	490d      	ldr	r1, [pc, #52]	; (851c <ll_rx_dequeue+0x188>)
    84e6:	480a      	ldr	r0, [pc, #40]	; (8510 <ll_rx_dequeue+0x17c>)
    84e8:	f240 4383 	movw	r3, #1155	; 0x483
    84ec:	f00e fff9 	bl	174e2 <assert_print>
    84f0:	4040      	eors	r0, r0
    84f2:	f380 8811 	msr	BASEPRI, r0
    84f6:	f04f 0003 	mov.w	r0, #3
    84fa:	df02      	svc	2
    84fc:	e7de      	b.n	84bc <ll_rx_dequeue+0x128>
    84fe:	bf00      	nop
    8500:	200014f0 	.word	0x200014f0
    8504:	20001504 	.word	0x20001504
    8508:	0001b8ac 	.word	0x0001b8ac
    850c:	0001b908 	.word	0x0001b908
    8510:	0001b844 	.word	0x0001b844
    8514:	0001b984 	.word	0x0001b984
    8518:	20001558 	.word	0x20001558
    851c:	0001bdb0 	.word	0x0001bdb0
    8520:	0001b96c 	.word	0x0001b96c
    8524:	0001b960 	.word	0x0001b960

00008528 <ll_rx_mem_release>:
{
    8528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
    852c:	6804      	ldr	r4, [r0, #0]
{
    852e:	4680      	mov	r8, r0
	while (rx) {
    8530:	b344      	cbz	r4, 8584 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
    8532:	4f57      	ldr	r7, [pc, #348]	; (8690 <ll_rx_mem_release+0x168>)
    8534:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8694 <ll_rx_mem_release+0x16c>
    8538:	4e57      	ldr	r6, [pc, #348]	; (8698 <ll_rx_mem_release+0x170>)
		rx = rx->next;
    853a:	4625      	mov	r5, r4
    853c:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    853e:	792b      	ldrb	r3, [r5, #4]
    8540:	2b1d      	cmp	r3, #29
    8542:	d810      	bhi.n	8566 <ll_rx_mem_release+0x3e>
    8544:	e8df f003 	tbb	[pc, r3]
    8548:	380f0f38 	.word	0x380f0f38
    854c:	0f0f0f0f 	.word	0x0f0f0f0f
    8550:	0f0f0f0f 	.word	0x0f0f0f0f
    8554:	0f0f0f0f 	.word	0x0f0f0f0f
    8558:	0f0f0f0f 	.word	0x0f0f0f0f
    855c:	260f0f0f 	.word	0x260f0f0f
    8560:	38383856 	.word	0x38383856
    8564:	3838      	.short	0x3838
			LL_ASSERT(0);
    8566:	f240 637b 	movw	r3, #1659	; 0x67b
    856a:	463a      	mov	r2, r7
    856c:	4649      	mov	r1, r9
    856e:	4630      	mov	r0, r6
    8570:	f00e ffb7 	bl	174e2 <assert_print>
    8574:	4040      	eors	r0, r0
    8576:	f380 8811 	msr	BASEPRI, r0
    857a:	f04f 0003 	mov.w	r0, #3
    857e:	df02      	svc	2
	while (rx) {
    8580:	2c00      	cmp	r4, #0
    8582:	d1da      	bne.n	853a <ll_rx_mem_release+0x12>
	*node_rx = rx;
    8584:	2300      	movs	r3, #0
    8586:	f8c8 3000 	str.w	r3, [r8]
}
    858a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_replenish(UINT8_MAX);
    858e:	20ff      	movs	r0, #255	; 0xff
    8590:	f7ff bc8a 	b.w	7ea8 <rx_replenish>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    8594:	7f2b      	ldrb	r3, [r5, #28]
    8596:	2b3c      	cmp	r3, #60	; 0x3c
    8598:	d063      	beq.n	8662 <ll_rx_mem_release+0x13a>
				LL_ASSERT(!cc->status);
    859a:	b1db      	cbz	r3, 85d4 <ll_rx_mem_release+0xac>
    859c:	4a3c      	ldr	r2, [pc, #240]	; (8690 <ll_rx_mem_release+0x168>)
    859e:	493f      	ldr	r1, [pc, #252]	; (869c <ll_rx_mem_release+0x174>)
    85a0:	483d      	ldr	r0, [pc, #244]	; (8698 <ll_rx_mem_release+0x170>)
    85a2:	f240 53a3 	movw	r3, #1443	; 0x5a3
    85a6:	f00e ff9c 	bl	174e2 <assert_print>
    85aa:	4040      	eors	r0, r0
    85ac:	f380 8811 	msr	BASEPRI, r0
    85b0:	f04f 0003 	mov.w	r0, #3
    85b4:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    85b6:	792b      	ldrb	r3, [r5, #4]
    85b8:	b963      	cbnz	r3, 85d4 <ll_rx_mem_release+0xac>
    85ba:	4939      	ldr	r1, [pc, #228]	; (86a0 <ll_rx_mem_release+0x178>)
    85bc:	f240 53f9 	movw	r3, #1529	; 0x5f9
    85c0:	463a      	mov	r2, r7
    85c2:	4630      	mov	r0, r6
    85c4:	f00e ff8d 	bl	174e2 <assert_print>
    85c8:	4040      	eors	r0, r0
    85ca:	f380 8811 	msr	BASEPRI, r0
    85ce:	f04f 0003 	mov.w	r0, #3
    85d2:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    85d4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 86a4 <ll_rx_mem_release+0x17c>
    85d8:	f8ba 3000 	ldrh.w	r3, [sl]
    85dc:	2b05      	cmp	r3, #5
    85de:	d830      	bhi.n	8642 <ll_rx_mem_release+0x11a>
	mem_link_rx.quota_pdu += delta;
    85e0:	3301      	adds	r3, #1
	mem_release(node_rx, &mem_pdu_rx.free);
    85e2:	4931      	ldr	r1, [pc, #196]	; (86a8 <ll_rx_mem_release+0x180>)
	mem_link_rx.quota_pdu += delta;
    85e4:	f8aa 3000 	strh.w	r3, [sl]
	mem_release(node_rx, &mem_pdu_rx.free);
    85e8:	4628      	mov	r0, r5
    85ea:	f7fd ffb3 	bl	6554 <mem_release>
	while (rx) {
    85ee:	2c00      	cmp	r4, #0
    85f0:	d1a3      	bne.n	853a <ll_rx_mem_release+0x12>
    85f2:	e7c7      	b.n	8584 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
    85f4:	88e8      	ldrh	r0, [r5, #6]
    85f6:	2800      	cmp	r0, #0
    85f8:	d1c2      	bne.n	8580 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
    85fa:	f002 fe6d 	bl	b2d8 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
    85fe:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
				conn = ll_conn_get(rx_free->handle);
    8602:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
    8604:	b163      	cbz	r3, 8620 <ll_rx_mem_release+0xf8>
    8606:	4a22      	ldr	r2, [pc, #136]	; (8690 <ll_rx_mem_release+0x168>)
    8608:	4928      	ldr	r1, [pc, #160]	; (86ac <ll_rx_mem_release+0x184>)
    860a:	4823      	ldr	r0, [pc, #140]	; (8698 <ll_rx_mem_release+0x170>)
    860c:	f240 636a 	movw	r3, #1642	; 0x66a
    8610:	f00e ff67 	bl	174e2 <assert_print>
    8614:	4040      	eors	r0, r0
    8616:	f380 8811 	msr	BASEPRI, r0
    861a:	f04f 0003 	mov.w	r0, #3
    861e:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
    8620:	f105 017c 	add.w	r1, r5, #124	; 0x7c
    8624:	f105 0078 	add.w	r0, r5, #120	; 0x78
    8628:	f7fd ffd4 	bl	65d4 <memq_deinit>
				LL_ASSERT(link);
    862c:	4682      	mov	sl, r0
    862e:	b300      	cbz	r0, 8672 <ll_rx_mem_release+0x14a>
				conn->lll.link_tx_free = link;
    8630:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
				ll_conn_release(conn);
    8634:	4628      	mov	r0, r5
    8636:	f002 fe41 	bl	b2bc <ll_conn_release>
	while (rx) {
    863a:	2c00      	cmp	r4, #0
    863c:	f47f af7d 	bne.w	853a <ll_rx_mem_release+0x12>
    8640:	e7a0      	b.n	8584 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    8642:	491b      	ldr	r1, [pc, #108]	; (86b0 <ll_rx_mem_release+0x188>)
    8644:	f240 6387 	movw	r3, #1671	; 0x687
    8648:	463a      	mov	r2, r7
    864a:	4630      	mov	r0, r6
    864c:	f00e ff49 	bl	174e2 <assert_print>
    8650:	4040      	eors	r0, r0
    8652:	f380 8811 	msr	BASEPRI, r0
    8656:	f04f 0003 	mov.w	r0, #3
    865a:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    865c:	f8ba 3000 	ldrh.w	r3, [sl]
    8660:	e7be      	b.n	85e0 <ll_rx_mem_release+0xb8>
	mem_release(node_rx, &mem_pdu_rx.free);
    8662:	4911      	ldr	r1, [pc, #68]	; (86a8 <ll_rx_mem_release+0x180>)
    8664:	4628      	mov	r0, r5
    8666:	f7fd ff75 	bl	6554 <mem_release>
	while (rx) {
    866a:	2c00      	cmp	r4, #0
    866c:	f47f af65 	bne.w	853a <ll_rx_mem_release+0x12>
    8670:	e788      	b.n	8584 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
    8672:	4a07      	ldr	r2, [pc, #28]	; (8690 <ll_rx_mem_release+0x168>)
    8674:	490f      	ldr	r1, [pc, #60]	; (86b4 <ll_rx_mem_release+0x18c>)
    8676:	4808      	ldr	r0, [pc, #32]	; (8698 <ll_rx_mem_release+0x170>)
    8678:	f240 636d 	movw	r3, #1645	; 0x66d
    867c:	f00e ff31 	bl	174e2 <assert_print>
    8680:	4040      	eors	r0, r0
    8682:	f380 8811 	msr	BASEPRI, r0
    8686:	f04f 0003 	mov.w	r0, #3
    868a:	df02      	svc	2
    868c:	e7d0      	b.n	8630 <ll_rx_mem_release+0x108>
    868e:	bf00      	nop
    8690:	0001b8ac 	.word	0x0001b8ac
    8694:	0001b908 	.word	0x0001b908
    8698:	0001b844 	.word	0x0001b844
    869c:	0001b9a4 	.word	0x0001b9a4
    86a0:	0001b9b0 	.word	0x0001b9b0
    86a4:	20001500 	.word	0x20001500
    86a8:	20001558 	.word	0x20001558
    86ac:	0001b9d4 	.word	0x0001b9d4
    86b0:	0001b920 	.word	0x0001b920
    86b4:	0001bdb0 	.word	0x0001bdb0

000086b8 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    86b8:	4801      	ldr	r0, [pc, #4]	; (86c0 <ll_rx_link_alloc+0x8>)
    86ba:	f7fd bf2f 	b.w	651c <mem_acquire>
    86be:	bf00      	nop
    86c0:	20001504 	.word	0x20001504

000086c4 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    86c4:	4901      	ldr	r1, [pc, #4]	; (86cc <ll_rx_link_release+0x8>)
    86c6:	f7fd bf45 	b.w	6554 <mem_release>
    86ca:	bf00      	nop
    86cc:	20001504 	.word	0x20001504

000086d0 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    86d0:	4801      	ldr	r0, [pc, #4]	; (86d8 <ll_rx_alloc+0x8>)
    86d2:	f7fd bf23 	b.w	651c <mem_acquire>
    86d6:	bf00      	nop
    86d8:	20001558 	.word	0x20001558

000086dc <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    86dc:	4901      	ldr	r1, [pc, #4]	; (86e4 <ll_rx_release+0x8>)
    86de:	f7fd bf39 	b.w	6554 <mem_release>
    86e2:	bf00      	nop
    86e4:	20001558 	.word	0x20001558

000086e8 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    86e8:	4b02      	ldr	r3, [pc, #8]	; (86f4 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    86ea:	4a03      	ldr	r2, [pc, #12]	; (86f8 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    86ec:	795b      	ldrb	r3, [r3, #5]
    86ee:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    86f0:	f7fd bf7a 	b.w	65e8 <memq_enqueue>
    86f4:	200002b0 	.word	0x200002b0
    86f8:	200014f4 	.word	0x200014f4

000086fc <ll_rx_put_sched>:
{
    86fc:	b508      	push	{r3, lr}
	rx_hdr->ack_last = mfifo_tx_ack.l;
    86fe:	4b06      	ldr	r3, [pc, #24]	; (8718 <ll_rx_put_sched+0x1c>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    8700:	4a06      	ldr	r2, [pc, #24]	; (871c <ll_rx_put_sched+0x20>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    8702:	795b      	ldrb	r3, [r3, #5]
    8704:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    8706:	f7fd ff6f 	bl	65e8 <memq_enqueue>
	k_sem_give(sem_recv);
    870a:	4b05      	ldr	r3, [pc, #20]	; (8720 <ll_rx_put_sched+0x24>)
    870c:	6818      	ldr	r0, [r3, #0]
}
    870e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8712:	f00d bb9d 	b.w	15e50 <z_impl_k_sem_give>
    8716:	bf00      	nop
    8718:	200002b0 	.word	0x200002b0
    871c:	200014f4 	.word	0x200014f4
    8720:	200017a8 	.word	0x200017a8

00008724 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    8724:	490e      	ldr	r1, [pc, #56]	; (8760 <ll_pdu_rx_alloc_peek+0x3c>)
    8726:	790b      	ldrb	r3, [r1, #4]
    8728:	794a      	ldrb	r2, [r1, #5]
	if (last >= first) {
    872a:	4293      	cmp	r3, r2
    872c:	d80d      	bhi.n	874a <ll_pdu_rx_alloc_peek+0x26>
		return last - first;
    872e:	eba2 0c03 	sub.w	ip, r2, r3
    8732:	fa5f fc8c 	uxtb.w	ip, ip
    8736:	4560      	cmp	r0, ip
    8738:	d80f      	bhi.n	875a <ll_pdu_rx_alloc_peek+0x36>
	if (first == last) {
    873a:	4293      	cmp	r3, r2
    873c:	d00d      	beq.n	875a <ll_pdu_rx_alloc_peek+0x36>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    873e:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
    8740:	4a08      	ldr	r2, [pc, #32]	; (8764 <ll_pdu_rx_alloc_peek+0x40>)
    8742:	fb13 f301 	smulbb	r3, r3, r1
    8746:	58d0      	ldr	r0, [r2, r3]
    8748:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    874a:	f8b1 c002 	ldrh.w	ip, [r1, #2]
		return count - first + last;
    874e:	ebac 0c03 	sub.w	ip, ip, r3
    8752:	4462      	add	r2, ip
    8754:	b2d2      	uxtb	r2, r2
    8756:	4290      	cmp	r0, r2
    8758:	d9f1      	bls.n	873e <ll_pdu_rx_alloc_peek+0x1a>
		return NULL;
    875a:	2000      	movs	r0, #0
}
    875c:	4770      	bx	lr
    875e:	bf00      	nop
    8760:	200002d8 	.word	0x200002d8
    8764:	200002e0 	.word	0x200002e0

00008768 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    8768:	4b09      	ldr	r3, [pc, #36]	; (8790 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    876a:	7919      	ldrb	r1, [r3, #4]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    876c:	795a      	ldrb	r2, [r3, #5]
    876e:	7818      	ldrb	r0, [r3, #0]
    8770:	f893 c002 	ldrb.w	ip, [r3, #2]
    8774:	428a      	cmp	r2, r1
    8776:	d009      	beq.n	878c <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    8778:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
    877a:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
    877e:	b2d2      	uxtb	r2, r2
	if (_first == count) {
		_first = 0U;
    8780:	4594      	cmp	ip, r2
    8782:	bf08      	it	eq
    8784:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    8786:	6880      	ldr	r0, [r0, #8]
	}

	*first = _first; /* Write back read-index */
    8788:	711a      	strb	r2, [r3, #4]

	return mem;
    878a:	4770      	bx	lr
		return NULL;
    878c:	2000      	movs	r0, #0
}
    878e:	4770      	bx	lr
    8790:	200002d8 	.word	0x200002d8

00008794 <ll_tx_ack_put>:
{
    8794:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    8796:	4c14      	ldr	r4, [pc, #80]	; (87e8 <ll_tx_ack_put+0x54>)
    8798:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
    879a:	f894 e002 	ldrb.w	lr, [r4, #2]
    879e:	f894 c004 	ldrb.w	ip, [r4, #4]
    87a2:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
    87a4:	1c53      	adds	r3, r2, #1
    87a6:	b2db      	uxtb	r3, r3
		last = 0U;
    87a8:	459e      	cmp	lr, r3
    87aa:	bf08      	it	eq
    87ac:	2300      	moveq	r3, #0
	if (last == first) {
    87ae:	459c      	cmp	ip, r3
    87b0:	d009      	beq.n	87c6 <ll_tx_ack_put+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    87b2:	fb12 f205 	smulbb	r2, r2, r5
    87b6:	f104 0c08 	add.w	ip, r4, #8
	tx->handle = handle;
    87ba:	f82c 0002 	strh.w	r0, [ip, r2]
    87be:	4462      	add	r2, ip
	tx->node = node_tx;
    87c0:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
    87c2:	7163      	strb	r3, [r4, #5]
}
    87c4:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
    87c6:	4a09      	ldr	r2, [pc, #36]	; (87ec <ll_tx_ack_put+0x58>)
    87c8:	4909      	ldr	r1, [pc, #36]	; (87f0 <ll_tx_ack_put+0x5c>)
    87ca:	480a      	ldr	r0, [pc, #40]	; (87f4 <ll_tx_ack_put+0x60>)
    87cc:	f240 63e1 	movw	r3, #1761	; 0x6e1
    87d0:	f00e fe87 	bl	174e2 <assert_print>
    87d4:	4040      	eors	r0, r0
    87d6:	f380 8811 	msr	BASEPRI, r0
    87da:	f04f 0003 	mov.w	r0, #3
    87de:	df02      	svc	2
	tx->handle = handle;
    87e0:	2300      	movs	r3, #0
    87e2:	801b      	strh	r3, [r3, #0]
    87e4:	deff      	udf	#255	; 0xff
    87e6:	bf00      	nop
    87e8:	200002b0 	.word	0x200002b0
    87ec:	0001b8ac 	.word	0x0001b8ac
    87f0:	0001bee8 	.word	0x0001bee8
    87f4:	0001b844 	.word	0x0001b844

000087f8 <ull_ticker_status_take>:
	if (ret == TICKER_STATUS_BUSY) {
    87f8:	f030 0302 	bics.w	r3, r0, #2
{
    87fc:	b510      	push	{r4, lr}
    87fe:	460c      	mov	r4, r1
	if (ret == TICKER_STATUS_BUSY) {
    8800:	d002      	beq.n	8808 <ull_ticker_status_take+0x10>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    8802:	680b      	ldr	r3, [r1, #0]
    8804:	2b02      	cmp	r3, #2
    8806:	d008      	beq.n	881a <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    8808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    880c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8810:	4809      	ldr	r0, [pc, #36]	; (8838 <ull_ticker_status_take+0x40>)
    8812:	f00d fb43 	bl	15e9c <z_impl_k_sem_take>
	return *ret_cb;
    8816:	6820      	ldr	r0, [r4, #0]
}
    8818:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    881a:	4a08      	ldr	r2, [pc, #32]	; (883c <ull_ticker_status_take+0x44>)
    881c:	4908      	ldr	r1, [pc, #32]	; (8840 <ull_ticker_status_take+0x48>)
    881e:	4809      	ldr	r0, [pc, #36]	; (8844 <ull_ticker_status_take+0x4c>)
    8820:	f240 731c 	movw	r3, #1820	; 0x71c
    8824:	f00e fe5d 	bl	174e2 <assert_print>
    8828:	4040      	eors	r0, r0
    882a:	f380 8811 	msr	BASEPRI, r0
    882e:	f04f 0003 	mov.w	r0, #3
    8832:	df02      	svc	2
    8834:	e7e8      	b.n	8808 <ull_ticker_status_take+0x10>
    8836:	bf00      	nop
    8838:	200017ac 	.word	0x200017ac
    883c:	0001b8ac 	.word	0x0001b8ac
    8840:	0001b9f4 	.word	0x0001b9f4
    8844:	0001b844 	.word	0x0001b844

00008848 <ull_disable_mark>:
	if (!*m) {
    8848:	4904      	ldr	r1, [pc, #16]	; (885c <ull_disable_mark+0x14>)
    884a:	680a      	ldr	r2, [r1, #0]
    884c:	b10a      	cbz	r2, 8852 <ull_disable_mark+0xa>
}
    884e:	4610      	mov	r0, r2
    8850:	4770      	bx	lr
		*m = param;
    8852:	4602      	mov	r2, r0
    8854:	6008      	str	r0, [r1, #0]
}
    8856:	4610      	mov	r0, r2
    8858:	4770      	bx	lr
    885a:	bf00      	nop
    885c:	200014e0 	.word	0x200014e0

00008860 <ull_disable_unmark>:
	if (*m && *m == param) {
    8860:	4a04      	ldr	r2, [pc, #16]	; (8874 <ull_disable_unmark+0x14>)
    8862:	6813      	ldr	r3, [r2, #0]
    8864:	b123      	cbz	r3, 8870 <ull_disable_unmark+0x10>
    8866:	4298      	cmp	r0, r3
		*m = NULL;
    8868:	bf06      	itte	eq
    886a:	2100      	moveq	r1, #0
    886c:	6011      	streq	r1, [r2, #0]
	return NULL;
    886e:	2300      	movne	r3, #0
}
    8870:	4618      	mov	r0, r3
    8872:	4770      	bx	lr
    8874:	200014e0 	.word	0x200014e0

00008878 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    8878:	4b01      	ldr	r3, [pc, #4]	; (8880 <ull_disable_mark_get+0x8>)
}
    887a:	6818      	ldr	r0, [r3, #0]
    887c:	4770      	bx	lr
    887e:	bf00      	nop
    8880:	200014e0 	.word	0x200014e0

00008884 <ull_update_mark>:
	if (!*m) {
    8884:	4904      	ldr	r1, [pc, #16]	; (8898 <ull_update_mark+0x14>)
    8886:	680a      	ldr	r2, [r1, #0]
    8888:	b10a      	cbz	r2, 888e <ull_update_mark+0xa>
}
    888a:	4610      	mov	r0, r2
    888c:	4770      	bx	lr
		*m = param;
    888e:	4602      	mov	r2, r0
    8890:	6008      	str	r0, [r1, #0]
}
    8892:	4610      	mov	r0, r2
    8894:	4770      	bx	lr
    8896:	bf00      	nop
    8898:	200014e4 	.word	0x200014e4

0000889c <ull_update_unmark>:
	if (*m && *m == param) {
    889c:	4a04      	ldr	r2, [pc, #16]	; (88b0 <ull_update_unmark+0x14>)
    889e:	6813      	ldr	r3, [r2, #0]
    88a0:	b123      	cbz	r3, 88ac <ull_update_unmark+0x10>
    88a2:	4298      	cmp	r0, r3
		*m = NULL;
    88a4:	bf06      	itte	eq
    88a6:	2100      	moveq	r1, #0
    88a8:	6011      	streq	r1, [r2, #0]
	return NULL;
    88aa:	2300      	movne	r3, #0
}
    88ac:	4618      	mov	r0, r3
    88ae:	4770      	bx	lr
    88b0:	200014e4 	.word	0x200014e4

000088b4 <ull_update_mark_get>:
	return mark_get(mark_update);
    88b4:	4b01      	ldr	r3, [pc, #4]	; (88bc <ull_update_mark_get+0x8>)
}
    88b6:	6818      	ldr	r0, [r3, #0]
    88b8:	4770      	bx	lr
    88ba:	bf00      	nop
    88bc:	200014e4 	.word	0x200014e4

000088c0 <ull_disable>:
{
    88c0:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
    88c2:	6805      	ldr	r5, [r0, #0]
    88c4:	782b      	ldrb	r3, [r5, #0]
{
    88c6:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
    88c8:	b353      	cbz	r3, 8920 <ull_disable+0x60>
	compiler_barrier();
    88ca:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    88cc:	2201      	movs	r2, #1
    88ce:	2100      	movs	r1, #0
    88d0:	4668      	mov	r0, sp
    88d2:	f011 ff38 	bl	1a746 <z_impl_k_sem_init>
    88d6:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
    88d8:	4a13      	ldr	r2, [pc, #76]	; (8928 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
    88da:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    88de:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
    88e0:	b1f3      	cbz	r3, 8920 <ull_disable+0x60>
	mfy.param = lll;
    88e2:	4b12      	ldr	r3, [pc, #72]	; (892c <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    88e4:	2200      	movs	r2, #0
    88e6:	4611      	mov	r1, r2
    88e8:	2003      	movs	r0, #3
	mfy.param = lll;
    88ea:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    88ec:	f7fd fef2 	bl	66d4 <mayfly_enqueue>
	LL_ASSERT(!ret);
    88f0:	b940      	cbnz	r0, 8904 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
    88f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    88f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    88fa:	4668      	mov	r0, sp
    88fc:	f00d face 	bl	15e9c <z_impl_k_sem_take>
}
    8900:	b007      	add	sp, #28
    8902:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    8904:	4a0a      	ldr	r2, [pc, #40]	; (8930 <ull_disable+0x70>)
    8906:	490b      	ldr	r1, [pc, #44]	; (8934 <ull_disable+0x74>)
    8908:	480b      	ldr	r0, [pc, #44]	; (8938 <ull_disable+0x78>)
    890a:	f240 7399 	movw	r3, #1945	; 0x799
    890e:	f00e fde8 	bl	174e2 <assert_print>
    8912:	4040      	eors	r0, r0
    8914:	f380 8811 	msr	BASEPRI, r0
    8918:	f04f 0003 	mov.w	r0, #3
    891c:	df02      	svc	2
    891e:	e7e8      	b.n	88f2 <ull_disable+0x32>
		return -EALREADY;
    8920:	f06f 0077 	mvn.w	r0, #119	; 0x77
    8924:	e7ec      	b.n	8900 <ull_disable+0x40>
    8926:	bf00      	nop
    8928:	00007df1 	.word	0x00007df1
    892c:	20000290 	.word	0x20000290
    8930:	0001b8ac 	.word	0x0001b8ac
    8934:	0001b9ec 	.word	0x0001b9ec
    8938:	0001b844 	.word	0x0001b844

0000893c <ull_ticker_stop_with_mark>:
{
    893c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    893e:	4e1e      	ldr	r6, [pc, #120]	; (89b8 <ull_ticker_stop_with_mark+0x7c>)
    8940:	6833      	ldr	r3, [r6, #0]
{
    8942:	b085      	sub	sp, #20
    8944:	460c      	mov	r4, r1
    8946:	4617      	mov	r7, r2
	if (!*m) {
    8948:	b353      	cbz	r3, 89a0 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
    894a:	4299      	cmp	r1, r3
    894c:	d113      	bne.n	8976 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    894e:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
    8950:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    8952:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    8954:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    8956:	9500      	str	r5, [sp, #0]
    8958:	4b18      	ldr	r3, [pc, #96]	; (89bc <ull_ticker_stop_with_mark+0x80>)
    895a:	2103      	movs	r1, #3
    895c:	2000      	movs	r0, #0
    895e:	f7ff f90d 	bl	7b7c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    8962:	4629      	mov	r1, r5
    8964:	f7ff ff48 	bl	87f8 <ull_ticker_status_take>
	if (ret) {
    8968:	4605      	mov	r5, r0
    896a:	b140      	cbz	r0, 897e <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
    896c:	6833      	ldr	r3, [r6, #0]
    896e:	b10b      	cbz	r3, 8974 <ull_ticker_stop_with_mark+0x38>
    8970:	429c      	cmp	r4, r3
    8972:	d017      	beq.n	89a4 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
    8974:	b1c4      	cbz	r4, 89a8 <ull_ticker_stop_with_mark+0x6c>
		return -ENOLCK;
    8976:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
    897a:	b005      	add	sp, #20
    897c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
    897e:	4638      	mov	r0, r7
    8980:	f7ff ff9e 	bl	88c0 <ull_disable>
	if (*m && *m == param) {
    8984:	6833      	ldr	r3, [r6, #0]
    8986:	b10b      	cbz	r3, 898c <ull_ticker_stop_with_mark+0x50>
    8988:	429c      	cmp	r4, r3
    898a:	d011      	beq.n	89b0 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
    898c:	2c00      	cmp	r4, #0
    898e:	d1f2      	bne.n	8976 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
    8990:	2800      	cmp	r0, #0
    8992:	d0f2      	beq.n	897a <ull_ticker_stop_with_mark+0x3e>
	return 0;
    8994:	f110 0f78 	cmn.w	r0, #120	; 0x78
    8998:	bf08      	it	eq
    899a:	2000      	moveq	r0, #0
}
    899c:	b005      	add	sp, #20
    899e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    89a0:	6031      	str	r1, [r6, #0]
	if (mark != param) {
    89a2:	e7d4      	b.n	894e <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    89a4:	2300      	movs	r3, #0
    89a6:	6033      	str	r3, [r6, #0]
		return -EALREADY;
    89a8:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    89ac:	b005      	add	sp, #20
    89ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    89b0:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
    89b2:	2800      	cmp	r0, #0
    89b4:	d0e1      	beq.n	897a <ull_ticker_stop_with_mark+0x3e>
    89b6:	e7ed      	b.n	8994 <ull_ticker_stop_with_mark+0x58>
    89b8:	200014e0 	.word	0x200014e0
    89bc:	00007de5 	.word	0x00007de5

000089c0 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    89c0:	490e      	ldr	r1, [pc, #56]	; (89fc <ull_pdu_rx_alloc_peek+0x3c>)
    89c2:	790b      	ldrb	r3, [r1, #4]
    89c4:	794a      	ldrb	r2, [r1, #5]
	if (last >= first) {
    89c6:	4293      	cmp	r3, r2
    89c8:	d80d      	bhi.n	89e6 <ull_pdu_rx_alloc_peek+0x26>
		return last - first;
    89ca:	eba2 0c03 	sub.w	ip, r2, r3
    89ce:	fa5f fc8c 	uxtb.w	ip, ip
    89d2:	4560      	cmp	r0, ip
    89d4:	d80f      	bhi.n	89f6 <ull_pdu_rx_alloc_peek+0x36>
	if (first == last) {
    89d6:	4293      	cmp	r3, r2
    89d8:	d00d      	beq.n	89f6 <ull_pdu_rx_alloc_peek+0x36>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    89da:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
    89dc:	4a08      	ldr	r2, [pc, #32]	; (8a00 <ull_pdu_rx_alloc_peek+0x40>)
    89de:	fb13 f301 	smulbb	r3, r3, r1
    89e2:	58d0      	ldr	r0, [r2, r3]
    89e4:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    89e6:	f8b1 c002 	ldrh.w	ip, [r1, #2]
		return count - first + last;
    89ea:	ebac 0c03 	sub.w	ip, ip, r3
    89ee:	4462      	add	r2, ip
    89f0:	b2d2      	uxtb	r2, r2
    89f2:	4290      	cmp	r0, r2
    89f4:	d9f1      	bls.n	89da <ull_pdu_rx_alloc_peek+0x1a>
		return NULL;
    89f6:	2000      	movs	r0, #0
}
    89f8:	4770      	bx	lr
    89fa:	bf00      	nop
    89fc:	200002ec 	.word	0x200002ec
    8a00:	200002f4 	.word	0x200002f4

00008a04 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
    8a04:	4b09      	ldr	r3, [pc, #36]	; (8a2c <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    8a06:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
    8a08:	795a      	ldrb	r2, [r3, #5]
    8a0a:	7818      	ldrb	r0, [r3, #0]
    8a0c:	f893 c002 	ldrb.w	ip, [r3, #2]
    8a10:	428a      	cmp	r2, r1
    8a12:	d009      	beq.n	8a28 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
    8a14:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
    8a16:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
    8a1a:	b2d2      	uxtb	r2, r2
		_first = 0U;
    8a1c:	4594      	cmp	ip, r2
    8a1e:	bf08      	it	eq
    8a20:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    8a22:	6880      	ldr	r0, [r0, #8]
	*first = _first; /* Write back read-index */
    8a24:	711a      	strb	r2, [r3, #4]
	return mem;
    8a26:	4770      	bx	lr
		return NULL;
    8a28:	2000      	movs	r0, #0
}
    8a2a:	4770      	bx	lr
    8a2c:	200002ec 	.word	0x200002ec

00008a30 <ull_rx_put>:
{
    8a30:	b538      	push	{r3, r4, r5, lr}
    8a32:	460c      	mov	r4, r1
    8a34:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    8a36:	f003 f889 	bl	bb4c <ull_conn_ack_last_idx_get>
    8a3a:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    8a3c:	4621      	mov	r1, r4
    8a3e:	4628      	mov	r0, r5
    8a40:	4a02      	ldr	r2, [pc, #8]	; (8a4c <ull_rx_put+0x1c>)
}
    8a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    8a46:	f7fd bdcf 	b.w	65e8 <memq_enqueue>
    8a4a:	bf00      	nop
    8a4c:	200014fc 	.word	0x200014fc

00008a50 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    8a50:	2201      	movs	r2, #1
    8a52:	4b02      	ldr	r3, [pc, #8]	; (8a5c <ull_rx_sched+0xc>)
    8a54:	4611      	mov	r1, r2
    8a56:	2000      	movs	r0, #0
    8a58:	f7fd be3c 	b.w	66d4 <mayfly_enqueue>
    8a5c:	20000280 	.word	0x20000280

00008a60 <ull_rx_put_sched>:
{
    8a60:	b570      	push	{r4, r5, r6, lr}
    8a62:	460c      	mov	r4, r1
    8a64:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    8a66:	f003 f871 	bl	bb4c <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    8a6a:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    8a6c:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    8a6e:	4a06      	ldr	r2, [pc, #24]	; (8a88 <ull_rx_put_sched+0x28>)
    8a70:	4628      	mov	r0, r5
    8a72:	f7fd fdb9 	bl	65e8 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    8a76:	2201      	movs	r2, #1
}
    8a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    8a7c:	4b03      	ldr	r3, [pc, #12]	; (8a8c <ull_rx_put_sched+0x2c>)
    8a7e:	4611      	mov	r1, r2
    8a80:	2000      	movs	r0, #0
    8a82:	f7fd be27 	b.w	66d4 <mayfly_enqueue>
    8a86:	bf00      	nop
    8a88:	200014fc 	.word	0x200014fc
    8a8c:	20000280 	.word	0x20000280

00008a90 <ull_prepare_enqueue>:
{
    8a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    8a94:	4e16      	ldr	r6, [pc, #88]	; (8af0 <ull_prepare_enqueue+0x60>)
{
    8a96:	f89d a020 	ldrb.w	sl, [sp, #32]
    8a9a:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    8a9c:	7973      	ldrb	r3, [r6, #5]
{
    8a9e:	460f      	mov	r7, r1
	last = last + 1;
    8aa0:	1c5d      	adds	r5, r3, #1
    8aa2:	4611      	mov	r1, r2
	if (last == count) {
    8aa4:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
    8aa6:	b2ed      	uxtb	r5, r5
		last = 0U;
    8aa8:	42aa      	cmp	r2, r5
    8aaa:	bf08      	it	eq
    8aac:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    8aae:	7932      	ldrb	r2, [r6, #4]
	if (last == first) {
    8ab0:	42aa      	cmp	r2, r5
{
    8ab2:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    8ab4:	7830      	ldrb	r0, [r6, #0]
    8ab6:	d016      	beq.n	8ae6 <ull_prepare_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    8ab8:	f106 0408 	add.w	r4, r6, #8
    8abc:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    8ac0:	2210      	movs	r2, #16
    8ac2:	4620      	mov	r0, r4
    8ac4:	f00e ff9a 	bl	179fc <memcpy>
	e->is_resume = is_resume;
    8ac8:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
    8aca:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    8acc:	f00a 0a01 	and.w	sl, sl, #1
    8ad0:	f023 0303 	bic.w	r3, r3, #3
    8ad4:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
    8ad8:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
    8adc:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
    8ade:	7175      	strb	r5, [r6, #5]
}
    8ae0:	4620      	mov	r0, r4
    8ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
    8ae6:	2400      	movs	r4, #0
}
    8ae8:	4620      	mov	r0, r4
    8aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8aee:	bf00      	nop
    8af0:	2000040c 	.word	0x2000040c

00008af4 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    8af4:	4805      	ldr	r0, [pc, #20]	; (8b0c <ull_prepare_dequeue_get+0x18>)
    8af6:	7902      	ldrb	r2, [r0, #4]
	if (first == last) {
    8af8:	7941      	ldrb	r1, [r0, #5]
    8afa:	f890 c000 	ldrb.w	ip, [r0]
    8afe:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
    8b00:	bf1a      	itte	ne
    8b02:	3008      	addne	r0, #8
    8b04:	fb02 000c 	mlane	r0, r2, ip, r0
		return NULL;
    8b08:	2000      	moveq	r0, #0
}
    8b0a:	4770      	bx	lr
    8b0c:	2000040c 	.word	0x2000040c

00008b10 <ull_prepare_dequeue_iter>:
{
    8b10:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    8b12:	4b0d      	ldr	r3, [pc, #52]	; (8b48 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
    8b14:	7802      	ldrb	r2, [r0, #0]
    8b16:	7899      	ldrb	r1, [r3, #2]
    8b18:	f893 c005 	ldrb.w	ip, [r3, #5]
    8b1c:	f893 e000 	ldrb.w	lr, [r3]
    8b20:	4291      	cmp	r1, r2
    8b22:	bf9c      	itt	ls
    8b24:	791a      	ldrbls	r2, [r3, #4]
		*idx = first;
    8b26:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    8b28:	4594      	cmp	ip, r2
    8b2a:	d00a      	beq.n	8b42 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
    8b2c:	1c53      	adds	r3, r2, #1
    8b2e:	b2db      	uxtb	r3, r3
		i = 0U;
    8b30:	4299      	cmp	r1, r3
    8b32:	bf08      	it	eq
    8b34:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
    8b36:	4905      	ldr	r1, [pc, #20]	; (8b4c <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
    8b38:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    8b3a:	fb02 100e 	mla	r0, r2, lr, r1
}
    8b3e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    8b42:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    8b44:	e7fb      	b.n	8b3e <ull_prepare_dequeue_iter+0x2e>
    8b46:	bf00      	nop
    8b48:	2000040c 	.word	0x2000040c
    8b4c:	20000414 	.word	0x20000414

00008b50 <ull_prepare_dequeue>:
{
    8b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
    8b54:	4c36      	ldr	r4, [pc, #216]	; (8c30 <ull_prepare_dequeue+0xe0>)
    8b56:	7922      	ldrb	r2, [r4, #4]
	if (first == last) {
    8b58:	7961      	ldrb	r1, [r4, #5]
    8b5a:	7823      	ldrb	r3, [r4, #0]
{
    8b5c:	b083      	sub	sp, #12
    8b5e:	4291      	cmp	r1, r2
    8b60:	9000      	str	r0, [sp, #0]
    8b62:	d035      	beq.n	8bd0 <ull_prepare_dequeue+0x80>
	return (void *)(fifo + first * size);
    8b64:	f04f 0900 	mov.w	r9, #0
    8b68:	f104 0808 	add.w	r8, r4, #8
    8b6c:	fb02 8303 	mla	r3, r2, r3, r8
    8b70:	f8cd 9004 	str.w	r9, [sp, #4]
    8b74:	46ca      	mov	sl, r9
    8b76:	46cb      	mov	fp, r9
		uint8_t is_aborted = next->is_aborted;
    8b78:	7f1a      	ldrb	r2, [r3, #28]
		void *param = next->prepare_param.param;
    8b7a:	68df      	ldr	r7, [r3, #12]
		uint8_t is_aborted = next->is_aborted;
    8b7c:	f3c2 0540 	ubfx	r5, r2, #1, #1
		uint8_t is_resume = next->is_resume;
    8b80:	f002 0601 	and.w	r6, r2, #1
		if (!is_aborted) {
    8b84:	0792      	lsls	r2, r2, #30
    8b86:	d526      	bpl.n	8bd6 <ull_prepare_dequeue+0x86>
		MFIFO_DEQUEUE(prep);
    8b88:	7961      	ldrb	r1, [r4, #5]
	uint8_t _first = *first; /* Copy read-index */
    8b8a:	7923      	ldrb	r3, [r4, #4]
    8b8c:	7822      	ldrb	r2, [r4, #0]
    8b8e:	78a0      	ldrb	r0, [r4, #2]
	if (_first == last) {
    8b90:	4299      	cmp	r1, r3
    8b92:	d01d      	beq.n	8bd0 <ull_prepare_dequeue+0x80>
	_first += 1U;
    8b94:	3301      	adds	r3, #1
    8b96:	b2db      	uxtb	r3, r3
		_first = 0U;
    8b98:	4298      	cmp	r0, r3
    8b9a:	bf08      	it	eq
    8b9c:	2300      	moveq	r3, #0
	if (first == last) {
    8b9e:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
    8ba0:	7123      	strb	r3, [r4, #4]
	if (first == last) {
    8ba2:	d015      	beq.n	8bd0 <ull_prepare_dequeue+0x80>
	return (void *)(fifo + first * size);
    8ba4:	fb03 8302 	mla	r3, r3, r2, r8
			      ((next->prepare_param.param ==
    8ba8:	68da      	ldr	r2, [r3, #12]
		if (!is_aborted) {
    8baa:	2d00      	cmp	r5, #0
    8bac:	d1e4      	bne.n	8b78 <ull_prepare_dequeue+0x28>
			if (!is_resume) {
    8bae:	bb56      	cbnz	r6, 8c06 <ull_prepare_dequeue+0xb6>
				if (!param_normal_head) {
    8bb0:	f1bb 0f00 	cmp.w	fp, #0
    8bb4:	d037      	beq.n	8c26 <ull_prepare_dequeue+0xd6>
					param_normal_next = param;
    8bb6:	f1ba 0f00 	cmp.w	sl, #0
    8bba:	bf08      	it	eq
    8bbc:	46ba      	moveq	sl, r7
			if (!next->is_aborted &&
    8bbe:	7f19      	ldrb	r1, [r3, #28]
    8bc0:	0788      	lsls	r0, r1, #30
    8bc2:	d4d9      	bmi.n	8b78 <ull_prepare_dequeue+0x28>
    8bc4:	07c9      	lsls	r1, r1, #31
    8bc6:	d425      	bmi.n	8c14 <ull_prepare_dequeue+0xc4>
			    ((!next->is_resume &&
    8bc8:	4593      	cmp	fp, r2
    8bca:	d001      	beq.n	8bd0 <ull_prepare_dequeue+0x80>
				param_normal_head) ||
    8bcc:	4592      	cmp	sl, r2
    8bce:	d1d3      	bne.n	8b78 <ull_prepare_dequeue+0x28>
}
    8bd0:	b003      	add	sp, #12
    8bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
    8bd6:	4a17      	ldr	r2, [pc, #92]	; (8c34 <ull_prepare_dequeue+0xe4>)
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    8bd8:	9800      	ldr	r0, [sp, #0]
			mfy.param = next;
    8bda:	6093      	str	r3, [r2, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    8bdc:	4629      	mov	r1, r5
    8bde:	4613      	mov	r3, r2
    8be0:	462a      	mov	r2, r5
    8be2:	f7fd fd77 	bl	66d4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    8be6:	2800      	cmp	r0, #0
    8be8:	d0ce      	beq.n	8b88 <ull_prepare_dequeue+0x38>
    8bea:	4a13      	ldr	r2, [pc, #76]	; (8c38 <ull_prepare_dequeue+0xe8>)
    8bec:	4913      	ldr	r1, [pc, #76]	; (8c3c <ull_prepare_dequeue+0xec>)
    8bee:	4814      	ldr	r0, [pc, #80]	; (8c40 <ull_prepare_dequeue+0xf0>)
    8bf0:	f640 031e 	movw	r3, #2078	; 0x81e
    8bf4:	f00e fc75 	bl	174e2 <assert_print>
    8bf8:	4040      	eors	r0, r0
    8bfa:	f380 8811 	msr	BASEPRI, r0
    8bfe:	f04f 0003 	mov.w	r0, #3
    8c02:	df02      	svc	2
    8c04:	e7c0      	b.n	8b88 <ull_prepare_dequeue+0x38>
				if (!param_resume_head) {
    8c06:	9901      	ldr	r1, [sp, #4]
    8c08:	b179      	cbz	r1, 8c2a <ull_prepare_dequeue+0xda>
					param_resume_next = param;
    8c0a:	f1b9 0f00 	cmp.w	r9, #0
    8c0e:	bf08      	it	eq
    8c10:	46b9      	moveq	r9, r7
    8c12:	e7d4      	b.n	8bbe <ull_prepare_dequeue+0x6e>
			     (next->is_resume &&
    8c14:	f1ba 0f00 	cmp.w	sl, #0
    8c18:	d1ae      	bne.n	8b78 <ull_prepare_dequeue+0x28>
			      !param_normal_next &&
    8c1a:	9901      	ldr	r1, [sp, #4]
    8c1c:	4291      	cmp	r1, r2
    8c1e:	d0d7      	beq.n	8bd0 <ull_prepare_dequeue+0x80>
				param_resume_head) ||
    8c20:	4591      	cmp	r9, r2
    8c22:	d1a9      	bne.n	8b78 <ull_prepare_dequeue+0x28>
    8c24:	e7d4      	b.n	8bd0 <ull_prepare_dequeue+0x80>
					param_normal_head = param;
    8c26:	46bb      	mov	fp, r7
    8c28:	e7c9      	b.n	8bbe <ull_prepare_dequeue+0x6e>
					param_resume_head = param;
    8c2a:	9701      	str	r7, [sp, #4]
    8c2c:	e7c7      	b.n	8bbe <ull_prepare_dequeue+0x6e>
    8c2e:	bf00      	nop
    8c30:	2000040c 	.word	0x2000040c
    8c34:	20000260 	.word	0x20000260
    8c38:	0001b8ac 	.word	0x0001b8ac
    8c3c:	0001b9ec 	.word	0x0001b9ec
    8c40:	0001b844 	.word	0x0001b844

00008c44 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    8c44:	4b06      	ldr	r3, [pc, #24]	; (8c60 <ull_event_done_extra_get+0x1c>)
    8c46:	791a      	ldrb	r2, [r3, #4]
	if (first == last) {
    8c48:	7959      	ldrb	r1, [r3, #5]
    8c4a:	7818      	ldrb	r0, [r3, #0]
    8c4c:	4291      	cmp	r1, r2
    8c4e:	d005      	beq.n	8c5c <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    8c50:	fb02 3300 	mla	r3, r2, r0, r3
    8c54:	6898      	ldr	r0, [r3, #8]
	if (!evdone) {
    8c56:	b110      	cbz	r0, 8c5e <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    8c58:	3020      	adds	r0, #32
    8c5a:	4770      	bx	lr
		return NULL;
    8c5c:	2000      	movs	r0, #0
}
    8c5e:	4770      	bx	lr
    8c60:	200003f0 	.word	0x200003f0

00008c64 <ull_event_done>:
{
    8c64:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
    8c66:	4a13      	ldr	r2, [pc, #76]	; (8cb4 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
    8c68:	7913      	ldrb	r3, [r2, #4]
	if (_first == last) {
    8c6a:	7955      	ldrb	r5, [r2, #5]
    8c6c:	7814      	ldrb	r4, [r2, #0]
    8c6e:	429d      	cmp	r5, r3
{
    8c70:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
    8c72:	7890      	ldrb	r0, [r2, #2]
    8c74:	d01b      	beq.n	8cae <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
    8c76:	fb03 2404 	mla	r4, r3, r4, r2
	_first += 1U;
    8c7a:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    8c7c:	68a4      	ldr	r4, [r4, #8]
	_first += 1U;
    8c7e:	b2db      	uxtb	r3, r3
		_first = 0U;
    8c80:	4298      	cmp	r0, r3
    8c82:	bf08      	it	eq
    8c84:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    8c86:	7113      	strb	r3, [r2, #4]
	if (!evdone) {
    8c88:	b18c      	cbz	r4, 8cae <ull_event_done+0x4a>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    8c8a:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
    8c8c:	2500      	movs	r5, #0
	link = evdone->hdr.link;
    8c8e:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    8c90:	4a09      	ldr	r2, [pc, #36]	; (8cb8 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    8c92:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
    8c94:	61e1      	str	r1, [r4, #28]
	evdone->hdr.link = NULL;
    8c96:	6025      	str	r5, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    8c98:	4621      	mov	r1, r4
    8c9a:	f7fd fca5 	bl	65e8 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    8c9e:	2201      	movs	r2, #1
    8ca0:	4b06      	ldr	r3, [pc, #24]	; (8cbc <ull_event_done+0x58>)
    8ca2:	4611      	mov	r1, r2
    8ca4:	4628      	mov	r0, r5
    8ca6:	f7fd fd15 	bl	66d4 <mayfly_enqueue>
}
    8caa:	4620      	mov	r0, r4
    8cac:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    8cae:	2400      	movs	r4, #0
    8cb0:	e7fb      	b.n	8caa <ull_event_done+0x46>
    8cb2:	bf00      	nop
    8cb4:	200003f0 	.word	0x200003f0
    8cb8:	200014ec 	.word	0x200014ec
    8cbc:	20000270 	.word	0x20000270

00008cc0 <ull_rxfifo_alloc>:
{
    8cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8cc4:	b083      	sub	sp, #12
    8cc6:	461d      	mov	r5, r3
    8cc8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    8ccc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    8cce:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    8cd2:	9401      	str	r4, [sp, #4]
    8cd4:	4617      	mov	r7, r2
    8cd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8cd8:	9200      	str	r2, [sp, #0]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    8cda:	b353      	cbz	r3, 8d32 <ull_rxfifo_alloc+0x72>
    8cdc:	1e5c      	subs	r4, r3, #1
    8cde:	f895 a000 	ldrb.w	sl, [r5]
    8ce2:	4680      	mov	r8, r0
    8ce4:	460e      	mov	r6, r1
    8ce6:	b2e4      	uxtb	r4, r4
	last = last + 1;
    8ce8:	f10a 0301 	add.w	r3, sl, #1
    8cec:	fa5f fa83 	uxtb.w	sl, r3
		last = 0U;
    8cf0:	4556      	cmp	r6, sl
    8cf2:	bf08      	it	eq
    8cf4:	f04f 0a00 	moveq.w	sl, #0
	if (last == first) {
    8cf8:	4557      	cmp	r7, sl
		link = mem_acquire(link_free);
    8cfa:	4648      	mov	r0, r9
    8cfc:	d019      	beq.n	8d32 <ull_rxfifo_alloc+0x72>
    8cfe:	f7fd fc0d 	bl	651c <mem_acquire>
    8d02:	4683      	mov	fp, r0
		rx = mem_acquire(mem_free);
    8d04:	9800      	ldr	r0, [sp, #0]
		if (!link) {
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	d012      	beq.n	8d32 <ull_rxfifo_alloc+0x72>
		rx = mem_acquire(mem_free);
    8d0c:	f7fd fc06 	bl	651c <mem_acquire>
		if (!rx) {
    8d10:	b190      	cbz	r0, 8d38 <ull_rxfifo_alloc+0x78>
		link->mem = NULL;
    8d12:	2300      	movs	r3, #0
    8d14:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
    8d18:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    8d1c:	782a      	ldrb	r2, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    8d1e:	9b01      	ldr	r3, [sp, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    8d20:	fb12 f208 	smulbb	r2, r2, r8
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    8d24:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    8d26:	3c01      	subs	r4, #1
    8d28:	b2e4      	uxtb	r4, r4
    8d2a:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
    8d2c:	f885 a000 	strb.w	sl, [r5]
    8d30:	d1da      	bne.n	8ce8 <ull_rxfifo_alloc+0x28>
}
    8d32:	b003      	add	sp, #12
    8d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
    8d38:	4649      	mov	r1, r9
    8d3a:	4658      	mov	r0, fp
}
    8d3c:	b003      	add	sp, #12
    8d3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
    8d42:	f7fd bc07 	b.w	6554 <mem_release>
    8d46:	bf00      	nop

00008d48 <init_reset>:
{
    8d48:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
    8d4a:	4c3f      	ldr	r4, [pc, #252]	; (8e48 <init_reset+0x100>)
    8d4c:	4d3f      	ldr	r5, [pc, #252]	; (8e4c <init_reset+0x104>)
    8d4e:	79a2      	ldrb	r2, [r4, #6]
    8d50:	88a1      	ldrh	r1, [r4, #4]
    8d52:	4e3f      	ldr	r6, [pc, #252]	; (8e50 <init_reset+0x108>)
    8d54:	2000      	movs	r0, #0
{
    8d56:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
    8d58:	4623      	mov	r3, r4
    8d5a:	80a8      	strh	r0, [r5, #4]
    8d5c:	f104 0008 	add.w	r0, r4, #8
    8d60:	f7fd fbac 	bl	64bc <mem_init>
    8d64:	79e3      	ldrb	r3, [r4, #7]
    8d66:	79a2      	ldrb	r2, [r4, #6]
    8d68:	1d30      	adds	r0, r6, #4
    8d6a:	441a      	add	r2, r3
    8d6c:	2108      	movs	r1, #8
    8d6e:	4633      	mov	r3, r6
    8d70:	f7fd fba4 	bl	64bc <mem_init>
    8d74:	9602      	str	r6, [sp, #8]
    8d76:	462e      	mov	r6, r5
    8d78:	79a3      	ldrb	r3, [r4, #6]
    8d7a:	f816 0b08 	ldrb.w	r0, [r6], #8
    8d7e:	9303      	str	r3, [sp, #12]
    8d80:	792a      	ldrb	r2, [r5, #4]
    8d82:	78a9      	ldrb	r1, [r5, #2]
    8d84:	1d6b      	adds	r3, r5, #5
    8d86:	e9cd 6400 	strd	r6, r4, [sp]
    8d8a:	f7ff ff99 	bl	8cc0 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    8d8e:	4b31      	ldr	r3, [pc, #196]	; (8e54 <init_reset+0x10c>)
    8d90:	2208      	movs	r2, #8
    8d92:	1d18      	adds	r0, r3, #4
    8d94:	2144      	movs	r1, #68	; 0x44
    8d96:	f7fd fb91 	bl	64bc <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    8d9a:	4b2f      	ldr	r3, [pc, #188]	; (8e58 <init_reset+0x110>)
    8d9c:	220a      	movs	r2, #10
    8d9e:	1d18      	adds	r0, r3, #4
    8da0:	2108      	movs	r1, #8
    8da2:	f7fd fb8b 	bl	64bc <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    8da6:	482c      	ldr	r0, [pc, #176]	; (8e58 <init_reset+0x110>)
    8da8:	f7fd fbb8 	bl	651c <mem_acquire>
	LL_ASSERT(link);
    8dac:	4604      	mov	r4, r0
    8dae:	b308      	cbz	r0, 8df4 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
    8db0:	4a2a      	ldr	r2, [pc, #168]	; (8e5c <init_reset+0x114>)
    8db2:	4620      	mov	r0, r4
    8db4:	1f11      	subs	r1, r2, #4
    8db6:	f7fd fc09 	bl	65cc <memq_init>
	link = mem_acquire(&mem_link_done.free);
    8dba:	4825      	ldr	r0, [pc, #148]	; (8e50 <init_reset+0x108>)
    8dbc:	f7fd fbae 	bl	651c <mem_acquire>
	LL_ASSERT(link);
    8dc0:	4604      	mov	r4, r0
    8dc2:	b328      	cbz	r0, 8e10 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
    8dc4:	4a26      	ldr	r2, [pc, #152]	; (8e60 <init_reset+0x118>)
    8dc6:	4620      	mov	r0, r4
    8dc8:	1f11      	subs	r1, r2, #4
    8dca:	f7fd fbff 	bl	65cc <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    8dce:	4822      	ldr	r0, [pc, #136]	; (8e58 <init_reset+0x110>)
    8dd0:	f7fd fba4 	bl	651c <mem_acquire>
	LL_ASSERT(link);
    8dd4:	4604      	mov	r4, r0
    8dd6:	b348      	cbz	r0, 8e2c <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
    8dd8:	4a22      	ldr	r2, [pc, #136]	; (8e64 <init_reset+0x11c>)
    8dda:	4620      	mov	r0, r4
    8ddc:	1f11      	subs	r1, r2, #4
    8dde:	f7fd fbf5 	bl	65cc <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    8de2:	4b21      	ldr	r3, [pc, #132]	; (8e68 <init_reset+0x120>)
    8de4:	2206      	movs	r2, #6
	rx_replenish(UINT8_MAX);
    8de6:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
    8de8:	801a      	strh	r2, [r3, #0]
	rx_replenish(UINT8_MAX);
    8dea:	f7ff f85d 	bl	7ea8 <rx_replenish>
}
    8dee:	2000      	movs	r0, #0
    8df0:	b004      	add	sp, #16
    8df2:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    8df4:	4a1d      	ldr	r2, [pc, #116]	; (8e6c <init_reset+0x124>)
    8df6:	491e      	ldr	r1, [pc, #120]	; (8e70 <init_reset+0x128>)
    8df8:	481e      	ldr	r0, [pc, #120]	; (8e74 <init_reset+0x12c>)
    8dfa:	f640 03d7 	movw	r3, #2263	; 0x8d7
    8dfe:	f00e fb70 	bl	174e2 <assert_print>
    8e02:	4040      	eors	r0, r0
    8e04:	f380 8811 	msr	BASEPRI, r0
    8e08:	f04f 0003 	mov.w	r0, #3
    8e0c:	df02      	svc	2
    8e0e:	e7cf      	b.n	8db0 <init_reset+0x68>
	LL_ASSERT(link);
    8e10:	4a16      	ldr	r2, [pc, #88]	; (8e6c <init_reset+0x124>)
    8e12:	4917      	ldr	r1, [pc, #92]	; (8e70 <init_reset+0x128>)
    8e14:	4817      	ldr	r0, [pc, #92]	; (8e74 <init_reset+0x12c>)
    8e16:	f640 03df 	movw	r3, #2271	; 0x8df
    8e1a:	f00e fb62 	bl	174e2 <assert_print>
    8e1e:	4040      	eors	r0, r0
    8e20:	f380 8811 	msr	BASEPRI, r0
    8e24:	f04f 0003 	mov.w	r0, #3
    8e28:	df02      	svc	2
    8e2a:	e7cb      	b.n	8dc4 <init_reset+0x7c>
	LL_ASSERT(link);
    8e2c:	4a0f      	ldr	r2, [pc, #60]	; (8e6c <init_reset+0x124>)
    8e2e:	4910      	ldr	r1, [pc, #64]	; (8e70 <init_reset+0x128>)
    8e30:	4810      	ldr	r0, [pc, #64]	; (8e74 <init_reset+0x12c>)
    8e32:	f640 03e7 	movw	r3, #2279	; 0x8e7
    8e36:	f00e fb54 	bl	174e2 <assert_print>
    8e3a:	4040      	eors	r0, r0
    8e3c:	f380 8811 	msr	BASEPRI, r0
    8e40:	f04f 0003 	mov.w	r0, #3
    8e44:	df02      	svc	2
    8e46:	e7c7      	b.n	8dd8 <init_reset+0x90>
    8e48:	20000308 	.word	0x20000308
    8e4c:	200003f0 	.word	0x200003f0
    8e50:	2000177c 	.word	0x2000177c
    8e54:	20001558 	.word	0x20001558
    8e58:	20001504 	.word	0x20001504
    8e5c:	200014fc 	.word	0x200014fc
    8e60:	200014ec 	.word	0x200014ec
    8e64:	200014f4 	.word	0x200014f4
    8e68:	20001500 	.word	0x20001500
    8e6c:	0001b8ac 	.word	0x0001b8ac
    8e70:	0001bdb0 	.word	0x0001bdb0
    8e74:	0001b844 	.word	0x0001b844

00008e78 <ll_init>:
{
    8e78:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
    8e7a:	4b2b      	ldr	r3, [pc, #172]	; (8f28 <ll_init+0xb0>)
	if (!mayfly_initialized) {
    8e7c:	4c2b      	ldr	r4, [pc, #172]	; (8f2c <ll_init+0xb4>)
	sem_recv = sem_rx;
    8e7e:	6018      	str	r0, [r3, #0]
{
    8e80:	b086      	sub	sp, #24
	cntr_init();
    8e82:	f009 faf5 	bl	12470 <cntr_init>
	if (!mayfly_initialized) {
    8e86:	7823      	ldrb	r3, [r4, #0]
    8e88:	2b00      	cmp	r3, #0
    8e8a:	d047      	beq.n	8f1c <ll_init+0xa4>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    8e8c:	4a28      	ldr	r2, [pc, #160]	; (8f30 <ll_init+0xb8>)
    8e8e:	4c29      	ldr	r4, [pc, #164]	; (8f34 <ll_init+0xbc>)
    8e90:	4929      	ldr	r1, [pc, #164]	; (8f38 <ll_init+0xc0>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    8e92:	482a      	ldr	r0, [pc, #168]	; (8f3c <ll_init+0xc4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    8e94:	e9cd 2404 	strd	r2, r4, [sp, #16]
    8e98:	4a29      	ldr	r2, [pc, #164]	; (8f40 <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    8e9a:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    8e9c:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    8ea0:	f04f 0c02 	mov.w	ip, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    8ea4:	210c      	movs	r1, #12
    8ea6:	e9cd 0100 	strd	r0, r1, [sp]
    8eaa:	4a26      	ldr	r2, [pc, #152]	; (8f44 <ll_init+0xcc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    8eac:	7003      	strb	r3, [r0, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    8eae:	7203      	strb	r3, [r0, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    8eb0:	f880 c010 	strb.w	ip, [r0, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    8eb4:	f880 c018 	strb.w	ip, [r0, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    8eb8:	4619      	mov	r1, r3
    8eba:	2000      	movs	r0, #0
    8ebc:	f7fe fd34 	bl	7928 <ticker_init>
	LL_ASSERT(!err);
    8ec0:	b9f0      	cbnz	r0, 8f00 <ll_init+0x88>
	return z_impl_k_sem_init(sem, initial_count, limit);
    8ec2:	2201      	movs	r2, #1
    8ec4:	2100      	movs	r1, #0
    8ec6:	4820      	ldr	r0, [pc, #128]	; (8f48 <ll_init+0xd0>)
    8ec8:	f011 fc3d 	bl	1a746 <z_impl_k_sem_init>
	err = lll_init();
    8ecc:	f007 fd5a 	bl	10984 <lll_init>
	if (err) {
    8ed0:	b108      	cbz	r0, 8ed6 <ll_init+0x5e>
}
    8ed2:	b006      	add	sp, #24
    8ed4:	bd10      	pop	{r4, pc}
	err = init_reset();
    8ed6:	f7ff ff37 	bl	8d48 <init_reset>
	if (err) {
    8eda:	2800      	cmp	r0, #0
    8edc:	d1f9      	bne.n	8ed2 <ll_init+0x5a>
	err = lll_adv_init();
    8ede:	f008 f9a3 	bl	11228 <lll_adv_init>
	if (err) {
    8ee2:	2800      	cmp	r0, #0
    8ee4:	d1f5      	bne.n	8ed2 <ll_init+0x5a>
	err = ull_adv_init();
    8ee6:	f001 fed9 	bl	ac9c <ull_adv_init>
	if (err) {
    8eea:	2800      	cmp	r0, #0
    8eec:	d1f1      	bne.n	8ed2 <ll_init+0x5a>
	err = lll_conn_init();
    8eee:	f008 fdb7 	bl	11a60 <lll_conn_init>
	if (err) {
    8ef2:	2800      	cmp	r0, #0
    8ef4:	d1ed      	bne.n	8ed2 <ll_init+0x5a>
}
    8ef6:	b006      	add	sp, #24
    8ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = ull_conn_init();
    8efc:	f002 bc26 	b.w	b74c <ull_conn_init>
	LL_ASSERT(!err);
    8f00:	4a12      	ldr	r2, [pc, #72]	; (8f4c <ll_init+0xd4>)
    8f02:	4913      	ldr	r1, [pc, #76]	; (8f50 <ll_init+0xd8>)
    8f04:	4813      	ldr	r0, [pc, #76]	; (8f54 <ll_init+0xdc>)
    8f06:	f240 2359 	movw	r3, #601	; 0x259
    8f0a:	f00e faea 	bl	174e2 <assert_print>
    8f0e:	4040      	eors	r0, r0
    8f10:	f380 8811 	msr	BASEPRI, r0
    8f14:	f04f 0003 	mov.w	r0, #3
    8f18:	df02      	svc	2
    8f1a:	e7d2      	b.n	8ec2 <ll_init+0x4a>
		mayfly_init();
    8f1c:	f7fd fb86 	bl	662c <mayfly_init>
		mayfly_initialized = true;
    8f20:	2301      	movs	r3, #1
    8f22:	7023      	strb	r3, [r4, #0]
    8f24:	e7b2      	b.n	8e8c <ll_init+0x14>
    8f26:	bf00      	nop
    8f28:	200017a8 	.word	0x200017a8
    8f2c:	20002631 	.word	0x20002631
    8f30:	00012f25 	.word	0x00012f25
    8f34:	00013075 	.word	0x00013075
    8f38:	00012ec1 	.word	0x00012ec1
    8f3c:	20001a04 	.word	0x20001a04
    8f40:	200017c4 	.word	0x200017c4
    8f44:	20001a24 	.word	0x20001a24
    8f48:	200017ac 	.word	0x200017ac
    8f4c:	0001b8ac 	.word	0x0001b8ac
    8f50:	0001b8e8 	.word	0x0001b8e8
    8f54:	0001b844 	.word	0x0001b844

00008f58 <ll_reset>:
{
    8f58:	b510      	push	{r4, lr}
    8f5a:	b086      	sub	sp, #24
	err = ull_adv_reset();
    8f5c:	f001 feae 	bl	acbc <ull_adv_reset>
	LL_ASSERT(!err);
    8f60:	2800      	cmp	r0, #0
    8f62:	d130      	bne.n	8fc6 <ll_reset+0x6e>
	err = ull_conn_reset();
    8f64:	f002 fbf4 	bl	b750 <ull_conn_reset>
	LL_ASSERT(!err);
    8f68:	2800      	cmp	r0, #0
    8f6a:	d13d      	bne.n	8fe8 <ll_reset+0x90>
	MFIFO_INIT(tx_ack);
    8f6c:	483a      	ldr	r0, [pc, #232]	; (9058 <ll_reset+0x100>)
	MFIFO_INIT(prep);
    8f6e:	493b      	ldr	r1, [pc, #236]	; (905c <ll_reset+0x104>)
	MFIFO_INIT(pdu_rx_free);
    8f70:	4a3b      	ldr	r2, [pc, #236]	; (9060 <ll_reset+0x108>)
	MFIFO_INIT(ll_pdu_rx_free);
    8f72:	4b3c      	ldr	r3, [pc, #240]	; (9064 <ll_reset+0x10c>)
	MFIFO_INIT(tx_ack);
    8f74:	2400      	movs	r4, #0
    8f76:	8084      	strh	r4, [r0, #4]
	MFIFO_INIT(prep);
    8f78:	808c      	strh	r4, [r1, #4]
	MFIFO_INIT(pdu_rx_free);
    8f7a:	8094      	strh	r4, [r2, #4]
	MFIFO_INIT(ll_pdu_rx_free);
    8f7c:	809c      	strh	r4, [r3, #4]
    8f7e:	2201      	movs	r2, #1
    8f80:	4621      	mov	r1, r4
    8f82:	4668      	mov	r0, sp
    8f84:	f011 fbdf 	bl	1a746 <z_impl_k_sem_init>
		mfy.param = &sem;
    8f88:	4b37      	ldr	r3, [pc, #220]	; (9068 <ll_reset+0x110>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    8f8a:	4622      	mov	r2, r4
    8f8c:	4621      	mov	r1, r4
    8f8e:	2003      	movs	r0, #3
		mfy.param = &sem;
    8f90:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    8f94:	f7fd fb9e 	bl	66d4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    8f98:	2800      	cmp	r0, #0
    8f9a:	d14f      	bne.n	903c <ll_reset+0xe4>
	return z_impl_k_sem_take(sem, timeout);
    8f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8fa4:	4668      	mov	r0, sp
    8fa6:	f00c ff79 	bl	15e9c <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
    8faa:	f001 fe8d 	bl	acc8 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
    8fae:	2800      	cmp	r0, #0
    8fb0:	d136      	bne.n	9020 <ll_reset+0xc8>
	err = init_reset();
    8fb2:	f7ff fec9 	bl	8d48 <init_reset>
	LL_ASSERT(!err);
    8fb6:	bb28      	cbnz	r0, 9004 <ll_reset+0xac>
	(void)ll_addr_set(1U, NULL);
    8fb8:	2100      	movs	r1, #0
    8fba:	2001      	movs	r0, #1
}
    8fbc:	b006      	add	sp, #24
    8fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)ll_addr_set(1U, NULL);
    8fc2:	f7fe be79 	b.w	7cb8 <ll_addr_set>
	LL_ASSERT(!err);
    8fc6:	4a29      	ldr	r2, [pc, #164]	; (906c <ll_reset+0x114>)
    8fc8:	4929      	ldr	r1, [pc, #164]	; (9070 <ll_reset+0x118>)
    8fca:	482a      	ldr	r0, [pc, #168]	; (9074 <ll_reset+0x11c>)
    8fcc:	f240 23ff 	movw	r3, #767	; 0x2ff
    8fd0:	f00e fa87 	bl	174e2 <assert_print>
    8fd4:	4040      	eors	r0, r0
    8fd6:	f380 8811 	msr	BASEPRI, r0
    8fda:	f04f 0003 	mov.w	r0, #3
    8fde:	df02      	svc	2
	err = ull_conn_reset();
    8fe0:	f002 fbb6 	bl	b750 <ull_conn_reset>
	LL_ASSERT(!err);
    8fe4:	2800      	cmp	r0, #0
    8fe6:	d0c1      	beq.n	8f6c <ll_reset+0x14>
    8fe8:	4a20      	ldr	r2, [pc, #128]	; (906c <ll_reset+0x114>)
    8fea:	4921      	ldr	r1, [pc, #132]	; (9070 <ll_reset+0x118>)
    8fec:	4821      	ldr	r0, [pc, #132]	; (9074 <ll_reset+0x11c>)
    8fee:	f240 3331 	movw	r3, #817	; 0x331
    8ff2:	f00e fa76 	bl	174e2 <assert_print>
    8ff6:	4040      	eors	r0, r0
    8ff8:	f380 8811 	msr	BASEPRI, r0
    8ffc:	f04f 0003 	mov.w	r0, #3
    9000:	df02      	svc	2
    9002:	e7b3      	b.n	8f6c <ll_reset+0x14>
	LL_ASSERT(!err);
    9004:	4a19      	ldr	r2, [pc, #100]	; (906c <ll_reset+0x114>)
    9006:	491a      	ldr	r1, [pc, #104]	; (9070 <ll_reset+0x118>)
    9008:	481a      	ldr	r0, [pc, #104]	; (9074 <ll_reset+0x11c>)
    900a:	f240 337a 	movw	r3, #890	; 0x37a
    900e:	f00e fa68 	bl	174e2 <assert_print>
    9012:	4040      	eors	r0, r0
    9014:	f380 8811 	msr	BASEPRI, r0
    9018:	f04f 0003 	mov.w	r0, #3
    901c:	df02      	svc	2
    901e:	e7cb      	b.n	8fb8 <ll_reset+0x60>
	LL_ASSERT(!err);
    9020:	4a12      	ldr	r2, [pc, #72]	; (906c <ll_reset+0x114>)
    9022:	4913      	ldr	r1, [pc, #76]	; (9070 <ll_reset+0x118>)
    9024:	4813      	ldr	r0, [pc, #76]	; (9074 <ll_reset+0x11c>)
    9026:	f240 336d 	movw	r3, #877	; 0x36d
    902a:	f00e fa5a 	bl	174e2 <assert_print>
    902e:	4040      	eors	r0, r0
    9030:	f380 8811 	msr	BASEPRI, r0
    9034:	f04f 0003 	mov.w	r0, #3
    9038:	df02      	svc	2
    903a:	e7ba      	b.n	8fb2 <ll_reset+0x5a>
		LL_ASSERT(!retval);
    903c:	4a0b      	ldr	r2, [pc, #44]	; (906c <ll_reset+0x114>)
    903e:	490e      	ldr	r1, [pc, #56]	; (9078 <ll_reset+0x120>)
    9040:	480c      	ldr	r0, [pc, #48]	; (9074 <ll_reset+0x11c>)
    9042:	f44f 7358 	mov.w	r3, #864	; 0x360
    9046:	f00e fa4c 	bl	174e2 <assert_print>
    904a:	4040      	eors	r0, r0
    904c:	f380 8811 	msr	BASEPRI, r0
    9050:	f04f 0003 	mov.w	r0, #3
    9054:	df02      	svc	2
    9056:	e7a1      	b.n	8f9c <ll_reset+0x44>
    9058:	200002b0 	.word	0x200002b0
    905c:	2000040c 	.word	0x2000040c
    9060:	200002ec 	.word	0x200002ec
    9064:	200002d8 	.word	0x200002d8
    9068:	200002a0 	.word	0x200002a0
    906c:	0001b8ac 	.word	0x0001b8ac
    9070:	0001b8e8 	.word	0x0001b8e8
    9074:	0001b844 	.word	0x0001b844
    9078:	0001ba14 	.word	0x0001ba14

0000907c <ll_deinit>:
{
    907c:	b508      	push	{r3, lr}
	ll_reset();
    907e:	f7ff ff6b 	bl	8f58 <ll_reset>
}
    9082:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return lll_deinit();
    9086:	f007 bcad 	b.w	109e4 <lll_deinit>
    908a:	bf00      	nop

0000908c <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
    908c:	b510      	push	{r4, lr}
    908e:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
    9090:	2400      	movs	r4, #0
    9092:	e9cd 4400 	strd	r4, r4, [sp]
    9096:	9b04      	ldr	r3, [sp, #16]
    9098:	f007 fe7e 	bl	10d98 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
    909c:	b002      	add	sp, #8
    909e:	bd10      	pop	{r4, pc}

000090a0 <lll_resume>:

void lll_resume(void *param)
{
    90a0:	b510      	push	{r4, lr}
    90a2:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
    90a4:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    90a6:	691a      	ldr	r2, [r3, #16]
    90a8:	6999      	ldr	r1, [r3, #24]
    90aa:	2401      	movs	r4, #1
{
    90ac:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    90ae:	4020      	ands	r0, r4
    90b0:	e9cd 0400 	strd	r0, r4, [sp]
    90b4:	6958      	ldr	r0, [r3, #20]
    90b6:	f007 fe6f 	bl	10d98 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    90ba:	b108      	cbz	r0, 90c0 <lll_resume+0x20>
    90bc:	3077      	adds	r0, #119	; 0x77
    90be:	d101      	bne.n	90c4 <lll_resume+0x24>
}
    90c0:	b002      	add	sp, #8
    90c2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    90c4:	4a06      	ldr	r2, [pc, #24]	; (90e0 <lll_resume+0x40>)
    90c6:	4907      	ldr	r1, [pc, #28]	; (90e4 <lll_resume+0x44>)
    90c8:	4807      	ldr	r0, [pc, #28]	; (90e8 <lll_resume+0x48>)
    90ca:	234c      	movs	r3, #76	; 0x4c
    90cc:	f00e fa09 	bl	174e2 <assert_print>
    90d0:	4040      	eors	r0, r0
    90d2:	f380 8811 	msr	BASEPRI, r0
    90d6:	f04f 0003 	mov.w	r0, #3
    90da:	df02      	svc	2
}
    90dc:	b002      	add	sp, #8
    90de:	bd10      	pop	{r4, pc}
    90e0:	0001ba1c 	.word	0x0001ba1c
    90e4:	0001ba60 	.word	0x0001ba60
    90e8:	0001b844 	.word	0x0001b844

000090ec <hci_driver_init>:
	.close	= hci_driver_close,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    90ec:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    90ee:	4802      	ldr	r0, [pc, #8]	; (90f8 <hci_driver_init+0xc>)
    90f0:	f7fa f9d2 	bl	3498 <bt_hci_driver_register>

	return 0;
}
    90f4:	2000      	movs	r0, #0
    90f6:	bd08      	pop	{r3, pc}
    90f8:	0001bae8 	.word	0x0001bae8

000090fc <hci_driver_send>:
{
    90fc:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    90fe:	8a03      	ldrh	r3, [r0, #16]
{
    9100:	b083      	sub	sp, #12
	if (!buf->len) {
    9102:	b123      	cbz	r3, 910e <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    9104:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
    9106:	4604      	mov	r4, r0
    9108:	b1c3      	cbz	r3, 913c <hci_driver_send+0x40>
    910a:	2b02      	cmp	r3, #2
    910c:	d004      	beq.n	9118 <hci_driver_send+0x1c>
    910e:	f06f 0515 	mvn.w	r5, #21
}
    9112:	4628      	mov	r0, r5
    9114:	b003      	add	sp, #12
    9116:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    9118:	a901      	add	r1, sp, #4
    911a:	f000 fe6d 	bl	9df8 <hci_acl_handle>
	if (evt) {
    911e:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    9120:	4605      	mov	r5, r0
	if (evt) {
    9122:	b113      	cbz	r3, 912a <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    9124:	4618      	mov	r0, r3
    9126:	f7fa f999 	bl	345c <bt_recv_prio>
	if (!err) {
    912a:	2d00      	cmp	r5, #0
    912c:	d1f1      	bne.n	9112 <hci_driver_send+0x16>
		net_buf_unref(buf);
    912e:	4620      	mov	r0, r4
    9130:	f00a f8e2 	bl	132f8 <net_buf_unref>
    9134:	2500      	movs	r5, #0
}
    9136:	4628      	mov	r0, r5
    9138:	b003      	add	sp, #12
    913a:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    913c:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    913e:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    9140:	f000 fa7a 	bl	9638 <hci_cmd_handle>
	if (evt) {
    9144:	2800      	cmp	r0, #0
    9146:	d0f2      	beq.n	912e <hci_driver_send+0x32>
		bt_recv_prio(evt);
    9148:	f7fa f988 	bl	345c <bt_recv_prio>
		if (node_rx) {
    914c:	9d01      	ldr	r5, [sp, #4]
    914e:	2d00      	cmp	r5, #0
    9150:	d0ed      	beq.n	912e <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    9152:	4628      	mov	r0, r5
    9154:	f001 f98c 	bl	a470 <hci_get_class>
    9158:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    915a:	9901      	ldr	r1, [sp, #4]
    915c:	4801      	ldr	r0, [pc, #4]	; (9164 <hci_driver_send+0x68>)
    915e:	f011 fad9 	bl	1a714 <k_queue_append>
	if (!err) {
    9162:	e7e4      	b.n	912e <hci_driver_send+0x32>
    9164:	20001ae4 	.word	0x20001ae4

00009168 <hci_driver_close>:
{
    9168:	b508      	push	{r3, lr}
	ll_deinit();
    916a:	f7ff ff87 	bl	907c <ll_deinit>
	z_impl_k_thread_abort(thread);
    916e:	4804      	ldr	r0, [pc, #16]	; (9180 <hci_driver_close+0x18>)
    9170:	f7f9 fb4c 	bl	280c <z_impl_k_thread_abort>
    9174:	4803      	ldr	r0, [pc, #12]	; (9184 <hci_driver_close+0x1c>)
    9176:	f7f9 fb49 	bl	280c <z_impl_k_thread_abort>
}
    917a:	2000      	movs	r0, #0
    917c:	bd08      	pop	{r3, pc}
    917e:	bf00      	nop
    9180:	20000dd0 	.word	0x20000dd0
    9184:	20000d50 	.word	0x20000d50

00009188 <recv_thread>:
{
    9188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_queue_get(queue, timeout);
    918c:	4e42      	ldr	r6, [pc, #264]	; (9298 <recv_thread+0x110>)
		LL_ASSERT(0);
    918e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 929c <recv_thread+0x114>
    9192:	4f43      	ldr	r7, [pc, #268]	; (92a0 <recv_thread+0x118>)
{
    9194:	b082      	sub	sp, #8
    9196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    919a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    919e:	4630      	mov	r0, r6
    91a0:	f00c fe22 	bl	15de8 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    91a4:	2800      	cmp	r0, #0
    91a6:	d0f6      	beq.n	9196 <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
    91a8:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    91aa:	9001      	str	r0, [sp, #4]
	switch (class) {
    91ac:	2b04      	cmp	r3, #4
    91ae:	d821      	bhi.n	91f4 <recv_thread+0x6c>
    91b0:	2b00      	cmp	r3, #0
    91b2:	d14b      	bne.n	924c <recv_thread+0xc4>
		LL_ASSERT(0);
    91b4:	483b      	ldr	r0, [pc, #236]	; (92a4 <recv_thread+0x11c>)
    91b6:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
    91ba:	4642      	mov	r2, r8
    91bc:	4639      	mov	r1, r7
    91be:	f00e f990 	bl	174e2 <assert_print>
    91c2:	4040      	eors	r0, r0
    91c4:	f380 8811 	msr	BASEPRI, r0
    91c8:	f04f 0003 	mov.w	r0, #3
    91cc:	df02      	svc	2
	node_rx->hdr.next = NULL;
    91ce:	9b01      	ldr	r3, [sp, #4]
    91d0:	2200      	movs	r2, #0
    91d2:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    91d4:	a801      	add	r0, sp, #4
    91d6:	f7ff f9a7 	bl	8528 <ll_rx_mem_release>
    91da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    91de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    91e2:	4630      	mov	r0, r6
    91e4:	f00c fe00 	bl	15de8 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    91e8:	2800      	cmp	r0, #0
    91ea:	d0d4      	beq.n	9196 <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
    91ec:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    91ee:	9001      	str	r0, [sp, #4]
	switch (class) {
    91f0:	2b04      	cmp	r3, #4
    91f2:	d9dd      	bls.n	91b0 <recv_thread+0x28>
    91f4:	2b05      	cmp	r3, #5
    91f6:	d1dd      	bne.n	91b4 <recv_thread+0x2c>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    91f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    91fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9200:	2003      	movs	r0, #3
    9202:	f7f9 fc69 	bl	2ad8 <bt_buf_get_rx>
    9206:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    9208:	4621      	mov	r1, r4
    920a:	9801      	ldr	r0, [sp, #4]
    920c:	f000 fe7a 	bl	9f04 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    9210:	9b01      	ldr	r3, [sp, #4]
    9212:	2200      	movs	r2, #0
    9214:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    9216:	a801      	add	r0, sp, #4
    9218:	f7ff f986 	bl	8528 <ll_rx_mem_release>
		while (buf) {
    921c:	2c00      	cmp	r4, #0
    921e:	d0ba      	beq.n	9196 <recv_thread+0xe>
			frag = net_buf_ref(buf);
    9220:	4620      	mov	r0, r4
    9222:	f010 fb20 	bl	19866 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
    9226:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
    9228:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
    922a:	2000      	movs	r0, #0
    922c:	f010 fb41 	bl	198b2 <net_buf_frag_del>
			if (frag->len) {
    9230:	8a2b      	ldrh	r3, [r5, #16]
			buf = net_buf_frag_del(NULL, buf);
    9232:	4604      	mov	r4, r0
				bt_recv(frag);
    9234:	4628      	mov	r0, r5
			if (frag->len) {
    9236:	b133      	cbz	r3, 9246 <recv_thread+0xbe>
				bt_recv(frag);
    9238:	f7fa f896 	bl	3368 <bt_recv>
	z_impl_k_yield();
    923c:	f00d fabc 	bl	167b8 <z_impl_k_yield>
		while (buf) {
    9240:	2c00      	cmp	r4, #0
    9242:	d1ed      	bne.n	9220 <recv_thread+0x98>
    9244:	e7a7      	b.n	9196 <recv_thread+0xe>
				net_buf_unref(frag);
    9246:	f00a f857 	bl	132f8 <net_buf_unref>
    924a:	e7f7      	b.n	923c <recv_thread+0xb4>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    924c:	2b02      	cmp	r3, #2
    924e:	d013      	beq.n	9278 <recv_thread+0xf0>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9258:	2001      	movs	r0, #1
    925a:	f7f9 fc3d 	bl	2ad8 <bt_buf_get_rx>
    925e:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    9260:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    9262:	b19c      	cbz	r4, 928c <recv_thread+0x104>
			hci_evt_encode(node_rx, buf);
    9264:	4621      	mov	r1, r4
    9266:	f000 fe87 	bl	9f78 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    926a:	9b01      	ldr	r3, [sp, #4]
    926c:	2200      	movs	r2, #0
    926e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    9270:	a801      	add	r0, sp, #4
    9272:	f7ff f959 	bl	8528 <ll_rx_mem_release>
		while (buf) {
    9276:	e7d3      	b.n	9220 <recv_thread+0x98>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    9278:	2200      	movs	r2, #0
    927a:	2300      	movs	r3, #0
    927c:	2101      	movs	r1, #1
    927e:	2000      	movs	r0, #0
    9280:	f7f9 fc54 	bl	2b2c <bt_buf_get_evt>
    9284:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    9286:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    9288:	2c00      	cmp	r4, #0
    928a:	d1eb      	bne.n	9264 <recv_thread+0xdc>
	node_rx->hdr.next = NULL;
    928c:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    928e:	a801      	add	r0, sp, #4
    9290:	f7ff f94a 	bl	8528 <ll_rx_mem_release>
		while (buf) {
    9294:	e77f      	b.n	9196 <recv_thread+0xe>
    9296:	bf00      	nop
    9298:	20001ae4 	.word	0x20001ae4
    929c:	0001ba74 	.word	0x0001ba74
    92a0:	0001b908 	.word	0x0001b908
    92a4:	0001b844 	.word	0x0001b844

000092a8 <prio_recv_thread>:
{
    92a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    92ac:	4f2e      	ldr	r7, [pc, #184]	; (9368 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
    92ae:	4e2f      	ldr	r6, [pc, #188]	; (936c <prio_recv_thread+0xc4>)
{
    92b0:	b082      	sub	sp, #8
    92b2:	e00c      	b.n	92ce <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    92b4:	f7f9 fc3a 	bl	2b2c <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    92b8:	4622      	mov	r2, r4
    92ba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    92be:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    92c0:	f001 f8be 	bl	a440 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    92c4:	4620      	mov	r0, r4
    92c6:	f7fa f8c9 	bl	345c <bt_recv_prio>
	z_impl_k_yield();
    92ca:	f00d fa75 	bl	167b8 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    92ce:	f10d 0102 	add.w	r1, sp, #2
    92d2:	a801      	add	r0, sp, #4
    92d4:	f7fe ffe4 	bl	82a0 <ll_rx_get>
    92d8:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    92da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    92de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    92e2:	2100      	movs	r1, #0
    92e4:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    92e6:	2c00      	cmp	r4, #0
    92e8:	d1e4      	bne.n	92b4 <prio_recv_thread+0xc>
		if (node_rx) {
    92ea:	9b01      	ldr	r3, [sp, #4]
    92ec:	b1b3      	cbz	r3, 931c <prio_recv_thread+0x74>
			ll_rx_dequeue();
    92ee:	f7ff f851 	bl	8394 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    92f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    92f6:	4640      	mov	r0, r8
    92f8:	f001 f8ba 	bl	a470 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    92fc:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    92fe:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    9302:	796b      	ldrb	r3, [r5, #5]
    9304:	2b03      	cmp	r3, #3
    9306:	d102      	bne.n	930e <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    9308:	792b      	ldrb	r3, [r5, #4]
    930a:	2b18      	cmp	r3, #24
    930c:	d00e      	beq.n	932c <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
    930e:	4629      	mov	r1, r5
    9310:	4630      	mov	r0, r6
    9312:	f011 f9ff 	bl	1a714 <k_queue_append>
		if (iso_received || node_rx) {
    9316:	9b01      	ldr	r3, [sp, #4]
    9318:	2b00      	cmp	r3, #0
    931a:	d1d8      	bne.n	92ce <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
    931c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9324:	4638      	mov	r0, r7
    9326:	f00c fdb9 	bl	15e9c <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    932a:	e7d0      	b.n	92ce <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    932c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9330:	4621      	mov	r1, r4
    9332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9336:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    9338:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    933c:	f7f9 fbf6 	bl	2b2c <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    9340:	4641      	mov	r1, r8
    9342:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    9344:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    9346:	f105 001c 	add.w	r0, r5, #28
    934a:	f000 fdb3 	bl	9eb4 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    934e:	4640      	mov	r0, r8
    9350:	f000 fdd0 	bl	9ef4 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    9354:	4620      	mov	r0, r4
			if (buf) {
    9356:	b124      	cbz	r4, 9362 <prio_recv_thread+0xba>
				bt_recv_prio(buf);
    9358:	f7fa f880 	bl	345c <bt_recv_prio>
					net_buf_unref(buf);
    935c:	4620      	mov	r0, r4
    935e:	f009 ffcb 	bl	132f8 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    9362:	9d01      	ldr	r5, [sp, #4]
    9364:	e7d3      	b.n	930e <prio_recv_thread+0x66>
    9366:	bf00      	nop
    9368:	20001afc 	.word	0x20001afc
    936c:	20001ae4 	.word	0x20001ae4

00009370 <hci_driver_open>:
{
    9370:	b5d0      	push	{r4, r6, r7, lr}
    9372:	b088      	sub	sp, #32
	z_impl_k_queue_init(queue);
    9374:	481e      	ldr	r0, [pc, #120]	; (93f0 <hci_driver_open+0x80>)
    9376:	f011 f9a1 	bl	1a6bc <z_impl_k_queue_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    937a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    937e:	2100      	movs	r1, #0
    9380:	481c      	ldr	r0, [pc, #112]	; (93f4 <hci_driver_open+0x84>)
    9382:	f011 f9e0 	bl	1a746 <z_impl_k_sem_init>
	err = ll_init(&sem_prio_recv);
    9386:	481b      	ldr	r0, [pc, #108]	; (93f4 <hci_driver_open+0x84>)
    9388:	f7ff fd76 	bl	8e78 <ll_init>
	if (err) {
    938c:	4604      	mov	r4, r0
    938e:	bb58      	cbnz	r0, 93e8 <hci_driver_open+0x78>
	hci_init(NULL);
    9390:	f001 f884 	bl	a49c <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    9394:	2600      	movs	r6, #0
    9396:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9398:	f06f 0209 	mvn.w	r2, #9
    939c:	e9cd 2403 	strd	r2, r4, [sp, #12]
    93a0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    93a4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    93a8:	4b13      	ldr	r3, [pc, #76]	; (93f8 <hci_driver_open+0x88>)
    93aa:	4914      	ldr	r1, [pc, #80]	; (93fc <hci_driver_open+0x8c>)
    93ac:	9400      	str	r4, [sp, #0]
    93ae:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    93b2:	4813      	ldr	r0, [pc, #76]	; (9400 <hci_driver_open+0x90>)
    93b4:	f00c fbbe 	bl	15b34 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    93b8:	4912      	ldr	r1, [pc, #72]	; (9404 <hci_driver_open+0x94>)
    93ba:	4811      	ldr	r0, [pc, #68]	; (9400 <hci_driver_open+0x90>)
    93bc:	f011 f8f1 	bl	1a5a2 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    93c0:	f06f 0207 	mvn.w	r2, #7
    93c4:	e9cd 2403 	strd	r2, r4, [sp, #12]
    93c8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    93cc:	e9cd 4401 	strd	r4, r4, [sp, #4]
    93d0:	4b0d      	ldr	r3, [pc, #52]	; (9408 <hci_driver_open+0x98>)
    93d2:	490e      	ldr	r1, [pc, #56]	; (940c <hci_driver_open+0x9c>)
    93d4:	9400      	str	r4, [sp, #0]
    93d6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    93da:	480d      	ldr	r0, [pc, #52]	; (9410 <hci_driver_open+0xa0>)
    93dc:	f00c fbaa 	bl	15b34 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    93e0:	490c      	ldr	r1, [pc, #48]	; (9414 <hci_driver_open+0xa4>)
    93e2:	480b      	ldr	r0, [pc, #44]	; (9410 <hci_driver_open+0xa0>)
    93e4:	f011 f8dd 	bl	1a5a2 <z_impl_k_thread_name_set>
}
    93e8:	4620      	mov	r0, r4
    93ea:	b008      	add	sp, #32
    93ec:	bdd0      	pop	{r4, r6, r7, pc}
    93ee:	bf00      	nop
    93f0:	20001ae4 	.word	0x20001ae4
    93f4:	20001afc 	.word	0x20001afc
    93f8:	000092a9 	.word	0x000092a9
    93fc:	20003c80 	.word	0x20003c80
    9400:	20000dd0 	.word	0x20000dd0
    9404:	0001bab4 	.word	0x0001bab4
    9408:	00009189 	.word	0x00009189
    940c:	20003780 	.word	0x20003780
    9410:	20000d50 	.word	0x20000d50
    9414:	0001bac0 	.word	0x0001bac0

00009418 <hci_recv_fifo_reset>:
{
    9418:	b510      	push	{r4, lr}
	k_sched_lock();
    941a:	f00d f991 	bl	16740 <k_sched_lock>
	z_impl_k_queue_cancel_wait(queue);
    941e:	4c05      	ldr	r4, [pc, #20]	; (9434 <hci_recv_fifo_reset+0x1c>)
    9420:	4620      	mov	r0, r4
    9422:	f011 f957 	bl	1a6d4 <z_impl_k_queue_cancel_wait>
	z_impl_k_queue_init(queue);
    9426:	4620      	mov	r0, r4
    9428:	f011 f948 	bl	1a6bc <z_impl_k_queue_init>
}
    942c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_sched_unlock();
    9430:	f00d b99a 	b.w	16768 <k_sched_unlock>
    9434:	20001ae4 	.word	0x20001ae4

00009438 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    9438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    943a:	4c18      	ldr	r4, [pc, #96]	; (949c <le_remote_feat_complete+0x64>)
    943c:	6864      	ldr	r4, [r4, #4]
    943e:	00a4      	lsls	r4, r4, #2
    9440:	d504      	bpl.n	944c <le_remote_feat_complete+0x14>
    9442:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    9444:	4a16      	ldr	r2, [pc, #88]	; (94a0 <le_remote_feat_complete+0x68>)
    9446:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9448:	0712      	lsls	r2, r2, #28
    944a:	d400      	bmi.n	944e <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    944c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    944e:	f103 040c 	add.w	r4, r3, #12
    9452:	4607      	mov	r7, r0
    9454:	460e      	mov	r6, r1
    9456:	4620      	mov	r0, r4
    9458:	2102      	movs	r1, #2
    945a:	f010 fa3a 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    945e:	f640 433e 	movw	r3, #3134	; 0xc3e
    9462:	8003      	strh	r3, [r0, #0]
    9464:	2101      	movs	r1, #1
    9466:	4620      	mov	r0, r4
    9468:	f010 fa33 	bl	198d2 <net_buf_simple_add>
    946c:	4603      	mov	r3, r0
	me->subevent = subevt;
    946e:	2204      	movs	r2, #4
    9470:	701a      	strb	r2, [r3, #0]
    9472:	4620      	mov	r0, r4
    9474:	210b      	movs	r1, #11
    9476:	f010 fa2c 	bl	198d2 <net_buf_simple_add>
		memcpy(&sep->features[0],
    947a:	2208      	movs	r2, #8
	sep->status = status;
    947c:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    947e:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    9482:	b92f      	cbnz	r7, 9490 <le_remote_feat_complete+0x58>
		memcpy(&sep->features[0],
    9484:	1d31      	adds	r1, r6, #4
    9486:	3003      	adds	r0, #3
}
    9488:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    948c:	f00e bab6 	b.w	179fc <memcpy>
}
    9490:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    9494:	2100      	movs	r1, #0
    9496:	3003      	adds	r0, #3
    9498:	f00e babb 	b.w	17a12 <memset>
    949c:	20000158 	.word	0x20000158
    94a0:	20000150 	.word	0x20000150

000094a4 <hci_vendor_cmd_handle_common>:
{
    94a4:	b570      	push	{r4, r5, r6, lr}
	switch (ocf) {
    94a6:	3801      	subs	r0, #1
{
    94a8:	b086      	sub	sp, #24
    94aa:	4614      	mov	r4, r2
	switch (ocf) {
    94ac:	2811      	cmp	r0, #17
    94ae:	d80a      	bhi.n	94c6 <hci_vendor_cmd_handle_common+0x22>
    94b0:	e8df f000 	tbb	[pc, r0]
    94b4:	095a4023 	.word	0x095a4023
    94b8:	7d096b09 	.word	0x7d096b09
    94bc:	0909ab98 	.word	0x0909ab98
    94c0:	09090909 	.word	0x09090909
    94c4:	0d09      	.short	0x0d09
    94c6:	f06f 0015 	mvn.w	r0, #21
}
    94ca:	b006      	add	sp, #24
    94cc:	bd70      	pop	{r4, r5, r6, pc}
	struct bt_hci_cp_vs_set_min_num_used_chans *cmd = (void *)buf->data;
    94ce:	68cb      	ldr	r3, [r1, #12]
	status = ll_set_min_used_chans(handle, cmd->phys, cmd->min_used_chans);
    94d0:	78da      	ldrb	r2, [r3, #3]
    94d2:	7899      	ldrb	r1, [r3, #2]
    94d4:	8818      	ldrh	r0, [r3, #0]
    94d6:	f006 ff33 	bl	10340 <ll_set_min_used_chans>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    94da:	4b55      	ldr	r3, [pc, #340]	; (9630 <hci_vendor_cmd_handle_common+0x18c>)
	status = ll_set_min_used_chans(handle, cmd->phys, cmd->min_used_chans);
    94dc:	4606      	mov	r6, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    94de:	2101      	movs	r1, #1
    94e0:	8818      	ldrh	r0, [r3, #0]
    94e2:	f00e fd93 	bl	1800c <bt_hci_cmd_complete_create>
    94e6:	2101      	movs	r1, #1
    94e8:	4605      	mov	r5, r0
    94ea:	300c      	adds	r0, #12
    94ec:	f010 f9f1 	bl	198d2 <net_buf_simple_add>
	ccst->status = status;
    94f0:	7006      	strb	r6, [r0, #0]
	*evt = cmd_complete_status(status);
    94f2:	6025      	str	r5, [r4, #0]
	return 0;
    94f4:	2000      	movs	r0, #0
}
    94f6:	b006      	add	sp, #24
    94f8:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    94fa:	4b4d      	ldr	r3, [pc, #308]	; (9630 <hci_vendor_cmd_handle_common+0x18c>)
    94fc:	210d      	movs	r1, #13
    94fe:	8818      	ldrh	r0, [r3, #0]
    9500:	f00e fd84 	bl	1800c <bt_hci_cmd_complete_create>
    9504:	210d      	movs	r1, #13
    9506:	6020      	str	r0, [r4, #0]
    9508:	300c      	adds	r0, #12
    950a:	f010 f9e2 	bl	198d2 <net_buf_simple_add>
	rp->fw_variant = 0U;
    950e:	f44f 7240 	mov.w	r2, #768	; 0x300
	rp->status = 0x00;
    9512:	2300      	movs	r3, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    9514:	f04f 1402 	mov.w	r4, #131074	; 0x20002
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    9518:	2103      	movs	r1, #3
	rp->fw_variant = 0U;
    951a:	f8a0 2005 	strh.w	r2, [r0, #5]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    951e:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    9520:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    9522:	f8c0 4001 	str.w	r4, [r0, #1]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    9526:	71c1      	strb	r1, [r0, #7]
    9528:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    952a:	7242      	strb	r2, [r0, #9]
    952c:	7283      	strb	r3, [r0, #10]
    952e:	72c3      	strb	r3, [r0, #11]
    9530:	7303      	strb	r3, [r0, #12]
}
    9532:	e7df      	b.n	94f4 <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9534:	4b3e      	ldr	r3, [pc, #248]	; (9630 <hci_vendor_cmd_handle_common+0x18c>)
    9536:	2141      	movs	r1, #65	; 0x41
    9538:	8818      	ldrh	r0, [r3, #0]
    953a:	f00e fd67 	bl	1800c <bt_hci_cmd_complete_create>
    953e:	2141      	movs	r1, #65	; 0x41
    9540:	6020      	str	r0, [r4, #0]
    9542:	300c      	adds	r0, #12
    9544:	f010 f9c5 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    9548:	2100      	movs	r1, #0
    954a:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    954c:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    954e:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    9552:	f00e fa5e 	bl	17a12 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    9556:	7862      	ldrb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    9558:	78a3      	ldrb	r3, [r4, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    955a:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    955e:	f043 0303 	orr.w	r3, r3, #3
	rp->commands[0] |= BIT(5) | BIT(7);
    9562:	7062      	strb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    9564:	70a3      	strb	r3, [r4, #2]
}
    9566:	e7c5      	b.n	94f4 <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9568:	4b31      	ldr	r3, [pc, #196]	; (9630 <hci_vendor_cmd_handle_common+0x18c>)
    956a:	2109      	movs	r1, #9
    956c:	8818      	ldrh	r0, [r3, #0]
    956e:	f00e fd4d 	bl	1800c <bt_hci_cmd_complete_create>
    9572:	2109      	movs	r1, #9
    9574:	6020      	str	r0, [r4, #0]
    9576:	300c      	adds	r0, #12
    9578:	f010 f9ab 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    957c:	2100      	movs	r1, #0
    957e:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    9582:	2208      	movs	r2, #8
    9584:	f00e fa45 	bl	17a12 <memset>
}
    9588:	e7b4      	b.n	94f4 <hci_vendor_cmd_handle_common+0x50>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    958a:	68c9      	ldr	r1, [r1, #12]
    958c:	2000      	movs	r0, #0
    958e:	f7fe fb93 	bl	7cb8 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    9592:	4b27      	ldr	r3, [pc, #156]	; (9630 <hci_vendor_cmd_handle_common+0x18c>)
    9594:	2101      	movs	r1, #1
    9596:	8818      	ldrh	r0, [r3, #0]
    9598:	f00e fd38 	bl	1800c <bt_hci_cmd_complete_create>
    959c:	2101      	movs	r1, #1
    959e:	4605      	mov	r5, r0
    95a0:	300c      	adds	r0, #12
    95a2:	f010 f996 	bl	198d2 <net_buf_simple_add>
	ccst->status = status;
    95a6:	2300      	movs	r3, #0
    95a8:	7003      	strb	r3, [r0, #0]
	*evt = cmd_complete_status(0x00);
    95aa:	6025      	str	r5, [r4, #0]
}
    95ac:	e7a2      	b.n	94f4 <hci_vendor_cmd_handle_common+0x50>
	const char build_info[] = HCI_VS_BUILD_INFO;
    95ae:	4d21      	ldr	r5, [pc, #132]	; (9634 <hci_vendor_cmd_handle_common+0x190>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    95b0:	4e1f      	ldr	r6, [pc, #124]	; (9630 <hci_vendor_cmd_handle_common+0x18c>)
	const char build_info[] = HCI_VS_BUILD_INFO;
    95b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    95b4:	f10d 0c04 	add.w	ip, sp, #4
    95b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    95bc:	682b      	ldr	r3, [r5, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    95be:	8830      	ldrh	r0, [r6, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
    95c0:	f8ac 3000 	strh.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    95c4:	2113      	movs	r1, #19
    95c6:	f00e fd21 	bl	1800c <bt_hci_cmd_complete_create>
    95ca:	2113      	movs	r1, #19
    95cc:	6020      	str	r0, [r4, #0]
    95ce:	300c      	adds	r0, #12
    95d0:	f010 f97f 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    95d4:	2300      	movs	r3, #0
    95d6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    95da:	2212      	movs	r2, #18
    95dc:	a901      	add	r1, sp, #4
    95de:	f00e fa0d 	bl	179fc <memcpy>
}
    95e2:	e787      	b.n	94f4 <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    95e4:	4b12      	ldr	r3, [pc, #72]	; (9630 <hci_vendor_cmd_handle_common+0x18c>)
    95e6:	2118      	movs	r1, #24
    95e8:	8818      	ldrh	r0, [r3, #0]
    95ea:	f00e fd0f 	bl	1800c <bt_hci_cmd_complete_create>
    95ee:	2118      	movs	r1, #24
    95f0:	6020      	str	r0, [r4, #0]
    95f2:	300c      	adds	r0, #12
    95f4:	f010 f96d 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    95f8:	2300      	movs	r3, #0
    95fa:	4604      	mov	r4, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    95fc:	2101      	movs	r1, #1
	rp->status = 0x00;
    95fe:	f800 3b02 	strb.w	r3, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    9602:	f009 fd3b 	bl	1307c <hci_vendor_read_static_addr>
    9606:	7060      	strb	r0, [r4, #1]
}
    9608:	e774      	b.n	94f4 <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    960a:	4b09      	ldr	r3, [pc, #36]	; (9630 <hci_vendor_cmd_handle_common+0x18c>)
    960c:	2121      	movs	r1, #33	; 0x21
    960e:	8818      	ldrh	r0, [r3, #0]
    9610:	f00e fcfc 	bl	1800c <bt_hci_cmd_complete_create>
    9614:	2121      	movs	r1, #33	; 0x21
    9616:	6020      	str	r0, [r4, #0]
    9618:	300c      	adds	r0, #12
    961a:	f010 f95a 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    961e:	4601      	mov	r1, r0
    9620:	2300      	movs	r3, #0
    9622:	f801 3b11 	strb.w	r3, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    9626:	3001      	adds	r0, #1
    9628:	f009 fd78 	bl	1311c <hci_vendor_read_key_hierarchy_roots>
}
    962c:	e762      	b.n	94f4 <hci_vendor_cmd_handle_common+0x50>
    962e:	bf00      	nop
    9630:	2000261c 	.word	0x2000261c
    9634:	0001bb00 	.word	0x0001bb00

00009638 <hci_cmd_handle>:
{
    9638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (cmd->len < sizeof(*chdr)) {
    963c:	8a03      	ldrh	r3, [r0, #16]
{
    963e:	b08c      	sub	sp, #48	; 0x30
	struct net_buf *evt = NULL;
    9640:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
    9642:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    9644:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    9646:	d92d      	bls.n	96a4 <hci_cmd_handle+0x6c>
	return net_buf_simple_pull_mem(&buf->b, len);
    9648:	4604      	mov	r4, r0
    964a:	2103      	movs	r1, #3
    964c:	300c      	adds	r0, #12
    964e:	f010 f967 	bl	19920 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    9652:	8a22      	ldrh	r2, [r4, #16]
    9654:	7883      	ldrb	r3, [r0, #2]
    9656:	429a      	cmp	r2, r3
    9658:	d324      	bcc.n	96a4 <hci_cmd_handle+0x6c>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    965a:	8802      	ldrh	r2, [r0, #0]
    965c:	4ed4      	ldr	r6, [pc, #848]	; (99b0 <hci_cmd_handle+0x378>)
	switch (BT_OGF(_opcode)) {
    965e:	f3c2 2385 	ubfx	r3, r2, #10, #6
    9662:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    9664:	8032      	strh	r2, [r6, #0]
    9666:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
    9668:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
    966c:	d809      	bhi.n	9682 <hci_cmd_handle+0x4a>
    966e:	b19b      	cbz	r3, 9698 <hci_cmd_handle+0x60>
    9670:	3b01      	subs	r3, #1
    9672:	2b07      	cmp	r3, #7
    9674:	d810      	bhi.n	9698 <hci_cmd_handle+0x60>
    9676:	e8df f003 	tbb	[pc, r3]
    967a:	0f1a      	.short	0x0f1a
    967c:	0f0f4926 	.word	0x0f0f4926
    9680:	610f      	.short	0x610f
    9682:	2b3f      	cmp	r3, #63	; 0x3f
    9684:	d108      	bne.n	9698 <hci_cmd_handle+0x60>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    9686:	aa07      	add	r2, sp, #28
    9688:	4621      	mov	r1, r4
    968a:	4628      	mov	r0, r5
    968c:	f7ff ff0a 	bl	94a4 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    9690:	3016      	adds	r0, #22
    9692:	f040 83a3 	bne.w	9ddc <hci_cmd_handle+0x7a4>
	return bt_hci_cmd_status_create(_opcode, status);
    9696:	8830      	ldrh	r0, [r6, #0]
    9698:	2101      	movs	r1, #1
}
    969a:	b00c      	add	sp, #48	; 0x30
    969c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_status_create(_opcode, status);
    96a0:	f00e bcc6 	b.w	18030 <bt_hci_cmd_status_create>
		return NULL;
    96a4:	2400      	movs	r4, #0
}
    96a6:	4620      	mov	r0, r4
    96a8:	b00c      	add	sp, #48	; 0x30
    96aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (ocf) {
    96ae:	2d06      	cmp	r5, #6
    96b0:	f000 834e 	beq.w	9d50 <hci_cmd_handle+0x718>
    96b4:	2d1d      	cmp	r5, #29
    96b6:	d1ef      	bne.n	9698 <hci_cmd_handle+0x60>
	handle = sys_le16_to_cpu(cmd->handle);
    96b8:	68e3      	ldr	r3, [r4, #12]
	status = ll_version_ind_send(handle);
    96ba:	8818      	ldrh	r0, [r3, #0]
    96bc:	f001 ff3a 	bl	b534 <ll_version_ind_send>
    96c0:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    96c2:	8830      	ldrh	r0, [r6, #0]
    96c4:	e7e9      	b.n	969a <hci_cmd_handle+0x62>
	switch (ocf) {
    96c6:	2d63      	cmp	r5, #99	; 0x63
    96c8:	f000 8385 	beq.w	9dd6 <hci_cmd_handle+0x79e>
    96cc:	f200 80e6 	bhi.w	989c <hci_cmd_handle+0x264>
    96d0:	2d03      	cmp	r5, #3
    96d2:	f000 835d 	beq.w	9d90 <hci_cmd_handle+0x758>
    96d6:	2d2d      	cmp	r5, #45	; 0x2d
    96d8:	f040 80cc 	bne.w	9874 <hci_cmd_handle+0x23c>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    96dc:	68e3      	ldr	r3, [r4, #12]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    96de:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    96e0:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
    96e2:	f893 8002 	ldrb.w	r8, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    96e6:	f00e fc91 	bl	1800c <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    96ea:	2104      	movs	r1, #4
    96ec:	4604      	mov	r4, r0
    96ee:	300c      	adds	r0, #12
    96f0:	f010 f8ef 	bl	198d2 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
    96f4:	b2b7      	uxth	r7, r6
    96f6:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    96f8:	1cc3      	adds	r3, r0, #3
    96fa:	4642      	mov	r2, r8
    96fc:	4639      	mov	r1, r7
    96fe:	2002      	movs	r0, #2
    9700:	f7fe fac6 	bl	7c90 <ll_tx_pwr_lvl_get>
	rp->handle = sys_cpu_to_le16(handle);
    9704:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
    9708:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
    970a:	e7cc      	b.n	96a6 <hci_cmd_handle+0x6e>
	switch (ocf) {
    970c:	1e6a      	subs	r2, r5, #1
    970e:	2a08      	cmp	r2, #8
    9710:	d8c2      	bhi.n	9698 <hci_cmd_handle+0x60>
    9712:	a301      	add	r3, pc, #4	; (adr r3, 9718 <hci_cmd_handle+0xe0>)
    9714:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    9718:	00009987 	.word	0x00009987
    971c:	00009913 	.word	0x00009913
    9720:	000098ef 	.word	0x000098ef
    9724:	00009699 	.word	0x00009699
    9728:	00009699 	.word	0x00009699
    972c:	00009699 	.word	0x00009699
    9730:	00009699 	.word	0x00009699
    9734:	00009699 	.word	0x00009699
    9738:	000098d1 	.word	0x000098d1
	switch (ocf) {
    973c:	1e6a      	subs	r2, r5, #1
    973e:	2a4a      	cmp	r2, #74	; 0x4a
    9740:	d8aa      	bhi.n	9698 <hci_cmd_handle+0x60>
    9742:	a301      	add	r3, pc, #4	; (adr r3, 9748 <hci_cmd_handle+0x110>)
    9744:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    9748:	00009a05 	.word	0x00009a05
    974c:	000099e5 	.word	0x000099e5
    9750:	00009aa9 	.word	0x00009aa9
    9754:	00009699 	.word	0x00009699
    9758:	00009a9f 	.word	0x00009a9f
    975c:	00009a83 	.word	0x00009a83
    9760:	00009a6b 	.word	0x00009a6b
    9764:	00009a5f 	.word	0x00009a5f
    9768:	00009a53 	.word	0x00009a53
    976c:	00009a33 	.word	0x00009a33
    9770:	00009699 	.word	0x00009699
    9774:	00009699 	.word	0x00009699
    9778:	00009699 	.word	0x00009699
    977c:	00009699 	.word	0x00009699
    9780:	00009699 	.word	0x00009699
    9784:	00009699 	.word	0x00009699
    9788:	00009699 	.word	0x00009699
    978c:	00009699 	.word	0x00009699
    9790:	00009a11 	.word	0x00009a11
    9794:	00009699 	.word	0x00009699
    9798:	00009c19 	.word	0x00009c19
    979c:	00009c0b 	.word	0x00009c0b
    97a0:	00009bdb 	.word	0x00009bdb
    97a4:	00009bbd 	.word	0x00009bbd
    97a8:	00009699 	.word	0x00009699
    97ac:	00009bb3 	.word	0x00009bb3
    97b0:	00009ba3 	.word	0x00009ba3
    97b4:	00009b85 	.word	0x00009b85
    97b8:	00009699 	.word	0x00009699
    97bc:	00009699 	.word	0x00009699
    97c0:	00009699 	.word	0x00009699
    97c4:	00009b65 	.word	0x00009b65
    97c8:	00009c8d 	.word	0x00009c8d
    97cc:	00009c7d 	.word	0x00009c7d
    97d0:	00009c4b 	.word	0x00009c4b
    97d4:	00009c3f 	.word	0x00009c3f
    97d8:	00009699 	.word	0x00009699
    97dc:	00009699 	.word	0x00009699
    97e0:	00009699 	.word	0x00009699
    97e4:	00009699 	.word	0x00009699
    97e8:	00009699 	.word	0x00009699
    97ec:	00009699 	.word	0x00009699
    97f0:	00009699 	.word	0x00009699
    97f4:	00009699 	.word	0x00009699
    97f8:	00009699 	.word	0x00009699
    97fc:	00009699 	.word	0x00009699
    9800:	00009d09 	.word	0x00009d09
    9804:	00009ca7 	.word	0x00009ca7
    9808:	00009b45 	.word	0x00009b45
    980c:	00009af1 	.word	0x00009af1
    9810:	00009699 	.word	0x00009699
    9814:	00009699 	.word	0x00009699
    9818:	00009699 	.word	0x00009699
    981c:	00009699 	.word	0x00009699
    9820:	00009699 	.word	0x00009699
    9824:	00009699 	.word	0x00009699
    9828:	00009699 	.word	0x00009699
    982c:	00009699 	.word	0x00009699
    9830:	00009699 	.word	0x00009699
    9834:	00009699 	.word	0x00009699
    9838:	00009699 	.word	0x00009699
    983c:	00009699 	.word	0x00009699
    9840:	00009699 	.word	0x00009699
    9844:	00009699 	.word	0x00009699
    9848:	00009699 	.word	0x00009699
    984c:	00009699 	.word	0x00009699
    9850:	00009699 	.word	0x00009699
    9854:	00009699 	.word	0x00009699
    9858:	00009699 	.word	0x00009699
    985c:	00009699 	.word	0x00009699
    9860:	00009699 	.word	0x00009699
    9864:	00009699 	.word	0x00009699
    9868:	00009699 	.word	0x00009699
    986c:	00009699 	.word	0x00009699
    9870:	000099c5 	.word	0x000099c5
	switch (ocf) {
    9874:	2d01      	cmp	r5, #1
    9876:	f47f af0f 	bne.w	9698 <hci_cmd_handle+0x60>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    987a:	68e2      	ldr	r2, [r4, #12]
	event_mask = sys_get_le64(cmd->events);
    987c:	4b4d      	ldr	r3, [pc, #308]	; (99b4 <hci_cmd_handle+0x37c>)
    987e:	6811      	ldr	r1, [r2, #0]
    9880:	6852      	ldr	r2, [r2, #4]
    9882:	6019      	str	r1, [r3, #0]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    9884:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    9886:	2101      	movs	r1, #1
    9888:	f00e fbc0 	bl	1800c <bt_hci_cmd_complete_create>
    988c:	2101      	movs	r1, #1
    988e:	4604      	mov	r4, r0
    9890:	300c      	adds	r0, #12
    9892:	f010 f81e 	bl	198d2 <net_buf_simple_add>
	ccst->status = status;
    9896:	2300      	movs	r3, #0
    9898:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
    989a:	e704      	b.n	96a6 <hci_cmd_handle+0x6e>
	switch (ocf) {
    989c:	2d7b      	cmp	r5, #123	; 0x7b
    989e:	f000 825f 	beq.w	9d60 <hci_cmd_handle+0x728>
    98a2:	2d7c      	cmp	r5, #124	; 0x7c
    98a4:	f47f aef8 	bne.w	9698 <hci_cmd_handle+0x60>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    98a8:	68e3      	ldr	r3, [r4, #12]
	handle = sys_le16_to_cpu(cmd->handle);
    98aa:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    98ac:	8859      	ldrh	r1, [r3, #2]
    98ae:	b2b8      	uxth	r0, r7
    98b0:	f001 ff2a 	bl	b708 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    98b4:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    98b6:	2103      	movs	r1, #3
    98b8:	8830      	ldrh	r0, [r6, #0]
    98ba:	f00e fba7 	bl	1800c <bt_hci_cmd_complete_create>
    98be:	2103      	movs	r1, #3
    98c0:	4604      	mov	r4, r0
    98c2:	300c      	adds	r0, #12
    98c4:	f010 f805 	bl	198d2 <net_buf_simple_add>
	rp->status = status;
    98c8:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    98ca:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (err == -EINVAL) {
    98ce:	e6ea      	b.n	96a6 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    98d0:	2107      	movs	r1, #7
    98d2:	f00e fb9b 	bl	1800c <bt_hci_cmd_complete_create>
    98d6:	2107      	movs	r1, #7
    98d8:	4604      	mov	r4, r0
    98da:	300c      	adds	r0, #12
    98dc:	f00f fff9 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    98e0:	4601      	mov	r1, r0
    98e2:	2000      	movs	r0, #0
    98e4:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
    98e8:	f7fe fa1a 	bl	7d20 <ll_addr_read>
	if (err == -EINVAL) {
    98ec:	e6db      	b.n	96a6 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    98ee:	2109      	movs	r1, #9
    98f0:	f00e fb8c 	bl	1800c <bt_hci_cmd_complete_create>
    98f4:	2109      	movs	r1, #9
    98f6:	4604      	mov	r4, r0
    98f8:	300c      	adds	r0, #12
    98fa:	f00f ffea 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    98fe:	2100      	movs	r1, #0
    9900:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    9902:	2208      	movs	r2, #8
	rp->status = 0x00;
    9904:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    9908:	f00e f883 	bl	17a12 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    990c:	2360      	movs	r3, #96	; 0x60
    990e:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
    9910:	e6c9      	b.n	96a6 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9912:	2141      	movs	r1, #65	; 0x41
    9914:	f00e fb7a 	bl	1800c <bt_hci_cmd_complete_create>
    9918:	2141      	movs	r1, #65	; 0x41
    991a:	4604      	mov	r4, r0
    991c:	300c      	adds	r0, #12
    991e:	f00f ffd8 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    9922:	2100      	movs	r1, #0
    9924:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    9926:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    9928:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    992c:	f00e f871 	bl	17a12 <memset>
	rp->commands[10] |= BIT(2);
    9930:	7aeb      	ldrb	r3, [r5, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
    9932:	79a9      	ldrb	r1, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
    9934:	7bea      	ldrb	r2, [r5, #15]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    9936:	f8d5 001a 	ldr.w	r0, [r5, #26]
	rp->commands[10] |= BIT(2);
    993a:	f043 0304 	orr.w	r3, r3, #4
    993e:	72eb      	strb	r3, [r5, #11]
	rp->commands[15] |= BIT(1);
    9940:	7c2b      	ldrb	r3, [r5, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
    9942:	f061 013f 	orn	r1, r1, #63	; 0x3f
	rp->commands[14] |= BIT(3) | BIT(5);
    9946:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[15] |= BIT(1);
    994a:	f043 0302 	orr.w	r3, r3, #2
	rp->commands[5] |= BIT(6) | BIT(7);
    994e:	71a9      	strb	r1, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
    9950:	73ea      	strb	r2, [r5, #15]
	rp->commands[22] |= BIT(2);
    9952:	7de9      	ldrb	r1, [r5, #23]
	rp->commands[0] |= BIT(5);
    9954:	786a      	ldrb	r2, [r5, #1]
	rp->commands[15] |= BIT(1);
    9956:	742b      	strb	r3, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    9958:	4b17      	ldr	r3, [pc, #92]	; (99b8 <hci_cmd_handle+0x380>)
	rp->commands[22] |= BIT(2);
    995a:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    995e:	4303      	orrs	r3, r0
	rp->commands[0] |= BIT(5);
    9960:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[22] |= BIT(2);
    9964:	75e9      	strb	r1, [r5, #23]
	rp->commands[0] |= BIT(5);
    9966:	706a      	strb	r2, [r5, #1]
	rp->commands[32] |= BIT(4) | BIT(5);
    9968:	f8d5 1021 	ldr.w	r1, [r5, #33]	; 0x21
    996c:	4a13      	ldr	r2, [pc, #76]	; (99bc <hci_cmd_handle+0x384>)
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    996e:	f8c5 301a 	str.w	r3, [r5, #26]
	rp->commands[38] |= BIT(7);
    9972:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	rp->commands[32] |= BIT(4) | BIT(5);
    9976:	430a      	orrs	r2, r1
	rp->commands[38] |= BIT(7);
    9978:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
    997c:	f8c5 2021 	str.w	r2, [r5, #33]	; 0x21
	rp->commands[38] |= BIT(7);
    9980:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	if (err == -EINVAL) {
    9984:	e68f      	b.n	96a6 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9986:	2109      	movs	r1, #9
    9988:	f00e fb40 	bl	1800c <bt_hci_cmd_complete_create>
    998c:	2109      	movs	r1, #9
    998e:	4604      	mov	r4, r0
    9990:	300c      	adds	r0, #12
    9992:	f00f ff9e 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    9996:	f44f 6150 	mov.w	r1, #3328	; 0xd00
	rp->hci_revision = sys_cpu_to_le16(0);
    999a:	2300      	movs	r3, #0
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    999c:	4a08      	ldr	r2, [pc, #32]	; (99c0 <hci_cmd_handle+0x388>)
	rp->status = 0x00;
    999e:	8001      	strh	r1, [r0, #0]
	rp->lmp_version = LL_VERSION_NUMBER;
    99a0:	210d      	movs	r1, #13
	rp->hci_revision = sys_cpu_to_le16(0);
    99a2:	7083      	strb	r3, [r0, #2]
    99a4:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = LL_VERSION_NUMBER;
    99a6:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    99a8:	f8c0 2005 	str.w	r2, [r0, #5]
	if (err == -EINVAL) {
    99ac:	e67b      	b.n	96a6 <hci_cmd_handle+0x6e>
    99ae:	bf00      	nop
    99b0:	2000261c 	.word	0x2000261c
    99b4:	20000158 	.word	0x20000158
    99b8:	0ef403f7 	.word	0x0ef403f7
    99bc:	7801f030 	.word	0x7801f030
    99c0:	ffff05f1 	.word	0xffff05f1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    99c4:	2103      	movs	r1, #3
    99c6:	f00e fb21 	bl	1800c <bt_hci_cmd_complete_create>
    99ca:	2103      	movs	r1, #3
    99cc:	4604      	mov	r4, r0
    99ce:	300c      	adds	r0, #12
    99d0:	f00f ff7f 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    99d4:	4601      	mov	r1, r0
    99d6:	2300      	movs	r3, #0
    99d8:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    99dc:	3001      	adds	r0, #1
    99de:	f7fe f967 	bl	7cb0 <ll_tx_pwr_get>
	if (err == -EINVAL) {
    99e2:	e660      	b.n	96a6 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    99e4:	2104      	movs	r1, #4
    99e6:	f00e fb11 	bl	1800c <bt_hci_cmd_complete_create>
    99ea:	2104      	movs	r1, #4
    99ec:	4604      	mov	r4, r0
    99ee:	300c      	adds	r0, #12
    99f0:	f00f ff6f 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    99f4:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    99f6:	211b      	movs	r1, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    99f8:	2203      	movs	r2, #3
	rp->status = 0x00;
    99fa:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    99fc:	7041      	strb	r1, [r0, #1]
    99fe:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    9a00:	70c2      	strb	r2, [r0, #3]
	if (err == -EINVAL) {
    9a02:	e650      	b.n	96a6 <hci_cmd_handle+0x6e>
    9a04:	68e2      	ldr	r2, [r4, #12]
	le_event_mask = sys_get_le64(cmd->events);
    9a06:	4bbd      	ldr	r3, [pc, #756]	; (9cfc <hci_cmd_handle+0x6c4>)
    9a08:	6811      	ldr	r1, [r2, #0]
    9a0a:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    9a0c:	6019      	str	r1, [r3, #0]
    9a0e:	e739      	b.n	9884 <hci_cmd_handle+0x24c>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    9a10:	68e1      	ldr	r1, [r4, #12]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    9a12:	2200      	movs	r2, #0
    9a14:	884b      	ldrh	r3, [r1, #2]
    9a16:	8808      	ldrh	r0, [r1, #0]
    9a18:	9203      	str	r2, [sp, #12]
    9a1a:	890c      	ldrh	r4, [r1, #8]
    9a1c:	9402      	str	r4, [sp, #8]
    9a1e:	88cc      	ldrh	r4, [r1, #6]
    9a20:	9401      	str	r4, [sp, #4]
    9a22:	8889      	ldrh	r1, [r1, #4]
    9a24:	9100      	str	r1, [sp, #0]
    9a26:	4611      	mov	r1, r2
    9a28:	f001 fcc8 	bl	b3bc <ll_conn_update>
    9a2c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    9a2e:	8830      	ldrh	r0, [r6, #0]
    9a30:	e633      	b.n	969a <hci_cmd_handle+0x62>
	status = ll_adv_enable(cmd->enable);
    9a32:	68e3      	ldr	r3, [r4, #12]
    9a34:	7818      	ldrb	r0, [r3, #0]
    9a36:	f7f6 fd0b 	bl	450 <ll_adv_enable>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    9a3a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    9a3c:	2101      	movs	r1, #1
    9a3e:	8830      	ldrh	r0, [r6, #0]
    9a40:	f00e fae4 	bl	1800c <bt_hci_cmd_complete_create>
    9a44:	2101      	movs	r1, #1
    9a46:	4604      	mov	r4, r0
    9a48:	300c      	adds	r0, #12
    9a4a:	f00f ff42 	bl	198d2 <net_buf_simple_add>
	ccst->status = status;
    9a4e:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
    9a50:	e629      	b.n	96a6 <hci_cmd_handle+0x6e>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    9a52:	68e1      	ldr	r1, [r4, #12]
    9a54:	f811 0b01 	ldrb.w	r0, [r1], #1
    9a58:	f001 fa46 	bl	aee8 <ll_adv_scan_rsp_set>
    9a5c:	e7ed      	b.n	9a3a <hci_cmd_handle+0x402>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    9a5e:	68e1      	ldr	r1, [r4, #12]
    9a60:	f811 0b01 	ldrb.w	r0, [r1], #1
    9a64:	f001 f9d2 	bl	ae0c <ll_adv_data_set>
    9a68:	e7e7      	b.n	9a3a <hci_cmd_handle+0x402>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9a6a:	2102      	movs	r1, #2
    9a6c:	f00e face 	bl	1800c <bt_hci_cmd_complete_create>
    9a70:	2102      	movs	r1, #2
    9a72:	4604      	mov	r4, r0
    9a74:	300c      	adds	r0, #12
    9a76:	f00f ff2c 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    9a7a:	2300      	movs	r3, #0
    9a7c:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    9a7e:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    9a80:	e611      	b.n	96a6 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    9a82:	68e4      	ldr	r4, [r4, #12]
	status = ll_adv_params_set(min_interval, cmd->type,
    9a84:	7ba5      	ldrb	r5, [r4, #14]
    9a86:	79a3      	ldrb	r3, [r4, #6]
    9a88:	7962      	ldrb	r2, [r4, #5]
    9a8a:	7921      	ldrb	r1, [r4, #4]
    9a8c:	8820      	ldrh	r0, [r4, #0]
    9a8e:	9502      	str	r5, [sp, #8]
    9a90:	7b65      	ldrb	r5, [r4, #13]
    9a92:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    9a94:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    9a96:	9400      	str	r4, [sp, #0]
    9a98:	f001 f818 	bl	aacc <ll_adv_params_set>
    9a9c:	e7cd      	b.n	9a3a <hci_cmd_handle+0x402>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    9a9e:	68e1      	ldr	r1, [r4, #12]
    9aa0:	2001      	movs	r0, #1
    9aa2:	f7fe f909 	bl	7cb8 <ll_addr_set>
    9aa6:	e7c8      	b.n	9a3a <hci_cmd_handle+0x402>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9aa8:	2109      	movs	r1, #9
    9aaa:	f00e faaf 	bl	1800c <bt_hci_cmd_complete_create>
    9aae:	2109      	movs	r1, #9
    9ab0:	4604      	mov	r4, r0
    9ab2:	300c      	adds	r0, #12
    9ab4:	f00f ff0d 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    9ab8:	2500      	movs	r5, #0
    9aba:	4606      	mov	r6, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    9abc:	2208      	movs	r2, #8
    9abe:	4629      	mov	r1, r5
	rp->status = 0x00;
    9ac0:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    9ac4:	f00d ffa5 	bl	17a12 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
    9ac8:	f7fe f8dc 	bl	7c84 <ll_feat_get>
	dst[0] = val;
    9acc:	462b      	mov	r3, r5
    9ace:	f361 0307 	bfi	r3, r1, #0, #8
	dst[1] = val >> 8;
    9ad2:	f3c1 2207 	ubfx	r2, r1, #8, #8
	dst[0] = val;
    9ad6:	f362 230f 	bfi	r3, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    9ada:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
    9adc:	f361 4317 	bfi	r3, r1, #16, #8
	dst[1] = val >> 8;
    9ae0:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
    9ae2:	f361 631f 	bfi	r3, r1, #24, #8
    9ae6:	f8c6 0001 	str.w	r0, [r6, #1]
    9aea:	f8c6 3005 	str.w	r3, [r6, #5]
	if (err == -EINVAL) {
    9aee:	e5da      	b.n	96a6 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    9af0:	68e2      	ldr	r2, [r4, #12]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9af2:	7894      	ldrb	r4, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
    9af4:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    9af6:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    9af8:	f8b2 5005 	ldrh.w	r5, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9afc:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
    9afe:	bf48      	it	mi
    9b00:	f041 0103 	orrmi.w	r1, r1, #3
		cmd->rx_phys |= mask_phys;
    9b04:	7913      	ldrb	r3, [r2, #4]
		cmd->tx_phys |= mask_phys;
    9b06:	bf48      	it	mi
    9b08:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    9b0a:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
    9b0c:	bf44      	itt	mi
    9b0e:	f043 0303 	orrmi.w	r3, r3, #3
    9b12:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    9b14:	ea41 0203 	orr.w	r2, r1, r3
    9b18:	2a03      	cmp	r2, #3
    9b1a:	f200 8163 	bhi.w	9de4 <hci_cmd_handle+0x7ac>
	if (!(cmd->tx_phys & 0x07) ||
    9b1e:	074c      	lsls	r4, r1, #29
    9b20:	f000 815e 	beq.w	9de0 <hci_cmd_handle+0x7a8>
    9b24:	075a      	lsls	r2, r3, #29
    9b26:	f000 815b 	beq.w	9de0 <hci_cmd_handle+0x7a8>
	if (phy_opts & 0x03) {
    9b2a:	f015 0203 	ands.w	r2, r5, #3
		phy_opts -= 1U;
    9b2e:	bf1c      	itt	ne
    9b30:	f105 35ff 	addne.w	r5, r5, #4294967295	; 0xffffffff
		phy_opts &= 1;
    9b34:	f005 0201 	andne.w	r2, r5, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    9b38:	4638      	mov	r0, r7
    9b3a:	f001 fd8f 	bl	b65c <ll_phy_req_send>
    9b3e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    9b40:	8830      	ldrh	r0, [r6, #0]
    9b42:	e5aa      	b.n	969a <hci_cmd_handle+0x62>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    9b44:	68e3      	ldr	r3, [r4, #12]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9b46:	781a      	ldrb	r2, [r3, #0]
    9b48:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    9b4a:	bf44      	itt	mi
    9b4c:	2107      	movmi	r1, #7
    9b4e:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    9b50:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    9b52:	bf4c      	ite	mi
    9b54:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    9b56:	7899      	ldrbpl	r1, [r3, #2]
    9b58:	7858      	ldrb	r0, [r3, #1]
		cmd->rx_phys = 0x07;
    9b5a:	bf48      	it	mi
    9b5c:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    9b5e:	f001 fd73 	bl	b648 <ll_phy_default_set>
    9b62:	e76a      	b.n	9a3a <hci_cmd_handle+0x402>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    9b64:	68e1      	ldr	r1, [r4, #12]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    9b66:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
    9b68:	880f      	ldrh	r7, [r1, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    9b6a:	884b      	ldrh	r3, [r1, #2]
    9b6c:	9203      	str	r2, [sp, #12]
    9b6e:	8908      	ldrh	r0, [r1, #8]
    9b70:	9002      	str	r0, [sp, #8]
    9b72:	88c8      	ldrh	r0, [r1, #6]
    9b74:	9001      	str	r0, [sp, #4]
    9b76:	8889      	ldrh	r1, [r1, #4]
    9b78:	9100      	str	r1, [sp, #0]
    9b7a:	b2b8      	uxth	r0, r7
    9b7c:	2102      	movs	r1, #2
    9b7e:	f001 fc1d 	bl	b3bc <ll_conn_update>
    9b82:	e697      	b.n	98b4 <hci_cmd_handle+0x27c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9b84:	2109      	movs	r1, #9
    9b86:	f00e fa41 	bl	1800c <bt_hci_cmd_complete_create>
    9b8a:	2109      	movs	r1, #9
    9b8c:	4604      	mov	r4, r0
    9b8e:	300c      	adds	r0, #12
    9b90:	f00f fe9f 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    9b94:	495a      	ldr	r1, [pc, #360]	; (9d00 <hci_cmd_handle+0x6c8>)
    9b96:	4a5b      	ldr	r2, [pc, #364]	; (9d04 <hci_cmd_handle+0x6cc>)
    9b98:	6001      	str	r1, [r0, #0]
	dst[1] = val >> 8;
    9b9a:	2300      	movs	r3, #0
    9b9c:	6042      	str	r2, [r0, #4]
    9b9e:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    9ba0:	e581      	b.n	96a6 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    9ba2:	68e3      	ldr	r3, [r4, #12]
    9ba4:	881f      	ldrh	r7, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    9ba6:	2200      	movs	r2, #0
    9ba8:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    9baa:	b2b8      	uxth	r0, r7
    9bac:	f006 fbb6 	bl	1031c <ll_start_enc_req_send>
    9bb0:	e680      	b.n	98b4 <hci_cmd_handle+0x27c>
	handle = sys_le16_to_cpu(cmd->handle);
    9bb2:	68e2      	ldr	r2, [r4, #12]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    9bb4:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
    9bb6:	f832 7b02 	ldrh.w	r7, [r2], #2
    9bba:	e7f6      	b.n	9baa <hci_cmd_handle+0x572>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9bbc:	2109      	movs	r1, #9
    9bbe:	f00e fa25 	bl	1800c <bt_hci_cmd_complete_create>
    9bc2:	2109      	movs	r1, #9
    9bc4:	4604      	mov	r4, r0
    9bc6:	300c      	adds	r0, #12
    9bc8:	f00f fe83 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    9bcc:	2300      	movs	r3, #0
    9bce:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    9bd2:	2108      	movs	r1, #8
    9bd4:	f006 ff16 	bl	10a04 <lll_csrand_get>
	if (err == -EINVAL) {
    9bd8:	e565      	b.n	96a6 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    9bda:	68e0      	ldr	r0, [r4, #12]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    9bdc:	aa08      	add	r2, sp, #32
    9bde:	2300      	movs	r3, #0
    9be0:	f100 0110 	add.w	r1, r0, #16
    9be4:	f008 fcbe 	bl	12564 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9be8:	8830      	ldrh	r0, [r6, #0]
    9bea:	2111      	movs	r1, #17
    9bec:	f00e fa0e 	bl	1800c <bt_hci_cmd_complete_create>
    9bf0:	2111      	movs	r1, #17
    9bf2:	4604      	mov	r4, r0
    9bf4:	300c      	adds	r0, #12
    9bf6:	f00f fe6c 	bl	198d2 <net_buf_simple_add>
	rp->status = 0x00;
    9bfa:	2300      	movs	r3, #0
    9bfc:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    9c00:	2210      	movs	r2, #16
    9c02:	a908      	add	r1, sp, #32
    9c04:	f00d fefa 	bl	179fc <memcpy>
	if (err == -EINVAL) {
    9c08:	e54d      	b.n	96a6 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    9c0a:	68e3      	ldr	r3, [r4, #12]
	status = ll_feature_req_send(handle);
    9c0c:	8818      	ldrh	r0, [r3, #0]
    9c0e:	f001 fc71 	bl	b4f4 <ll_feature_req_send>
    9c12:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    9c14:	8830      	ldrh	r0, [r6, #0]
    9c16:	e540      	b.n	969a <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
    9c18:	68e3      	ldr	r3, [r4, #12]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9c1a:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
    9c1c:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9c1e:	f00e f9f5 	bl	1800c <bt_hci_cmd_complete_create>
    9c22:	2108      	movs	r1, #8
    9c24:	4604      	mov	r4, r0
    9c26:	300c      	adds	r0, #12
    9c28:	f00f fe53 	bl	198d2 <net_buf_simple_add>
    9c2c:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
    9c2e:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
    9c30:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
    9c32:	f001 fc07 	bl	b444 <ll_chm_get>
	rp->handle = sys_le16_to_cpu(handle);
    9c36:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
    9c3a:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
    9c3c:	e533      	b.n	96a6 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    9c3e:	68e3      	ldr	r3, [r4, #12]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    9c40:	8859      	ldrh	r1, [r3, #2]
    9c42:	8818      	ldrh	r0, [r3, #0]
    9c44:	f001 fccc 	bl	b5e0 <ll_length_default_set>
    9c48:	e6f7      	b.n	9a3a <hci_cmd_handle+0x402>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9c4a:	2105      	movs	r1, #5
    9c4c:	f00e f9de 	bl	1800c <bt_hci_cmd_complete_create>
    9c50:	2105      	movs	r1, #5
    9c52:	4604      	mov	r4, r0
    9c54:	300c      	adds	r0, #12
    9c56:	f00f fe3c 	bl	198d2 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    9c5a:	a908      	add	r1, sp, #32
    9c5c:	4605      	mov	r5, r0
    9c5e:	f10d 001a 	add.w	r0, sp, #26
    9c62:	f001 fcb1 	bl	b5c8 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    9c66:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9c6a:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    9c6e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    9c72:	f8a5 2003 	strh.w	r2, [r5, #3]
	rp->status = 0x00;
    9c76:	2300      	movs	r3, #0
    9c78:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
    9c7a:	e514      	b.n	96a6 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    9c7c:	68e3      	ldr	r3, [r4, #12]
	handle = sys_le16_to_cpu(cmd->handle);
    9c7e:	881f      	ldrh	r7, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    9c80:	889a      	ldrh	r2, [r3, #4]
    9c82:	8859      	ldrh	r1, [r3, #2]
    9c84:	b2b8      	uxth	r0, r7
    9c86:	f001 fc75 	bl	b574 <ll_length_req_send>
    9c8a:	e613      	b.n	98b4 <hci_cmd_handle+0x27c>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    9c8c:	68e2      	ldr	r2, [r4, #12]
	handle = sys_le16_to_cpu(cmd->handle);
    9c8e:	8817      	ldrh	r7, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0, NULL);
    9c90:	7892      	ldrb	r2, [r2, #2]
    9c92:	2300      	movs	r3, #0
    9c94:	e9cd 3302 	strd	r3, r3, [sp, #8]
    9c98:	e9cd 3300 	strd	r3, r3, [sp]
    9c9c:	2102      	movs	r1, #2
    9c9e:	b2b8      	uxth	r0, r7
    9ca0:	f001 fb8c 	bl	b3bc <ll_conn_update>
    9ca4:	e606      	b.n	98b4 <hci_cmd_handle+0x27c>
	handle = sys_le16_to_cpu(cmd->handle);
    9ca6:	68e3      	ldr	r3, [r4, #12]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9ca8:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
    9caa:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9cac:	f00e f9ae 	bl	1800c <bt_hci_cmd_complete_create>
    9cb0:	2105      	movs	r1, #5
    9cb2:	4604      	mov	r4, r0
    9cb4:	300c      	adds	r0, #12
    9cb6:	f00f fe0c 	bl	198d2 <net_buf_simple_add>
    9cba:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    9cbc:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
    9cbe:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    9cc0:	1ce9      	adds	r1, r5, #3
    9cc2:	f001 fca3 	bl	b60c <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    9cc6:	78eb      	ldrb	r3, [r5, #3]
    9cc8:	792a      	ldrb	r2, [r5, #4]
	rp->status = status;
    9cca:	7028      	strb	r0, [r5, #0]
    9ccc:	2b00      	cmp	r3, #0
    9cce:	fa93 f3a3 	rbit	r3, r3
    9cd2:	fab3 f383 	clz	r3, r3
    9cd6:	bf08      	it	eq
    9cd8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9cdc:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    9cde:	70eb      	strb	r3, [r5, #3]
    9ce0:	2a00      	cmp	r2, #0
    9ce2:	fa92 f3a2 	rbit	r3, r2
    9ce6:	fab3 f383 	clz	r3, r3
    9cea:	bf08      	it	eq
    9cec:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9cf0:	3301      	adds	r3, #1
	rp->handle = sys_cpu_to_le16(handle);
    9cf2:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    9cf6:	712b      	strb	r3, [r5, #4]
	if (err == -EINVAL) {
    9cf8:	e4d5      	b.n	96a6 <hci_cmd_handle+0x6e>
    9cfa:	bf00      	nop
    9cfc:	20000150 	.word	0x20000150
    9d00:	30cc8f00 	.word	0x30cc8f00
    9d04:	0001c0ec 	.word	0x0001c0ec
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9d08:	2109      	movs	r1, #9
    9d0a:	f00e f97f 	bl	1800c <bt_hci_cmd_complete_create>
    9d0e:	2109      	movs	r1, #9
    9d10:	4604      	mov	r4, r0
    9d12:	300c      	adds	r0, #12
    9d14:	f00f fddd 	bl	198d2 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    9d18:	ab08      	add	r3, sp, #32
    9d1a:	4605      	mov	r5, r0
    9d1c:	f10d 021a 	add.w	r2, sp, #26
    9d20:	a906      	add	r1, sp, #24
    9d22:	f10d 0016 	add.w	r0, sp, #22
    9d26:	f001 fc65 	bl	b5f4 <ll_length_max_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    9d2a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9d2e:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    9d32:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    9d36:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    9d3a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9d3e:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    9d42:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    9d46:	f8a5 2007 	strh.w	r2, [r5, #7]
	rp->status = 0x00;
    9d4a:	2300      	movs	r3, #0
    9d4c:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
    9d4e:	e4aa      	b.n	96a6 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    9d50:	68e3      	ldr	r3, [r4, #12]
	status = ll_terminate_ind_send(handle, cmd->reason);
    9d52:	7899      	ldrb	r1, [r3, #2]
    9d54:	8818      	ldrh	r0, [r3, #0]
    9d56:	f001 fb97 	bl	b488 <ll_terminate_ind_send>
    9d5a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    9d5c:	8830      	ldrh	r0, [r6, #0]
    9d5e:	e49c      	b.n	969a <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
    9d60:	68e3      	ldr	r3, [r4, #12]
    9d62:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    9d64:	a908      	add	r1, sp, #32
    9d66:	b2b8      	uxth	r0, r7
    9d68:	f001 fcaa 	bl	b6c0 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9d6c:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    9d6e:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9d70:	8830      	ldrh	r0, [r6, #0]
    9d72:	f00e f94b 	bl	1800c <bt_hci_cmd_complete_create>
    9d76:	2105      	movs	r1, #5
    9d78:	4604      	mov	r4, r0
    9d7a:	300c      	adds	r0, #12
    9d7c:	f00f fda9 	bl	198d2 <net_buf_simple_add>
	rp->status = status;
    9d80:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    9d82:	f8a0 7001 	strh.w	r7, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    9d86:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    9d8a:	f8a0 3003 	strh.w	r3, [r0, #3]
	if (err == -EINVAL) {
    9d8e:	e48a      	b.n	96a6 <hci_cmd_handle+0x6e>
	event_mask = DEFAULT_EVENT_MASK;
    9d90:	4b15      	ldr	r3, [pc, #84]	; (9de8 <hci_cmd_handle+0x7b0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9d92:	4a16      	ldr	r2, [pc, #88]	; (9dec <hci_cmd_handle+0x7b4>)
	event_mask = DEFAULT_EVENT_MASK;
    9d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9d98:	f641 71ff 	movw	r1, #8191	; 0x1fff
    9d9c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9da0:	4b13      	ldr	r3, [pc, #76]	; (9df0 <hci_cmd_handle+0x7b8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9da2:	2000      	movs	r0, #0
    9da4:	2100      	movs	r1, #0
    9da6:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9daa:	201f      	movs	r0, #31
    9dac:	2100      	movs	r1, #0
    9dae:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    9db2:	f7ff f8d1 	bl	8f58 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    9db6:	8830      	ldrh	r0, [r6, #0]
    9db8:	2101      	movs	r1, #1
    9dba:	f00e f927 	bl	1800c <bt_hci_cmd_complete_create>
    9dbe:	2101      	movs	r1, #1
    9dc0:	4604      	mov	r4, r0
    9dc2:	300c      	adds	r0, #12
    9dc4:	f00f fd85 	bl	198d2 <net_buf_simple_add>
	ccst->status = status;
    9dc8:	2300      	movs	r3, #0
	conn_count = 0U;
    9dca:	4a0a      	ldr	r2, [pc, #40]	; (9df4 <hci_cmd_handle+0x7bc>)
	ccst->status = status;
    9dcc:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
    9dce:	6013      	str	r3, [r2, #0]
	hci_recv_fifo_reset();
    9dd0:	f7ff fb22 	bl	9418 <hci_recv_fifo_reset>
	if (err == -EINVAL) {
    9dd4:	e467      	b.n	96a6 <hci_cmd_handle+0x6e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    9dd6:	68e2      	ldr	r2, [r4, #12]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    9dd8:	4b04      	ldr	r3, [pc, #16]	; (9dec <hci_cmd_handle+0x7b4>)
    9dda:	e615      	b.n	9a08 <hci_cmd_handle+0x3d0>
	return evt;
    9ddc:	9c07      	ldr	r4, [sp, #28]
    9dde:	e462      	b.n	96a6 <hci_cmd_handle+0x6e>
	return bt_hci_cmd_status_create(_opcode, status);
    9de0:	2112      	movs	r1, #18
    9de2:	e45a      	b.n	969a <hci_cmd_handle+0x62>
    9de4:	2111      	movs	r1, #17
    9de6:	e458      	b.n	969a <hci_cmd_handle+0x62>
    9de8:	20000158 	.word	0x20000158
    9dec:	20000e50 	.word	0x20000e50
    9df0:	20000150 	.word	0x20000150
    9df4:	20001b14 	.word	0x20001b14

00009df8 <hci_acl_handle>:
{
    9df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    9dfc:	2300      	movs	r3, #0
    9dfe:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    9e00:	8a03      	ldrh	r3, [r0, #16]
    9e02:	2b03      	cmp	r3, #3
    9e04:	d92e      	bls.n	9e64 <hci_acl_handle+0x6c>
	return net_buf_simple_pull_mem(&buf->b, len);
    9e06:	4605      	mov	r5, r0
    9e08:	4688      	mov	r8, r1
    9e0a:	300c      	adds	r0, #12
    9e0c:	2104      	movs	r1, #4
    9e0e:	f00f fd87 	bl	19920 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    9e12:	8a2b      	ldrh	r3, [r5, #16]
	len = sys_le16_to_cpu(acl->len);
    9e14:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    9e16:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    9e1a:	42bb      	cmp	r3, r7
    9e1c:	d322      	bcc.n	9e64 <hci_acl_handle+0x6c>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
    9e1e:	2f1b      	cmp	r7, #27
    9e20:	d820      	bhi.n	9e64 <hci_acl_handle+0x6c>
	node_tx = ll_tx_mem_acquire();
    9e22:	f001 fa73 	bl	b30c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    9e26:	ea4f 3619 	mov.w	r6, r9, lsr #12
    9e2a:	4633      	mov	r3, r6
	if (!node_tx) {
    9e2c:	4604      	mov	r4, r0
    9e2e:	b1f8      	cbz	r0, 9e70 <hci_acl_handle+0x78>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    9e30:	089b      	lsrs	r3, r3, #2
    9e32:	d117      	bne.n	9e64 <hci_acl_handle+0x6c>
	switch (bt_acl_flags_pb(flags)) {
    9e34:	b1d6      	cbz	r6, 9e6c <hci_acl_handle+0x74>
    9e36:	2e01      	cmp	r6, #1
    9e38:	d114      	bne.n	9e64 <hci_acl_handle+0x6c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    9e3a:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
    9e3c:	7167      	strb	r7, [r4, #5]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    9e3e:	f366 0301 	bfi	r3, r6, #0, #2
    9e42:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    9e44:	68e9      	ldr	r1, [r5, #12]
    9e46:	463a      	mov	r2, r7
    9e48:	1de0      	adds	r0, r4, #7
    9e4a:	f00d fdd7 	bl	179fc <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    9e4e:	4621      	mov	r1, r4
    9e50:	f3c9 000b 	ubfx	r0, r9, #0, #12
    9e54:	f001 fa66 	bl	b324 <ll_tx_mem_enqueue>
    9e58:	b908      	cbnz	r0, 9e5e <hci_acl_handle+0x66>
}
    9e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ll_tx_mem_release(node_tx);
    9e5e:	4620      	mov	r0, r4
    9e60:	f001 fa5a 	bl	b318 <ll_tx_mem_release>
	switch (bt_acl_flags_pb(flags)) {
    9e64:	f06f 0015 	mvn.w	r0, #21
}
    9e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (bt_acl_flags_pb(flags)) {
    9e6c:	2602      	movs	r6, #2
    9e6e:	e7e4      	b.n	9e3a <hci_acl_handle+0x42>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    9e70:	4b0f      	ldr	r3, [pc, #60]	; (9eb0 <hci_acl_handle+0xb8>)
    9e72:	681b      	ldr	r3, [r3, #0]
    9e74:	019b      	lsls	r3, r3, #6
    9e76:	d517      	bpl.n	9ea8 <hci_acl_handle+0xb0>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9e80:	2001      	movs	r0, #1
    9e82:	f7f8 fe29 	bl	2ad8 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    9e86:	2102      	movs	r1, #2
    9e88:	f8c8 0000 	str.w	r0, [r8]
    9e8c:	300c      	adds	r0, #12
    9e8e:	f00f fd20 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    9e92:	f44f 738d 	mov.w	r3, #282	; 0x11a
    9e96:	8003      	strh	r3, [r0, #0]
    9e98:	f8d8 0000 	ldr.w	r0, [r8]
    9e9c:	2101      	movs	r1, #1
    9e9e:	300c      	adds	r0, #12
    9ea0:	f00f fd17 	bl	198d2 <net_buf_simple_add>
	ep->link_type = link_type;
    9ea4:	2301      	movs	r3, #1
    9ea6:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    9ea8:	f06f 0068 	mvn.w	r0, #104	; 0x68
    9eac:	e7d5      	b.n	9e5a <hci_acl_handle+0x62>
    9eae:	bf00      	nop
    9eb0:	20000158 	.word	0x20000158

00009eb4 <hci_disconn_complete_encode>:
{
    9eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    9eb6:	4b0e      	ldr	r3, [pc, #56]	; (9ef0 <hci_disconn_complete_encode+0x3c>)
    9eb8:	681b      	ldr	r3, [r3, #0]
    9eba:	06db      	lsls	r3, r3, #27
    9ebc:	d400      	bmi.n	9ec0 <hci_disconn_complete_encode+0xc>
}
    9ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ec0:	f102 040c 	add.w	r4, r2, #12
    9ec4:	4606      	mov	r6, r0
    9ec6:	460d      	mov	r5, r1
    9ec8:	4620      	mov	r0, r4
    9eca:	2102      	movs	r1, #2
    9ecc:	f00f fd01 	bl	198d2 <net_buf_simple_add>
    9ed0:	4603      	mov	r3, r0
	hdr->evt = evt;
    9ed2:	f240 4205 	movw	r2, #1029	; 0x405
    9ed6:	801a      	strh	r2, [r3, #0]
    9ed8:	4620      	mov	r0, r4
    9eda:	2104      	movs	r1, #4
    9edc:	f00f fcf9 	bl	198d2 <net_buf_simple_add>
	ep->status = 0x00;
    9ee0:	2700      	movs	r7, #0
    9ee2:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9ee4:	f8a0 5001 	strh.w	r5, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    9ee8:	7832      	ldrb	r2, [r6, #0]
    9eea:	70c2      	strb	r2, [r0, #3]
}
    9eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9eee:	bf00      	nop
    9ef0:	20000158 	.word	0x20000158

00009ef4 <hci_disconn_complete_process>:
	conn_count--;
    9ef4:	4a02      	ldr	r2, [pc, #8]	; (9f00 <hci_disconn_complete_process+0xc>)
    9ef6:	6813      	ldr	r3, [r2, #0]
    9ef8:	3b01      	subs	r3, #1
    9efa:	6013      	str	r3, [r2, #0]
}
    9efc:	4770      	bx	lr
    9efe:	bf00      	nop
    9f00:	20001b14 	.word	0x20001b14

00009f04 <hci_acl_encode>:
	}
}

#if defined(CONFIG_BT_CONN)
void hci_acl_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    9f04:	b570      	push	{r4, r5, r6, lr}
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    9f06:	7f03      	ldrb	r3, [r0, #28]
	handle = node_rx->hdr.handle;
    9f08:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
    9f0a:	f003 0303 	and.w	r3, r3, #3
    9f0e:	3b01      	subs	r3, #1
    9f10:	2b01      	cmp	r3, #1
    9f12:	d90d      	bls.n	9f30 <hci_acl_encode+0x2c>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    9f14:	4a15      	ldr	r2, [pc, #84]	; (9f6c <hci_acl_encode+0x68>)
    9f16:	4916      	ldr	r1, [pc, #88]	; (9f70 <hci_acl_encode+0x6c>)
    9f18:	4816      	ldr	r0, [pc, #88]	; (9f74 <hci_acl_encode+0x70>)
    9f1a:	f242 13a5 	movw	r3, #8613	; 0x21a5
    9f1e:	f00d fae0 	bl	174e2 <assert_print>
    9f22:	4040      	eors	r0, r0
    9f24:	f380 8811 	msr	BASEPRI, r0
    9f28:	f04f 0003 	mov.w	r0, #3
    9f2c:	df02      	svc	2
		break;
	}
}
    9f2e:	bd70      	pop	{r4, r5, r6, pc}
    9f30:	4604      	mov	r4, r0
    9f32:	f101 050c 	add.w	r5, r1, #12
    9f36:	4628      	mov	r0, r5
    9f38:	2104      	movs	r1, #4
    9f3a:	f00f fcca 	bl	198d2 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    9f3e:	7f23      	ldrb	r3, [r4, #28]
    9f40:	f003 0303 	and.w	r3, r3, #3
    9f44:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    9f46:	bf0c      	ite	eq
    9f48:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    9f4c:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    9f50:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    9f52:	7f63      	ldrb	r3, [r4, #29]
    9f54:	8043      	strh	r3, [r0, #2]
    9f56:	7f61      	ldrb	r1, [r4, #29]
    9f58:	4628      	mov	r0, r5
    9f5a:	f00f fcba 	bl	198d2 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    9f5e:	7f62      	ldrb	r2, [r4, #29]
    9f60:	f104 011f 	add.w	r1, r4, #31
}
    9f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    9f68:	f00d bd48 	b.w	179fc <memcpy>
    9f6c:	0001bb14 	.word	0x0001bb14
    9f70:	0001b908 	.word	0x0001b908
    9f74:	0001b844 	.word	0x0001b844

00009f78 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    9f78:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9f7a:	f890 c004 	ldrb.w	ip, [r0, #4]
    9f7e:	88c6      	ldrh	r6, [r0, #6]
    9f80:	f1bc 0f03 	cmp.w	ip, #3
{
    9f84:	b085      	sub	sp, #20
    9f86:	4604      	mov	r4, r0
    9f88:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    9f8a:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9f8e:	d00b      	beq.n	9fa8 <hci_evt_encode+0x30>
	switch (node_rx->hdr.type) {
    9f90:	f1ac 0c17 	sub.w	ip, ip, #23
    9f94:	f1bc 0f06 	cmp.w	ip, #6
    9f98:	f200 8233 	bhi.w	a402 <hci_evt_encode+0x48a>
    9f9c:	e8df f00c 	tbb	[pc, ip]
    9fa0:	1e574f27 	.word	0x1e574f27
    9fa4:	9684      	.short	0x9684
    9fa6:	b4          	.byte	0xb4
    9fa7:	00          	.byte	0x00
	switch (pdu_data->llctrl.opcode) {
    9fa8:	7fc3      	ldrb	r3, [r0, #31]
    9faa:	3b03      	subs	r3, #3
    9fac:	2b12      	cmp	r3, #18
    9fae:	f200 80e2 	bhi.w	a176 <hci_evt_encode+0x1fe>
    9fb2:	e8df f013 	tbh	[pc, r3, lsl #1]
    9fb6:	0185      	.short	0x0185
    9fb8:	00e000e0 	.word	0x00e000e0
    9fbc:	012401b3 	.word	0x012401b3
    9fc0:	013200e0 	.word	0x013200e0
    9fc4:	00e000e0 	.word	0x00e000e0
    9fc8:	013700e0 	.word	0x013700e0
    9fcc:	015200e0 	.word	0x015200e0
    9fd0:	001a00e0 	.word	0x001a00e0
    9fd4:	00e000e0 	.word	0x00e000e0
    9fd8:	00ee00ee 	.word	0x00ee00ee
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    9fdc:	4bb2      	ldr	r3, [pc, #712]	; (a2a8 <hci_evt_encode+0x330>)
    9fde:	685b      	ldr	r3, [r3, #4]
    9fe0:	0418      	lsls	r0, r3, #16
    9fe2:	f04f 0400 	mov.w	r4, #0
    9fe6:	f100 80fa 	bmi.w	a1de <hci_evt_encode+0x266>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    9fea:	b005      	add	sp, #20
    9fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    9fee:	07ff      	lsls	r7, r7, #31
    9ff0:	f100 81ad 	bmi.w	a34e <hci_evt_encode+0x3d6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9ff4:	4bac      	ldr	r3, [pc, #688]	; (a2a8 <hci_evt_encode+0x330>)
	status = cc->status;
    9ff6:	7f27      	ldrb	r7, [r4, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9ff8:	685b      	ldr	r3, [r3, #4]
    9ffa:	0098      	lsls	r0, r3, #2
    9ffc:	d5f5      	bpl.n	9fea <hci_evt_encode+0x72>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    9ffe:	4bab      	ldr	r3, [pc, #684]	; (a2ac <hci_evt_encode+0x334>)
    a000:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a002:	07d9      	lsls	r1, r3, #31
    a004:	d5f1      	bpl.n	9fea <hci_evt_encode+0x72>
    a006:	350c      	adds	r5, #12
	if (!status) {
    a008:	2f00      	cmp	r7, #0
    a00a:	f000 81ae 	beq.w	a36a <hci_evt_encode+0x3f2>
    a00e:	2102      	movs	r1, #2
    a010:	4628      	mov	r0, r5
    a012:	f00f fc5e 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    a016:	f241 333e 	movw	r3, #4926	; 0x133e
    a01a:	8003      	strh	r3, [r0, #0]
    a01c:	2101      	movs	r1, #1
    a01e:	4628      	mov	r0, r5
    a020:	f00f fc57 	bl	198d2 <net_buf_simple_add>
	me->subevent = subevt;
    a024:	2301      	movs	r3, #1
    a026:	7003      	strb	r3, [r0, #0]
    a028:	2112      	movs	r1, #18
    a02a:	4628      	mov	r0, r5
    a02c:	f00f fc51 	bl	198d2 <net_buf_simple_add>
    a030:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    a032:	2212      	movs	r2, #18
    a034:	2100      	movs	r1, #0
    a036:	f00d fcec 	bl	17a12 <memset>
		lecc->status = status;
    a03a:	7027      	strb	r7, [r4, #0]
		return;
    a03c:	e7d5      	b.n	9fea <hci_evt_encode+0x72>
		hci_disconn_complete_encode(pdu_data, handle, buf);
    a03e:	460a      	mov	r2, r1
    a040:	4638      	mov	r0, r7
    a042:	4631      	mov	r1, r6
}
    a044:	b005      	add	sp, #20
    a046:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
    a04a:	f7ff bf33 	b.w	9eb4 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a04e:	4b96      	ldr	r3, [pc, #600]	; (a2a8 <hci_evt_encode+0x330>)
    a050:	685b      	ldr	r3, [r3, #4]
    a052:	009a      	lsls	r2, r3, #2
    a054:	d5c9      	bpl.n	9fea <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    a056:	4b95      	ldr	r3, [pc, #596]	; (a2ac <hci_evt_encode+0x334>)
    a058:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a05a:	075b      	lsls	r3, r3, #29
    a05c:	d5c5      	bpl.n	9fea <hci_evt_encode+0x72>
    a05e:	350c      	adds	r5, #12
    a060:	2102      	movs	r1, #2
    a062:	4628      	mov	r0, r5
    a064:	f00f fc35 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    a068:	f640 233e 	movw	r3, #2622	; 0xa3e
    a06c:	8003      	strh	r3, [r0, #0]
    a06e:	2101      	movs	r1, #1
    a070:	4628      	mov	r0, r5
    a072:	f00f fc2e 	bl	198d2 <net_buf_simple_add>
    a076:	4603      	mov	r3, r0
	me->subevent = subevt;
    a078:	2203      	movs	r2, #3
    a07a:	4628      	mov	r0, r5
    a07c:	701a      	strb	r2, [r3, #0]
    a07e:	2109      	movs	r1, #9
    a080:	f00f fc27 	bl	198d2 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    a084:	07ff      	lsls	r7, r7, #31
    a086:	4605      	mov	r5, r0
    a088:	f100 81ad 	bmi.w	a3e6 <hci_evt_encode+0x46e>
	sep->status = cu->status;
    a08c:	7f23      	ldrb	r3, [r4, #28]
    a08e:	702b      	strb	r3, [r5, #0]
	sep->handle = sys_cpu_to_le16(handle);
    a090:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    a094:	8be3      	ldrh	r3, [r4, #30]
    a096:	f8a5 3003 	strh.w	r3, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    a09a:	8c23      	ldrh	r3, [r4, #32]
    a09c:	f8a5 3005 	strh.w	r3, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    a0a0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    a0a2:	f8a5 3007 	strh.w	r3, [r5, #7]
    a0a6:	e7a0      	b.n	9fea <hci_evt_encode+0x72>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    a0a8:	4b81      	ldr	r3, [pc, #516]	; (a2b0 <hci_evt_encode+0x338>)
    a0aa:	681b      	ldr	r3, [r3, #0]
    a0ac:	0219      	lsls	r1, r3, #8
    a0ae:	d59c      	bpl.n	9fea <hci_evt_encode+0x72>
    a0b0:	350c      	adds	r5, #12
    a0b2:	2102      	movs	r1, #2
    a0b4:	4628      	mov	r0, r5
    a0b6:	f00f fc0c 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    a0ba:	f240 2357 	movw	r3, #599	; 0x257
    a0be:	8003      	strh	r3, [r0, #0]
    a0c0:	2102      	movs	r1, #2
    a0c2:	4628      	mov	r0, r5
    a0c4:	f00f fc05 	bl	198d2 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    a0c8:	8006      	strh	r6, [r0, #0]
    a0ca:	e78e      	b.n	9fea <hci_evt_encode+0x72>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a0cc:	4b76      	ldr	r3, [pc, #472]	; (a2a8 <hci_evt_encode+0x330>)
    a0ce:	685b      	ldr	r3, [r3, #4]
    a0d0:	009a      	lsls	r2, r3, #2
    a0d2:	d58a      	bpl.n	9fea <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    a0d4:	4b75      	ldr	r3, [pc, #468]	; (a2ac <hci_evt_encode+0x334>)
    a0d6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a0d8:	031b      	lsls	r3, r3, #12
    a0da:	d586      	bpl.n	9fea <hci_evt_encode+0x72>
    a0dc:	350c      	adds	r5, #12
    a0de:	2102      	movs	r1, #2
    a0e0:	4628      	mov	r0, r5
    a0e2:	f00f fbf6 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    a0e6:	f240 433e 	movw	r3, #1086	; 0x43e
    a0ea:	8003      	strh	r3, [r0, #0]
    a0ec:	2101      	movs	r1, #1
    a0ee:	4628      	mov	r0, r5
    a0f0:	f00f fbef 	bl	198d2 <net_buf_simple_add>
	me->subevent = subevt;
    a0f4:	2314      	movs	r3, #20
    a0f6:	7003      	strb	r3, [r0, #0]
    a0f8:	2103      	movs	r1, #3
    a0fa:	4628      	mov	r0, r5
    a0fc:	f00f fbe9 	bl	198d2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    a100:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    a102:	7f23      	ldrb	r3, [r4, #28]
    a104:	7083      	strb	r3, [r0, #2]
    a106:	e770      	b.n	9fea <hci_evt_encode+0x72>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a108:	4b67      	ldr	r3, [pc, #412]	; (a2a8 <hci_evt_encode+0x330>)
    a10a:	685b      	ldr	r3, [r3, #4]
    a10c:	009f      	lsls	r7, r3, #2
    a10e:	f57f af6c 	bpl.w	9fea <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    a112:	4b66      	ldr	r3, [pc, #408]	; (a2ac <hci_evt_encode+0x334>)
    a114:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a116:	0518      	lsls	r0, r3, #20
    a118:	f57f af67 	bpl.w	9fea <hci_evt_encode+0x72>
    a11c:	350c      	adds	r5, #12
    a11e:	2102      	movs	r1, #2
    a120:	4628      	mov	r0, r5
    a122:	f00f fbd6 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    a126:	f240 633e 	movw	r3, #1598	; 0x63e
    a12a:	8003      	strh	r3, [r0, #0]
    a12c:	2101      	movs	r1, #1
    a12e:	4628      	mov	r0, r5
    a130:	f00f fbcf 	bl	198d2 <net_buf_simple_add>
	me->subevent = subevt;
    a134:	230c      	movs	r3, #12
    a136:	7003      	strb	r3, [r0, #0]
    a138:	2105      	movs	r1, #5
    a13a:	4628      	mov	r0, r5
    a13c:	f00f fbc9 	bl	198d2 <net_buf_simple_add>
	sep->status = pu->status;
    a140:	7f23      	ldrb	r3, [r4, #28]
    a142:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    a144:	f8a0 6001 	strh.w	r6, [r0, #1]
    a148:	7f62      	ldrb	r2, [r4, #29]
    a14a:	2a00      	cmp	r2, #0
    a14c:	fa92 f3a2 	rbit	r3, r2
    a150:	fab3 f383 	clz	r3, r3
    a154:	bf08      	it	eq
    a156:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a15a:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    a15c:	70c3      	strb	r3, [r0, #3]
    a15e:	7fa2      	ldrb	r2, [r4, #30]
    a160:	fa92 f3a2 	rbit	r3, r2
    a164:	2a00      	cmp	r2, #0
    a166:	fab3 f383 	clz	r3, r3
    a16a:	bf08      	it	eq
    a16c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a170:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    a172:	7103      	strb	r3, [r0, #4]
    a174:	e739      	b.n	9fea <hci_evt_encode+0x72>
		LL_ASSERT(0);
    a176:	4a4f      	ldr	r2, [pc, #316]	; (a2b4 <hci_evt_encode+0x33c>)
    a178:	494f      	ldr	r1, [pc, #316]	; (a2b8 <hci_evt_encode+0x340>)
    a17a:	4850      	ldr	r0, [pc, #320]	; (a2bc <hci_evt_encode+0x344>)
    a17c:	f242 1379 	movw	r3, #8569	; 0x2179
    a180:	f00d f9af 	bl	174e2 <assert_print>
    a184:	4040      	eors	r0, r0
    a186:	f380 8811 	msr	BASEPRI, r0
    a18a:	f04f 0003 	mov.w	r0, #3
    a18e:	df02      	svc	2
}
    a190:	e72b      	b.n	9fea <hci_evt_encode+0x72>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a192:	4b45      	ldr	r3, [pc, #276]	; (a2a8 <hci_evt_encode+0x330>)
    a194:	685b      	ldr	r3, [r3, #4]
    a196:	009a      	lsls	r2, r3, #2
    a198:	f57f af27 	bpl.w	9fea <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    a19c:	4b43      	ldr	r3, [pc, #268]	; (a2ac <hci_evt_encode+0x334>)
    a19e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a1a0:	065b      	lsls	r3, r3, #25
    a1a2:	f57f af22 	bpl.w	9fea <hci_evt_encode+0x72>
    a1a6:	350c      	adds	r5, #12
    a1a8:	2102      	movs	r1, #2
    a1aa:	4628      	mov	r0, r5
    a1ac:	f00f fb91 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    a1b0:	f640 333e 	movw	r3, #2878	; 0xb3e
    a1b4:	8003      	strh	r3, [r0, #0]
    a1b6:	2101      	movs	r1, #1
    a1b8:	4628      	mov	r0, r5
    a1ba:	f00f fb8a 	bl	198d2 <net_buf_simple_add>
	me->subevent = subevt;
    a1be:	2307      	movs	r3, #7
    a1c0:	7003      	strb	r3, [r0, #0]
    a1c2:	210a      	movs	r1, #10
    a1c4:	4628      	mov	r0, r5
    a1c6:	f00f fb84 	bl	198d2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    a1ca:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    a1cc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    a1ce:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    a1d0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    a1d2:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    a1d4:	8c23      	ldrh	r3, [r4, #32]
    a1d6:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    a1d8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    a1da:	8103      	strh	r3, [r0, #8]
    a1dc:	e705      	b.n	9fea <hci_evt_encode+0x72>
    a1de:	350c      	adds	r5, #12
    a1e0:	2102      	movs	r1, #2
    a1e2:	4628      	mov	r0, r5
    a1e4:	f00f fb75 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    a1e8:	f44f 734c 	mov.w	r3, #816	; 0x330
    a1ec:	8003      	strh	r3, [r0, #0]
    a1ee:	2103      	movs	r1, #3
    a1f0:	4628      	mov	r0, r5
    a1f2:	f00f fb6e 	bl	198d2 <net_buf_simple_add>
	ep->status = 0x00;
    a1f6:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a1f8:	f8a0 6001 	strh.w	r6, [r0, #1]
    a1fc:	e6f5      	b.n	9fea <hci_evt_encode+0x72>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    a1fe:	f890 3020 	ldrb.w	r3, [r0, #32]
    a202:	2b0e      	cmp	r3, #14
    a204:	f47f aef1 	bne.w	9fea <hci_evt_encode+0x72>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a208:	460b      	mov	r3, r1
    a20a:	4632      	mov	r2, r6
    a20c:	2100      	movs	r1, #0
    a20e:	201a      	movs	r0, #26
}
    a210:	b005      	add	sp, #20
    a212:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a216:	f7ff b90f 	b.w	9438 <le_remote_feat_complete>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    a21a:	460b      	mov	r3, r1
    a21c:	4632      	mov	r2, r6
    a21e:	4639      	mov	r1, r7
    a220:	2000      	movs	r0, #0
    a222:	e7f5      	b.n	a210 <hci_evt_encode+0x298>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    a224:	4b20      	ldr	r3, [pc, #128]	; (a2a8 <hci_evt_encode+0x330>)
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    a226:	f890 4020 	ldrb.w	r4, [r0, #32]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    a22a:	681b      	ldr	r3, [r3, #0]
    a22c:	061f      	lsls	r7, r3, #24
    a22e:	f57f aedc 	bpl.w	9fea <hci_evt_encode+0x72>
    a232:	350c      	adds	r5, #12
    a234:	2102      	movs	r1, #2
    a236:	4628      	mov	r0, r5
    a238:	f00f fb4b 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    a23c:	f44f 6381 	mov.w	r3, #1032	; 0x408
    a240:	8003      	strh	r3, [r0, #0]
    a242:	2104      	movs	r1, #4
    a244:	4628      	mov	r0, r5
    a246:	f00f fb44 	bl	198d2 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    a24a:	fab4 f384 	clz	r3, r4
    a24e:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    a250:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a252:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    a256:	70c3      	strb	r3, [r0, #3]
    a258:	e6c7      	b.n	9fea <hci_evt_encode+0x72>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a25a:	4b13      	ldr	r3, [pc, #76]	; (a2a8 <hci_evt_encode+0x330>)
    a25c:	685b      	ldr	r3, [r3, #4]
    a25e:	0098      	lsls	r0, r3, #2
    a260:	f140 80b6 	bpl.w	a3d0 <hci_evt_encode+0x458>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    a264:	4b11      	ldr	r3, [pc, #68]	; (a2ac <hci_evt_encode+0x334>)
    a266:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a268:	0699      	lsls	r1, r3, #26
    a26a:	f140 80b1 	bpl.w	a3d0 <hci_evt_encode+0x458>
    a26e:	350c      	adds	r5, #12
    a270:	2102      	movs	r1, #2
    a272:	4628      	mov	r0, r5
    a274:	f00f fb2d 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    a278:	f640 333e 	movw	r3, #2878	; 0xb3e
    a27c:	8003      	strh	r3, [r0, #0]
    a27e:	2101      	movs	r1, #1
    a280:	4628      	mov	r0, r5
    a282:	f00f fb26 	bl	198d2 <net_buf_simple_add>
	me->subevent = subevt;
    a286:	2306      	movs	r3, #6
    a288:	7003      	strb	r3, [r0, #0]
    a28a:	210a      	movs	r1, #10
    a28c:	4628      	mov	r0, r5
    a28e:	f00f fb20 	bl	198d2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    a292:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    a294:	8c23      	ldrh	r3, [r4, #32]
    a296:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    a298:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    a29a:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    a29c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    a29e:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    a2a0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    a2a2:	8103      	strh	r3, [r0, #8]
    a2a4:	e6a1      	b.n	9fea <hci_evt_encode+0x72>
    a2a6:	bf00      	nop
    a2a8:	20000158 	.word	0x20000158
    a2ac:	20000150 	.word	0x20000150
    a2b0:	20000e50 	.word	0x20000e50
    a2b4:	0001bb14 	.word	0x0001bb14
    a2b8:	0001b908 	.word	0x0001b908
    a2bc:	0001b844 	.word	0x0001b844
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a2c0:	4b57      	ldr	r3, [pc, #348]	; (a420 <hci_evt_encode+0x4a8>)
    a2c2:	685b      	ldr	r3, [r3, #4]
    a2c4:	0099      	lsls	r1, r3, #2
    a2c6:	f57f ae90 	bpl.w	9fea <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    a2ca:	4b56      	ldr	r3, [pc, #344]	; (a424 <hci_evt_encode+0x4ac>)
    a2cc:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a2ce:	06da      	lsls	r2, r3, #27
    a2d0:	f57f ae8b 	bpl.w	9fea <hci_evt_encode+0x72>
    a2d4:	350c      	adds	r5, #12
    a2d6:	2102      	movs	r1, #2
    a2d8:	4628      	mov	r0, r5
    a2da:	f00f fafa 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    a2de:	f640 533e 	movw	r3, #3390	; 0xd3e
    a2e2:	8003      	strh	r3, [r0, #0]
    a2e4:	2101      	movs	r1, #1
    a2e6:	4628      	mov	r0, r5
    a2e8:	f00f faf3 	bl	198d2 <net_buf_simple_add>
	me->subevent = subevt;
    a2ec:	2305      	movs	r3, #5
    a2ee:	7003      	strb	r3, [r0, #0]
    a2f0:	210c      	movs	r1, #12
    a2f2:	4628      	mov	r0, r5
    a2f4:	f00f faed 	bl	198d2 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    a2f8:	f104 0120 	add.w	r1, r4, #32
    a2fc:	4605      	mov	r5, r0
    a2fe:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    a300:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    a304:	f00d fb7a 	bl	179fc <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    a308:	2202      	movs	r2, #2
    a30a:	f104 0128 	add.w	r1, r4, #40	; 0x28
    a30e:	f105 000a 	add.w	r0, r5, #10
}
    a312:	b005      	add	sp, #20
    a314:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    a318:	f00d bb70 	b.w	179fc <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    a31c:	4b40      	ldr	r3, [pc, #256]	; (a420 <hci_evt_encode+0x4a8>)
    a31e:	681b      	ldr	r3, [r3, #0]
    a320:	061b      	lsls	r3, r3, #24
    a322:	f04f 0400 	mov.w	r4, #0
    a326:	f57f ae60 	bpl.w	9fea <hci_evt_encode+0x72>
    a32a:	350c      	adds	r5, #12
    a32c:	2102      	movs	r1, #2
    a32e:	4628      	mov	r0, r5
    a330:	f00f facf 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    a334:	f44f 6381 	mov.w	r3, #1032	; 0x408
    a338:	8003      	strh	r3, [r0, #0]
    a33a:	2104      	movs	r1, #4
    a33c:	4628      	mov	r0, r5
    a33e:	f00f fac8 	bl	198d2 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    a342:	2301      	movs	r3, #1
	ep->status = err;
    a344:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a346:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    a34a:	70c3      	strb	r3, [r0, #3]
    a34c:	e64d      	b.n	9fea <hci_evt_encode+0x72>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    a34e:	4a36      	ldr	r2, [pc, #216]	; (a428 <hci_evt_encode+0x4b0>)
    a350:	4936      	ldr	r1, [pc, #216]	; (a42c <hci_evt_encode+0x4b4>)
    a352:	4837      	ldr	r0, [pc, #220]	; (a430 <hci_evt_encode+0x4b8>)
    a354:	f641 63b3 	movw	r3, #7859	; 0x1eb3
    a358:	f00d f8c3 	bl	174e2 <assert_print>
    a35c:	4040      	eors	r0, r0
    a35e:	f380 8811 	msr	BASEPRI, r0
    a362:	f04f 0003 	mov.w	r0, #3
    a366:	df02      	svc	2
    a368:	e644      	b.n	9ff4 <hci_evt_encode+0x7c>
		conn_count++;
    a36a:	4a32      	ldr	r2, [pc, #200]	; (a434 <hci_evt_encode+0x4bc>)
    a36c:	6813      	ldr	r3, [r2, #0]
    a36e:	2102      	movs	r1, #2
    a370:	3301      	adds	r3, #1
    a372:	4628      	mov	r0, r5
    a374:	6013      	str	r3, [r2, #0]
    a376:	f00f faac 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    a37a:	f241 333e 	movw	r3, #4926	; 0x133e
    a37e:	8003      	strh	r3, [r0, #0]
    a380:	2101      	movs	r1, #1
    a382:	4628      	mov	r0, r5
    a384:	f00f faa5 	bl	198d2 <net_buf_simple_add>
    a388:	4603      	mov	r3, r0
	me->subevent = subevt;
    a38a:	2201      	movs	r2, #1
    a38c:	701a      	strb	r2, [r3, #0]
    a38e:	4628      	mov	r0, r5
    a390:	2112      	movs	r1, #18
    a392:	f00f fa9e 	bl	198d2 <net_buf_simple_add>
	lecc->status = 0x00;
    a396:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    a398:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
    a39c:	7f63      	ldrb	r3, [r4, #29]
    a39e:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    a3a0:	7fa3      	ldrb	r3, [r4, #30]
    a3a2:	f003 0301 	and.w	r3, r3, #1
    a3a6:	4605      	mov	r5, r0
    a3a8:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
    a3aa:	2206      	movs	r2, #6
    a3ac:	f104 011f 	add.w	r1, r4, #31
    a3b0:	3005      	adds	r0, #5
    a3b2:	f00d fb23 	bl	179fc <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
    a3b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    a3b8:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
    a3bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    a3be:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    a3c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    a3c4:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
    a3c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    a3cc:	746b      	strb	r3, [r5, #17]
    a3ce:	e60c      	b.n	9fea <hci_evt_encode+0x72>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    a3d0:	2300      	movs	r3, #0
    a3d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
    a3d6:	e9cd 3300 	strd	r3, r3, [sp]
    a3da:	221a      	movs	r2, #26
    a3dc:	2102      	movs	r1, #2
    a3de:	4630      	mov	r0, r6
    a3e0:	f000 ffec 	bl	b3bc <ll_conn_update>
		return;
    a3e4:	e601      	b.n	9fea <hci_evt_encode+0x72>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    a3e6:	4a10      	ldr	r2, [pc, #64]	; (a428 <hci_evt_encode+0x4b0>)
    a3e8:	4913      	ldr	r1, [pc, #76]	; (a438 <hci_evt_encode+0x4c0>)
    a3ea:	4811      	ldr	r0, [pc, #68]	; (a430 <hci_evt_encode+0x4b8>)
    a3ec:	f641 733c 	movw	r3, #7996	; 0x1f3c
    a3f0:	f00d f877 	bl	174e2 <assert_print>
    a3f4:	4040      	eors	r0, r0
    a3f6:	f380 8811 	msr	BASEPRI, r0
    a3fa:	f04f 0003 	mov.w	r0, #3
    a3fe:	df02      	svc	2
    a400:	e644      	b.n	a08c <hci_evt_encode+0x114>
		LL_ASSERT(0);
    a402:	4a09      	ldr	r2, [pc, #36]	; (a428 <hci_evt_encode+0x4b0>)
    a404:	490d      	ldr	r1, [pc, #52]	; (a43c <hci_evt_encode+0x4c4>)
    a406:	480a      	ldr	r0, [pc, #40]	; (a430 <hci_evt_encode+0x4b8>)
    a408:	f242 0395 	movw	r3, #8341	; 0x2095
    a40c:	f00d f869 	bl	174e2 <assert_print>
    a410:	4040      	eors	r0, r0
    a412:	f380 8811 	msr	BASEPRI, r0
    a416:	f04f 0003 	mov.w	r0, #3
    a41a:	df02      	svc	2
		return;
    a41c:	e5e5      	b.n	9fea <hci_evt_encode+0x72>
    a41e:	bf00      	nop
    a420:	20000158 	.word	0x20000158
    a424:	20000150 	.word	0x20000150
    a428:	0001bb14 	.word	0x0001bb14
    a42c:	0001bb50 	.word	0x0001bb50
    a430:	0001b844 	.word	0x0001b844
    a434:	20001b14 	.word	0x20001b14
    a438:	0001bb8c 	.word	0x0001bb8c
    a43c:	0001b908 	.word	0x0001b908

0000a440 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    a440:	b570      	push	{r4, r5, r6, lr}
    a442:	f100 040c 	add.w	r4, r0, #12
    a446:	460e      	mov	r6, r1
    a448:	4620      	mov	r0, r4
    a44a:	2102      	movs	r1, #2
    a44c:	4615      	mov	r5, r2
    a44e:	f00f fa40 	bl	198d2 <net_buf_simple_add>
	hdr->evt = evt;
    a452:	f240 5313 	movw	r3, #1299	; 0x513
    a456:	8003      	strh	r3, [r0, #0]
    a458:	2105      	movs	r1, #5
    a45a:	4620      	mov	r0, r4
    a45c:	f00f fa39 	bl	198d2 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    a460:	2301      	movs	r3, #1
    a462:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    a464:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    a468:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    a46c:	bd70      	pop	{r4, r5, r6, pc}
    a46e:	bf00      	nop

0000a470 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a470:	7903      	ldrb	r3, [r0, #4]
    a472:	2b03      	cmp	r3, #3
    a474:	d009      	beq.n	a48a <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
    a476:	2b17      	cmp	r3, #23
    a478:	d005      	beq.n	a486 <hci_get_class+0x16>
    a47a:	3b18      	subs	r3, #24
    a47c:	2b05      	cmp	r3, #5
    a47e:	bf8c      	ite	hi
    a480:	2000      	movhi	r0, #0
    a482:	2003      	movls	r0, #3
    a484:	4770      	bx	lr

#if defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX)
		case NODE_RX_TYPE_CONN_IQ_SAMPLE_REPORT:
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

			return HCI_CLASS_EVT_REQUIRED;
    a486:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    a488:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    a48a:	7f03      	ldrb	r3, [r0, #28]
    a48c:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_EVT_LLCP;
    a490:	2b03      	cmp	r3, #3
    a492:	bf14      	ite	ne
    a494:	2005      	movne	r0, #5
    a496:	2004      	moveq	r0, #4
    a498:	4770      	bx	lr
    a49a:	bf00      	nop

0000a49c <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    a49c:	4b0b      	ldr	r3, [pc, #44]	; (a4cc <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    a49e:	4a0c      	ldr	r2, [pc, #48]	; (a4d0 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    a4a0:	490c      	ldr	r1, [pc, #48]	; (a4d4 <hci_init+0x38>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
    a4a2:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    a4a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    a4a8:	f641 75ff 	movw	r5, #8191	; 0x1fff
    a4ac:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    a4b0:	2400      	movs	r4, #0
    a4b2:	2500      	movs	r5, #0
    a4b4:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    a4b8:	241f      	movs	r4, #31
    a4ba:	2500      	movs	r5, #0
    a4bc:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
    a4c0:	4b05      	ldr	r3, [pc, #20]	; (a4d8 <hci_init+0x3c>)
    a4c2:	2200      	movs	r2, #0
    a4c4:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    a4c6:	bc30      	pop	{r4, r5}
	hci_recv_fifo_reset();
    a4c8:	f7fe bfa6 	b.w	9418 <hci_recv_fifo_reset>
    a4cc:	20000158 	.word	0x20000158
    a4d0:	20000e50 	.word	0x20000e50
    a4d4:	20000150 	.word	0x20000150
    a4d8:	20001b14 	.word	0x20001b14

0000a4dc <ticker_stop_cb>:
{
    a4dc:	b530      	push	{r4, r5, lr}
    a4de:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    a4e0:	4c18      	ldr	r4, [pc, #96]	; (a544 <ticker_stop_cb+0x68>)
{
    a4e2:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    a4e4:	4b18      	ldr	r3, [pc, #96]	; (a548 <ticker_stop_cb+0x6c>)
    a4e6:	1b2c      	subs	r4, r5, r4
    a4e8:	08a4      	lsrs	r4, r4, #2
    a4ea:	fba3 3404 	umull	r3, r4, r3, r4
	handle = ull_adv_handle_get(adv);
    a4ee:	f3c4 04c7 	ubfx	r4, r4, #3, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    a4f2:	b9cc      	cbnz	r4, a528 <ticker_stop_cb+0x4c>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    a4f4:	1ca2      	adds	r2, r4, #2
    a4f6:	4b15      	ldr	r3, [pc, #84]	; (a54c <ticker_stop_cb+0x70>)
    a4f8:	9500      	str	r5, [sp, #0]
    a4fa:	b2d2      	uxtb	r2, r2
    a4fc:	2101      	movs	r1, #1
    a4fe:	2000      	movs	r0, #0
    a500:	f7fd fb3c 	bl	7b7c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    a504:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    a508:	d00c      	beq.n	a524 <ticker_stop_cb+0x48>
    a50a:	4a11      	ldr	r2, [pc, #68]	; (a550 <ticker_stop_cb+0x74>)
    a50c:	4911      	ldr	r1, [pc, #68]	; (a554 <ticker_stop_cb+0x78>)
    a50e:	4812      	ldr	r0, [pc, #72]	; (a558 <ticker_stop_cb+0x7c>)
    a510:	f640 137d 	movw	r3, #2429	; 0x97d
    a514:	f00c ffe5 	bl	174e2 <assert_print>
    a518:	4040      	eors	r0, r0
    a51a:	f380 8811 	msr	BASEPRI, r0
    a51e:	f04f 0003 	mov.w	r0, #3
    a522:	df02      	svc	2
}
    a524:	b003      	add	sp, #12
    a526:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    a528:	4a09      	ldr	r2, [pc, #36]	; (a550 <ticker_stop_cb+0x74>)
    a52a:	490c      	ldr	r1, [pc, #48]	; (a55c <ticker_stop_cb+0x80>)
    a52c:	480a      	ldr	r0, [pc, #40]	; (a558 <ticker_stop_cb+0x7c>)
    a52e:	f640 1378 	movw	r3, #2424	; 0x978
    a532:	f00c ffd6 	bl	174e2 <assert_print>
    a536:	4040      	eors	r0, r0
    a538:	f380 8811 	msr	BASEPRI, r0
    a53c:	f04f 0003 	mov.w	r0, #3
    a540:	df02      	svc	2
    a542:	e7d7      	b.n	a4f4 <ticker_stop_cb+0x18>
    a544:	20001b54 	.word	0x20001b54
    a548:	4bda12f7 	.word	0x4bda12f7
    a54c:	0000a5f1 	.word	0x0000a5f1
    a550:	0001bbd4 	.word	0x0001bbd4
    a554:	0001bc20 	.word	0x0001bc20
    a558:	0001b844 	.word	0x0001b844
    a55c:	0001bc14 	.word	0x0001bc14

0000a560 <disabled_cb>:
{
    a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    a562:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    a564:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
    a566:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    a568:	b1c7      	cbz	r7, a59c <disabled_cb+0x3c>
	LL_ASSERT(adv->node_rx_cc_free);
    a56a:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
    a56c:	2300      	movs	r3, #0
    a56e:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    a570:	b33c      	cbz	r4, a5c2 <disabled_cb+0x62>
	adv->node_rx_cc_free = NULL;
    a572:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    a574:	2317      	movs	r3, #23
	adv->node_rx_cc_free = NULL;
    a576:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    a578:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
    a57a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a57e:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    a580:	f104 001c 	add.w	r0, r4, #28
    a584:	2212      	movs	r2, #18
    a586:	f00d fa44 	bl	17a12 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    a58a:	233c      	movs	r3, #60	; 0x3c
    a58c:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
    a58e:	60a6      	str	r6, [r4, #8]
	ll_rx_put_sched(link, rx);
    a590:	4621      	mov	r1, r4
    a592:	4638      	mov	r0, r7
}
    a594:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_put_sched(link, rx);
    a598:	f7fe b8b0 	b.w	86fc <ll_rx_put_sched>
	LL_ASSERT(adv->link_cc_free);
    a59c:	4a10      	ldr	r2, [pc, #64]	; (a5e0 <disabled_cb+0x80>)
    a59e:	4911      	ldr	r1, [pc, #68]	; (a5e4 <disabled_cb+0x84>)
    a5a0:	4811      	ldr	r0, [pc, #68]	; (a5e8 <disabled_cb+0x88>)
    a5a2:	f640 13c5 	movw	r3, #2501	; 0x9c5
    a5a6:	f00c ff9c 	bl	174e2 <assert_print>
    a5aa:	4040      	eors	r0, r0
    a5ac:	f380 8811 	msr	BASEPRI, r0
    a5b0:	f04f 0003 	mov.w	r0, #3
    a5b4:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
    a5b6:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
    a5b8:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
    a5ba:	2300      	movs	r3, #0
    a5bc:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    a5be:	2c00      	cmp	r4, #0
    a5c0:	d1d7      	bne.n	a572 <disabled_cb+0x12>
    a5c2:	4a07      	ldr	r2, [pc, #28]	; (a5e0 <disabled_cb+0x80>)
    a5c4:	4909      	ldr	r1, [pc, #36]	; (a5ec <disabled_cb+0x8c>)
    a5c6:	4808      	ldr	r0, [pc, #32]	; (a5e8 <disabled_cb+0x88>)
    a5c8:	f640 13c9 	movw	r3, #2505	; 0x9c9
    a5cc:	f00c ff89 	bl	174e2 <assert_print>
    a5d0:	4040      	eors	r0, r0
    a5d2:	f380 8811 	msr	BASEPRI, r0
    a5d6:	f04f 0003 	mov.w	r0, #3
    a5da:	df02      	svc	2
	rx = adv->node_rx_cc_free;
    a5dc:	6e6c      	ldr	r4, [r5, #100]	; 0x64
    a5de:	e7c8      	b.n	a572 <disabled_cb+0x12>
    a5e0:	0001bbd4 	.word	0x0001bbd4
    a5e4:	0001bc3c 	.word	0x0001bc3c
    a5e8:	0001b844 	.word	0x0001b844
    a5ec:	0001bc50 	.word	0x0001bc50

0000a5f0 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
    a5f0:	b100      	cbz	r0, a5f4 <ticker_stop_op_cb+0x4>
    a5f2:	4770      	bx	lr
	mfy.param = param;
    a5f4:	4b0c      	ldr	r3, [pc, #48]	; (a628 <ticker_stop_op_cb+0x38>)
{
    a5f6:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    a5f8:	4602      	mov	r2, r0
    a5fa:	460c      	mov	r4, r1
    a5fc:	2002      	movs	r0, #2
    a5fe:	2101      	movs	r1, #1
	mfy.param = param;
    a600:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    a602:	f7fc f867 	bl	66d4 <mayfly_enqueue>
	LL_ASSERT(!ret);
    a606:	b900      	cbnz	r0, a60a <ticker_stop_op_cb+0x1a>
}
    a608:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    a60a:	4a08      	ldr	r2, [pc, #32]	; (a62c <ticker_stop_op_cb+0x3c>)
    a60c:	4908      	ldr	r1, [pc, #32]	; (a630 <ticker_stop_op_cb+0x40>)
    a60e:	4809      	ldr	r0, [pc, #36]	; (a634 <ticker_stop_op_cb+0x44>)
    a610:	f640 1399 	movw	r3, #2457	; 0x999
    a614:	f00c ff65 	bl	174e2 <assert_print>
    a618:	4040      	eors	r0, r0
    a61a:	f380 8811 	msr	BASEPRI, r0
    a61e:	f04f 0003 	mov.w	r0, #3
    a622:	df02      	svc	2
}
    a624:	bd10      	pop	{r4, pc}
    a626:	bf00      	nop
    a628:	20000534 	.word	0x20000534
    a62c:	0001bbd4 	.word	0x0001bbd4
    a630:	0001b9ec 	.word	0x0001b9ec
    a634:	0001b844 	.word	0x0001b844

0000a638 <adv_disable>:
{
    a638:	b538      	push	{r3, r4, r5, lr}
    a63a:	4604      	mov	r4, r0
    a63c:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    a640:	b353      	cbz	r3, a698 <adv_disable+0x60>
		mfy.param = &adv->lll;
    a642:	4d17      	ldr	r5, [pc, #92]	; (a6a0 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    a644:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
    a646:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    a648:	b16b      	cbz	r3, a666 <adv_disable+0x2e>
    a64a:	4a16      	ldr	r2, [pc, #88]	; (a6a4 <adv_disable+0x6c>)
    a64c:	4916      	ldr	r1, [pc, #88]	; (a6a8 <adv_disable+0x70>)
    a64e:	4817      	ldr	r0, [pc, #92]	; (a6ac <adv_disable+0x74>)
    a650:	f640 13ae 	movw	r3, #2478	; 0x9ae
    a654:	f00c ff45 	bl	174e2 <assert_print>
    a658:	4040      	eors	r0, r0
    a65a:	f380 8811 	msr	BASEPRI, r0
    a65e:	f04f 0003 	mov.w	r0, #3
    a662:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    a664:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    a666:	4912      	ldr	r1, [pc, #72]	; (a6b0 <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    a668:	4b0d      	ldr	r3, [pc, #52]	; (a6a0 <adv_disable+0x68>)
    a66a:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    a66c:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    a670:	4611      	mov	r1, r2
    a672:	2001      	movs	r0, #1
    a674:	f7fc f82e 	bl	66d4 <mayfly_enqueue>
		LL_ASSERT(!ret);
    a678:	b900      	cbnz	r0, a67c <adv_disable+0x44>
}
    a67a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    a67c:	4a09      	ldr	r2, [pc, #36]	; (a6a4 <adv_disable+0x6c>)
    a67e:	490d      	ldr	r1, [pc, #52]	; (a6b4 <adv_disable+0x7c>)
    a680:	480a      	ldr	r0, [pc, #40]	; (a6ac <adv_disable+0x74>)
    a682:	f640 13b5 	movw	r3, #2485	; 0x9b5
    a686:	f00c ff2c 	bl	174e2 <assert_print>
    a68a:	4040      	eors	r0, r0
    a68c:	f380 8811 	msr	BASEPRI, r0
    a690:	f04f 0003 	mov.w	r0, #3
    a694:	df02      	svc	2
}
    a696:	bd38      	pop	{r3, r4, r5, pc}
    a698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
    a69c:	f7ff bf60 	b.w	a560 <disabled_cb>
    a6a0:	20000524 	.word	0x20000524
    a6a4:	0001bbd4 	.word	0x0001bbd4
    a6a8:	0001bc68 	.word	0x0001bc68
    a6ac:	0001b844 	.word	0x0001b844
    a6b0:	0000a561 	.word	0x0000a561
    a6b4:	0001b9ec 	.word	0x0001b9ec

0000a6b8 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    a6b8:	b900      	cbnz	r0, a6bc <ticker_update_op_cb+0x4>
    a6ba:	4770      	bx	lr
{
    a6bc:	b510      	push	{r4, lr}
    a6be:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    a6c0:	f7fe f8da 	bl	8878 <ull_disable_mark_get>
    a6c4:	4284      	cmp	r4, r0
    a6c6:	d00c      	beq.n	a6e2 <ticker_update_op_cb+0x2a>
    a6c8:	4a06      	ldr	r2, [pc, #24]	; (a6e4 <ticker_update_op_cb+0x2c>)
    a6ca:	4907      	ldr	r1, [pc, #28]	; (a6e8 <ticker_update_op_cb+0x30>)
    a6cc:	4807      	ldr	r0, [pc, #28]	; (a6ec <ticker_update_op_cb+0x34>)
    a6ce:	f640 136a 	movw	r3, #2410	; 0x96a
    a6d2:	f00c ff06 	bl	174e2 <assert_print>
    a6d6:	4040      	eors	r0, r0
    a6d8:	f380 8811 	msr	BASEPRI, r0
    a6dc:	f04f 0003 	mov.w	r0, #3
    a6e0:	df02      	svc	2
}
    a6e2:	bd10      	pop	{r4, pc}
    a6e4:	0001bbd4 	.word	0x0001bbd4
    a6e8:	0001bc7c 	.word	0x0001bc7c
    a6ec:	0001b844 	.word	0x0001b844

0000a6f0 <init_set.constprop.0>:
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    a6f0:	4b0f      	ldr	r3, [pc, #60]	; (a730 <init_set.constprop.0+0x40>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    a6f2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    a6f4:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
    a6f8:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
    a6fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a700:	f022 0202 	bic.w	r2, r2, #2
    a704:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    a706:	f042 020e 	orr.w	r2, r2, #14
    a70a:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
    a70c:	2006      	movs	r0, #6
	pdu->type = pdu_type;
    a70e:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    a710:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    a714:	f8a3 c068 	strh.w	ip, [r3, #104]	; 0x68
	pdu->type = pdu_type;
    a718:	700a      	strb	r2, [r1, #0]
	pdu->len = BDADDR_SIZE;
    a71a:	7048      	strb	r0, [r1, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    a71c:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
    a720:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	pdu->type = pdu_type;
    a724:	2204      	movs	r2, #4
    a726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a728:	701a      	strb	r2, [r3, #0]
	pdu->len = BDADDR_SIZE;
    a72a:	7058      	strb	r0, [r3, #1]
	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);

#if !defined(CONFIG_BT_CTLR_ADV_EXT)
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
    a72c:	4770      	bx	lr
    a72e:	bf00      	nop
    a730:	20001b54 	.word	0x20001b54

0000a734 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
    a734:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    a736:	4c1b      	ldr	r4, [pc, #108]	; (a7a4 <conn_release.constprop.0+0x70>)
    a738:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
    a73a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    a73c:	b163      	cbz	r3, a758 <conn_release.constprop.0+0x24>
    a73e:	4a1a      	ldr	r2, [pc, #104]	; (a7a8 <conn_release.constprop.0+0x74>)
    a740:	491a      	ldr	r1, [pc, #104]	; (a7ac <conn_release.constprop.0+0x78>)
    a742:	481b      	ldr	r0, [pc, #108]	; (a7b0 <conn_release.constprop.0+0x7c>)
    a744:	f640 13f2 	movw	r3, #2546	; 0x9f2
    a748:	f00c fecb 	bl	174e2 <assert_print>
    a74c:	4040      	eors	r0, r0
    a74e:	f380 8811 	msr	BASEPRI, r0
    a752:	f04f 0003 	mov.w	r0, #3
    a756:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    a758:	f105 0160 	add.w	r1, r5, #96	; 0x60
    a75c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    a760:	f7fb ff38 	bl	65d4 <memq_deinit>
	LL_ASSERT(link);
    a764:	4606      	mov	r6, r0
    a766:	b170      	cbz	r0, a786 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
    a768:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    a76a:	66ee      	str	r6, [r5, #108]	; 0x6c
	ll_conn_release(lll->hdr.parent);
    a76c:	f000 fda6 	bl	b2bc <ll_conn_release>
	adv->lll.conn = NULL;
    a770:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
    a772:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
    a774:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
    a776:	f7fd ffb1 	bl	86dc <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    a77a:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
    a77c:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
    a77e:	f7fd ffa1 	bl	86c4 <ll_rx_link_release>
	adv->link_cc_free = NULL;
    a782:	6625      	str	r5, [r4, #96]	; 0x60
}
    a784:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    a786:	4a08      	ldr	r2, [pc, #32]	; (a7a8 <conn_release.constprop.0+0x74>)
    a788:	490a      	ldr	r1, [pc, #40]	; (a7b4 <conn_release.constprop.0+0x80>)
    a78a:	4809      	ldr	r0, [pc, #36]	; (a7b0 <conn_release.constprop.0+0x7c>)
    a78c:	f640 13f4 	movw	r3, #2548	; 0x9f4
    a790:	f00c fea7 	bl	174e2 <assert_print>
    a794:	4040      	eors	r0, r0
    a796:	f380 8811 	msr	BASEPRI, r0
    a79a:	f04f 0003 	mov.w	r0, #3
    a79e:	df02      	svc	2
    a7a0:	e7e2      	b.n	a768 <conn_release.constprop.0+0x34>
    a7a2:	bf00      	nop
    a7a4:	20001b54 	.word	0x20001b54
    a7a8:	0001bbd4 	.word	0x0001bbd4
    a7ac:	0001bcac 	.word	0x0001bcac
    a7b0:	0001b844 	.word	0x0001b844
    a7b4:	0001bdb0 	.word	0x0001bdb0

0000a7b8 <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
    a7b8:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
    a7ba:	4c4f      	ldr	r4, [pc, #316]	; (a8f8 <disable.constprop.0+0x140>)
    a7bc:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    a7c0:	07d9      	lsls	r1, r3, #31
static inline uint8_t disable(uint8_t handle)
    a7c2:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
    a7c4:	d55f      	bpl.n	a886 <disable.constprop.0+0xce>
	if (adv->lll.conn) {
    a7c6:	6a23      	ldr	r3, [r4, #32]
    a7c8:	b153      	cbz	r3, a7e0 <disable.constprop.0+0x28>
		adv->lll.conn->periph.cancelled = 1U;
    a7ca:	f893 2020 	ldrb.w	r2, [r3, #32]
    a7ce:	f042 0202 	orr.w	r2, r2, #2
    a7d2:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
    a7d6:	6a23      	ldr	r3, [r4, #32]
    a7d8:	f893 3020 	ldrb.w	r3, [r3, #32]
    a7dc:	07da      	lsls	r2, r3, #31
    a7de:	d467      	bmi.n	a8b0 <disable.constprop.0+0xf8>
	mark = ull_disable_mark(adv);
    a7e0:	4845      	ldr	r0, [pc, #276]	; (a8f8 <disable.constprop.0+0x140>)
    a7e2:	f7fe f831 	bl	8848 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    a7e6:	4284      	cmp	r4, r0
    a7e8:	d00c      	beq.n	a804 <disable.constprop.0+0x4c>
    a7ea:	4a44      	ldr	r2, [pc, #272]	; (a8fc <disable.constprop.0+0x144>)
    a7ec:	4944      	ldr	r1, [pc, #272]	; (a900 <disable.constprop.0+0x148>)
    a7ee:	4845      	ldr	r0, [pc, #276]	; (a904 <disable.constprop.0+0x14c>)
    a7f0:	f640 23bd 	movw	r3, #2749	; 0xabd
    a7f4:	f00c fe75 	bl	174e2 <assert_print>
    a7f8:	4040      	eors	r0, r0
    a7fa:	f380 8811 	msr	BASEPRI, r0
    a7fe:	f04f 0003 	mov.w	r0, #3
    a802:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    a804:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    a808:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    a80a:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
    a80c:	d50d      	bpl.n	a82a <disable.constprop.0+0x72>
		ret_cb = TICKER_STATUS_BUSY;
    a80e:	2102      	movs	r1, #2
    a810:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    a812:	4b3d      	ldr	r3, [pc, #244]	; (a908 <disable.constprop.0+0x150>)
    a814:	9500      	str	r5, [sp, #0]
    a816:	2103      	movs	r1, #3
    a818:	2201      	movs	r2, #1
    a81a:	2000      	movs	r0, #0
    a81c:	f7fd f9ae 	bl	7b7c <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    a820:	4629      	mov	r1, r5
    a822:	f7fd ffe9 	bl	87f8 <ull_ticker_status_take>
		if (ret) {
    a826:	2800      	cmp	r0, #0
    a828:	d152      	bne.n	a8d0 <disable.constprop.0+0x118>
	ret_cb = TICKER_STATUS_BUSY;
    a82a:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    a82c:	2103      	movs	r1, #3
    a82e:	4b36      	ldr	r3, [pc, #216]	; (a908 <disable.constprop.0+0x150>)
    a830:	9500      	str	r5, [sp, #0]
    a832:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    a834:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    a836:	f7fd f9a1 	bl	7b7c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    a83a:	4629      	mov	r1, r5
    a83c:	f7fd ffdc 	bl	87f8 <ull_ticker_status_take>
	if (ret) {
    a840:	bb20      	cbnz	r0, a88c <disable.constprop.0+0xd4>
	err = ull_disable(&adv->lll);
    a842:	4832      	ldr	r0, [pc, #200]	; (a90c <disable.constprop.0+0x154>)
    a844:	f7fe f83c 	bl	88c0 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
    a848:	b108      	cbz	r0, a84e <disable.constprop.0+0x96>
    a84a:	3078      	adds	r0, #120	; 0x78
    a84c:	d132      	bne.n	a8b4 <disable.constprop.0+0xfc>
	mark = ull_disable_unmark(adv);
    a84e:	482a      	ldr	r0, [pc, #168]	; (a8f8 <disable.constprop.0+0x140>)
    a850:	f7fe f806 	bl	8860 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    a854:	4284      	cmp	r4, r0
    a856:	d00c      	beq.n	a872 <disable.constprop.0+0xba>
    a858:	4a28      	ldr	r2, [pc, #160]	; (a8fc <disable.constprop.0+0x144>)
    a85a:	4929      	ldr	r1, [pc, #164]	; (a900 <disable.constprop.0+0x148>)
    a85c:	4829      	ldr	r0, [pc, #164]	; (a904 <disable.constprop.0+0x14c>)
    a85e:	f640 23df 	movw	r3, #2783	; 0xadf
    a862:	f00c fe3e 	bl	174e2 <assert_print>
    a866:	4040      	eors	r0, r0
    a868:	f380 8811 	msr	BASEPRI, r0
    a86c:	f04f 0003 	mov.w	r0, #3
    a870:	df02      	svc	2
	if (adv->lll.conn) {
    a872:	6a23      	ldr	r3, [r4, #32]
    a874:	b10b      	cbz	r3, a87a <disable.constprop.0+0xc2>
		conn_release(adv);
    a876:	f7ff ff5d 	bl	a734 <conn_release.constprop.0>
	adv->is_enabled = 0U;
    a87a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    a87e:	f36f 0300 	bfc	r3, #0, #1
    a882:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			return 0;
    a886:	2000      	movs	r0, #0
}
    a888:	b005      	add	sp, #20
    a88a:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
    a88c:	481a      	ldr	r0, [pc, #104]	; (a8f8 <disable.constprop.0+0x140>)
    a88e:	f7fd ffe7 	bl	8860 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    a892:	4284      	cmp	r4, r0
    a894:	d00c      	beq.n	a8b0 <disable.constprop.0+0xf8>
    a896:	4a19      	ldr	r2, [pc, #100]	; (a8fc <disable.constprop.0+0x144>)
    a898:	4919      	ldr	r1, [pc, #100]	; (a900 <disable.constprop.0+0x148>)
    a89a:	481a      	ldr	r0, [pc, #104]	; (a904 <disable.constprop.0+0x14c>)
    a89c:	f640 23d6 	movw	r3, #2774	; 0xad6
    a8a0:	f00c fe1f 	bl	174e2 <assert_print>
    a8a4:	4040      	eors	r0, r0
    a8a6:	f380 8811 	msr	BASEPRI, r0
    a8aa:	f04f 0003 	mov.w	r0, #3
    a8ae:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
    a8b0:	200c      	movs	r0, #12
    a8b2:	e7e9      	b.n	a888 <disable.constprop.0+0xd0>
	LL_ASSERT(!err || (err == -EALREADY));
    a8b4:	4a11      	ldr	r2, [pc, #68]	; (a8fc <disable.constprop.0+0x144>)
    a8b6:	4916      	ldr	r1, [pc, #88]	; (a910 <disable.constprop.0+0x158>)
    a8b8:	4812      	ldr	r0, [pc, #72]	; (a904 <disable.constprop.0+0x14c>)
    a8ba:	f640 23dc 	movw	r3, #2780	; 0xadc
    a8be:	f00c fe10 	bl	174e2 <assert_print>
    a8c2:	4040      	eors	r0, r0
    a8c4:	f380 8811 	msr	BASEPRI, r0
    a8c8:	f04f 0003 	mov.w	r0, #3
    a8cc:	df02      	svc	2
    a8ce:	e7be      	b.n	a84e <disable.constprop.0+0x96>
			mark = ull_disable_unmark(adv);
    a8d0:	4809      	ldr	r0, [pc, #36]	; (a8f8 <disable.constprop.0+0x140>)
    a8d2:	f7fd ffc5 	bl	8860 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    a8d6:	4284      	cmp	r4, r0
    a8d8:	d0ea      	beq.n	a8b0 <disable.constprop.0+0xf8>
    a8da:	4a08      	ldr	r2, [pc, #32]	; (a8fc <disable.constprop.0+0x144>)
    a8dc:	4908      	ldr	r1, [pc, #32]	; (a900 <disable.constprop.0+0x148>)
    a8de:	4809      	ldr	r0, [pc, #36]	; (a904 <disable.constprop.0+0x14c>)
    a8e0:	f640 23c8 	movw	r3, #2760	; 0xac8
    a8e4:	f00c fdfd 	bl	174e2 <assert_print>
    a8e8:	4040      	eors	r0, r0
    a8ea:	f380 8811 	msr	BASEPRI, r0
    a8ee:	f04f 0003 	mov.w	r0, #3
    a8f2:	df02      	svc	2
    a8f4:	e7dc      	b.n	a8b0 <disable.constprop.0+0xf8>
    a8f6:	bf00      	nop
    a8f8:	20001b54 	.word	0x20001b54
    a8fc:	0001bbd4 	.word	0x0001bbd4
    a900:	0001bcc0 	.word	0x0001bcc0
    a904:	0001b844 	.word	0x0001b844
    a908:	00007de5 	.word	0x00007de5
    a90c:	20001b70 	.word	0x20001b70
    a910:	0001bccc 	.word	0x0001bccc

0000a914 <adv_time_get.constprop.0.isra.0>:
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    a914:	7803      	ldrb	r3, [r0, #0]
    a916:	f003 030f 	and.w	r3, r3, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
    a91a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    a91e:	2b02      	cmp	r3, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    a920:	fa1f fc8c 	uxth.w	ip, ip
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    a924:	d025      	beq.n	a972 <adv_time_get.constprop.0.isra.0+0x5e>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    a926:	2b01      	cmp	r3, #1
    a928:	d00d      	beq.n	a946 <adv_time_get.constprop.0.isra.0+0x32>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    a92a:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
    a92c:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
    a92e:	b19b      	cbz	r3, a958 <adv_time_get.constprop.0.isra.0+0x44>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
    a930:	2b06      	cmp	r3, #6
    a932:	d011      	beq.n	a958 <adv_time_get.constprop.0.isra.0+0x44>
    a934:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    a938:	fb13 f30c 	smulbb	r3, r3, ip
    a93c:	f240 208f 	movw	r0, #655	; 0x28f
			time_us += (BYTES2US(adv_size, PHY_1M) +
    a940:	4418      	add	r0, r3
    a942:	b280      	uxth	r0, r0
}
    a944:	4770      	bx	lr
    a946:	f240 2316 	movw	r3, #534	; 0x216
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    a94a:	fb13 f30c 	smulbb	r3, r3, ip
    a94e:	f240 401f 	movw	r0, #1055	; 0x41f
			time_us += (BYTES2US(adv_size, PHY_1M) +
    a952:	4418      	add	r0, r3
    a954:	b280      	uxth	r0, r0
}
    a956:	4770      	bx	lr
				adv_size += pdu->len;
    a958:	7840      	ldrb	r0, [r0, #1]
    a95a:	3010      	adds	r0, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
    a95c:	00c0      	lsls	r0, r0, #3
    a95e:	f201 3157 	addw	r1, r1, #855	; 0x357
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    a962:	f500 73b3 	add.w	r3, r0, #358	; 0x166
    a966:	fb13 f30c 	smulbb	r3, r3, ip
    a96a:	4408      	add	r0, r1
			time_us += (BYTES2US(adv_size, PHY_1M) +
    a96c:	4418      	add	r0, r3
    a96e:	b280      	uxth	r0, r0
}
    a970:	4770      	bx	lr
			adv_size += pdu->len;
    a972:	7841      	ldrb	r1, [r0, #1]
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    a974:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
    a978:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
    a97c:	0040      	lsls	r0, r0, #1
    a97e:	f101 0310 	add.w	r3, r1, #16
    a982:	00db      	lsls	r3, r3, #3
    a984:	f200 1077 	addw	r0, r0, #375	; 0x177
    a988:	fb03 0202 	mla	r2, r3, r2, r0
    a98c:	b290      	uxth	r0, r2
    a98e:	4770      	bx	lr

0000a990 <ticker_cb>:
{
    a990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a994:	b08a      	sub	sp, #40	; 0x28
    a996:	461d      	mov	r5, r3
    a998:	9911      	ldr	r1, [sp, #68]	; 0x44
    a99a:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	struct ll_adv_set *adv = context->context;
    a99e:	680c      	ldr	r4, [r1, #0]
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    a9a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a9a4:	429d      	cmp	r5, r3
    a9a6:	d018      	beq.n	a9da <ticker_cb+0x4a>
	return ++hdr->ref;
    a9a8:	7823      	ldrb	r3, [r4, #0]
    a9aa:	3301      	adds	r3, #1
    a9ac:	b2db      	uxtb	r3, r3
    a9ae:	4607      	mov	r7, r0
    a9b0:	4616      	mov	r6, r2
    a9b2:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
    a9b4:	2b00      	cmp	r3, #0
    a9b6:	d064      	beq.n	aa82 <ticker_cb+0xf2>
		p.ticks_at_expire = ticks_at_expire;
    a9b8:	4939      	ldr	r1, [pc, #228]	; (aaa0 <ticker_cb+0x110>)
		mfy.param = &p;
    a9ba:	4b3a      	ldr	r3, [pc, #232]	; (aaa4 <ticker_cb+0x114>)
		p.lazy = lazy;
    a9bc:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
    a9be:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    a9c2:	2200      	movs	r2, #0
		p.param = lll;
    a9c4:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
    a9c6:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
    a9ca:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
    a9ce:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    a9d0:	2001      	movs	r0, #1
    a9d2:	4611      	mov	r1, r2
    a9d4:	f7fb fe7e 	bl	66d4 <mayfly_enqueue>
		LL_ASSERT(!ret);
    a9d8:	b938      	cbnz	r0, a9ea <ticker_cb+0x5a>
	if (!lll->is_hdcd)
    a9da:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    a9de:	f010 0501 	ands.w	r5, r0, #1
    a9e2:	d014      	beq.n	aa0e <ticker_cb+0x7e>
}
    a9e4:	b00a      	add	sp, #40	; 0x28
    a9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
    a9ea:	4a2f      	ldr	r2, [pc, #188]	; (aaa8 <ticker_cb+0x118>)
    a9ec:	492f      	ldr	r1, [pc, #188]	; (aaac <ticker_cb+0x11c>)
    a9ee:	4830      	ldr	r0, [pc, #192]	; (aab0 <ticker_cb+0x120>)
    a9f0:	f640 133d 	movw	r3, #2365	; 0x93d
    a9f4:	f00c fd75 	bl	174e2 <assert_print>
    a9f8:	4040      	eors	r0, r0
    a9fa:	f380 8811 	msr	BASEPRI, r0
    a9fe:	f04f 0003 	mov.w	r0, #3
    aa02:	df02      	svc	2
	if (!lll->is_hdcd)
    aa04:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    aa08:	f010 0501 	ands.w	r5, r0, #1
    aa0c:	d1ea      	bne.n	a9e4 <ticker_cb+0x54>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
    aa0e:	2104      	movs	r1, #4
    aa10:	a809      	add	r0, sp, #36	; 0x24
    aa12:	f006 f813 	bl	10a3c <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
    aa16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aa18:	4a26      	ldr	r2, [pc, #152]	; (aab4 <ticker_cb+0x124>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    aa1a:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
    aa1c:	fba2 1203 	umull	r1, r2, r2, r3
    aa20:	1a99      	subs	r1, r3, r2
    aa22:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    aa26:	0a12      	lsrs	r2, r2, #8
    aa28:	f240 1147 	movw	r1, #327	; 0x147
    aa2c:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    aa30:	4a21      	ldr	r2, [pc, #132]	; (aab8 <ticker_cb+0x128>)
    aa32:	4922      	ldr	r1, [pc, #136]	; (aabc <ticker_cb+0x12c>)
    aa34:	1aa2      	subs	r2, r4, r2
    aa36:	0892      	lsrs	r2, r2, #2
    aa38:	fba1 1202 	umull	r1, r2, r1, r2
    aa3c:	08d2      	lsrs	r2, r2, #3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    aa3e:	4920      	ldr	r1, [pc, #128]	; (aac0 <ticker_cb+0x130>)
    aa40:	3202      	adds	r2, #2
    aa42:	e9cd 5104 	strd	r5, r1, [sp, #16]
	random_delay += (ticks_delay_window_offset + 1);
    aa46:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    aa48:	e9cd 5502 	strd	r5, r5, [sp, #8]
    aa4c:	e9cd 5500 	strd	r5, r5, [sp]
    aa50:	b2d2      	uxtb	r2, r2
    aa52:	2101      	movs	r1, #1
    aa54:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
    aa56:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    aa58:	f7fd f876 	bl	7b48 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    aa5c:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    aa60:	d0c0      	beq.n	a9e4 <ticker_cb+0x54>
    aa62:	4a11      	ldr	r2, [pc, #68]	; (aaa8 <ticker_cb+0x118>)
    aa64:	4917      	ldr	r1, [pc, #92]	; (aac4 <ticker_cb+0x134>)
    aa66:	4812      	ldr	r0, [pc, #72]	; (aab0 <ticker_cb+0x120>)
    aa68:	f240 7393 	movw	r3, #1939	; 0x793
    aa6c:	f00c fd39 	bl	174e2 <assert_print>
    aa70:	4040      	eors	r0, r0
    aa72:	f380 8811 	msr	BASEPRI, r0
    aa76:	f04f 0003 	mov.w	r0, #3
    aa7a:	df02      	svc	2
}
    aa7c:	b00a      	add	sp, #40	; 0x28
    aa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(ref);
    aa82:	4a09      	ldr	r2, [pc, #36]	; (aaa8 <ticker_cb+0x118>)
    aa84:	4910      	ldr	r1, [pc, #64]	; (aac8 <ticker_cb+0x138>)
    aa86:	480a      	ldr	r0, [pc, #40]	; (aab0 <ticker_cb+0x120>)
    aa88:	f640 131e 	movw	r3, #2334	; 0x91e
    aa8c:	f00c fd29 	bl	174e2 <assert_print>
    aa90:	4040      	eors	r0, r0
    aa92:	f380 8811 	msr	BASEPRI, r0
    aa96:	f04f 0003 	mov.w	r0, #3
    aa9a:	df02      	svc	2
    aa9c:	e78c      	b.n	a9b8 <ticker_cb+0x28>
    aa9e:	bf00      	nop
    aaa0:	20001b20 	.word	0x20001b20
    aaa4:	20000514 	.word	0x20000514
    aaa8:	0001bbd4 	.word	0x0001bbd4
    aaac:	0001b9ec 	.word	0x0001b9ec
    aab0:	0001b844 	.word	0x0001b844
    aab4:	90d4f121 	.word	0x90d4f121
    aab8:	20001b54 	.word	0x20001b54
    aabc:	4bda12f7 	.word	0x4bda12f7
    aac0:	0000a6b9 	.word	0x0000a6b9
    aac4:	0001bce8 	.word	0x0001bce8
    aac8:	0001bce4 	.word	0x0001bce4

0000aacc <ll_adv_params_set>:
{
    aacc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!adv || adv->is_enabled) {
    aad0:	4c6c      	ldr	r4, [pc, #432]	; (ac84 <ll_adv_params_set+0x1b8>)
{
    aad2:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    aad4:	4b6c      	ldr	r3, [pc, #432]	; (ac88 <ll_adv_params_set+0x1bc>)
	if (!adv || adv->is_enabled) {
    aad6:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
    aada:	4686      	mov	lr, r0
    aadc:	468c      	mov	ip, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    aade:	e893 0003 	ldmia.w	r3, {r0, r1}
{
    aae2:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
    aae4:	f016 0601 	ands.w	r6, r6, #1
{
    aae8:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
    aaec:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    aaf0:	9000      	str	r0, [sp, #0]
    aaf2:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
    aaf6:	f040 809c 	bne.w	ac32 <ll_adv_params_set+0x166>
	adv->lll.chan_map = chan_map;
    aafa:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    aafc:	4615      	mov	r5, r2
    aafe:	f008 0207 	and.w	r2, r8, #7
    ab02:	f003 0303 	and.w	r3, r3, #3
    ab06:	0052      	lsls	r2, r2, #1
    ab08:	f421 7143 	bic.w	r1, r1, #780	; 0x30c
    ab0c:	f021 0102 	bic.w	r1, r1, #2
    ab10:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    ab14:	430a      	orrs	r2, r1
    ab16:	84a2      	strh	r2, [r4, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    ab18:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    ab1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		adv->interval = 0;
    ab20:	f1bc 0f01 	cmp.w	ip, #1
	pdu->type = pdu_adv_type[adv_type];
    ab24:	f10c 0308 	add.w	r3, ip, #8
    ab28:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
		adv->interval = 0;
    ab2c:	bf08      	it	eq
    ab2e:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
    ab32:	eb0d 0c03 	add.w	ip, sp, r3
    ab36:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
	pdu_type_prev = pdu->type;
    ab3a:	f898 2000 	ldrb.w	r2, [r8]
	pdu->type = pdu_adv_type[adv_type];
    ab3e:	f81c 3c08 	ldrb.w	r3, [ip, #-8]
    ab42:	f022 001f 	bic.w	r0, r2, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    ab46:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
    ab4a:	f003 030f 	and.w	r3, r3, #15
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    ab4e:	bf0c      	ite	eq
    ab50:	2101      	moveq	r1, #1
    ab52:	2100      	movne	r1, #0
    ab54:	4303      	orrs	r3, r0
    ab56:	f361 1345 	bfi	r3, r1, #5, #1
    ab5a:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    ab5e:	f003 030f 	and.w	r3, r3, #15
    ab62:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
    ab64:	f002 020f 	and.w	r2, r2, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    ab68:	d02e      	beq.n	abc8 <ll_adv_params_set+0xfc>
	} else if (pdu->len == 0) {
    ab6a:	f898 3001 	ldrb.w	r3, [r8, #1]
    ab6e:	b9f3      	cbnz	r3, abae <ll_adv_params_set+0xe2>
		pdu->tx_addr = own_addr_type & 0x1;
    ab70:	f898 3000 	ldrb.w	r3, [r8]
    ab74:	f005 0501 	and.w	r5, r5, #1
    ab78:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
    ab7c:	f36f 13c7 	bfc	r3, #7, #1
    ab80:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
    ab84:	2306      	movs	r3, #6
    ab86:	f888 3001 	strb.w	r3, [r8, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    ab8a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    ab8e:	61e4      	str	r4, [r4, #28]
    ab90:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ab94:	01ad      	lsls	r5, r5, #6
    ab96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (pdu->len == 0) {
    ab98:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ab9a:	f045 0504 	orr.w	r5, r5, #4
    ab9e:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
    aba0:	b90a      	cbnz	r2, aba6 <ll_adv_params_set+0xda>
			pdu->len = BDADDR_SIZE;
    aba2:	2206      	movs	r2, #6
    aba4:	705a      	strb	r2, [r3, #1]
}
    aba6:	4630      	mov	r0, r6
    aba8:	b003      	add	sp, #12
    abaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
    abae:	2a01      	cmp	r2, #1
    abb0:	d031      	beq.n	ac16 <ll_adv_params_set+0x14a>
		pdu->tx_addr = own_addr_type & 0x1;
    abb2:	f898 3000 	ldrb.w	r3, [r8]
    abb6:	f005 0501 	and.w	r5, r5, #1
    abba:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
    abbe:	f36f 13c7 	bfc	r3, #7, #1
    abc2:	f888 3000 	strb.w	r3, [r8]
    abc6:	e7e0      	b.n	ab8a <ll_adv_params_set+0xbe>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
    abc8:	2a01      	cmp	r2, #1
    abca:	d00f      	beq.n	abec <ll_adv_params_set+0x120>
		if (pdu->len == 0U) {
    abcc:	f898 2001 	ldrb.w	r2, [r8, #1]
    abd0:	bba2      	cbnz	r2, ac3c <ll_adv_params_set+0x170>
			adv->ad_data_backup.len = 0U;
    abd2:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    abd6:	f898 3000 	ldrb.w	r3, [r8]
    abda:	f003 030f 	and.w	r3, r3, #15
    abde:	2b01      	cmp	r3, #1
    abe0:	d004      	beq.n	abec <ll_adv_params_set+0x120>
	} else if (pdu->len == 0) {
    abe2:	f898 3001 	ldrb.w	r3, [r8, #1]
    abe6:	2b00      	cmp	r3, #0
    abe8:	d0c2      	beq.n	ab70 <ll_adv_params_set+0xa4>
    abea:	e7e2      	b.n	abb2 <ll_adv_params_set+0xe6>
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    abec:	f108 0908 	add.w	r9, r8, #8
		pdu->tx_addr = own_addr_type & 0x1;
    abf0:	f898 3000 	ldrb.w	r3, [r8]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    abf4:	990a      	ldr	r1, [sp, #40]	; 0x28
		pdu->tx_addr = own_addr_type & 0x1;
    abf6:	f005 0501 	and.w	r5, r5, #1
    abfa:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
    abfe:	f367 13c7 	bfi	r3, r7, #7, #1
    ac02:	f888 3000 	strb.w	r3, [r8]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    ac06:	4648      	mov	r0, r9
    ac08:	2206      	movs	r2, #6
    ac0a:	f00c fef7 	bl	179fc <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    ac0e:	230c      	movs	r3, #12
    ac10:	f888 3001 	strb.w	r3, [r8, #1]
    ac14:	e7b9      	b.n	ab8a <ll_adv_params_set+0xbe>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
    ac16:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    ac1a:	f104 0141 	add.w	r1, r4, #65	; 0x41
    ac1e:	f108 0008 	add.w	r0, r8, #8
    ac22:	f00c feeb 	bl	179fc <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
    ac26:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    ac2a:	3306      	adds	r3, #6
    ac2c:	f888 3001 	strb.w	r3, [r8, #1]
    ac30:	e7bf      	b.n	abb2 <ll_adv_params_set+0xe6>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ac32:	260c      	movs	r6, #12
}
    ac34:	4630      	mov	r0, r6
    ac36:	b003      	add	sp, #12
    ac38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			LL_ASSERT(pdu->len >=
    ac3c:	2a05      	cmp	r2, #5
    ac3e:	d910      	bls.n	ac62 <ll_adv_params_set+0x196>
			adv->ad_data_backup.len = pdu->len -
    ac40:	3a06      	subs	r2, #6
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    ac42:	f108 0908 	add.w	r9, r8, #8
			adv->ad_data_backup.len = pdu->len -
    ac46:	b2d2      	uxtb	r2, r2
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    ac48:	4810      	ldr	r0, [pc, #64]	; (ac8c <ll_adv_params_set+0x1c0>)
			adv->ad_data_backup.len = pdu->len -
    ac4a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    ac4e:	4649      	mov	r1, r9
    ac50:	f00c fed4 	bl	179fc <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    ac54:	f898 3000 	ldrb.w	r3, [r8]
    ac58:	f003 030f 	and.w	r3, r3, #15
    ac5c:	2b01      	cmp	r3, #1
    ac5e:	d1c0      	bne.n	abe2 <ll_adv_params_set+0x116>
    ac60:	e7c6      	b.n	abf0 <ll_adv_params_set+0x124>
			LL_ASSERT(pdu->len >=
    ac62:	4a0b      	ldr	r2, [pc, #44]	; (ac90 <ll_adv_params_set+0x1c4>)
    ac64:	490b      	ldr	r1, [pc, #44]	; (ac94 <ll_adv_params_set+0x1c8>)
    ac66:	480c      	ldr	r0, [pc, #48]	; (ac98 <ll_adv_params_set+0x1cc>)
    ac68:	f240 13af 	movw	r3, #431	; 0x1af
    ac6c:	f00c fc39 	bl	174e2 <assert_print>
    ac70:	4040      	eors	r0, r0
    ac72:	f380 8811 	msr	BASEPRI, r0
    ac76:	f04f 0003 	mov.w	r0, #3
    ac7a:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
    ac7c:	f898 2001 	ldrb.w	r2, [r8, #1]
    ac80:	e7de      	b.n	ac40 <ll_adv_params_set+0x174>
    ac82:	bf00      	nop
    ac84:	20001b54 	.word	0x20001b54
    ac88:	0001b3a0 	.word	0x0001b3a0
    ac8c:	20001b95 	.word	0x20001b95
    ac90:	0001bbd4 	.word	0x0001bbd4
    ac94:	0001bd20 	.word	0x0001bd20
    ac98:	0001b844 	.word	0x0001b844

0000ac9c <ull_adv_init>:
{
    ac9c:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    ac9e:	4c06      	ldr	r4, [pc, #24]	; (acb8 <ull_adv_init+0x1c>)
    aca0:	4620      	mov	r0, r4
    aca2:	f006 faf1 	bl	11288 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    aca6:	f104 000c 	add.w	r0, r4, #12
    acaa:	f006 faed 	bl	11288 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    acae:	f7ff fd1f 	bl	a6f0 <init_set.constprop.0>
}
    acb2:	2000      	movs	r0, #0
    acb4:	bd10      	pop	{r4, pc}
    acb6:	bf00      	nop
    acb8:	20001b7c 	.word	0x20001b7c

0000acbc <ull_adv_reset>:
{
    acbc:	b508      	push	{r3, lr}
		(void)disable(handle);
    acbe:	f7ff fd7b 	bl	a7b8 <disable.constprop.0>
}
    acc2:	2000      	movs	r0, #0
    acc4:	bd08      	pop	{r3, pc}
    acc6:	bf00      	nop

0000acc8 <ull_adv_reset_finalize>:
{
    acc8:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
    acca:	4c09      	ldr	r4, [pc, #36]	; (acf0 <ull_adv_reset_finalize+0x28>)
		lll_adv_data_reset(&lll->scan_rsp);
    accc:	f104 050c 	add.w	r5, r4, #12
		lll_adv_data_reset(&lll->adv_data);
    acd0:	4620      	mov	r0, r4
    acd2:	f006 fae9 	bl	112a8 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
    acd6:	4628      	mov	r0, r5
    acd8:	f006 fae6 	bl	112a8 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    acdc:	4620      	mov	r0, r4
    acde:	f006 fad3 	bl	11288 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    ace2:	4628      	mov	r0, r5
    ace4:	f006 fad0 	bl	11288 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    ace8:	f7ff fd02 	bl	a6f0 <init_set.constprop.0>
}
    acec:	2000      	movs	r0, #0
    acee:	bd38      	pop	{r3, r4, r5, pc}
    acf0:	20001b7c 	.word	0x20001b7c

0000acf4 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    acf4:	4a04      	ldr	r2, [pc, #16]	; (ad08 <ull_adv_handle_get+0x14>)
    acf6:	4b05      	ldr	r3, [pc, #20]	; (ad0c <ull_adv_handle_get+0x18>)
    acf8:	1a80      	subs	r0, r0, r2
    acfa:	0880      	lsrs	r0, r0, #2
    acfc:	fba3 3000 	umull	r3, r0, r3, r0
}
    ad00:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    ad04:	4770      	bx	lr
    ad06:	bf00      	nop
    ad08:	20001b54 	.word	0x20001b54
    ad0c:	4bda12f7 	.word	0x4bda12f7

0000ad10 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    ad10:	4a04      	ldr	r2, [pc, #16]	; (ad24 <ull_adv_lll_handle_get+0x14>)
    ad12:	6800      	ldr	r0, [r0, #0]
    ad14:	4b04      	ldr	r3, [pc, #16]	; (ad28 <ull_adv_lll_handle_get+0x18>)
    ad16:	1a80      	subs	r0, r0, r2
    ad18:	0880      	lsrs	r0, r0, #2
    ad1a:	fba3 3000 	umull	r3, r0, r3, r0
}
    ad1e:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    ad22:	4770      	bx	lr
    ad24:	20001b54 	.word	0x20001b54
    ad28:	4bda12f7 	.word	0x4bda12f7

0000ad2c <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
    ad2c:	b928      	cbnz	r0, ad3a <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
    ad2e:	4b04      	ldr	r3, [pc, #16]	; (ad40 <ull_adv_is_enabled+0x14>)
    ad30:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
    ad34:	f000 0001 	and.w	r0, r0, #1
    ad38:	4770      	bx	lr
    ad3a:	2000      	movs	r0, #0
}
    ad3c:	4770      	bx	lr
    ad3e:	bf00      	nop
    ad40:	20001b54 	.word	0x20001b54

0000ad44 <ull_adv_data_set>:
	if (len > PDU_AC_LEG_DATA_SIZE_MAX) {
    ad44:	291f      	cmp	r1, #31
    ad46:	d857      	bhi.n	adf8 <ull_adv_data_set+0xb4>
{
    ad48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    ad4c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    ad50:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ad54:	b082      	sub	sp, #8
    ad56:	6adf      	ldr	r7, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    ad58:	783b      	ldrb	r3, [r7, #0]
    ad5a:	f003 030f 	and.w	r3, r3, #15
    ad5e:	2b01      	cmp	r3, #1
    ad60:	460e      	mov	r6, r1
    ad62:	4605      	mov	r5, r0
    ad64:	4690      	mov	r8, r2
    ad66:	d049      	beq.n	adfc <ull_adv_data_set+0xb8>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
    ad68:	f10d 0107 	add.w	r1, sp, #7
    ad6c:	3028      	adds	r0, #40	; 0x28
    ad6e:	f006 fb0d 	bl	1138c <lll_adv_pdu_alloc>
	pdu->type = prev->type;
    ad72:	783a      	ldrb	r2, [r7, #0]
    ad74:	7803      	ldrb	r3, [r0, #0]
    ad76:	f002 020f 	and.w	r2, r2, #15
    ad7a:	f023 031f 	bic.w	r3, r3, #31
    ad7e:	4313      	orrs	r3, r2
    ad80:	7003      	strb	r3, [r0, #0]
		pdu->chan_sel = prev->chan_sel;
    ad82:	783b      	ldrb	r3, [r7, #0]
    ad84:	7802      	ldrb	r2, [r0, #0]
    ad86:	f3c3 1340 	ubfx	r3, r3, #5, #1
    ad8a:	f363 1245 	bfi	r2, r3, #5, #1
    ad8e:	7002      	strb	r2, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
    ad90:	783b      	ldrb	r3, [r7, #0]
    ad92:	b2d2      	uxtb	r2, r2
    ad94:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->rx_addr = prev->rx_addr;
    ad98:	4639      	mov	r1, r7
	pdu->tx_addr = prev->tx_addr;
    ad9a:	f363 1286 	bfi	r2, r3, #6, #1
    ad9e:	7002      	strb	r2, [r0, #0]
	pdu->rx_addr = prev->rx_addr;
    ada0:	f811 3b02 	ldrb.w	r3, [r1], #2
    ada4:	b2d2      	uxtb	r2, r2
    ada6:	09db      	lsrs	r3, r3, #7
    ada8:	f363 12c7 	bfi	r2, r3, #7, #1
    adac:	4604      	mov	r4, r0
    adae:	f800 2b02 	strb.w	r2, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    adb2:	2206      	movs	r2, #6
    adb4:	f00c fe22 	bl	179fc <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    adb8:	4632      	mov	r2, r6
    adba:	4641      	mov	r1, r8
    adbc:	f104 0008 	add.w	r0, r4, #8
	pdu->len = BDADDR_SIZE + len;
    adc0:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    adc2:	f00c fe1b 	bl	179fc <memcpy>
	pdu->len = BDADDR_SIZE + len;
    adc6:	7066      	strb	r6, [r4, #1]
	if (adv->is_enabled) {
    adc8:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
    adcc:	07db      	lsls	r3, r3, #31
    adce:	d407      	bmi.n	ade0 <ull_adv_data_set+0x9c>
	pdu->last = idx;
    add0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    add4:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
		return 0;
    add8:	2000      	movs	r0, #0
}
    adda:	b002      	add	sp, #8
    addc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    ade0:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    ade4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
    ade8:	4621      	mov	r1, r4
    adea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    adec:	4628      	mov	r0, r5
    adee:	f7f5 fcdb 	bl	7a8 <ull_adv_time_update>
		if (err) {
    adf2:	2800      	cmp	r0, #0
    adf4:	d0ec      	beq.n	add0 <ull_adv_data_set+0x8c>
    adf6:	e7f0      	b.n	adda <ull_adv_data_set+0x96>
		return BT_HCI_ERR_INVALID_PARAM;
    adf8:	2012      	movs	r0, #18
}
    adfa:	4770      	bx	lr
		adv->ad_data_backup.len = len;
    adfc:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
    ae00:	460a      	mov	r2, r1
    ae02:	3041      	adds	r0, #65	; 0x41
    ae04:	4641      	mov	r1, r8
    ae06:	f00c fdf9 	bl	179fc <memcpy>
		return 0;
    ae0a:	e7e5      	b.n	add8 <ull_adv_data_set+0x94>

0000ae0c <ll_adv_data_set>:
{
    ae0c:	4603      	mov	r3, r0
    ae0e:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
    ae10:	4801      	ldr	r0, [pc, #4]	; (ae18 <ll_adv_data_set+0xc>)
    ae12:	4619      	mov	r1, r3
    ae14:	f7ff bf96 	b.w	ad44 <ull_adv_data_set>
    ae18:	20001b54 	.word	0x20001b54

0000ae1c <ull_scan_rsp_set>:
	if (len > PDU_AC_LEG_DATA_SIZE_MAX) {
    ae1c:	291f      	cmp	r1, #31
    ae1e:	d860      	bhi.n	aee2 <ull_scan_rsp_set+0xc6>
{
    ae20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae24:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    ae28:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ae2c:	b082      	sub	sp, #8
    ae2e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
	if (!prev) {
    ae30:	460f      	mov	r7, r1
    ae32:	4604      	mov	r4, r0
    ae34:	4690      	mov	r8, r2
		err = lll_adv_data_init(&adv->lll.scan_rsp);
    ae36:	f100 0534 	add.w	r5, r0, #52	; 0x34
	if (!prev) {
    ae3a:	2e00      	cmp	r6, #0
    ae3c:	d041      	beq.n	aec2 <ull_scan_rsp_set+0xa6>
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
    ae3e:	4628      	mov	r0, r5
    ae40:	f10d 0107 	add.w	r1, sp, #7
    ae44:	f006 faa2 	bl	1138c <lll_adv_pdu_alloc>
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ae48:	7803      	ldrb	r3, [r0, #0]
    ae4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	pdu->tx_addr = prev->tx_addr;
    ae4e:	4631      	mov	r1, r6
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ae50:	f043 0304 	orr.w	r3, r3, #4
    ae54:	7003      	strb	r3, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
    ae56:	f811 2b02 	ldrb.w	r2, [r1], #2
    ae5a:	b2db      	uxtb	r3, r3
    ae5c:	f3c2 1280 	ubfx	r2, r2, #6, #1
    ae60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ae64:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    ae68:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
    ae6a:	1dbb      	adds	r3, r7, #6
    ae6c:	7043      	strb	r3, [r0, #1]
    ae6e:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    ae70:	2206      	movs	r2, #6
    ae72:	3002      	adds	r0, #2
    ae74:	f00c fdc2 	bl	179fc <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    ae78:	463a      	mov	r2, r7
    ae7a:	4641      	mov	r1, r8
    ae7c:	f105 0008 	add.w	r0, r5, #8
    ae80:	f00c fdbc 	bl	179fc <memcpy>
	if (adv->is_enabled) {
    ae84:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    ae88:	07da      	lsls	r2, r3, #31
    ae8a:	d407      	bmi.n	ae9c <ull_scan_rsp_set+0x80>
	pdu->last = idx;
    ae8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae90:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
    ae94:	2000      	movs	r0, #0
}
    ae96:	b002      	add	sp, #8
    ae98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    ae9c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    aea0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
    aea4:	2341      	movs	r3, #65	; 0x41
    aea6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    aea8:	780a      	ldrb	r2, [r1, #0]
    aeaa:	f002 020f 	and.w	r2, r2, #15
    aeae:	40d3      	lsrs	r3, r2
    aeb0:	07db      	lsls	r3, r3, #31
    aeb2:	d5eb      	bpl.n	ae8c <ull_scan_rsp_set+0x70>
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
    aeb4:	462a      	mov	r2, r5
    aeb6:	4620      	mov	r0, r4
    aeb8:	f7f5 fc76 	bl	7a8 <ull_adv_time_update>
			if (err) {
    aebc:	2800      	cmp	r0, #0
    aebe:	d0e5      	beq.n	ae8c <ull_scan_rsp_set+0x70>
    aec0:	e7e9      	b.n	ae96 <ull_scan_rsp_set+0x7a>
		err = lll_adv_data_init(&adv->lll.scan_rsp);
    aec2:	4628      	mov	r0, r5
    aec4:	f006 f9e0 	bl	11288 <lll_adv_data_init>
		if (err) {
    aec8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    aecc:	d1e3      	bne.n	ae96 <ull_scan_rsp_set+0x7a>
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    aece:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    aed2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    aed6:	6b9e      	ldr	r6, [r3, #56]	; 0x38
	pdu->type = pdu_type;
    aed8:	2304      	movs	r3, #4
    aeda:	7033      	strb	r3, [r6, #0]
	pdu->len = BDADDR_SIZE;
    aedc:	2306      	movs	r3, #6
    aede:	7073      	strb	r3, [r6, #1]
}
    aee0:	e7ad      	b.n	ae3e <ull_scan_rsp_set+0x22>
		return BT_HCI_ERR_INVALID_PARAM;
    aee2:	2012      	movs	r0, #18
}
    aee4:	4770      	bx	lr
    aee6:	bf00      	nop

0000aee8 <ll_adv_scan_rsp_set>:
{
    aee8:	4603      	mov	r3, r0
    aeea:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
    aeec:	4801      	ldr	r0, [pc, #4]	; (aef4 <ll_adv_scan_rsp_set+0xc>)
    aeee:	4619      	mov	r1, r3
    aef0:	f7ff bf94 	b.w	ae1c <ull_scan_rsp_set>
    aef4:	20001b54 	.word	0x20001b54

0000aef8 <init_reset>:
{
    aef8:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    aefa:	4b13      	ldr	r3, [pc, #76]	; (af48 <init_reset+0x50>)
    aefc:	4813      	ldr	r0, [pc, #76]	; (af4c <init_reset+0x54>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    aefe:	4c14      	ldr	r4, [pc, #80]	; (af50 <init_reset+0x58>)
	mem_init(conn_pool, sizeof(struct ll_conn),
    af00:	2201      	movs	r2, #1
    af02:	f44f 71cc 	mov.w	r1, #408	; 0x198
    af06:	f7fb fad9 	bl	64bc <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONN_DATA_BUFFERS,
    af0a:	4b12      	ldr	r3, [pc, #72]	; (af54 <init_reset+0x5c>)
    af0c:	2203      	movs	r2, #3
    af0e:	1d18      	adds	r0, r3, #4
    af10:	2124      	movs	r1, #36	; 0x24
    af12:	f7fb fad3 	bl	64bc <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    af16:	4b10      	ldr	r3, [pc, #64]	; (af58 <init_reset+0x60>)
    af18:	2207      	movs	r2, #7
    af1a:	1d18      	adds	r0, r3, #4
    af1c:	2108      	movs	r1, #8
    af1e:	f7fb facd 	bl	64bc <mem_init>
	ull_cp_init();
    af22:	f002 faa5 	bl	d470 <ull_cp_init>
	}
}

static inline void cpr_active_reset(void)
{
	conn_upd_curr = NULL;
    af26:	4a0d      	ldr	r2, [pc, #52]	; (af5c <init_reset+0x64>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    af28:	4b0d      	ldr	r3, [pc, #52]	; (af60 <init_reset+0x68>)
	default_phy_tx |= PHY_2M;
    af2a:	490e      	ldr	r1, [pc, #56]	; (af64 <init_reset+0x6c>)
    af2c:	2000      	movs	r0, #0
    af2e:	6010      	str	r0, [r2, #0]
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    af30:	221b      	movs	r2, #27
    af32:	801a      	strh	r2, [r3, #0]
	default_phy_rx |= PHY_2M;
    af34:	4a0c      	ldr	r2, [pc, #48]	; (af68 <init_reset+0x70>)
	default_phy_tx |= PHY_2M;
    af36:	2303      	movs	r3, #3
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    af38:	f44f 7ca4 	mov.w	ip, #328	; 0x148
    af3c:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
    af40:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
    af42:	7013      	strb	r3, [r2, #0]
}
    af44:	bd10      	pop	{r4, pc}
    af46:	bf00      	nop
    af48:	20001be0 	.word	0x20001be0
    af4c:	20000e58 	.word	0x20000e58
    af50:	2000261e 	.word	0x2000261e
    af54:	20001c20 	.word	0x20001c20
    af58:	20001be4 	.word	0x20001be4
    af5c:	20001c90 	.word	0x20001c90
    af60:	20002620 	.word	0x20002620
    af64:	20002633 	.word	0x20002633
    af68:	20002632 	.word	0x20002632

0000af6c <tx_lll_flush>:
{
    af6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
    af70:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    af74:	4933      	ldr	r1, [pc, #204]	; (b044 <tx_lll_flush+0xd8>)
{
    af76:	b083      	sub	sp, #12
    af78:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    af7a:	f44f 72cc 	mov.w	r2, #408	; 0x198
    af7e:	4640      	mov	r0, r8
    af80:	f7fb fb04 	bl	658c <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    af84:	f105 065c 	add.w	r6, r5, #92	; 0x5c
	lll_conn_flush(handle, lll);
    af88:	4629      	mov	r1, r5
    af8a:	f006 fd77 	bl	11a7c <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    af8e:	6e28      	ldr	r0, [r5, #96]	; 0x60
    af90:	aa01      	add	r2, sp, #4
    af92:	4631      	mov	r1, r6
    af94:	f7fb fb3a 	bl	660c <memq_dequeue>
	while (link) {
    af98:	b328      	cbz	r0, afe6 <tx_lll_flush+0x7a>
    af9a:	4c2b      	ldr	r4, [pc, #172]	; (b048 <tx_lll_flush+0xdc>)
		tx_buf->handle = LLL_HANDLE_INVALID;
    af9c:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    afa0:	f104 0908 	add.w	r9, r4, #8
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&tx_buf);
    afa4:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
    afa6:	f894 c002 	ldrb.w	ip, [r4, #2]
    afaa:	7921      	ldrb	r1, [r4, #4]
	last = last + 1;
    afac:	1c53      	adds	r3, r2, #1
    afae:	b2db      	uxtb	r3, r3
		last = 0U;
    afb0:	459c      	cmp	ip, r3
    afb2:	bf08      	it	eq
    afb4:	2300      	moveq	r3, #0
	if (last == first) {
    afb6:	4299      	cmp	r1, r3
    afb8:	f894 c000 	ldrb.w	ip, [r4]
    afbc:	d031      	beq.n	b022 <tx_lll_flush+0xb6>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    afbe:	fb12 f20c 	smulbb	r2, r2, ip
    afc2:	eb02 0109 	add.w	r1, r2, r9
		tx_buf->handle = LLL_HANDLE_INVALID;
    afc6:	f829 7002 	strh.w	r7, [r9, r2]
		tx_buf->node = tx;
    afca:	9a01      	ldr	r2, [sp, #4]
    afcc:	604a      	str	r2, [r1, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    afce:	6812      	ldr	r2, [r2, #0]
    afd0:	6002      	str	r2, [r0, #0]
		tx->next = link;
    afd2:	9a01      	ldr	r2, [sp, #4]
    afd4:	6010      	str	r0, [r2, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    afd6:	6e28      	ldr	r0, [r5, #96]	; 0x60
	*last = idx; /* Commit: Update write index */
    afd8:	7163      	strb	r3, [r4, #5]
    afda:	aa01      	add	r2, sp, #4
    afdc:	4631      	mov	r1, r6
    afde:	f7fb fb15 	bl	660c <memq_dequeue>
	while (link) {
    afe2:	2800      	cmp	r0, #0
    afe4:	d1de      	bne.n	afa4 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
    afe6:	f8d8 014c 	ldr.w	r0, [r8, #332]	; 0x14c
	rx = (void *)&conn->llcp_terminate.node_rx;
    afea:	f508 74a6 	add.w	r4, r8, #332	; 0x14c
	LL_ASSERT(rx->hdr.link);
    afee:	b140      	cbz	r0, b002 <tx_lll_flush+0x96>
	rx->hdr.link = NULL;
    aff0:	2300      	movs	r3, #0
    aff2:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
	ull_rx_put_sched(link, rx);
    aff6:	4621      	mov	r1, r4
    aff8:	f7fd fd32 	bl	8a60 <ull_rx_put_sched>
}
    affc:	b003      	add	sp, #12
    affe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
    b002:	4a12      	ldr	r2, [pc, #72]	; (b04c <tx_lll_flush+0xe0>)
    b004:	4912      	ldr	r1, [pc, #72]	; (b050 <tx_lll_flush+0xe4>)
    b006:	4813      	ldr	r0, [pc, #76]	; (b054 <tx_lll_flush+0xe8>)
    b008:	f240 7374 	movw	r3, #1908	; 0x774
    b00c:	f00c fa69 	bl	174e2 <assert_print>
    b010:	4040      	eors	r0, r0
    b012:	f380 8811 	msr	BASEPRI, r0
    b016:	f04f 0003 	mov.w	r0, #3
    b01a:	df02      	svc	2
	link = rx->hdr.link;
    b01c:	f8d8 014c 	ldr.w	r0, [r8, #332]	; 0x14c
    b020:	e7e6      	b.n	aff0 <tx_lll_flush+0x84>
		LL_ASSERT(tx_buf);
    b022:	4a0a      	ldr	r2, [pc, #40]	; (b04c <tx_lll_flush+0xe0>)
    b024:	490c      	ldr	r1, [pc, #48]	; (b058 <tx_lll_flush+0xec>)
    b026:	480b      	ldr	r0, [pc, #44]	; (b054 <tx_lll_flush+0xe8>)
    b028:	f44f 63ec 	mov.w	r3, #1888	; 0x760
    b02c:	f00c fa59 	bl	174e2 <assert_print>
    b030:	4040      	eors	r0, r0
    b032:	f380 8811 	msr	BASEPRI, r0
    b036:	f04f 0003 	mov.w	r0, #3
    b03a:	df02      	svc	2
		tx_buf->handle = LLL_HANDLE_INVALID;
    b03c:	2300      	movs	r3, #0
    b03e:	801b      	strh	r3, [r3, #0]
    b040:	deff      	udf	#255	; 0xff
    b042:	bf00      	nop
    b044:	20000e58 	.word	0x20000e58
    b048:	20000584 	.word	0x20000584
    b04c:	0001bd60 	.word	0x0001bd60
    b050:	0001bda8 	.word	0x0001bda8
    b054:	0001b844 	.word	0x0001b844
    b058:	0001bda0 	.word	0x0001bda0

0000b05c <ticker_stop_op_cb>:
{
    b05c:	b510      	push	{r4, lr}
    b05e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b060:	b9b0      	cbnz	r0, b090 <ticker_stop_op_cb+0x34>
	mfy.param = param;
    b062:	4b12      	ldr	r3, [pc, #72]	; (b0ac <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    b064:	2200      	movs	r2, #0
    b066:	2101      	movs	r1, #1
    b068:	2002      	movs	r0, #2
	mfy.param = param;
    b06a:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    b06c:	f7fb fb32 	bl	66d4 <mayfly_enqueue>
	LL_ASSERT(!ret);
    b070:	b900      	cbnz	r0, b074 <ticker_stop_op_cb+0x18>
}
    b072:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    b074:	4a0e      	ldr	r2, [pc, #56]	; (b0b0 <ticker_stop_op_cb+0x54>)
    b076:	490f      	ldr	r1, [pc, #60]	; (b0b4 <ticker_stop_op_cb+0x58>)
    b078:	480f      	ldr	r0, [pc, #60]	; (b0b8 <ticker_stop_op_cb+0x5c>)
    b07a:	f240 731a 	movw	r3, #1818	; 0x71a
    b07e:	f00c fa30 	bl	174e2 <assert_print>
    b082:	4040      	eors	r0, r0
    b084:	f380 8811 	msr	BASEPRI, r0
    b088:	f04f 0003 	mov.w	r0, #3
    b08c:	df02      	svc	2
}
    b08e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b090:	4a07      	ldr	r2, [pc, #28]	; (b0b0 <ticker_stop_op_cb+0x54>)
    b092:	490a      	ldr	r1, [pc, #40]	; (b0bc <ticker_stop_op_cb+0x60>)
    b094:	4808      	ldr	r0, [pc, #32]	; (b0b8 <ticker_stop_op_cb+0x5c>)
    b096:	f240 7314 	movw	r3, #1812	; 0x714
    b09a:	f00c fa22 	bl	174e2 <assert_print>
    b09e:	4040      	eors	r0, r0
    b0a0:	f380 8811 	msr	BASEPRI, r0
    b0a4:	f04f 0003 	mov.w	r0, #3
    b0a8:	df02      	svc	2
    b0aa:	e7da      	b.n	b062 <ticker_stop_op_cb+0x6>
    b0ac:	20000564 	.word	0x20000564
    b0b0:	0001bd60 	.word	0x0001bd60
    b0b4:	0001b9ec 	.word	0x0001b9ec
    b0b8:	0001b844 	.word	0x0001b844
    b0bc:	0001bdb8 	.word	0x0001bdb8

0000b0c0 <disabled_cb>:
{
    b0c0:	b508      	push	{r3, lr}
	mfy.param = param;
    b0c2:	4b0b      	ldr	r3, [pc, #44]	; (b0f0 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    b0c4:	2200      	movs	r2, #0
	mfy.param = param;
    b0c6:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    b0c8:	4611      	mov	r1, r2
    b0ca:	2001      	movs	r0, #1
    b0cc:	f7fb fb02 	bl	66d4 <mayfly_enqueue>
	LL_ASSERT(!ret);
    b0d0:	b900      	cbnz	r0, b0d4 <disabled_cb+0x14>
}
    b0d2:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
    b0d4:	4a07      	ldr	r2, [pc, #28]	; (b0f4 <disabled_cb+0x34>)
    b0d6:	4908      	ldr	r1, [pc, #32]	; (b0f8 <disabled_cb+0x38>)
    b0d8:	4808      	ldr	r0, [pc, #32]	; (b0fc <disabled_cb+0x3c>)
    b0da:	f240 7346 	movw	r3, #1862	; 0x746
    b0de:	f00c fa00 	bl	174e2 <assert_print>
    b0e2:	4040      	eors	r0, r0
    b0e4:	f380 8811 	msr	BASEPRI, r0
    b0e8:	f04f 0003 	mov.w	r0, #3
    b0ec:	df02      	svc	2
}
    b0ee:	bd08      	pop	{r3, pc}
    b0f0:	20000544 	.word	0x20000544
    b0f4:	0001bd60 	.word	0x0001bd60
    b0f8:	0001b9ec 	.word	0x0001b9ec
    b0fc:	0001b844 	.word	0x0001b844

0000b100 <conn_disable>:
{
    b100:	b538      	push	{r3, r4, r5, lr}
    b102:	4604      	mov	r4, r0
	return hdr->ref;
    b104:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    b108:	b353      	cbz	r3, b160 <conn_disable+0x60>
		mfy.param = &conn->lll;
    b10a:	4d17      	ldr	r5, [pc, #92]	; (b168 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    b10c:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
    b10e:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    b110:	b16b      	cbz	r3, b12e <conn_disable+0x2e>
    b112:	4a16      	ldr	r2, [pc, #88]	; (b16c <conn_disable+0x6c>)
    b114:	4916      	ldr	r1, [pc, #88]	; (b170 <conn_disable+0x70>)
    b116:	4817      	ldr	r0, [pc, #92]	; (b174 <conn_disable+0x74>)
    b118:	f240 732f 	movw	r3, #1839	; 0x72f
    b11c:	f00c f9e1 	bl	174e2 <assert_print>
    b120:	4040      	eors	r0, r0
    b122:	f380 8811 	msr	BASEPRI, r0
    b126:	f04f 0003 	mov.w	r0, #3
    b12a:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    b12c:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    b12e:	4912      	ldr	r1, [pc, #72]	; (b178 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    b130:	4b0d      	ldr	r3, [pc, #52]	; (b168 <conn_disable+0x68>)
    b132:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    b134:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    b138:	4611      	mov	r1, r2
    b13a:	2001      	movs	r0, #1
    b13c:	f7fb faca 	bl	66d4 <mayfly_enqueue>
		LL_ASSERT(!ret);
    b140:	b900      	cbnz	r0, b144 <conn_disable+0x44>
}
    b142:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    b144:	4a09      	ldr	r2, [pc, #36]	; (b16c <conn_disable+0x6c>)
    b146:	490d      	ldr	r1, [pc, #52]	; (b17c <conn_disable+0x7c>)
    b148:	480a      	ldr	r0, [pc, #40]	; (b174 <conn_disable+0x74>)
    b14a:	f240 7336 	movw	r3, #1846	; 0x736
    b14e:	f00c f9c8 	bl	174e2 <assert_print>
    b152:	4040      	eors	r0, r0
    b154:	f380 8811 	msr	BASEPRI, r0
    b158:	f04f 0003 	mov.w	r0, #3
    b15c:	df02      	svc	2
}
    b15e:	bd38      	pop	{r3, r4, r5, pc}
    b160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
    b164:	f7ff bfac 	b.w	b0c0 <disabled_cb>
    b168:	20000554 	.word	0x20000554
    b16c:	0001bd60 	.word	0x0001bd60
    b170:	0001bc68 	.word	0x0001bc68
    b174:	0001b844 	.word	0x0001b844
    b178:	0000b0c1 	.word	0x0000b0c1
    b17c:	0001b9ec 	.word	0x0001b9ec

0000b180 <conn_setup_adv_scan_disabled_cb>:
{
    b180:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
    b182:	6883      	ldr	r3, [r0, #8]
    b184:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
    b186:	7f53      	ldrb	r3, [r2, #29]
    b188:	09db      	lsrs	r3, r3, #7
    b18a:	d10d      	bne.n	b1a8 <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
    b18c:	4a09      	ldr	r2, [pc, #36]	; (b1b4 <conn_setup_adv_scan_disabled_cb+0x34>)
    b18e:	490a      	ldr	r1, [pc, #40]	; (b1b8 <conn_setup_adv_scan_disabled_cb+0x38>)
    b190:	480a      	ldr	r0, [pc, #40]	; (b1bc <conn_setup_adv_scan_disabled_cb+0x3c>)
    b192:	f240 638c 	movw	r3, #1676	; 0x68c
    b196:	f00c f9a4 	bl	174e2 <assert_print>
    b19a:	4040      	eors	r0, r0
    b19c:	f380 8811 	msr	BASEPRI, r0
    b1a0:	f04f 0003 	mov.w	r0, #3
    b1a4:	df02      	svc	2
}
    b1a6:	bd08      	pop	{r3, pc}
		ull_periph_setup(rx, ftr, lll);
    b1a8:	4601      	mov	r1, r0
}
    b1aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
    b1ae:	3108      	adds	r1, #8
    b1b0:	f7f5 bec2 	b.w	f38 <ull_periph_setup>
    b1b4:	0001bd60 	.word	0x0001bd60
    b1b8:	0001b908 	.word	0x0001b908
    b1bc:	0001b844 	.word	0x0001b844

0000b1c0 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    b1c0:	b900      	cbnz	r0, b1c4 <ticker_update_conn_op_cb+0x4>
    b1c2:	4770      	bx	lr
{
    b1c4:	b510      	push	{r4, lr}
    b1c6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    b1c8:	f7fd fb74 	bl	88b4 <ull_update_mark_get>
    b1cc:	4284      	cmp	r4, r0
    b1ce:	d010      	beq.n	b1f2 <ticker_update_conn_op_cb+0x32>
    b1d0:	f7fd fb52 	bl	8878 <ull_disable_mark_get>
    b1d4:	4284      	cmp	r4, r0
    b1d6:	d00c      	beq.n	b1f2 <ticker_update_conn_op_cb+0x32>
    b1d8:	4a06      	ldr	r2, [pc, #24]	; (b1f4 <ticker_update_conn_op_cb+0x34>)
    b1da:	4907      	ldr	r1, [pc, #28]	; (b1f8 <ticker_update_conn_op_cb+0x38>)
    b1dc:	4807      	ldr	r0, [pc, #28]	; (b1fc <ticker_update_conn_op_cb+0x3c>)
    b1de:	f240 634f 	movw	r3, #1615	; 0x64f
    b1e2:	f00c f97e 	bl	174e2 <assert_print>
    b1e6:	4040      	eors	r0, r0
    b1e8:	f380 8811 	msr	BASEPRI, r0
    b1ec:	f04f 0003 	mov.w	r0, #3
    b1f0:	df02      	svc	2
}
    b1f2:	bd10      	pop	{r4, pc}
    b1f4:	0001bd60 	.word	0x0001bd60
    b1f8:	0001bdc4 	.word	0x0001bdc4
    b1fc:	0001b844 	.word	0x0001b844

0000b200 <ticker_start_conn_op_cb>:
{
    b200:	b510      	push	{r4, lr}
    b202:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b204:	b990      	cbnz	r0, b22c <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
    b206:	4620      	mov	r0, r4
    b208:	f7fd fb48 	bl	889c <ull_update_unmark>
	LL_ASSERT(p == param);
    b20c:	4284      	cmp	r4, r0
    b20e:	d00c      	beq.n	b22a <ticker_start_conn_op_cb+0x2a>
    b210:	4a0d      	ldr	r2, [pc, #52]	; (b248 <ticker_start_conn_op_cb+0x48>)
    b212:	490e      	ldr	r1, [pc, #56]	; (b24c <ticker_start_conn_op_cb+0x4c>)
    b214:	480e      	ldr	r0, [pc, #56]	; (b250 <ticker_start_conn_op_cb+0x50>)
    b216:	f240 6365 	movw	r3, #1637	; 0x665
    b21a:	f00c f962 	bl	174e2 <assert_print>
    b21e:	4040      	eors	r0, r0
    b220:	f380 8811 	msr	BASEPRI, r0
    b224:	f04f 0003 	mov.w	r0, #3
    b228:	df02      	svc	2
}
    b22a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b22c:	4a06      	ldr	r2, [pc, #24]	; (b248 <ticker_start_conn_op_cb+0x48>)
    b22e:	4909      	ldr	r1, [pc, #36]	; (b254 <ticker_start_conn_op_cb+0x54>)
    b230:	4807      	ldr	r0, [pc, #28]	; (b250 <ticker_start_conn_op_cb+0x50>)
    b232:	f240 6362 	movw	r3, #1634	; 0x662
    b236:	f00c f954 	bl	174e2 <assert_print>
    b23a:	4040      	eors	r0, r0
    b23c:	f380 8811 	msr	BASEPRI, r0
    b240:	f04f 0003 	mov.w	r0, #3
    b244:	df02      	svc	2
    b246:	e7de      	b.n	b206 <ticker_start_conn_op_cb+0x6>
    b248:	0001bd60 	.word	0x0001bd60
    b24c:	0001be18 	.word	0x0001be18
    b250:	0001b844 	.word	0x0001b844
    b254:	0001bdb8 	.word	0x0001bdb8

0000b258 <ticker_stop_conn_op_cb>:
{
    b258:	b510      	push	{r4, lr}
    b25a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b25c:	b990      	cbnz	r0, b284 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
    b25e:	4620      	mov	r0, r4
    b260:	f7fd fb10 	bl	8884 <ull_update_mark>
	LL_ASSERT(p == param);
    b264:	4284      	cmp	r4, r0
    b266:	d00c      	beq.n	b282 <ticker_stop_conn_op_cb+0x2a>
    b268:	4a0d      	ldr	r2, [pc, #52]	; (b2a0 <ticker_stop_conn_op_cb+0x48>)
    b26a:	490e      	ldr	r1, [pc, #56]	; (b2a4 <ticker_stop_conn_op_cb+0x4c>)
    b26c:	480e      	ldr	r0, [pc, #56]	; (b2a8 <ticker_stop_conn_op_cb+0x50>)
    b26e:	f240 635b 	movw	r3, #1627	; 0x65b
    b272:	f00c f936 	bl	174e2 <assert_print>
    b276:	4040      	eors	r0, r0
    b278:	f380 8811 	msr	BASEPRI, r0
    b27c:	f04f 0003 	mov.w	r0, #3
    b280:	df02      	svc	2
}
    b282:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b284:	4a06      	ldr	r2, [pc, #24]	; (b2a0 <ticker_stop_conn_op_cb+0x48>)
    b286:	4909      	ldr	r1, [pc, #36]	; (b2ac <ticker_stop_conn_op_cb+0x54>)
    b288:	4807      	ldr	r0, [pc, #28]	; (b2a8 <ticker_stop_conn_op_cb+0x50>)
    b28a:	f44f 63cb 	mov.w	r3, #1624	; 0x658
    b28e:	f00c f928 	bl	174e2 <assert_print>
    b292:	4040      	eors	r0, r0
    b294:	f380 8811 	msr	BASEPRI, r0
    b298:	f04f 0003 	mov.w	r0, #3
    b29c:	df02      	svc	2
    b29e:	e7de      	b.n	b25e <ticker_stop_conn_op_cb+0x6>
    b2a0:	0001bd60 	.word	0x0001bd60
    b2a4:	0001be18 	.word	0x0001be18
    b2a8:	0001b844 	.word	0x0001b844
    b2ac:	0001bdb8 	.word	0x0001bdb8

0000b2b0 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
    b2b0:	4801      	ldr	r0, [pc, #4]	; (b2b8 <ll_conn_acquire+0x8>)
    b2b2:	f7fb b933 	b.w	651c <mem_acquire>
    b2b6:	bf00      	nop
    b2b8:	20001be0 	.word	0x20001be0

0000b2bc <ll_conn_release>:
	mem_release(conn, &conn_free);
    b2bc:	4901      	ldr	r1, [pc, #4]	; (b2c4 <ll_conn_release+0x8>)
    b2be:	f7fb b949 	b.w	6554 <mem_release>
    b2c2:	bf00      	nop
    b2c4:	20001be0 	.word	0x20001be0

0000b2c8 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    b2c8:	4902      	ldr	r1, [pc, #8]	; (b2d4 <ll_conn_handle_get+0xc>)
    b2ca:	f44f 72cc 	mov.w	r2, #408	; 0x198
    b2ce:	f7fb b95d 	b.w	658c <mem_index_get>
    b2d2:	bf00      	nop
    b2d4:	20000e58 	.word	0x20000e58

0000b2d8 <ll_conn_get>:
{
    b2d8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b2da:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b2de:	4801      	ldr	r0, [pc, #4]	; (b2e4 <ll_conn_get+0xc>)
    b2e0:	f7fb b950 	b.w	6584 <mem_get>
    b2e4:	20000e58 	.word	0x20000e58

0000b2e8 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b2e8:	b958      	cbnz	r0, b302 <ll_connected_get+0x1a>
{
    b2ea:	b508      	push	{r3, lr}
    b2ec:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b2ee:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b2f2:	4805      	ldr	r0, [pc, #20]	; (b308 <ll_connected_get+0x20>)
    b2f4:	f7fb f946 	bl	6584 <mem_get>
	if (conn->lll.handle != handle) {
    b2f8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    b2fa:	b903      	cbnz	r3, b2fe <ll_connected_get+0x16>
}
    b2fc:	bd08      	pop	{r3, pc}
		return NULL;
    b2fe:	2000      	movs	r0, #0
}
    b300:	bd08      	pop	{r3, pc}
		return NULL;
    b302:	2000      	movs	r0, #0
}
    b304:	4770      	bx	lr
    b306:	bf00      	nop
    b308:	20000e58 	.word	0x20000e58

0000b30c <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
    b30c:	4801      	ldr	r0, [pc, #4]	; (b314 <ll_tx_mem_acquire+0x8>)
    b30e:	f7fb b905 	b.w	651c <mem_acquire>
    b312:	bf00      	nop
    b314:	20001c20 	.word	0x20001c20

0000b318 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
    b318:	4901      	ldr	r1, [pc, #4]	; (b320 <ll_tx_mem_release+0x8>)
    b31a:	f7fb b91b 	b.w	6554 <mem_release>
    b31e:	bf00      	nop
    b320:	20001c20 	.word	0x20001c20

0000b324 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b324:	2800      	cmp	r0, #0
    b326:	d13f      	bne.n	b3a8 <ll_tx_mem_enqueue+0x84>
{
    b328:	b570      	push	{r4, r5, r6, lr}
    b32a:	4602      	mov	r2, r0
    b32c:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b32e:	4820      	ldr	r0, [pc, #128]	; (b3b0 <ll_tx_mem_enqueue+0x8c>)
    b330:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b334:	f7fb f926 	bl	6584 <mem_get>
	if (conn->lll.handle != handle) {
    b338:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b33a:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    b33c:	b9fa      	cbnz	r2, b37e <ll_tx_mem_enqueue+0x5a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
    b33e:	4c1d      	ldr	r4, [pc, #116]	; (b3b4 <ll_tx_mem_enqueue+0x90>)
    b340:	f894 c005 	ldrb.w	ip, [r4, #5]
	if (last == count) {
    b344:	78a1      	ldrb	r1, [r4, #2]
    b346:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
    b348:	f10c 0301 	add.w	r3, ip, #1
    b34c:	b2db      	uxtb	r3, r3
		last = 0U;
    b34e:	4299      	cmp	r1, r3
    b350:	bf08      	it	eq
    b352:	2300      	moveq	r3, #0
    b354:	7921      	ldrb	r1, [r4, #4]
	if (last == first) {
    b356:	4299      	cmp	r1, r3
    b358:	d023      	beq.n	b3a2 <ll_tx_mem_enqueue+0x7e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    b35a:	fb1c fc00 	smulbb	ip, ip, r0
    b35e:	f104 0108 	add.w	r1, r4, #8
	lll_tx->handle = handle;
    b362:	f821 200c 	strh.w	r2, [r1, ip]
    b366:	448c      	add	ip, r1
	lll_tx->node = tx;
    b368:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
    b36c:	7163      	strb	r3, [r4, #5]
    b36e:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
    b370:	b943      	cbnz	r3, b384 <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b372:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    b376:	2b00      	cmp	r3, #0
    b378:	db0e      	blt.n	b398 <ll_tx_mem_enqueue+0x74>
	return 0;
    b37a:	2000      	movs	r0, #0
}
    b37c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    b37e:	f06f 0015 	mvn.w	r0, #21
}
    b382:	bd70      	pop	{r4, r5, r6, pc}
	mfy.param = conn;
    b384:	4b0c      	ldr	r3, [pc, #48]	; (b3b8 <ll_tx_mem_enqueue+0x94>)
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
    b386:	2101      	movs	r1, #1
    b388:	2003      	movs	r0, #3
	mfy.param = conn;
    b38a:	609d      	str	r5, [r3, #8]
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
    b38c:	f7fb f9a2 	bl	66d4 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b390:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    b394:	2b00      	cmp	r3, #0
    b396:	daf0      	bge.n	b37a <ll_tx_mem_enqueue+0x56>
		ull_periph_latency_cancel(conn, handle);
    b398:	2100      	movs	r1, #0
    b39a:	4628      	mov	r0, r5
    b39c:	f004 ff86 	bl	102ac <ull_periph_latency_cancel>
    b3a0:	e7eb      	b.n	b37a <ll_tx_mem_enqueue+0x56>
		return -ENOBUFS;
    b3a2:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    b3a6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    b3a8:	f06f 0015 	mvn.w	r0, #21
}
    b3ac:	4770      	bx	lr
    b3ae:	bf00      	nop
    b3b0:	20000e58 	.word	0x20000e58
    b3b4:	200005cc 	.word	0x200005cc
    b3b8:	20000574 	.word	0x20000574

0000b3bc <ll_conn_update>:
{
    b3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b3c0:	b082      	sub	sp, #8
    b3c2:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    b3c6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    b3ca:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	if (handle >= CONFIG_BT_MAX_CONN) {
    b3ce:	b9b0      	cbnz	r0, b3fe <ll_conn_update+0x42>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b3d0:	460c      	mov	r4, r1
    b3d2:	4615      	mov	r5, r2
    b3d4:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b3d8:	4602      	mov	r2, r0
    b3da:	4819      	ldr	r0, [pc, #100]	; (b440 <ll_conn_update+0x84>)
    b3dc:	461e      	mov	r6, r3
    b3de:	f7fb f8d1 	bl	6584 <mem_get>
	if (conn->lll.handle != handle) {
    b3e2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b3e4:	4682      	mov	sl, r0
	if (conn->lll.handle != handle) {
    b3e6:	b953      	cbnz	r3, b3fe <ll_conn_update+0x42>
	if (cmd == 0U) {
    b3e8:	b16c      	cbz	r4, b406 <ll_conn_update+0x4a>
	} else if (cmd == 2U) {
    b3ea:	2c02      	cmp	r4, #2
    b3ec:	d003      	beq.n	b3f6 <ll_conn_update+0x3a>
		return BT_HCI_ERR_UNKNOWN_CMD;
    b3ee:	2001      	movs	r0, #1
}
    b3f0:	b002      	add	sp, #8
    b3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (status == 0U) {
    b3f6:	b9cd      	cbnz	r5, b42c <ll_conn_update+0x70>
			ull_cp_conn_param_req_reply(conn);
    b3f8:	f002 fa4a 	bl	d890 <ull_cp_conn_param_req_reply>
    b3fc:	e012      	b.n	b424 <ll_conn_update+0x68>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b3fe:	2002      	movs	r0, #2
}
    b400:	b002      	add	sp, #8
    b402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		err = ull_cp_conn_update(conn, interval_min, interval_max, latency, timeout,
    b406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b408:	9301      	str	r3, [sp, #4]
    b40a:	f8cd 9000 	str.w	r9, [sp]
    b40e:	4643      	mov	r3, r8
    b410:	463a      	mov	r2, r7
    b412:	4631      	mov	r1, r6
    b414:	f002 f9bc 	bl	d790 <ull_cp_conn_update>
		if (err) {
    b418:	2800      	cmp	r0, #0
    b41a:	d1e9      	bne.n	b3f0 <ll_conn_update+0x34>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b41c:	f99a 3039 	ldrsb.w	r3, [sl, #57]	; 0x39
    b420:	2b00      	cmp	r3, #0
    b422:	db07      	blt.n	b434 <ll_conn_update+0x78>
		return BT_HCI_ERR_SUCCESS;
    b424:	2000      	movs	r0, #0
}
    b426:	b002      	add	sp, #8
    b428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ull_cp_conn_param_req_neg_reply(conn, status);
    b42c:	4629      	mov	r1, r5
    b42e:	f002 fa3f 	bl	d8b0 <ull_cp_conn_param_req_neg_reply>
    b432:	e7f7      	b.n	b424 <ll_conn_update+0x68>
			ull_periph_latency_cancel(conn, handle);
    b434:	4601      	mov	r1, r0
    b436:	4650      	mov	r0, sl
    b438:	f004 ff38 	bl	102ac <ull_periph_latency_cancel>
    b43c:	e7f2      	b.n	b424 <ll_conn_update+0x68>
    b43e:	bf00      	nop
    b440:	20000e58 	.word	0x20000e58

0000b444 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b444:	b9e0      	cbnz	r0, b480 <ll_chm_get+0x3c>
{
    b446:	b538      	push	{r3, r4, r5, lr}
    b448:	4602      	mov	r2, r0
    b44a:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b44c:	480d      	ldr	r0, [pc, #52]	; (b484 <ll_chm_get+0x40>)
    b44e:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b452:	f7fb f897 	bl	6584 <mem_get>
	if (conn->lll.handle != handle) {
    b456:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b458:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    b45a:	b94b      	cbnz	r3, b470 <ll_chm_get+0x2c>
	pending_chm = ull_cp_chan_map_update_pending(conn);
    b45c:	f002 f938 	bl	d6d0 <ull_cp_chan_map_update_pending>
		memcpy(chm, pending_chm, sizeof(conn->lll.data_chan_map));
    b460:	2205      	movs	r2, #5
	if (pending_chm) {
    b462:	4601      	mov	r1, r0
    b464:	b130      	cbz	r0, b474 <ll_chm_get+0x30>
		memcpy(chm, pending_chm, sizeof(conn->lll.data_chan_map));
    b466:	4620      	mov	r0, r4
    b468:	f00c fac8 	bl	179fc <memcpy>
	return 0;
    b46c:	2000      	movs	r0, #0
}
    b46e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b470:	2002      	movs	r0, #2
}
    b472:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(chm, conn->lll.data_chan_map, sizeof(conn->lll.data_chan_map));
    b474:	f105 0134 	add.w	r1, r5, #52	; 0x34
    b478:	4620      	mov	r0, r4
    b47a:	f00c fabf 	bl	179fc <memcpy>
    b47e:	e7f5      	b.n	b46c <ll_chm_get+0x28>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b480:	2002      	movs	r0, #2
}
    b482:	4770      	bx	lr
    b484:	20000e58 	.word	0x20000e58

0000b488 <ll_terminate_ind_send>:
{
    b488:	b538      	push	{r3, r4, r5, lr}
	if (IS_ACL_HANDLE(handle)) {
    b48a:	b110      	cbz	r0, b492 <ll_terminate_ind_send+0xa>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b48c:	2402      	movs	r4, #2
}
    b48e:	4620      	mov	r0, r4
    b490:	bd38      	pop	{r3, r4, r5, pc}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b492:	4602      	mov	r2, r0
    b494:	460c      	mov	r4, r1
    b496:	4815      	ldr	r0, [pc, #84]	; (b4ec <ll_terminate_ind_send+0x64>)
    b498:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b49c:	f7fb f872 	bl	6584 <mem_get>
	if (conn->lll.handle != handle) {
    b4a0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b4a2:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    b4a4:	b9fb      	cbnz	r3, b4e6 <ll_terminate_ind_send+0x5e>
	switch (reason) {
    b4a6:	2c1a      	cmp	r4, #26
    b4a8:	d804      	bhi.n	b4b4 <ll_terminate_ind_send+0x2c>
    b4aa:	2c04      	cmp	r4, #4
    b4ac:	d816      	bhi.n	b4dc <ll_terminate_ind_send+0x54>
    b4ae:	2412      	movs	r4, #18
}
    b4b0:	4620      	mov	r0, r4
    b4b2:	bd38      	pop	{r3, r4, r5, pc}
	switch (reason) {
    b4b4:	2c29      	cmp	r4, #41	; 0x29
    b4b6:	d001      	beq.n	b4bc <ll_terminate_ind_send+0x34>
    b4b8:	2c3b      	cmp	r4, #59	; 0x3b
    b4ba:	d1f8      	bne.n	b4ae <ll_terminate_ind_send+0x26>
		err = ull_cp_terminate(conn, reason);
    b4bc:	4621      	mov	r1, r4
    b4be:	4628      	mov	r0, r5
    b4c0:	f002 f8f4 	bl	d6ac <ull_cp_terminate>
		if (err) {
    b4c4:	4604      	mov	r4, r0
    b4c6:	2800      	cmp	r0, #0
    b4c8:	d1e1      	bne.n	b48e <ll_terminate_ind_send+0x6>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b4ca:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	dadd      	bge.n	b48e <ll_terminate_ind_send+0x6>
			ull_periph_latency_cancel(conn, handle);
    b4d2:	4601      	mov	r1, r0
    b4d4:	4628      	mov	r0, r5
    b4d6:	f004 fee9 	bl	102ac <ull_periph_latency_cancel>
    b4da:	e7d8      	b.n	b48e <ll_terminate_ind_send+0x6>
	switch (reason) {
    b4dc:	4b04      	ldr	r3, [pc, #16]	; (b4f0 <ll_terminate_ind_send+0x68>)
    b4de:	40e3      	lsrs	r3, r4
    b4e0:	07db      	lsls	r3, r3, #31
    b4e2:	d4eb      	bmi.n	b4bc <ll_terminate_ind_send+0x34>
    b4e4:	e7e3      	b.n	b4ae <ll_terminate_ind_send+0x26>
			return BT_HCI_ERR_CMD_DISALLOWED;
    b4e6:	240c      	movs	r4, #12
    b4e8:	e7d1      	b.n	b48e <ll_terminate_ind_send+0x6>
    b4ea:	bf00      	nop
    b4ec:	20000e58 	.word	0x20000e58
    b4f0:	04380020 	.word	0x04380020

0000b4f4 <ll_feature_req_send>:
{
    b4f4:	b538      	push	{r3, r4, r5, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
    b4f6:	b990      	cbnz	r0, b51e <ll_feature_req_send+0x2a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b4f8:	4602      	mov	r2, r0
    b4fa:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b4fe:	480c      	ldr	r0, [pc, #48]	; (b530 <ll_feature_req_send+0x3c>)
    b500:	f7fb f840 	bl	6584 <mem_get>
	if (conn->lll.handle != handle) {
    b504:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b506:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    b508:	b94b      	cbnz	r3, b51e <ll_feature_req_send+0x2a>
	err = ull_cp_feature_exchange(conn);
    b50a:	f002 f88f 	bl	d62c <ull_cp_feature_exchange>
	if (err) {
    b50e:	4604      	mov	r4, r0
    b510:	b918      	cbnz	r0, b51a <ll_feature_req_send+0x26>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b512:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    b516:	2b00      	cmp	r3, #0
    b518:	db04      	blt.n	b524 <ll_feature_req_send+0x30>
}
    b51a:	4620      	mov	r0, r4
    b51c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b51e:	2402      	movs	r4, #2
}
    b520:	4620      	mov	r0, r4
    b522:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
    b524:	4601      	mov	r1, r0
    b526:	4628      	mov	r0, r5
    b528:	f004 fec0 	bl	102ac <ull_periph_latency_cancel>
}
    b52c:	4620      	mov	r0, r4
    b52e:	bd38      	pop	{r3, r4, r5, pc}
    b530:	20000e58 	.word	0x20000e58

0000b534 <ll_version_ind_send>:
{
    b534:	b538      	push	{r3, r4, r5, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
    b536:	b990      	cbnz	r0, b55e <ll_version_ind_send+0x2a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b538:	4602      	mov	r2, r0
    b53a:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b53e:	480c      	ldr	r0, [pc, #48]	; (b570 <ll_version_ind_send+0x3c>)
    b540:	f7fb f820 	bl	6584 <mem_get>
	if (conn->lll.handle != handle) {
    b544:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b546:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    b548:	b94b      	cbnz	r3, b55e <ll_version_ind_send+0x2a>
	err = ull_cp_version_exchange(conn);
    b54a:	f002 f87d 	bl	d648 <ull_cp_version_exchange>
	if (err) {
    b54e:	4604      	mov	r4, r0
    b550:	b918      	cbnz	r0, b55a <ll_version_ind_send+0x26>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b552:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    b556:	2b00      	cmp	r3, #0
    b558:	db04      	blt.n	b564 <ll_version_ind_send+0x30>
}
    b55a:	4620      	mov	r0, r4
    b55c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b55e:	2402      	movs	r4, #2
}
    b560:	4620      	mov	r0, r4
    b562:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
    b564:	4601      	mov	r1, r0
    b566:	4628      	mov	r0, r5
    b568:	f004 fea0 	bl	102ac <ull_periph_latency_cancel>
}
    b56c:	4620      	mov	r0, r4
    b56e:	bd38      	pop	{r3, r4, r5, pc}
    b570:	20000e58 	.word	0x20000e58

0000b574 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b574:	b9f0      	cbnz	r0, b5b4 <ll_length_req_send+0x40>
{
    b576:	b570      	push	{r4, r5, r6, lr}
    b578:	460d      	mov	r5, r1
    b57a:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b57c:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b580:	4602      	mov	r2, r0
    b582:	4810      	ldr	r0, [pc, #64]	; (b5c4 <ll_length_req_send+0x50>)
    b584:	f7fa fffe 	bl	6584 <mem_get>
	if (conn->lll.handle != handle) {
    b588:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b58a:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    b58c:	b983      	cbnz	r3, b5b0 <ll_length_req_send+0x3c>
}

static inline bool feature_dle(struct ll_conn *conn)
{
#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_DLE) != 0;
    b58e:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
	if (!feature_dle(conn)) {
    b592:	069b      	lsls	r3, r3, #26
    b594:	d50a      	bpl.n	b5ac <ll_length_req_send+0x38>
	err = ull_cp_data_length_update(conn, tx_octets, tx_time);
    b596:	4632      	mov	r2, r6
    b598:	4629      	mov	r1, r5
    b59a:	f002 f8ab 	bl	d6f4 <ull_cp_data_length_update>
	if (err) {
    b59e:	b920      	cbnz	r0, b5aa <ll_length_req_send+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b5a0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    b5a4:	2b00      	cmp	r3, #0
    b5a6:	db07      	blt.n	b5b8 <ll_length_req_send+0x44>
	return 0;
    b5a8:	2000      	movs	r0, #0
}
    b5aa:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    b5ac:	201a      	movs	r0, #26
}
    b5ae:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b5b0:	2002      	movs	r0, #2
}
    b5b2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b5b4:	2002      	movs	r0, #2
}
    b5b6:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
    b5b8:	4601      	mov	r1, r0
    b5ba:	4620      	mov	r0, r4
    b5bc:	f004 fe76 	bl	102ac <ull_periph_latency_cancel>
    b5c0:	e7f2      	b.n	b5a8 <ll_length_req_send+0x34>
    b5c2:	bf00      	nop
    b5c4:	20000e58 	.word	0x20000e58

0000b5c8 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
    b5c8:	4a03      	ldr	r2, [pc, #12]	; (b5d8 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
    b5ca:	4b04      	ldr	r3, [pc, #16]	; (b5dc <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
    b5cc:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
    b5ce:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
    b5d0:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
    b5d2:	800b      	strh	r3, [r1, #0]
}
    b5d4:	4770      	bx	lr
    b5d6:	bf00      	nop
    b5d8:	20002620 	.word	0x20002620
    b5dc:	2000261e 	.word	0x2000261e

0000b5e0 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
    b5e0:	4a02      	ldr	r2, [pc, #8]	; (b5ec <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
    b5e2:	4b03      	ldr	r3, [pc, #12]	; (b5f0 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
    b5e4:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
    b5e6:	8019      	strh	r1, [r3, #0]
}
    b5e8:	2000      	movs	r0, #0
    b5ea:	4770      	bx	lr
    b5ec:	20002620 	.word	0x20002620
    b5f0:	2000261e 	.word	0x2000261e

0000b5f4 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
    b5f4:	f04f 0c1b 	mov.w	ip, #27
    b5f8:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    b5fc:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    b600:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    b604:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    b606:	8018      	strh	r0, [r3, #0]
}
    b608:	4770      	bx	lr
    b60a:	bf00      	nop

0000b60c <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b60c:	b9c0      	cbnz	r0, b640 <ll_phy_get+0x34>
{
    b60e:	b538      	push	{r3, r4, r5, lr}
    b610:	460d      	mov	r5, r1
    b612:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b614:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b618:	4602      	mov	r2, r0
    b61a:	480a      	ldr	r0, [pc, #40]	; (b644 <ll_phy_get+0x38>)
    b61c:	f7fa ffb2 	bl	6584 <mem_get>
    b620:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    b622:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    b624:	b950      	cbnz	r0, b63c <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
    b626:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
    b62a:	f3c2 0202 	ubfx	r2, r2, #0, #3
    b62e:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
    b630:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    b634:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b638:	7023      	strb	r3, [r4, #0]
}
    b63a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b63c:	2002      	movs	r0, #2
}
    b63e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b640:	2002      	movs	r0, #2
}
    b642:	4770      	bx	lr
    b644:	20000e58 	.word	0x20000e58

0000b648 <ll_phy_default_set>:
	default_phy_tx = tx;
    b648:	4a02      	ldr	r2, [pc, #8]	; (b654 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
    b64a:	4b03      	ldr	r3, [pc, #12]	; (b658 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
    b64c:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
    b64e:	7019      	strb	r1, [r3, #0]
}
    b650:	2000      	movs	r0, #0
    b652:	4770      	bx	lr
    b654:	20002633 	.word	0x20002633
    b658:	20002632 	.word	0x20002632

0000b65c <ll_phy_req_send>:
{
    b65c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b65e:	b083      	sub	sp, #12
	if (handle >= CONFIG_BT_MAX_CONN) {
    b660:	b9f8      	cbnz	r0, b6a2 <ll_phy_req_send+0x46>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b662:	460f      	mov	r7, r1
    b664:	4616      	mov	r6, r2
    b666:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b66a:	4602      	mov	r2, r0
    b66c:	4813      	ldr	r0, [pc, #76]	; (b6bc <ll_phy_req_send+0x60>)
    b66e:	461d      	mov	r5, r3
    b670:	f7fa ff88 	bl	6584 <mem_get>
	if (conn->lll.handle != handle) {
    b674:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b676:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    b678:	b99b      	cbnz	r3, b6a2 <ll_phy_req_send+0x46>
}

static inline bool feature_phy_2m(struct ll_conn *conn)
{
#if defined(CONFIG_BT_CTLR_PHY_2M)
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_PHY_2M) != 0;
    b67a:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
	if (!feature_phy_2m(conn) && !feature_phy_coded(conn)) {
    b67e:	05db      	lsls	r3, r3, #23
    b680:	d513      	bpl.n	b6aa <ll_phy_req_send+0x4e>
	err = ull_cp_phy_update(conn, tx, flags, rx, 1U);
    b682:	462b      	mov	r3, r5
    b684:	2501      	movs	r5, #1
    b686:	9500      	str	r5, [sp, #0]
    b688:	4632      	mov	r2, r6
    b68a:	4639      	mov	r1, r7
    b68c:	f001 ffea 	bl	d664 <ull_cp_phy_update>
	if (err) {
    b690:	4605      	mov	r5, r0
    b692:	b918      	cbnz	r0, b69c <ll_phy_req_send+0x40>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b694:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    b698:	2b00      	cmp	r3, #0
    b69a:	db0a      	blt.n	b6b2 <ll_phy_req_send+0x56>
}
    b69c:	4628      	mov	r0, r5
    b69e:	b003      	add	sp, #12
    b6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b6a2:	2502      	movs	r5, #2
}
    b6a4:	4628      	mov	r0, r5
    b6a6:	b003      	add	sp, #12
    b6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    b6aa:	251a      	movs	r5, #26
}
    b6ac:	4628      	mov	r0, r5
    b6ae:	b003      	add	sp, #12
    b6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
    b6b2:	4601      	mov	r1, r0
    b6b4:	4620      	mov	r0, r4
    b6b6:	f004 fdf9 	bl	102ac <ull_periph_latency_cancel>
    b6ba:	e7ef      	b.n	b69c <ll_phy_req_send+0x40>
    b6bc:	20000e58 	.word	0x20000e58

0000b6c0 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b6c0:	b9d8      	cbnz	r0, b6fa <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b6c2:	4602      	mov	r2, r0
{
    b6c4:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b6c6:	480e      	ldr	r0, [pc, #56]	; (b700 <ll_apto_get+0x40>)
    b6c8:	460c      	mov	r4, r1
    b6ca:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b6ce:	f7fa ff59 	bl	6584 <mem_get>
    b6d2:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    b6d4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    b6d6:	b970      	cbnz	r0, b6f6 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
    b6d8:	f8b2 317e 	ldrh.w	r3, [r2, #382]	; 0x17e
    b6dc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    b6de:	fb02 f303 	mul.w	r3, r2, r3
    b6e2:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
    b6e6:	4a07      	ldr	r2, [pc, #28]	; (b704 <ll_apto_get+0x44>)
    b6e8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b6ec:	fba2 2303 	umull	r2, r3, r2, r3
    b6f0:	099b      	lsrs	r3, r3, #6
    b6f2:	8023      	strh	r3, [r4, #0]
}
    b6f4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b6f6:	2002      	movs	r0, #2
}
    b6f8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b6fa:	2002      	movs	r0, #2
}
    b6fc:	4770      	bx	lr
    b6fe:	bf00      	nop
    b700:	20000e58 	.word	0x20000e58
    b704:	10624dd3 	.word	0x10624dd3

0000b708 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b708:	b9d8      	cbnz	r0, b742 <ll_apto_set+0x3a>
{
    b70a:	b510      	push	{r4, lr}
    b70c:	4602      	mov	r2, r0
    b70e:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b710:	480d      	ldr	r0, [pc, #52]	; (b748 <ll_apto_set+0x40>)
    b712:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b716:	f7fa ff35 	bl	6584 <mem_get>
    b71a:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    b71c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    b71e:	b970      	cbnz	r0, b73e <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
    b720:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    b722:	f240 41e2 	movw	r1, #1250	; 0x4e2
    b726:	fb01 f202 	mul.w	r2, r1, r2
    b72a:	f242 7110 	movw	r1, #10000	; 0x2710
    b72e:	fb01 2104 	mla	r1, r1, r4, r2
    b732:	3901      	subs	r1, #1
    b734:	fbb1 f1f2 	udiv	r1, r1, r2
    b738:	f8a3 117e 	strh.w	r1, [r3, #382]	; 0x17e
}
    b73c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b73e:	2002      	movs	r0, #2
}
    b740:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b742:	2002      	movs	r0, #2
}
    b744:	4770      	bx	lr
    b746:	bf00      	nop
    b748:	20000e58 	.word	0x20000e58

0000b74c <ull_conn_init>:
	err = init_reset();
    b74c:	f7ff bbd4 	b.w	aef8 <init_reset>

0000b750 <ull_conn_reset>:
{
    b750:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b752:	2200      	movs	r2, #0
    b754:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b758:	4814      	ldr	r0, [pc, #80]	; (b7ac <ull_conn_reset+0x5c>)
    b75a:	f7fa ff13 	bl	6584 <mem_get>
    b75e:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
    b760:	f100 021c 	add.w	r2, r0, #28
    b764:	4601      	mov	r1, r0
    b766:	2003      	movs	r0, #3
    b768:	f7fd f8e8 	bl	893c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    b76c:	b108      	cbz	r0, b772 <ull_conn_reset+0x22>
    b76e:	3078      	adds	r0, #120	; 0x78
    b770:	d10d      	bne.n	b78e <ull_conn_reset+0x3e>
	MFIFO_INIT(conn_tx);
    b772:	490f      	ldr	r1, [pc, #60]	; (b7b0 <ull_conn_reset+0x60>)
	MFIFO_INIT(conn_ack);
    b774:	4a0f      	ldr	r2, [pc, #60]	; (b7b4 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
    b776:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
    b778:	f64f 70ff 	movw	r0, #65535	; 0xffff
    b77c:	8520      	strh	r0, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
    b77e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	MFIFO_INIT(conn_tx);
    b782:	808b      	strh	r3, [r1, #4]
	MFIFO_INIT(conn_ack);
    b784:	8093      	strh	r3, [r2, #4]
}
    b786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
    b78a:	f7ff bbb5 	b.w	aef8 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
    b78e:	4a0a      	ldr	r2, [pc, #40]	; (b7b8 <ull_conn_reset+0x68>)
    b790:	490a      	ldr	r1, [pc, #40]	; (b7bc <ull_conn_reset+0x6c>)
    b792:	480b      	ldr	r0, [pc, #44]	; (b7c0 <ull_conn_reset+0x70>)
    b794:	f240 639a 	movw	r3, #1690	; 0x69a
    b798:	f00b fea3 	bl	174e2 <assert_print>
    b79c:	4040      	eors	r0, r0
    b79e:	f380 8811 	msr	BASEPRI, r0
    b7a2:	f04f 0003 	mov.w	r0, #3
    b7a6:	df02      	svc	2
    b7a8:	e7e3      	b.n	b772 <ull_conn_reset+0x22>
    b7aa:	bf00      	nop
    b7ac:	20000e58 	.word	0x20000e58
    b7b0:	200005cc 	.word	0x200005cc
    b7b4:	20000584 	.word	0x20000584
    b7b8:	0001bd60 	.word	0x0001bd60
    b7bc:	0001be54 	.word	0x0001be54
    b7c0:	0001b844 	.word	0x0001b844

0000b7c4 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
    b7c4:	4b01      	ldr	r3, [pc, #4]	; (b7cc <ull_conn_default_phy_tx_get+0x8>)
}
    b7c6:	7818      	ldrb	r0, [r3, #0]
    b7c8:	4770      	bx	lr
    b7ca:	bf00      	nop
    b7cc:	20002633 	.word	0x20002633

0000b7d0 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
    b7d0:	4b01      	ldr	r3, [pc, #4]	; (b7d8 <ull_conn_default_phy_rx_get+0x8>)
}
    b7d2:	7818      	ldrb	r0, [r3, #0]
    b7d4:	4770      	bx	lr
    b7d6:	bf00      	nop
    b7d8:	20002632 	.word	0x20002632

0000b7dc <ull_conn_setup>:
{
    b7dc:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
    b7de:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
    b7e0:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
    b7e2:	681d      	ldr	r5, [r3, #0]
    b7e4:	782b      	ldrb	r3, [r5, #0]
{
    b7e6:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
    b7e8:	b193      	cbz	r3, b810 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
    b7ea:	696b      	ldr	r3, [r5, #20]
    b7ec:	b163      	cbz	r3, b808 <ull_conn_setup+0x2c>
    b7ee:	4a0b      	ldr	r2, [pc, #44]	; (b81c <ull_conn_setup+0x40>)
    b7f0:	490b      	ldr	r1, [pc, #44]	; (b820 <ull_conn_setup+0x44>)
    b7f2:	480c      	ldr	r0, [pc, #48]	; (b824 <ull_conn_setup+0x48>)
    b7f4:	f240 331f 	movw	r3, #799	; 0x31f
    b7f8:	f00b fe73 	bl	174e2 <assert_print>
    b7fc:	4040      	eors	r0, r0
    b7fe:	f380 8811 	msr	BASEPRI, r0
    b802:	f04f 0003 	mov.w	r0, #3
    b806:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
    b808:	4b07      	ldr	r3, [pc, #28]	; (b828 <ull_conn_setup+0x4c>)
    b80a:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
    b80e:	bd38      	pop	{r3, r4, r5, pc}
    b810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
    b814:	4608      	mov	r0, r1
    b816:	f7ff bcb3 	b.w	b180 <conn_setup_adv_scan_disabled_cb>
    b81a:	bf00      	nop
    b81c:	0001bd60 	.word	0x0001bd60
    b820:	0001bc68 	.word	0x0001bc68
    b824:	0001b844 	.word	0x0001b844
    b828:	0000b181 	.word	0x0000b181

0000b82c <ull_conn_rx>:
{
    b82c:	b538      	push	{r3, r4, r5, lr}
	conn = ll_connected_get((*rx)->hdr.handle);
    b82e:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
    b830:	88da      	ldrh	r2, [r3, #6]
    b832:	b9a2      	cbnz	r2, b85e <ull_conn_rx+0x32>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b834:	4818      	ldr	r0, [pc, #96]	; (b898 <ull_conn_rx+0x6c>)
    b836:	460c      	mov	r4, r1
    b838:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b83c:	f7fa fea2 	bl	6584 <mem_get>
	if (conn->lll.handle != handle) {
    b840:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b842:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    b844:	b953      	cbnz	r3, b85c <ull_conn_rx+0x30>
	ull_cp_tx_ntf(conn);
    b846:	f002 f86f 	bl	d928 <ull_cp_tx_ntf>
	pdu_rx = (void *)(*rx)->pdu;
    b84a:	6821      	ldr	r1, [r4, #0]
	switch (pdu_rx->ll_id) {
    b84c:	7f0b      	ldrb	r3, [r1, #28]
    b84e:	f003 0303 	and.w	r3, r3, #3
    b852:	2b03      	cmp	r3, #3
    b854:	d107      	bne.n	b866 <ull_conn_rx+0x3a>
		ull_cp_rx(conn, *rx);
    b856:	4628      	mov	r0, r5
    b858:	f002 f87a 	bl	d950 <ull_cp_rx>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    b85c:	6823      	ldr	r3, [r4, #0]
    b85e:	2201      	movs	r2, #1
    b860:	711a      	strb	r2, [r3, #4]
}
    b862:	2000      	movs	r0, #0
    b864:	bd38      	pop	{r3, r4, r5, pc}
	switch (pdu_rx->ll_id) {
    b866:	b95b      	cbnz	r3, b880 <ull_conn_rx+0x54>
		if (conn->pause_rx_data) {
    b868:	f895 3178 	ldrb.w	r3, [r5, #376]	; 0x178
    b86c:	079b      	lsls	r3, r3, #30
    b86e:	d503      	bpl.n	b878 <ull_conn_rx+0x4c>
			conn->llcp_terminate.reason_final =
    b870:	233d      	movs	r3, #61	; 0x3d
    b872:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    b876:	6821      	ldr	r1, [r4, #0]
    b878:	2301      	movs	r3, #1
    b87a:	710b      	strb	r3, [r1, #4]
}
    b87c:	2000      	movs	r0, #0
    b87e:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->pause_rx_data) {
    b880:	f895 3178 	ldrb.w	r3, [r5, #376]	; 0x178
    b884:	079a      	lsls	r2, r3, #30
    b886:	d5ec      	bpl.n	b862 <ull_conn_rx+0x36>
			conn->llcp_terminate.reason_final =
    b888:	233d      	movs	r3, #61	; 0x3d
    b88a:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    b88e:	6823      	ldr	r3, [r4, #0]
    b890:	2201      	movs	r2, #1
    b892:	711a      	strb	r2, [r3, #4]
}
    b894:	2000      	movs	r0, #0
    b896:	bd38      	pop	{r3, r4, r5, pc}
    b898:	20000e58 	.word	0x20000e58

0000b89c <ull_conn_llcp>:
{
    b89c:	b570      	push	{r4, r5, r6, lr}
    b89e:	4604      	mov	r4, r0
	LL_ASSERT(conn->lll.handle != LLL_HANDLE_INVALID);
    b8a0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    b8a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b8a6:	4298      	cmp	r0, r3
{
    b8a8:	460e      	mov	r6, r1
    b8aa:	4615      	mov	r5, r2
	LL_ASSERT(conn->lll.handle != LLL_HANDLE_INVALID);
    b8ac:	d00c      	beq.n	b8c8 <ull_conn_llcp+0x2c>
	ull_cp_run(conn);
    b8ae:	4620      	mov	r0, r4
	conn->llcp.prep.ticks_at_expire = ticks_at_expire;
    b8b0:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
	conn->llcp.prep.lazy = lazy;
    b8b4:	f8a4 5110 	strh.w	r5, [r4, #272]	; 0x110
	ull_cp_run(conn);
    b8b8:	f001 fe74 	bl	d5a4 <ull_cp_run>
	if (conn->cancel_prepare) {
    b8bc:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    b8c0:	f013 0001 	ands.w	r0, r3, #1
    b8c4:	d10e      	bne.n	b8e4 <ull_conn_llcp+0x48>
}
    b8c6:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn->lll.handle != LLL_HANDLE_INVALID);
    b8c8:	4a0a      	ldr	r2, [pc, #40]	; (b8f4 <ull_conn_llcp+0x58>)
    b8ca:	490b      	ldr	r1, [pc, #44]	; (b8f8 <ull_conn_llcp+0x5c>)
    b8cc:	480b      	ldr	r0, [pc, #44]	; (b8fc <ull_conn_llcp+0x60>)
    b8ce:	f240 3369 	movw	r3, #873	; 0x369
    b8d2:	f00b fe06 	bl	174e2 <assert_print>
    b8d6:	4040      	eors	r0, r0
    b8d8:	f380 8811 	msr	BASEPRI, r0
    b8dc:	f04f 0003 	mov.w	r0, #3
    b8e0:	df02      	svc	2
    b8e2:	e7e4      	b.n	b8ae <ull_conn_llcp+0x12>
		conn->cancel_prepare = 0U;
    b8e4:	f36f 0300 	bfc	r3, #0, #1
    b8e8:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		return -ECANCELED;
    b8ec:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
    b8f0:	bd70      	pop	{r4, r5, r6, pc}
    b8f2:	bf00      	nop
    b8f4:	0001bd60 	.word	0x0001bd60
    b8f8:	0001be6c 	.word	0x0001be6c
    b8fc:	0001b844 	.word	0x0001b844

0000b900 <ull_conn_tx_demux>:
{
    b900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    b904:	4f1c      	ldr	r7, [pc, #112]	; (b978 <ull_conn_tx_demux+0x78>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b906:	4e1d      	ldr	r6, [pc, #116]	; (b97c <ull_conn_tx_demux+0x7c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    b908:	797a      	ldrb	r2, [r7, #5]
{
    b90a:	4680      	mov	r8, r0
	return (void *)(fifo + first * size);
    b90c:	f107 0508 	add.w	r5, r7, #8
    b910:	e019      	b.n	b946 <ull_conn_tx_demux+0x46>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b912:	f7fa fe37 	bl	6584 <mem_get>
    b916:	4603      	mov	r3, r0
			ull_tx_q_enqueue_data(&conn->tx_q, tx);
    b918:	30d4      	adds	r0, #212	; 0xd4
	if (conn->lll.handle != handle) {
    b91a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b91c:	bb03      	cbnz	r3, b960 <ull_conn_tx_demux+0x60>
			ull_tx_q_enqueue_data(&conn->tx_q, tx);
    b91e:	6861      	ldr	r1, [r4, #4]
    b920:	f001 fbd0 	bl	d0c4 <ull_tx_q_enqueue_data>
	uint8_t _first = *first; /* Copy read-index */
    b924:	793b      	ldrb	r3, [r7, #4]
		MFIFO_DEQUEUE(conn_tx);
    b926:	797a      	ldrb	r2, [r7, #5]
    b928:	78b9      	ldrb	r1, [r7, #2]
	if (_first == last) {
    b92a:	429a      	cmp	r2, r3
	} while (--count);
    b92c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	_first += 1U;
    b930:	f103 0301 	add.w	r3, r3, #1
	if (_first == last) {
    b934:	d004      	beq.n	b940 <ull_conn_tx_demux+0x40>
	_first += 1U;
    b936:	b2db      	uxtb	r3, r3
		_first = 0U;
    b938:	4299      	cmp	r1, r3
    b93a:	bf08      	it	eq
    b93c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    b93e:	713b      	strb	r3, [r7, #4]
    b940:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    b944:	d016      	beq.n	b974 <ull_conn_tx_demux+0x74>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    b946:	793b      	ldrb	r3, [r7, #4]
    b948:	783c      	ldrb	r4, [r7, #0]
	if (first == last) {
    b94a:	4293      	cmp	r3, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b94c:	f44f 71cc 	mov.w	r1, #408	; 0x198
    b950:	4630      	mov	r0, r6
	return (void *)(fifo + first * size);
    b952:	fb13 f304 	smulbb	r3, r3, r4
	if (first == last) {
    b956:	d00d      	beq.n	b974 <ull_conn_tx_demux+0x74>
	if (handle >= CONFIG_BT_MAX_CONN) {
    b958:	5aea      	ldrh	r2, [r5, r3]
	return (void *)(fifo + first * size);
    b95a:	195c      	adds	r4, r3, r5
    b95c:	2a00      	cmp	r2, #0
    b95e:	d0d8      	beq.n	b912 <ull_conn_tx_demux+0x12>
			struct node_tx *tx = lll_tx->node;
    b960:	6861      	ldr	r1, [r4, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
    b962:	790b      	ldrb	r3, [r1, #4]
    b964:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
    b968:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
    b96c:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
    b96e:	f7fc ff11 	bl	8794 <ll_tx_ack_put>
    b972:	e7d7      	b.n	b924 <ull_conn_tx_demux+0x24>
}
    b974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b978:	200005cc 	.word	0x200005cc
    b97c:	20000e58 	.word	0x20000e58

0000b980 <conn_cleanup>:
{
    b980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn == conn_upd_curr) {
    b984:	4a3e      	ldr	r2, [pc, #248]	; (ba80 <conn_cleanup+0x100>)
    b986:	6814      	ldr	r4, [r2, #0]
    b988:	42a0      	cmp	r0, r4
    b98a:	4606      	mov	r6, r0
    b98c:	460b      	mov	r3, r1
		conn_upd_curr = NULL;
    b98e:	bf08      	it	eq
    b990:	2100      	moveq	r1, #0
	rx->hdr.handle = conn->lll.handle;
    b992:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    b994:	bf08      	it	eq
    b996:	6011      	streq	r1, [r2, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b998:	2218      	movs	r2, #24
{
    b99a:	b083      	sub	sp, #12
	ull_cp_state_set(conn, ULL_CP_DISCONNECTED);
    b99c:	2101      	movs	r1, #1
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b99e:	f886 2150 	strb.w	r2, [r6, #336]	; 0x150
	*((uint8_t *)rx->pdu) = reason;
    b9a2:	f886 3168 	strb.w	r3, [r6, #360]	; 0x168
	rx->hdr.handle = conn->lll.handle;
    b9a6:	f8a6 0152 	strh.w	r0, [r6, #338]	; 0x152
	ull_tx_q_resume_data(&conn->tx_q);
    b9aa:	f106 07d4 	add.w	r7, r6, #212	; 0xd4
	ull_cp_state_set(conn, ULL_CP_DISCONNECTED);
    b9ae:	4630      	mov	r0, r6
    b9b0:	f001 fe02 	bl	d5b8 <ull_cp_state_set>
	ull_tx_q_resume_data(&conn->tx_q);
    b9b4:	4638      	mov	r0, r7
    b9b6:	f001 fb6d 	bl	d094 <ull_tx_q_resume_data>
	tx = ull_tx_q_dequeue(&conn->tx_q);
    b9ba:	4638      	mov	r0, r7
    b9bc:	f001 fba2 	bl	d104 <ull_tx_q_dequeue>
	if (tx) {
    b9c0:	4604      	mov	r4, r0
    b9c2:	2800      	cmp	r0, #0
    b9c4:	d03a      	beq.n	ba3c <conn_cleanup+0xbc>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    b9c6:	7903      	ldrb	r3, [r0, #4]
		link = mem_acquire(&mem_link_tx.free);
    b9c8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; ba84 <conn_cleanup+0x104>
		LL_ASSERT(link);
    b9cc:	f8df b0b8 	ldr.w	fp, [pc, #184]	; ba88 <conn_cleanup+0x108>
    b9d0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; ba8c <conn_cleanup+0x10c>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    b9d4:	f003 0303 	and.w	r3, r3, #3
    b9d8:	2b03      	cmp	r3, #3
    b9da:	bf0c      	ite	eq
    b9dc:	4603      	moveq	r3, r0
    b9de:	2300      	movne	r3, #0
			tx->next = NULL;
    b9e0:	6003      	str	r3, [r0, #0]
		link = mem_acquire(&mem_link_tx.free);
    b9e2:	4648      	mov	r0, r9
    b9e4:	f7fa fd9a 	bl	651c <mem_acquire>
		LL_ASSERT(link);
    b9e8:	f106 087c 	add.w	r8, r6, #124	; 0x7c
    b9ec:	4605      	mov	r5, r0
    b9ee:	b1b8      	cbz	r0, ba20 <conn_cleanup+0xa0>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    b9f0:	4621      	mov	r1, r4
    b9f2:	4642      	mov	r2, r8
    b9f4:	4628      	mov	r0, r5
    b9f6:	f7fa fdf7 	bl	65e8 <memq_enqueue>
	tx = ull_tx_q_dequeue(&conn->tx_q);
    b9fa:	4638      	mov	r0, r7
    b9fc:	f001 fb82 	bl	d104 <ull_tx_q_dequeue>
	if (tx) {
    ba00:	4604      	mov	r4, r0
    ba02:	b1d8      	cbz	r0, ba3c <conn_cleanup+0xbc>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    ba04:	7903      	ldrb	r3, [r0, #4]
    ba06:	f003 0303 	and.w	r3, r3, #3
    ba0a:	2b03      	cmp	r3, #3
    ba0c:	bf0c      	ite	eq
    ba0e:	4603      	moveq	r3, r0
    ba10:	2300      	movne	r3, #0
			tx->next = NULL;
    ba12:	6003      	str	r3, [r0, #0]
		link = mem_acquire(&mem_link_tx.free);
    ba14:	4648      	mov	r0, r9
    ba16:	f7fa fd81 	bl	651c <mem_acquire>
		LL_ASSERT(link);
    ba1a:	4605      	mov	r5, r0
    ba1c:	2800      	cmp	r0, #0
    ba1e:	d1e7      	bne.n	b9f0 <conn_cleanup+0x70>
    ba20:	481b      	ldr	r0, [pc, #108]	; (ba90 <conn_cleanup+0x110>)
    ba22:	f240 7305 	movw	r3, #1797	; 0x705
    ba26:	465a      	mov	r2, fp
    ba28:	4651      	mov	r1, sl
    ba2a:	f00b fd5a 	bl	174e2 <assert_print>
    ba2e:	4040      	eors	r0, r0
    ba30:	f380 8811 	msr	BASEPRI, r0
    ba34:	f04f 0003 	mov.w	r0, #3
    ba38:	df02      	svc	2
    ba3a:	e7d9      	b.n	b9f0 <conn_cleanup+0x70>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    ba3c:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    ba3e:	4b15      	ldr	r3, [pc, #84]	; (ba94 <conn_cleanup+0x114>)
    ba40:	9600      	str	r6, [sp, #0]
    ba42:	3203      	adds	r2, #3
    ba44:	b2d2      	uxtb	r2, r2
    ba46:	2101      	movs	r1, #1
    ba48:	2000      	movs	r0, #0
    ba4a:	f7fc f897 	bl	7b7c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ba4e:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    ba52:	d00c      	beq.n	ba6e <conn_cleanup+0xee>
    ba54:	4a0c      	ldr	r2, [pc, #48]	; (ba88 <conn_cleanup+0x108>)
    ba56:	4910      	ldr	r1, [pc, #64]	; (ba98 <conn_cleanup+0x118>)
    ba58:	480d      	ldr	r0, [pc, #52]	; (ba90 <conn_cleanup+0x110>)
    ba5a:	f240 63cb 	movw	r3, #1739	; 0x6cb
    ba5e:	f00b fd40 	bl	174e2 <assert_print>
    ba62:	4040      	eors	r0, r0
    ba64:	f380 8811 	msr	BASEPRI, r0
    ba68:	f04f 0003 	mov.w	r0, #3
    ba6c:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
    ba6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
    ba72:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
    ba74:	8533      	strh	r3, [r6, #40]	; 0x28
}
    ba76:	b003      	add	sp, #12
    ba78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
    ba7c:	f7ff bf40 	b.w	b900 <ull_conn_tx_demux>
    ba80:	20001c90 	.word	0x20001c90
    ba84:	20001be4 	.word	0x20001be4
    ba88:	0001bd60 	.word	0x0001bd60
    ba8c:	0001bdb0 	.word	0x0001bdb0
    ba90:	0001b844 	.word	0x0001b844
    ba94:	0000b05d 	.word	0x0000b05d
    ba98:	0001be24 	.word	0x0001be24

0000ba9c <ull_conn_tx_lll_enqueue>:
	while (count--) {
    ba9c:	2900      	cmp	r1, #0
    ba9e:	d03a      	beq.n	bb16 <ull_conn_tx_lll_enqueue+0x7a>
{
    baa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    baa4:	1e4d      	subs	r5, r1, #1
		link = mem_acquire(&mem_link_tx.free);
    baa6:	f8df 9070 	ldr.w	r9, [pc, #112]	; bb18 <ull_conn_tx_lll_enqueue+0x7c>
		LL_ASSERT(link);
    baaa:	f8df b070 	ldr.w	fp, [pc, #112]	; bb1c <ull_conn_tx_lll_enqueue+0x80>
    baae:	f8df a070 	ldr.w	sl, [pc, #112]	; bb20 <ull_conn_tx_lll_enqueue+0x84>
    bab2:	4607      	mov	r7, r0
    bab4:	b2ed      	uxtb	r5, r5
	tx = ull_tx_q_dequeue(&conn->tx_q);
    bab6:	f100 08d4 	add.w	r8, r0, #212	; 0xd4
    baba:	e015      	b.n	bae8 <ull_conn_tx_lll_enqueue+0x4c>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    babc:	7923      	ldrb	r3, [r4, #4]
    babe:	f003 0303 	and.w	r3, r3, #3
			tx->next = tx;
    bac2:	2b03      	cmp	r3, #3
    bac4:	bf0c      	ite	eq
    bac6:	4623      	moveq	r3, r4
    bac8:	2300      	movne	r3, #0
    baca:	6023      	str	r3, [r4, #0]
		link = mem_acquire(&mem_link_tx.free);
    bacc:	f7fa fd26 	bl	651c <mem_acquire>
		LL_ASSERT(link);
    bad0:	4606      	mov	r6, r0
    bad2:	b190      	cbz	r0, bafa <ull_conn_tx_lll_enqueue+0x5e>
	while (count--) {
    bad4:	3d01      	subs	r5, #1
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    bad6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
    bada:	4621      	mov	r1, r4
    badc:	4630      	mov	r0, r6
	while (count--) {
    bade:	b2ed      	uxtb	r5, r5
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    bae0:	f7fa fd82 	bl	65e8 <memq_enqueue>
	while (count--) {
    bae4:	2dff      	cmp	r5, #255	; 0xff
    bae6:	d006      	beq.n	baf6 <ull_conn_tx_lll_enqueue+0x5a>
	tx = ull_tx_q_dequeue(&conn->tx_q);
    bae8:	4640      	mov	r0, r8
    baea:	f001 fb0b 	bl	d104 <ull_tx_q_dequeue>
    baee:	4604      	mov	r4, r0
		link = mem_acquire(&mem_link_tx.free);
    baf0:	4648      	mov	r0, r9
	if (tx) {
    baf2:	2c00      	cmp	r4, #0
    baf4:	d1e2      	bne.n	babc <ull_conn_tx_lll_enqueue+0x20>
}
    baf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_ASSERT(link);
    bafa:	480a      	ldr	r0, [pc, #40]	; (bb24 <ull_conn_tx_lll_enqueue+0x88>)
    bafc:	f240 5332 	movw	r3, #1330	; 0x532
    bb00:	465a      	mov	r2, fp
    bb02:	4651      	mov	r1, sl
    bb04:	f00b fced 	bl	174e2 <assert_print>
    bb08:	4040      	eors	r0, r0
    bb0a:	f380 8811 	msr	BASEPRI, r0
    bb0e:	f04f 0003 	mov.w	r0, #3
    bb12:	df02      	svc	2
    bb14:	e7de      	b.n	bad4 <ull_conn_tx_lll_enqueue+0x38>
    bb16:	4770      	bx	lr
    bb18:	20001be4 	.word	0x20001be4
    bb1c:	0001bd60 	.word	0x0001bd60
    bb20:	0001bdb0 	.word	0x0001bdb0
    bb24:	0001b844 	.word	0x0001b844

0000bb28 <tx_demux>:
{
    bb28:	b510      	push	{r4, lr}
    bb2a:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
    bb2c:	2001      	movs	r0, #1
    bb2e:	f7ff fee7 	bl	b900 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
    bb32:	4620      	mov	r0, r4
    bb34:	2101      	movs	r1, #1
}
    bb36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
    bb3a:	f7ff bfaf 	b.w	ba9c <ull_conn_tx_lll_enqueue>
    bb3e:	bf00      	nop

0000bb40 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
    bb40:	4901      	ldr	r1, [pc, #4]	; (bb48 <ull_conn_link_tx_release+0x8>)
    bb42:	f7fa bd07 	b.w	6554 <mem_release>
    bb46:	bf00      	nop
    bb48:	20001be4 	.word	0x20001be4

0000bb4c <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
    bb4c:	4b01      	ldr	r3, [pc, #4]	; (bb54 <ull_conn_ack_last_idx_get+0x8>)
}
    bb4e:	7958      	ldrb	r0, [r3, #5]
    bb50:	4770      	bx	lr
    bb52:	bf00      	nop
    bb54:	20000584 	.word	0x20000584

0000bb58 <ull_conn_ack_peek>:
{
    bb58:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
    bb5a:	4b0c      	ldr	r3, [pc, #48]	; (bb8c <ull_conn_ack_peek+0x34>)
    bb5c:	f893 c004 	ldrb.w	ip, [r3, #4]
    bb60:	f893 e005 	ldrb.w	lr, [r3, #5]
    bb64:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
    bb66:	45f4      	cmp	ip, lr
    bb68:	d00d      	beq.n	bb86 <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
    bb6a:	fb1c fc04 	smulbb	ip, ip, r4
    bb6e:	3308      	adds	r3, #8
	*ack_last = mfifo_conn_ack.l;
    bb70:	f880 e000 	strb.w	lr, [r0]
    bb74:	eb0c 0003 	add.w	r0, ip, r3
	*handle = lll_tx->handle;
    bb78:	f833 300c 	ldrh.w	r3, [r3, ip]
    bb7c:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
    bb7e:	6843      	ldr	r3, [r0, #4]
    bb80:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    bb82:	6818      	ldr	r0, [r3, #0]
}
    bb84:	bd10      	pop	{r4, pc}
		return NULL;
    bb86:	2000      	movs	r0, #0
}
    bb88:	bd10      	pop	{r4, pc}
    bb8a:	bf00      	nop
    bb8c:	20000584 	.word	0x20000584

0000bb90 <ull_conn_ack_by_last_peek>:
{
    bb90:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
    bb92:	4b0b      	ldr	r3, [pc, #44]	; (bbc0 <ull_conn_ack_by_last_peek+0x30>)
    bb94:	f893 c004 	ldrb.w	ip, [r3, #4]
    bb98:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
    bb9c:	4584      	cmp	ip, r0
    bb9e:	d00c      	beq.n	bbba <ull_conn_ack_by_last_peek+0x2a>
	return (void *)(fifo + first * size);
    bba0:	fb1c fc0e 	smulbb	ip, ip, lr
    bba4:	3308      	adds	r3, #8
    bba6:	eb0c 0003 	add.w	r0, ip, r3
	*handle = lll_tx->handle;
    bbaa:	f833 300c 	ldrh.w	r3, [r3, ip]
    bbae:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
    bbb0:	6843      	ldr	r3, [r0, #4]
    bbb2:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    bbb4:	6818      	ldr	r0, [r3, #0]
}
    bbb6:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    bbba:	2000      	movs	r0, #0
    bbbc:	e7fb      	b.n	bbb6 <ull_conn_ack_by_last_peek+0x26>
    bbbe:	bf00      	nop
    bbc0:	20000584 	.word	0x20000584

0000bbc4 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
    bbc4:	4b09      	ldr	r3, [pc, #36]	; (bbec <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    bbc6:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
    bbc8:	795a      	ldrb	r2, [r3, #5]
    bbca:	7818      	ldrb	r0, [r3, #0]
    bbcc:	f893 c002 	ldrb.w	ip, [r3, #2]
    bbd0:	428a      	cmp	r2, r1
    bbd2:	d009      	beq.n	bbe8 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
    bbd4:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
    bbd6:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
    bbda:	b2d2      	uxtb	r2, r2
		_first = 0U;
    bbdc:	4594      	cmp	ip, r2
    bbde:	bf08      	it	eq
    bbe0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    bbe2:	6880      	ldr	r0, [r0, #8]
	*first = _first; /* Write back read-index */
    bbe4:	711a      	strb	r2, [r3, #4]
	return mem;
    bbe6:	4770      	bx	lr
		return NULL;
    bbe8:	2000      	movs	r0, #0
}
    bbea:	4770      	bx	lr
    bbec:	20000584 	.word	0x20000584

0000bbf0 <ull_conn_lll_ack_enqueue>:
{
    bbf0:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    bbf2:	4c14      	ldr	r4, [pc, #80]	; (bc44 <ull_conn_lll_ack_enqueue+0x54>)
    bbf4:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
    bbf6:	f894 e002 	ldrb.w	lr, [r4, #2]
    bbfa:	f894 c004 	ldrb.w	ip, [r4, #4]
    bbfe:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
    bc00:	1c53      	adds	r3, r2, #1
    bc02:	b2db      	uxtb	r3, r3
		last = 0U;
    bc04:	459e      	cmp	lr, r3
    bc06:	bf08      	it	eq
    bc08:	2300      	moveq	r3, #0
	if (last == first) {
    bc0a:	459c      	cmp	ip, r3
    bc0c:	d009      	beq.n	bc22 <ull_conn_lll_ack_enqueue+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    bc0e:	fb12 f205 	smulbb	r2, r2, r5
    bc12:	f104 0c08 	add.w	ip, r4, #8
	lll_tx->handle = handle;
    bc16:	f82c 0002 	strh.w	r0, [ip, r2]
    bc1a:	4462      	add	r2, ip
	lll_tx->node = tx;
    bc1c:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
    bc1e:	7163      	strb	r3, [r4, #5]
}
    bc20:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
    bc22:	4a09      	ldr	r2, [pc, #36]	; (bc48 <ull_conn_lll_ack_enqueue+0x58>)
    bc24:	4909      	ldr	r1, [pc, #36]	; (bc4c <ull_conn_lll_ack_enqueue+0x5c>)
    bc26:	480a      	ldr	r0, [pc, #40]	; (bc50 <ull_conn_lll_ack_enqueue+0x60>)
    bc28:	f240 5371 	movw	r3, #1393	; 0x571
    bc2c:	f00b fc59 	bl	174e2 <assert_print>
    bc30:	4040      	eors	r0, r0
    bc32:	f380 8811 	msr	BASEPRI, r0
    bc36:	f04f 0003 	mov.w	r0, #3
    bc3a:	df02      	svc	2
	lll_tx->handle = handle;
    bc3c:	2300      	movs	r3, #0
    bc3e:	801b      	strh	r3, [r3, #0]
    bc40:	deff      	udf	#255	; 0xff
    bc42:	bf00      	nop
    bc44:	20000584 	.word	0x20000584
    bc48:	0001bd60 	.word	0x0001bd60
    bc4c:	0001bee4 	.word	0x0001bee4
    bc50:	0001b844 	.word	0x0001b844

0000bc54 <ull_conn_tx_ack>:
{
    bc54:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
    bc56:	7953      	ldrb	r3, [r2, #5]
{
    bc58:	4614      	mov	r4, r2
    bc5a:	4605      	mov	r5, r0
    bc5c:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
    bc5e:	b36b      	cbz	r3, bcbc <ull_conn_tx_ack+0x68>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    bc60:	7923      	ldrb	r3, [r4, #4]
    bc62:	f003 0203 	and.w	r2, r3, #3
    bc66:	2a03      	cmp	r2, #3
    bc68:	d00c      	beq.n	bc84 <ull_conn_tx_ack+0x30>
	} else if (handle == LLL_HANDLE_INVALID) {
    bc6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    bc6e:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
    bc70:	bf04      	itt	eq
    bc72:	f36f 0301 	bfceq	r3, #0, #2
    bc76:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
    bc78:	4621      	mov	r1, r4
    bc7a:	4628      	mov	r0, r5
}
    bc7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
    bc80:	f7fc bd88 	b.w	8794 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
    bc84:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bc88:	429d      	cmp	r5, r3
    bc8a:	d125      	bne.n	bcd8 <ull_conn_tx_ack+0x84>
		if (link->next == (void *)tx) {
    bc8c:	6833      	ldr	r3, [r6, #0]
    bc8e:	429c      	cmp	r4, r3
    bc90:	d037      	beq.n	bd02 <ull_conn_tx_ack+0xae>
		LL_ASSERT(!link->next);
    bc92:	2b00      	cmp	r3, #0
    bc94:	d0f0      	beq.n	bc78 <ull_conn_tx_ack+0x24>
    bc96:	4a1e      	ldr	r2, [pc, #120]	; (bd10 <ull_conn_tx_ack+0xbc>)
    bc98:	491e      	ldr	r1, [pc, #120]	; (bd14 <ull_conn_tx_ack+0xc0>)
    bc9a:	481f      	ldr	r0, [pc, #124]	; (bd18 <ull_conn_tx_ack+0xc4>)
    bc9c:	f240 5393 	movw	r3, #1427	; 0x593
    bca0:	f00b fc1f 	bl	174e2 <assert_print>
    bca4:	4040      	eors	r0, r0
    bca6:	f380 8811 	msr	BASEPRI, r0
    bcaa:	f04f 0003 	mov.w	r0, #3
    bcae:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
    bcb0:	4621      	mov	r1, r4
    bcb2:	4628      	mov	r0, r5
}
    bcb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
    bcb8:	f7fc bd6c 	b.w	8794 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
    bcbc:	4a14      	ldr	r2, [pc, #80]	; (bd10 <ull_conn_tx_ack+0xbc>)
    bcbe:	4917      	ldr	r1, [pc, #92]	; (bd1c <ull_conn_tx_ack+0xc8>)
    bcc0:	4815      	ldr	r0, [pc, #84]	; (bd18 <ull_conn_tx_ack+0xc4>)
    bcc2:	f240 537e 	movw	r3, #1406	; 0x57e
    bcc6:	f00b fc0c 	bl	174e2 <assert_print>
    bcca:	4040      	eors	r0, r0
    bccc:	f380 8811 	msr	BASEPRI, r0
    bcd0:	f04f 0003 	mov.w	r0, #3
    bcd4:	df02      	svc	2
    bcd6:	e7c3      	b.n	bc60 <ull_conn_tx_ack+0xc>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    bcd8:	462a      	mov	r2, r5
    bcda:	f44f 71cc 	mov.w	r1, #408	; 0x198
    bcde:	4810      	ldr	r0, [pc, #64]	; (bd20 <ull_conn_tx_ack+0xcc>)
    bce0:	f7fa fc50 	bl	6584 <mem_get>
			ull_cp_tx_ack(conn, tx);
    bce4:	4621      	mov	r1, r4
    bce6:	f001 fe01 	bl	d8ec <ull_cp_tx_ack>
		if (link->next == (void *)tx) {
    bcea:	6833      	ldr	r3, [r6, #0]
    bcec:	42a3      	cmp	r3, r4
    bcee:	d1d0      	bne.n	bc92 <ull_conn_tx_ack+0x3e>
	if (handle >= CONFIG_BT_MAX_CONN) {
    bcf0:	b93d      	cbnz	r5, bd02 <ull_conn_tx_ack+0xae>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    bcf2:	480b      	ldr	r0, [pc, #44]	; (bd20 <ull_conn_tx_ack+0xcc>)
    bcf4:	462a      	mov	r2, r5
    bcf6:	f44f 71cc 	mov.w	r1, #408	; 0x198
    bcfa:	f7fa fc43 	bl	6584 <mem_get>
	if (conn->lll.handle != handle) {
    bcfe:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    bd00:	b103      	cbz	r3, bd04 <ull_conn_tx_ack+0xb0>
		return NULL;
    bd02:	2000      	movs	r0, #0
			ull_cp_release_tx(conn, tx);
    bd04:	4621      	mov	r1, r4
}
    bd06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			ull_cp_release_tx(conn, tx);
    bd0a:	f001 bc01 	b.w	d510 <ull_cp_release_tx>
    bd0e:	bf00      	nop
    bd10:	0001bd60 	.word	0x0001bd60
    bd14:	0001bef8 	.word	0x0001bef8
    bd18:	0001b844 	.word	0x0001b844
    bd1c:	0001beec 	.word	0x0001beec
    bd20:	20000e58 	.word	0x20000e58

0000bd24 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
    bd24:	f890 205a 	ldrb.w	r2, [r0, #90]	; 0x5a
		max_tx_octets = (lll->dle.eff.max_tx_time >> 3) - 10;
    bd28:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
	switch (lll->phy_tx_time) {
    bd2c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    bd30:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->dle.eff.max_tx_time >> 3) - 10;
    bd32:	bf14      	ite	ne
    bd34:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->dle.eff.max_tx_time >> 2) - 11;
    bd36:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
    bd38:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
	return max_tx_octets;
    bd3c:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
		max_tx_octets = (lll->dle.eff.max_tx_time >> 3) - 10;
    bd40:	bf14      	ite	ne
    bd42:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->dle.eff.max_tx_time >> 2) - 11;
    bd44:	3b0b      	subeq	r3, #11
    bd46:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
    bd48:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
    bd4a:	bf44      	itt	mi
    bd4c:	3b04      	submi	r3, #4
    bd4e:	b29b      	uxthmi	r3, r3
}
    bd50:	4298      	cmp	r0, r3
    bd52:	bf28      	it	cs
    bd54:	4618      	movcs	r0, r3
    bd56:	4770      	bx	lr

0000bd58 <ull_pdu_data_init>:
}
    bd58:	4770      	bx	lr
    bd5a:	bf00      	nop

0000bd5c <ull_conn_pause_rx_data>:
	conn->pause_rx_data = 1U;
    bd5c:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    bd60:	f043 0302 	orr.w	r3, r3, #2
    bd64:	f880 3178 	strb.w	r3, [r0, #376]	; 0x178
}
    bd68:	4770      	bx	lr
    bd6a:	bf00      	nop

0000bd6c <ull_conn_resume_rx_data>:
	conn->pause_rx_data = 0U;
    bd6c:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    bd70:	f36f 0341 	bfc	r3, #1, #1
    bd74:	f880 3178 	strb.w	r3, [r0, #376]	; 0x178
}
    bd78:	4770      	bx	lr
    bd7a:	bf00      	nop

0000bd7c <ull_conn_event_counter>:
    bd7c:	7802      	ldrb	r2, [r0, #0]
		event_counter = lll->event_counter - 1;
    bd7e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
	if (ull_ref_get(&conn->ull)) {
    bd80:	b112      	cbz	r2, bd88 <ull_conn_event_counter+0xc>
		event_counter = lll->event_counter - 1;
    bd82:	1e58      	subs	r0, r3, #1
    bd84:	b280      	uxth	r0, r0
    bd86:	4770      	bx	lr
		event_counter = lll->event_counter + lll->latency_prepare +
    bd88:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
    bd8a:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
    bd8e:	1858      	adds	r0, r3, r1
    bd90:	4410      	add	r0, r2
    bd92:	b280      	uxth	r0, r0
}
    bd94:	4770      	bx	lr
    bd96:	bf00      	nop

0000bd98 <ull_conn_chan_map_set>:

}
#endif /* CONFIG_BT_PERIPHERAL */

void ull_conn_chan_map_set(struct ll_conn *conn, const uint8_t chm[5])
{
    bd98:	b538      	push	{r3, r4, r5, lr}
	struct lll_conn *lll = &conn->lll;

	memcpy(lll->data_chan_map, chm, sizeof(lll->data_chan_map));
    bd9a:	f100 0534 	add.w	r5, r0, #52	; 0x34
{
    bd9e:	4604      	mov	r4, r0
	memcpy(lll->data_chan_map, chm, sizeof(lll->data_chan_map));
    bda0:	2205      	movs	r2, #5
    bda2:	4628      	mov	r0, r5
    bda4:	f00b fe2a 	bl	179fc <memcpy>
	lll->data_chan_count = util_ones_count_get(lll->data_chan_map, sizeof(lll->data_chan_map));
    bda8:	2105      	movs	r1, #5
    bdaa:	4628      	mov	r0, r5
    bdac:	f7fa fd98 	bl	68e0 <util_ones_count_get>
    bdb0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    bdb4:	f360 0305 	bfi	r3, r0, #0, #6
    bdb8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
    bdbc:	bd38      	pop	{r3, r4, r5, pc}
    bdbe:	bf00      	nop

0000bdc0 <ull_dle_max_time_get>:
	 * minimum value for time is 328 us
	 */
	rx_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, rx_time);
	tx_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, tx_time);

	*max_rx_time = rx_time;
    bdc0:	f44f 73a4 	mov.w	r3, #328	; 0x148
    bdc4:	800b      	strh	r3, [r1, #0]
	*max_tx_time = tx_time;
    bdc6:	8013      	strh	r3, [r2, #0]

void ull_dle_max_time_get(struct ll_conn *conn, uint16_t *max_rx_time,
				    uint16_t *max_tx_time)
{
	return dle_max_time_get(conn, max_rx_time, max_tx_time);
}
    bdc8:	4770      	bx	lr
    bdca:	bf00      	nop

0000bdcc <ull_dle_update_eff>:
/*
 * TODO: this probably can be optimised for ex. by creating a macro for the
 * ull_dle_update_eff function
 */
uint8_t ull_dle_update_eff(struct ll_conn *conn)
{
    bdcc:	b500      	push	{lr}
uint8_t ull_dle_update_eff_rx(struct ll_conn *conn)
{
	uint8_t dle_changed = 0U;

	const uint16_t eff_rx_octets =
		MAX(MIN(conn->lll.dle.local.max_rx_octets, conn->lll.dle.remote.max_tx_octets),
    bdce:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
    bdd2:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
{
    bdd6:	4603      	mov	r3, r0
	const uint16_t eff_rx_octets =
    bdd8:	428a      	cmp	r2, r1
		    PDU_DC_PAYLOAD_SIZE_MIN);

#if defined(CONFIG_BT_CTLR_PHY)
	unsigned int min_eff_rx_time = (conn->lll.phy_rx == PHY_CODED) ?
    bdda:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;

	const uint16_t eff_rx_time =
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    bdde:	f8b3 c05e 	ldrh.w	ip, [r3, #94]	; 0x5e
	const uint16_t eff_rx_octets =
    bde2:	bf28      	it	cs
    bde4:	460a      	movcs	r2, r1
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    bde6:	f000 0007 	and.w	r0, r0, #7
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    bdea:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
	const uint16_t eff_rx_octets =
    bdee:	2a1b      	cmp	r2, #27
    bdf0:	bf38      	it	cc
    bdf2:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    bdf4:	2804      	cmp	r0, #4
    bdf6:	bf14      	ite	ne
    bdf8:	f44f 70a4 	movne.w	r0, #328	; 0x148
    bdfc:	f44f 6029 	moveq.w	r0, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    be00:	4561      	cmp	r1, ip
    be02:	bf28      	it	cs
    be04:	4661      	movcs	r1, ip
	const uint16_t eff_rx_time =
    be06:	4281      	cmp	r1, r0
		    min_eff_rx_time);

	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    be08:	f8b3 c06e 	ldrh.w	ip, [r3, #110]	; 0x6e
	const uint16_t eff_rx_time =
    be0c:	bf38      	it	cc
    be0e:	4601      	movcc	r1, r0
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    be10:	458c      	cmp	ip, r1
	}
#else
	conn->lll.dle.eff.max_rx_time = PDU_DC_MAX_US(eff_rx_octets, PHY_1M);
#endif

	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    be12:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    be16:	d044      	beq.n	bea2 <ull_dle_update_eff+0xd6>
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    be18:	4290      	cmp	r0, r2
		conn->lll.dle.eff.max_rx_time = eff_rx_time;
    be1a:	f8a3 106e 	strh.w	r1, [r3, #110]	; 0x6e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    be1e:	d001      	beq.n	be24 <ull_dle_update_eff+0x58>
		conn->lll.dle.eff.max_rx_octets = eff_rx_octets;
    be20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		dle_changed = 1U;
	}
#if defined(CONFIG_BT_CTLR_SLOT_RESERVATION_UPDATE)
	/* we delay the update of event length to after the DLE procedure is finishede */
	if (dle_changed) {
		conn->lll.evt_len_upd_delayed = 1;
    be24:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
    be28:	f042 0202 	orr.w	r2, r2, #2
    be2c:	2001      	movs	r0, #1
    be2e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1

{
	uint8_t dle_changed = 0U;

	const uint16_t eff_tx_octets =
		MAX(MIN(conn->lll.dle.local.max_tx_octets, conn->lll.dle.remote.max_rx_octets),
    be32:	f8b3 c058 	ldrh.w	ip, [r3, #88]	; 0x58
    be36:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
		    PDU_DC_PAYLOAD_SIZE_MIN);

#if defined(CONFIG_BT_CTLR_PHY)
	unsigned int min_eff_tx_time = (conn->lll.phy_tx == PHY_CODED) ?
    be3a:	f893 1076 	ldrb.w	r1, [r3, #118]	; 0x76
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;

	const uint16_t eff_tx_time =
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
    be3e:	f8b3 e05c 	ldrh.w	lr, [r3, #92]	; 0x5c
	const uint16_t eff_tx_octets =
    be42:	4562      	cmp	r2, ip
    be44:	bf28      	it	cs
    be46:	4662      	movcs	r2, ip
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    be48:	f001 0107 	and.w	r1, r1, #7
	const uint16_t eff_tx_octets =
    be4c:	2a1b      	cmp	r2, #27
    be4e:	bf38      	it	cc
    be50:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    be52:	2904      	cmp	r1, #4
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
    be54:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    be58:	bf14      	ite	ne
    be5a:	f44f 7ca4 	movne.w	ip, #328	; 0x148
    be5e:	f44f 6c29 	moveq.w	ip, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
    be62:	4571      	cmp	r1, lr
    be64:	bf28      	it	cs
    be66:	4671      	movcs	r1, lr
	const uint16_t eff_tx_time =
    be68:	4561      	cmp	r1, ip
		    min_eff_tx_time);

	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
    be6a:	f8b3 e06c 	ldrh.w	lr, [r3, #108]	; 0x6c
	const uint16_t eff_tx_time =
    be6e:	bf38      	it	cc
    be70:	4661      	movcc	r1, ip
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
    be72:	458e      	cmp	lr, r1
	}
#else
	conn->lll.dle.eff.max_tx_time = PDU_DC_MAX_US(eff_tx_octets, PHY_1M);
#endif

	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    be74:	f8b3 c068 	ldrh.w	ip, [r3, #104]	; 0x68
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
    be78:	d017      	beq.n	beaa <ull_dle_update_eff+0xde>
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    be7a:	4562      	cmp	r2, ip
		conn->lll.dle.eff.max_tx_time = eff_tx_time;
    be7c:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    be80:	d001      	beq.n	be86 <ull_dle_update_eff+0xba>
		conn->lll.dle.eff.max_tx_octets = eff_tx_octets;
    be82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#if defined(CONFIG_BT_CTLR_SLOT_RESERVATION_UPDATE)
	if (dle_changed) {
		conn->lll.evt_len_upd = 1U;
	}
	conn->lll.evt_len_upd |= conn->lll.evt_len_upd_delayed;
	conn->lll.evt_len_upd_delayed = 0;
    be86:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
    be8a:	f36f 0241 	bfc	r2, #1, #1
    be8e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
		conn->lll.evt_len_upd = 1U;
    be92:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
    be96:	2001      	movs	r0, #1
    be98:	4302      	orrs	r2, r0
    be9a:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
}
    be9e:	f85d fb04 	ldr.w	pc, [sp], #4
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    bea2:	4290      	cmp	r0, r2
    bea4:	d1bc      	bne.n	be20 <ull_dle_update_eff+0x54>
    bea6:	2000      	movs	r0, #0
    bea8:	e7c3      	b.n	be32 <ull_dle_update_eff+0x66>
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    beaa:	4562      	cmp	r2, ip
    beac:	d1e9      	bne.n	be82 <ull_dle_update_eff+0xb6>
	conn->lll.evt_len_upd |= conn->lll.evt_len_upd_delayed;
    beae:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
    beb2:	ea41 0251 	orr.w	r2, r1, r1, lsr #1
    beb6:	f002 0201 	and.w	r2, r2, #1
    beba:	f021 0103 	bic.w	r1, r1, #3
    bebe:	430a      	orrs	r2, r1
    bec0:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	if (dle_changed) {
    bec4:	2800      	cmp	r0, #0
    bec6:	d1e4      	bne.n	be92 <ull_dle_update_eff+0xc6>
}
    bec8:	f85d fb04 	ldr.w	pc, [sp], #4

0000becc <ull_dle_update_eff_rx>:
		MAX(MIN(conn->lll.dle.local.max_rx_octets, conn->lll.dle.remote.max_tx_octets),
    becc:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
    bed0:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
{
    bed4:	4603      	mov	r3, r0
	const uint16_t eff_rx_octets =
    bed6:	428a      	cmp	r2, r1
	unsigned int min_eff_rx_time = (conn->lll.phy_rx == PHY_CODED) ?
    bed8:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    bedc:	f8b3 c05e 	ldrh.w	ip, [r3, #94]	; 0x5e
	const uint16_t eff_rx_octets =
    bee0:	bf28      	it	cs
    bee2:	460a      	movcs	r2, r1
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    bee4:	f000 0007 	and.w	r0, r0, #7
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    bee8:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
	const uint16_t eff_rx_octets =
    beec:	2a1b      	cmp	r2, #27
    beee:	bf38      	it	cc
    bef0:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    bef2:	2804      	cmp	r0, #4
    bef4:	bf14      	ite	ne
    bef6:	f44f 70a4 	movne.w	r0, #328	; 0x148
    befa:	f44f 6029 	moveq.w	r0, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    befe:	4561      	cmp	r1, ip
    bf00:	bf28      	it	cs
    bf02:	4661      	movcs	r1, ip
	const uint16_t eff_rx_time =
    bf04:	4281      	cmp	r1, r0
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    bf06:	f8b3 c06e 	ldrh.w	ip, [r3, #110]	; 0x6e
	const uint16_t eff_rx_time =
    bf0a:	bf38      	it	cc
    bf0c:	4601      	movcc	r1, r0
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    bf0e:	458c      	cmp	ip, r1
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    bf10:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    bf14:	d00d      	beq.n	bf32 <ull_dle_update_eff_rx+0x66>
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    bf16:	4290      	cmp	r0, r2
		conn->lll.dle.eff.max_rx_time = eff_rx_time;
    bf18:	f8a3 106e 	strh.w	r1, [r3, #110]	; 0x6e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    bf1c:	d001      	beq.n	bf22 <ull_dle_update_eff_rx+0x56>
		conn->lll.dle.eff.max_rx_octets = eff_rx_octets;
    bf1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		conn->lll.evt_len_upd_delayed = 1;
    bf22:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
    bf26:	f042 0202 	orr.w	r2, r2, #2
    bf2a:	2001      	movs	r0, #1
    bf2c:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
    bf30:	4770      	bx	lr
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    bf32:	4290      	cmp	r0, r2
    bf34:	d1f3      	bne.n	bf1e <ull_dle_update_eff_rx+0x52>
    bf36:	2000      	movs	r0, #0
}
    bf38:	4770      	bx	lr
    bf3a:	bf00      	nop

0000bf3c <ull_dle_update_eff_tx>:
		MAX(MIN(conn->lll.dle.local.max_tx_octets, conn->lll.dle.remote.max_rx_octets),
    bf3c:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    bf40:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
{
    bf44:	4603      	mov	r3, r0
	const uint16_t eff_tx_octets =
    bf46:	428a      	cmp	r2, r1
	unsigned int min_eff_tx_time = (conn->lll.phy_tx == PHY_CODED) ?
    bf48:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
    bf4c:	f8b3 c05c 	ldrh.w	ip, [r3, #92]	; 0x5c
	const uint16_t eff_tx_octets =
    bf50:	bf28      	it	cs
    bf52:	460a      	movcs	r2, r1
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    bf54:	f000 0007 	and.w	r0, r0, #7
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
    bf58:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
	const uint16_t eff_tx_octets =
    bf5c:	2a1b      	cmp	r2, #27
    bf5e:	bf38      	it	cc
    bf60:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    bf62:	2804      	cmp	r0, #4
    bf64:	bf14      	ite	ne
    bf66:	f44f 70a4 	movne.w	r0, #328	; 0x148
    bf6a:	f44f 6029 	moveq.w	r0, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
    bf6e:	4561      	cmp	r1, ip
    bf70:	bf28      	it	cs
    bf72:	4661      	movcs	r1, ip
	const uint16_t eff_tx_time =
    bf74:	4281      	cmp	r1, r0
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
    bf76:	f8b3 c06c 	ldrh.w	ip, [r3, #108]	; 0x6c
	const uint16_t eff_tx_time =
    bf7a:	bf38      	it	cc
    bf7c:	4601      	movcc	r1, r0
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
    bf7e:	458c      	cmp	ip, r1
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    bf80:	f8b3 0068 	ldrh.w	r0, [r3, #104]	; 0x68
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
    bf84:	d014      	beq.n	bfb0 <ull_dle_update_eff_tx+0x74>
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    bf86:	4282      	cmp	r2, r0
		conn->lll.dle.eff.max_tx_time = eff_tx_time;
    bf88:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    bf8c:	d001      	beq.n	bf92 <ull_dle_update_eff_tx+0x56>
		conn->lll.dle.eff.max_tx_octets = eff_tx_octets;
    bf8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	conn->lll.evt_len_upd |= conn->lll.evt_len_upd_delayed;
    bf92:	f04f 0c01 	mov.w	ip, #1
    bf96:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
    bf9a:	4660      	mov	r0, ip
    bf9c:	f3c1 0240 	ubfx	r2, r1, #1, #1
    bfa0:	ea42 020c 	orr.w	r2, r2, ip
    bfa4:	f021 0103 	bic.w	r1, r1, #3
    bfa8:	430a      	orrs	r2, r1
    bfaa:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
#endif

	return dle_changed;
}
    bfae:	4770      	bx	lr
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    bfb0:	4282      	cmp	r2, r0
    bfb2:	d1ec      	bne.n	bf8e <ull_dle_update_eff_tx+0x52>
	conn->lll.evt_len_upd |= conn->lll.evt_len_upd_delayed;
    bfb4:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
    bfb8:	2000      	movs	r0, #0
    bfba:	f001 0c01 	and.w	ip, r1, #1
    bfbe:	e7ed      	b.n	bf9c <ull_dle_update_eff_tx+0x60>

0000bfc0 <ull_dle_local_tx_update>:
	uint16_t tx_time_max =
			PDU_DC_MAX_US(LL_LENGTH_OCTETS_TX_MAX, PHY_1M);
#endif /* !CONFIG_BT_CTLR_PHY_CODED */

	/* trim to supported values */
	if (*tx_octets > LL_LENGTH_OCTETS_TX_MAX) {
    bfc0:	291b      	cmp	r1, #27
    bfc2:	bf28      	it	cs
    bfc4:	211b      	movcs	r1, #27
		*tx_octets = LL_LENGTH_OCTETS_TX_MAX;
	}

	if (*tx_time > tx_time_max) {
    bfc6:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
	*max_tx_time = tx_time;
    bfca:	4b06      	ldr	r3, [pc, #24]	; (bfe4 <ull_dle_local_tx_update+0x24>)
void ull_dle_local_tx_update(struct ll_conn *conn, uint16_t tx_octets, uint16_t tx_time)
{
	/* Trim to supported values */
	ull_len_data_length_trim(&tx_octets, &tx_time);

	conn->lll.dle.default_tx_octets = tx_octets;
    bfcc:	f8a0 1072 	strh.w	r1, [r0, #114]	; 0x72
	if (*tx_time > tx_time_max) {
    bfd0:	bf28      	it	cs
    bfd2:	f44f 72a4 	movcs.w	r2, #328	; 0x148

#if defined(CONFIG_BT_CTLR_PHY)
	conn->lll.dle.default_tx_time = tx_time;
    bfd6:	f8a0 2070 	strh.w	r2, [r0, #112]	; 0x70
	*max_tx_time = tx_time;
    bfda:	65c3      	str	r3, [r0, #92]	; 0x5c
#endif /* CONFIG_BT_CTLR_PHY */

	dle_max_time_get(conn, &conn->lll.dle.local.max_rx_time, &conn->lll.dle.local.max_tx_time);
	conn->lll.dle.local.max_tx_octets = conn->lll.dle.default_tx_octets;
    bfdc:	f8a0 1058 	strh.w	r1, [r0, #88]	; 0x58
}
    bfe0:	4770      	bx	lr
    bfe2:	bf00      	nop
    bfe4:	01480148 	.word	0x01480148

0000bfe8 <ull_dle_init>:

void ull_dle_init(struct ll_conn *conn, uint8_t phy)
{
    bfe8:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_CTLR_PHY)
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
    bfea:	f001 0503 	and.w	r5, r1, #3
    bfee:	3528      	adds	r5, #40	; 0x28
{
    bff0:	4604      	mov	r4, r0
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
    bff2:	f3c1 0340 	ubfx	r3, r1, #1, #1
	const uint16_t max_time_max = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, phy);
#endif /* CONFIG_BT_CTLR_PHY */

	/* Clear DLE data set */
	memset(&conn->lll.dle, 0, sizeof(conn->lll.dle));
    bff6:	221e      	movs	r2, #30
    bff8:	2100      	movs	r1, #0
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
    bffa:	00ed      	lsls	r5, r5, #3
	memset(&conn->lll.dle, 0, sizeof(conn->lll.dle));
    bffc:	3058      	adds	r0, #88	; 0x58
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
    bffe:	40dd      	lsrs	r5, r3
	memset(&conn->lll.dle, 0, sizeof(conn->lll.dle));
    c000:	f00b fd07 	bl	17a12 <memset>
	/* See BT. 5.2 Spec - Vol 6, Part B, Sect 4.5.10
	 * Default to locally max supported rx/tx length/time
	 */
	ull_dle_local_tx_update(conn, default_tx_octets, default_tx_time);
    c004:	4a31      	ldr	r2, [pc, #196]	; (c0cc <ull_dle_init+0xe4>)
    c006:	4b32      	ldr	r3, [pc, #200]	; (c0d0 <ull_dle_init+0xe8>)
	if (*tx_octets > LL_LENGTH_OCTETS_TX_MAX) {
    c008:	8812      	ldrh	r2, [r2, #0]
	if (*tx_time > tx_time_max) {
    c00a:	881b      	ldrh	r3, [r3, #0]
	if (*tx_octets > LL_LENGTH_OCTETS_TX_MAX) {
    c00c:	2a1b      	cmp	r2, #27
    c00e:	bf28      	it	cs
    c010:	221b      	movcs	r2, #27
	if (*tx_time > tx_time_max) {
    c012:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    c016:	bf28      	it	cs
    c018:	f44f 73a4 	movcs.w	r3, #328	; 0x148
	conn->lll.dle.default_tx_time = tx_time;
    c01c:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	*max_tx_time = tx_time;
    c020:	f44f 73a4 	mov.w	r3, #328	; 0x148
    c024:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	unsigned int min_eff_rx_time = (conn->lll.phy_rx == PHY_CODED) ?
    c028:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
	conn->lll.dle.default_tx_octets = tx_octets;
    c02c:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    c030:	f003 0307 	and.w	r3, r3, #7
    c034:	2b04      	cmp	r3, #4
    c036:	bf14      	ite	ne
    c038:	f44f 73a4 	movne.w	r3, #328	; 0x148
    c03c:	f44f 6329 	moveq.w	r3, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    c040:	42ab      	cmp	r3, r5

	conn->lll.dle.local.max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    c042:	f04f 011b 	mov.w	r1, #27
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    c046:	bf38      	it	cc
    c048:	462b      	movcc	r3, r5
	conn->lll.dle.local.max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    c04a:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    c04e:	f8b4 106e 	ldrh.w	r1, [r4, #110]	; 0x6e
	conn->lll.dle.local.max_tx_octets = conn->lll.dle.default_tx_octets;
    c052:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
	const uint16_t eff_rx_time =
    c056:	b29b      	uxth	r3, r3
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
    c058:	b2ae      	uxth	r6, r5
#if defined(CONFIG_BT_CTLR_PHY)
	conn->lll.dle.local.max_rx_time = max_time_max;
#endif /* CONFIG_BT_CTLR_PHY */

	/* Default to minimum rx/tx data length/time */
	conn->lll.dle.remote.max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    c05a:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    c05e:	4299      	cmp	r1, r3
	conn->lll.dle.remote.max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    c060:	6622      	str	r2, [r4, #96]	; 0x60
	conn->lll.dle.local.max_rx_time = max_time_max;
    c062:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    c066:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
	conn->lll.dle.remote.max_rx_octets = PDU_DC_PAYLOAD_SIZE_MIN;

#if defined(CONFIG_BT_CTLR_PHY)
	conn->lll.dle.remote.max_tx_time = max_time_min;
    c06a:	f8a4 6064 	strh.w	r6, [r4, #100]	; 0x64
	conn->lll.dle.remote.max_rx_time = max_time_min;
    c06e:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    c072:	d01c      	beq.n	c0ae <ull_dle_init+0xc6>
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    c074:	2a1b      	cmp	r2, #27
		conn->lll.dle.eff.max_rx_time = eff_rx_time;
    c076:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    c07a:	d002      	beq.n	c082 <ull_dle_init+0x9a>
		conn->lll.dle.eff.max_rx_octets = eff_rx_octets;
    c07c:	231b      	movs	r3, #27
    c07e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		conn->lll.evt_len_upd_delayed = 1;
    c082:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
    c086:	f043 0302 	orr.w	r3, r3, #2
	dle_changed |= ull_dle_update_eff_tx(conn);
    c08a:	4620      	mov	r0, r4
		conn->lll.evt_len_upd_delayed = 1;
    c08c:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
	dle_changed |= ull_dle_update_eff_tx(conn);
    c090:	f7ff ff54 	bl	bf3c <ull_dle_update_eff_tx>
		conn->lll.evt_len_upd = 1U;
    c094:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1

	/* Check whether the controller should perform a data length update after
	 * connection is established
	 */
#if defined(CONFIG_BT_CTLR_PHY)
	if ((conn->lll.dle.local.max_rx_time != max_time_min ||
    c098:	f5b5 7fa4 	cmp.w	r5, #328	; 0x148
		conn->lll.evt_len_upd = 1U;
    c09c:	f043 0301 	orr.w	r3, r3, #1
    c0a0:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
	if ((conn->lll.dle.local.max_rx_time != max_time_min ||
    c0a4:	d00d      	beq.n	c0c2 <ull_dle_init+0xda>
	     conn->lll.dle.local.max_tx_time != max_time_min)) {
		conn->lll.dle.update = 1;
    c0a6:	2301      	movs	r3, #1
    c0a8:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		if (conn->lll.dle.local.max_tx_octets != PDU_DC_PAYLOAD_SIZE_MIN ||
		    conn->lll.dle.local.max_rx_octets != PDU_DC_PAYLOAD_SIZE_MIN) {
			conn->lll.dle.update = 1;
		}
	}
}
    c0ac:	bd70      	pop	{r4, r5, r6, pc}
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    c0ae:	2a1b      	cmp	r2, #27
    c0b0:	d1e4      	bne.n	c07c <ull_dle_init+0x94>
	dle_changed |= ull_dle_update_eff_tx(conn);
    c0b2:	4620      	mov	r0, r4
    c0b4:	f7ff ff42 	bl	bf3c <ull_dle_update_eff_tx>
	if (dle_changed) {
    c0b8:	2800      	cmp	r0, #0
    c0ba:	d1eb      	bne.n	c094 <ull_dle_init+0xac>
	if ((conn->lll.dle.local.max_rx_time != max_time_min ||
    c0bc:	f5b5 7fa4 	cmp.w	r5, #328	; 0x148
    c0c0:	d1f1      	bne.n	c0a6 <ull_dle_init+0xbe>
		if (conn->lll.dle.local.max_tx_octets != PDU_DC_PAYLOAD_SIZE_MIN ||
    c0c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    c0c4:	f1b3 1f1b 	cmp.w	r3, #1769499	; 0x1b001b
    c0c8:	d1ed      	bne.n	c0a6 <ull_dle_init+0xbe>
}
    c0ca:	bd70      	pop	{r4, r5, r6, pc}
    c0cc:	20002620 	.word	0x20002620
    c0d0:	2000261e 	.word	0x2000261e

0000c0d4 <llcp_rp_enc_tx>:
/*
 * LLCP Remote Procedure Encryption FSM
 */

static struct node_tx *llcp_rp_enc_tx(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t opcode)
{
    c0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0d6:	4606      	mov	r6, r0
    c0d8:	460f      	mov	r7, r1
    c0da:	4615      	mov	r5, r2
	struct node_tx *tx;
	struct pdu_data *pdu;

	/* Allocate tx node */
	tx = llcp_tx_alloc(conn, ctx);
    c0dc:	f001 f8ee 	bl	d2bc <llcp_tx_alloc>
	LL_ASSERT(tx);
    c0e0:	4604      	mov	r4, r0
    c0e2:	2800      	cmp	r0, #0
    c0e4:	d039      	beq.n	c15a <llcp_rp_enc_tx+0x86>

	pdu = (struct pdu_data *)tx->pdu;

	/* Encode LL Control PDU */
	switch (opcode) {
    c0e6:	1f2a      	subs	r2, r5, #4
	pdu = (struct pdu_data *)tx->pdu;
    c0e8:	1d20      	adds	r0, r4, #4
	switch (opcode) {
    c0ea:	2a09      	cmp	r2, #9
    c0ec:	d806      	bhi.n	c0fc <llcp_rp_enc_tx+0x28>
    c0ee:	e8df f002 	tbb	[pc, r2]
    c0f2:	201d      	.short	0x201d
    c0f4:	05050523 	.word	0x05050523
    c0f8:	29052605 	.word	0x29052605
		} else {
			llcp_pdu_encode_reject_ind(pdu, BT_HCI_ERR_PIN_OR_KEY_MISSING);
		}
		break;
	default:
		LL_ASSERT(0);
    c0fc:	4a20      	ldr	r2, [pc, #128]	; (c180 <llcp_rp_enc_tx+0xac>)
    c0fe:	4921      	ldr	r1, [pc, #132]	; (c184 <llcp_rp_enc_tx+0xb0>)
    c100:	4821      	ldr	r0, [pc, #132]	; (c188 <llcp_rp_enc_tx+0xb4>)
    c102:	f44f 7339 	mov.w	r3, #740	; 0x2e4
    c106:	f00b f9ec 	bl	174e2 <assert_print>
    c10a:	4040      	eors	r0, r0
    c10c:	f380 8811 	msr	BASEPRI, r0
    c110:	f04f 0003 	mov.w	r0, #3
    c114:	df02      	svc	2
	}

	ctx->tx_opcode = pdu->llctrl.opcode;
    c116:	79e3      	ldrb	r3, [r4, #7]
    c118:	737b      	strb	r3, [r7, #13]

	/* Enqueue LL Control PDU towards LLL */
	llcp_tx_enqueue(conn, tx);
    c11a:	4621      	mov	r1, r4
    c11c:	4630      	mov	r0, r6
    c11e:	f001 f8eb 	bl	d2f8 <llcp_tx_enqueue>

	/* Restart procedure response timeout timer */
	llcp_rr_prt_restart(conn);
    c122:	4630      	mov	r0, r6
    c124:	f003 ff1e 	bl	ff64 <llcp_rr_prt_restart>

	return tx;
}
    c128:	4620      	mov	r0, r4
    c12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		llcp_pdu_encode_enc_rsp(pdu);
    c12c:	f002 fd92 	bl	ec54 <llcp_pdu_encode_enc_rsp>
		break;
    c130:	e7f1      	b.n	c116 <llcp_rp_enc_tx+0x42>
		llcp_pdu_encode_start_enc_req(pdu);
    c132:	f002 fda7 	bl	ec84 <llcp_pdu_encode_start_enc_req>
		break;
    c136:	e7ee      	b.n	c116 <llcp_rp_enc_tx+0x42>
		llcp_pdu_encode_start_enc_rsp(pdu);
    c138:	f002 fdae 	bl	ec98 <llcp_pdu_encode_start_enc_rsp>
		break;
    c13c:	e7eb      	b.n	c116 <llcp_rp_enc_tx+0x42>
		llcp_pdu_encode_pause_enc_rsp(pdu);
    c13e:	f002 fdb5 	bl	ecac <llcp_pdu_encode_pause_enc_rsp>
		break;
    c142:	e7e8      	b.n	c116 <llcp_rp_enc_tx+0x42>
		if (conn->llcp.fex.valid && feature_ext_rej_ind(conn)) {
    c144:	f896 3120 	ldrb.w	r3, [r6, #288]	; 0x120
    c148:	b11b      	cbz	r3, c152 <llcp_rp_enc_tx+0x7e>
}

static inline bool feature_ext_rej_ind(struct ll_conn *conn)
{
#if defined(CONFIG_BT_CTLR_EXT_REJ_IND)
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_EXT_REJ_IND) != 0;
    c14a:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
    c14e:	075b      	lsls	r3, r3, #29
    c150:	d411      	bmi.n	c176 <llcp_rp_enc_tx+0xa2>
			llcp_pdu_encode_reject_ind(pdu, BT_HCI_ERR_PIN_OR_KEY_MISSING);
    c152:	2106      	movs	r1, #6
    c154:	f002 fdb4 	bl	ecc0 <llcp_pdu_encode_reject_ind>
    c158:	e7dd      	b.n	c116 <llcp_rp_enc_tx+0x42>
	LL_ASSERT(tx);
    c15a:	4a09      	ldr	r2, [pc, #36]	; (c180 <llcp_rp_enc_tx+0xac>)
    c15c:	490b      	ldr	r1, [pc, #44]	; (c18c <llcp_rp_enc_tx+0xb8>)
    c15e:	480a      	ldr	r0, [pc, #40]	; (c188 <llcp_rp_enc_tx+0xb4>)
    c160:	f240 23c9 	movw	r3, #713	; 0x2c9
    c164:	f00b f9bd 	bl	174e2 <assert_print>
    c168:	4040      	eors	r0, r0
    c16a:	f380 8811 	msr	BASEPRI, r0
    c16e:	f04f 0003 	mov.w	r0, #3
    c172:	df02      	svc	2
    c174:	e7b7      	b.n	c0e6 <llcp_rp_enc_tx+0x12>
			llcp_pdu_encode_reject_ext_ind(pdu, PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    c176:	2206      	movs	r2, #6
    c178:	2103      	movs	r1, #3
    c17a:	f002 fdad 	bl	ecd8 <llcp_pdu_encode_reject_ext_ind>
    c17e:	e7ca      	b.n	c116 <llcp_rp_enc_tx+0x42>
    c180:	0001bf18 	.word	0x0001bf18
    c184:	0001b908 	.word	0x0001b908
    c188:	0001b844 	.word	0x0001b844
    c18c:	0001bee8 	.word	0x0001bee8

0000c190 <rp_enc_ntf_ltk>:

static void rp_enc_ntf_ltk(struct ll_conn *conn, struct proc_ctx *ctx)
{
    c190:	b570      	push	{r4, r5, r6, lr}
    c192:	4606      	mov	r6, r0
    c194:	460d      	mov	r5, r1
	struct node_rx_pdu *ntf;
	struct pdu_data *pdu;

	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
    c196:	f001 f8ad 	bl	d2f4 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
    c19a:	4604      	mov	r4, r0
    c19c:	b170      	cbz	r0, c1bc <rp_enc_ntf_ltk+0x2c>

	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
    c19e:	2303      	movs	r3, #3
    c1a0:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
    c1a2:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    c1a4:	80e3      	strh	r3, [r4, #6]
	pdu = (struct pdu_data *)ntf->pdu;

	llcp_ntf_encode_enc_req(ctx, pdu);
    c1a6:	4628      	mov	r0, r5
    c1a8:	f104 011c 	add.w	r1, r4, #28
    c1ac:	f002 fd3a 	bl	ec24 <llcp_ntf_encode_enc_req>

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
    c1b0:	6820      	ldr	r0, [r4, #0]
    c1b2:	4621      	mov	r1, r4
}
    c1b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
    c1b8:	f7fc baa0 	b.w	86fc <ll_rx_put_sched>
	LL_ASSERT(ntf);
    c1bc:	4a06      	ldr	r2, [pc, #24]	; (c1d8 <rp_enc_ntf_ltk+0x48>)
    c1be:	4907      	ldr	r1, [pc, #28]	; (c1dc <rp_enc_ntf_ltk+0x4c>)
    c1c0:	4807      	ldr	r0, [pc, #28]	; (c1e0 <rp_enc_ntf_ltk+0x50>)
    c1c2:	f240 23f9 	movw	r3, #761	; 0x2f9
    c1c6:	f00b f98c 	bl	174e2 <assert_print>
    c1ca:	4040      	eors	r0, r0
    c1cc:	f380 8811 	msr	BASEPRI, r0
    c1d0:	f04f 0003 	mov.w	r0, #3
    c1d4:	df02      	svc	2
    c1d6:	e7e2      	b.n	c19e <rp_enc_ntf_ltk+0xe>
    c1d8:	0001bf18 	.word	0x0001bf18
    c1dc:	0001bf5c 	.word	0x0001bf5c
    c1e0:	0001b844 	.word	0x0001b844

0000c1e4 <rp_enc_send_start_enc_req.part.0>:
		rp_enc_store_s(conn, ctx, (struct pdu_data *)tx->pdu);
		rp_enc_send_ltk_ntf(conn, ctx, evt, param);
	}
}

static void rp_enc_send_start_enc_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
    c1e4:	b570      	push	{r4, r5, r6, lr}
    c1e6:	460d      	mov	r5, r1
	ecb_encrypt(&ctx->data.enc.ltk[0], &ctx->data.enc.skd[0], NULL, &conn->lll.ccm_rx.key[0]);
    c1e8:	f100 068f 	add.w	r6, r0, #143	; 0x8f
static void rp_enc_send_start_enc_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
    c1ec:	4604      	mov	r4, r0
	ecb_encrypt(&ctx->data.enc.ltk[0], &ctx->data.enc.skd[0], NULL, &conn->lll.ccm_rx.key[0]);
    c1ee:	4633      	mov	r3, r6
    c1f0:	2200      	movs	r2, #0
    c1f2:	3137      	adds	r1, #55	; 0x37
    c1f4:	f105 0027 	add.w	r0, r5, #39	; 0x27
    c1f8:	f006 f9b4 	bl	12564 <ecb_encrypt>
	memcpy(&conn->lll.ccm_tx.key[0], &conn->lll.ccm_rx.key[0], sizeof(conn->lll.ccm_tx.key));
    c1fc:	2210      	movs	r2, #16
    c1fe:	4631      	mov	r1, r6
    c200:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    c204:	f00b fbfa 	bl	179fc <memcpy>
	memcpy(&conn->lll.ccm_tx.iv[0], &conn->lll.ccm_rx.iv[0], sizeof(conn->lll.ccm_tx.iv));
    c208:	2208      	movs	r2, #8
    c20a:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
    c20e:	f104 00c9 	add.w	r0, r4, #201	; 0xc9
    c212:	f00b fbf3 	bl	179fc <memcpy>
	conn->lll.ccm_tx.counter = 0U;
    c216:	2000      	movs	r0, #0
    c218:	2100      	movs	r1, #0
		conn->lll.ccm_rx.direction = 1U;
    c21a:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
	conn->lll.ccm_tx.counter = 0U;
    c21e:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
		conn->lll.ccm_tx.direction = 0U;
    c222:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
	conn->lll.ccm_rx.counter = 0U;
    c226:	2300      	movs	r3, #0
		conn->lll.ccm_tx.direction = 0U;
    c228:	f363 0100 	bfi	r1, r3, #0, #1
	conn->lll.ccm_rx.counter = 0U;
    c22c:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
    c230:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    c234:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    c238:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
    c23c:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
    c240:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
    c244:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    c248:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
		conn->lll.ccm_rx.direction = 1U;
    c24c:	f042 0301 	orr.w	r3, r2, #1
		conn->lll.ccm_tx.direction = 0U;
    c250:	f884 10c8 	strb.w	r1, [r4, #200]	; 0xc8
		conn->lll.ccm_rx.direction = 1U;
    c254:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
{
	if (!llcp_tx_alloc_peek(conn, ctx)) {
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_REQ;
	} else {
		enc_setup_lll(conn, ctx, BT_HCI_ROLE_PERIPHERAL);
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_START_ENC_REQ);
    c258:	2205      	movs	r2, #5
    c25a:	4629      	mov	r1, r5
    c25c:	4620      	mov	r0, r4
    c25e:	f7ff ff39 	bl	c0d4 <llcp_rp_enc_tx>
		/* Wait for the LL_START_ENC_RSP */
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
		ctx->state = RP_ENC_STATE_WAIT_RX_START_ENC_RSP;
    c262:	f240 6307 	movw	r3, #1543	; 0x607
    c266:	816b      	strh	r3, [r5, #10]

		/* Rx Decryption enabled */
		conn->lll.enc_rx = 1U;
    c268:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    c26c:	f043 0308 	orr.w	r3, r3, #8
    c270:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	}
}
    c274:	bd70      	pop	{r4, r5, r6, pc}
    c276:	bf00      	nop

0000c278 <rp_enc_send_enc_rsp.part.0.isra.0>:
static void rp_enc_send_enc_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
    c278:	b570      	push	{r4, r5, r6, lr}
		tx = llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_ENC_RSP);
    c27a:	2204      	movs	r2, #4
static void rp_enc_send_enc_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
    c27c:	460c      	mov	r4, r1
    c27e:	4606      	mov	r6, r0
		tx = llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_ENC_RSP);
    c280:	f7ff ff28 	bl	c0d4 <llcp_rp_enc_tx>
	memcpy(&ctx->data.enc.skds, pdu->llctrl.enc_rsp.skds, sizeof(pdu->llctrl.enc_rsp.skds));
    c284:	2208      	movs	r2, #8
    c286:	1881      	adds	r1, r0, r2
		tx = llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_ENC_RSP);
    c288:	4605      	mov	r5, r0
	memcpy(&ctx->data.enc.skds, pdu->llctrl.enc_rsp.skds, sizeof(pdu->llctrl.enc_rsp.skds));
    c28a:	f104 003f 	add.w	r0, r4, #63	; 0x3f
    c28e:	f00b fbb5 	bl	179fc <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4], pdu->llctrl.enc_rsp.ivs, sizeof(pdu->llctrl.enc_rsp.ivs));
    c292:	2204      	movs	r2, #4
    c294:	f105 0110 	add.w	r1, r5, #16
    c298:	f106 00ac 	add.w	r0, r6, #172	; 0xac
    c29c:	f00b fbae 	bl	179fc <memcpy>
	if (!llcp_ntf_alloc_is_available()) {
    c2a0:	f001 f818 	bl	d2d4 <llcp_ntf_alloc_is_available>
    c2a4:	b910      	cbnz	r0, c2ac <rp_enc_send_enc_rsp.part.0.isra.0+0x34>
    c2a6:	2303      	movs	r3, #3
		ctx->state = RP_ENC_STATE_WAIT_NTF_LTK_REQ;
    c2a8:	72a3      	strb	r3, [r4, #10]
}
    c2aa:	bd70      	pop	{r4, r5, r6, pc}
		rp_enc_ntf_ltk(conn, ctx);
    c2ac:	4621      	mov	r1, r4
    c2ae:	4630      	mov	r0, r6
    c2b0:	f7ff ff6e 	bl	c190 <rp_enc_ntf_ltk>
}
    c2b4:	2304      	movs	r3, #4
		ctx->state = RP_ENC_STATE_WAIT_NTF_LTK_REQ;
    c2b6:	72a3      	strb	r3, [r4, #10]
}
    c2b8:	bd70      	pop	{r4, r5, r6, pc}
    c2ba:	bf00      	nop

0000c2bc <rp_enc_complete.isra.0>:
static void rp_enc_complete(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    c2bc:	b570      	push	{r4, r5, r6, lr}
    c2be:	4605      	mov	r5, r0
    c2c0:	460c      	mov	r4, r1
	if (!llcp_ntf_alloc_is_available()) {
    c2c2:	f001 f807 	bl	d2d4 <llcp_ntf_alloc_is_available>
    c2c6:	b910      	cbnz	r0, c2ce <rp_enc_complete.isra.0+0x12>
		ctx->state = RP_ENC_STATE_WAIT_NTF;
    c2c8:	2308      	movs	r3, #8
    c2ca:	72a3      	strb	r3, [r4, #10]
}
    c2cc:	bd70      	pop	{r4, r5, r6, pc}
	ntf = llcp_ntf_alloc();
    c2ce:	f001 f811 	bl	d2f4 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
    c2d2:	4606      	mov	r6, r0
    c2d4:	2800      	cmp	r0, #0
    c2d6:	d044      	beq.n	c362 <rp_enc_complete.isra.0+0xa6>
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
    c2d8:	2303      	movs	r3, #3
    c2da:	7133      	strb	r3, [r6, #4]
	ntf->hdr.handle = conn->lll.handle;
    c2dc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    c2de:	80f3      	strh	r3, [r6, #6]
	if (ctx->proc == PROC_ENCRYPTION_START) {
    c2e0:	7a23      	ldrb	r3, [r4, #8]
    c2e2:	2b05      	cmp	r3, #5
    c2e4:	d038      	beq.n	c358 <rp_enc_complete.isra.0+0x9c>
	} else if (ctx->proc == PROC_ENCRYPTION_PAUSE) {
    c2e6:	2b06      	cmp	r3, #6
    c2e8:	d10d      	bne.n	c306 <rp_enc_complete.isra.0+0x4a>
		ntf->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    c2ea:	231a      	movs	r3, #26
    c2ec:	7133      	strb	r3, [r6, #4]
	ll_rx_put_sched(ntf->hdr.link, ntf);
    c2ee:	6830      	ldr	r0, [r6, #0]
    c2f0:	4631      	mov	r1, r6
    c2f2:	f7fc fa03 	bl	86fc <ll_rx_put_sched>
}

static void rp_enc_send_start_enc_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
				      void *param)
{
	if (!llcp_tx_alloc_peek(conn, ctx)) {
    c2f6:	4621      	mov	r1, r4
    c2f8:	4628      	mov	r0, r5
    c2fa:	f000 ffd7 	bl	d2ac <llcp_tx_alloc_peek>
    c2fe:	b980      	cbnz	r0, c322 <rp_enc_complete.isra.0+0x66>
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_RSP;
    c300:	2309      	movs	r3, #9
    c302:	72a3      	strb	r3, [r4, #10]
}
    c304:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
    c306:	4a1e      	ldr	r2, [pc, #120]	; (c380 <rp_enc_complete.isra.0+0xc4>)
    c308:	491e      	ldr	r1, [pc, #120]	; (c384 <rp_enc_complete.isra.0+0xc8>)
    c30a:	481f      	ldr	r0, [pc, #124]	; (c388 <rp_enc_complete.isra.0+0xcc>)
    c30c:	f240 331b 	movw	r3, #795	; 0x31b
    c310:	f00b f8e7 	bl	174e2 <assert_print>
    c314:	4040      	eors	r0, r0
    c316:	f380 8811 	msr	BASEPRI, r0
    c31a:	f04f 0003 	mov.w	r0, #3
    c31e:	df02      	svc	2
    c320:	e7e5      	b.n	c2ee <rp_enc_complete.isra.0+0x32>
	} else {
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_START_ENC_RSP);
    c322:	2206      	movs	r2, #6
    c324:	4621      	mov	r1, r4
    c326:	4628      	mov	r0, r5
    c328:	f7ff fed4 	bl	c0d4 <llcp_rp_enc_tx>
		llcp_rr_complete(conn);
    c32c:	4628      	mov	r0, r5
    c32e:	f003 fe97 	bl	10060 <llcp_rr_complete>
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
    c332:	2300      	movs	r3, #0
    c334:	72a3      	strb	r3, [r4, #10]

		/* Resume Tx data */
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
    c336:	2101      	movs	r1, #1
    c338:	4628      	mov	r0, r5
    c33a:	f000 fff5 	bl	d328 <llcp_tx_resume_data>
		/* Resume Rx data */
		ull_conn_resume_rx_data(conn);
    c33e:	4628      	mov	r0, r5
    c340:	f7ff fd14 	bl	bd6c <ull_conn_resume_rx_data>

		/* Resume possibly paused local procedure */
		llcp_lr_resume(conn);
    c344:	4628      	mov	r0, r5
    c346:	f002 fa5f 	bl	e808 <llcp_lr_resume>

		/* Tx Encryption enabled */
		conn->lll.enc_tx = 1U;
    c34a:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    c34e:	f043 0310 	orr.w	r3, r3, #16
    c352:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
}
    c356:	bd70      	pop	{r4, r5, r6, pc}
		llcp_pdu_encode_start_enc_rsp(pdu);
    c358:	f106 001c 	add.w	r0, r6, #28
    c35c:	f002 fc9c 	bl	ec98 <llcp_pdu_encode_start_enc_rsp>
    c360:	e7c5      	b.n	c2ee <rp_enc_complete.isra.0+0x32>
	LL_ASSERT(ntf);
    c362:	4a07      	ldr	r2, [pc, #28]	; (c380 <rp_enc_complete.isra.0+0xc4>)
    c364:	4909      	ldr	r1, [pc, #36]	; (c38c <rp_enc_complete.isra.0+0xd0>)
    c366:	4808      	ldr	r0, [pc, #32]	; (c388 <rp_enc_complete.isra.0+0xcc>)
    c368:	f44f 7343 	mov.w	r3, #780	; 0x30c
    c36c:	f00b f8b9 	bl	174e2 <assert_print>
    c370:	4040      	eors	r0, r0
    c372:	f380 8811 	msr	BASEPRI, r0
    c376:	f04f 0003 	mov.w	r0, #3
    c37a:	df02      	svc	2
    c37c:	e7ac      	b.n	c2d8 <rp_enc_complete.isra.0+0x1c>
    c37e:	bf00      	nop
    c380:	0001bf18 	.word	0x0001bf18
    c384:	0001b908 	.word	0x0001b908
    c388:	0001b844 	.word	0x0001b844
    c38c:	0001bf5c 	.word	0x0001bf5c

0000c390 <rp_enc_execute_fsm>:
		break;
	}
}

static void rp_enc_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
{
    c390:	b570      	push	{r4, r5, r6, lr}
    c392:	460c      	mov	r4, r1
	switch (ctx->state) {
    c394:	7a89      	ldrb	r1, [r1, #10]
{
    c396:	b082      	sub	sp, #8
    c398:	4606      	mov	r6, r0
    c39a:	4615      	mov	r5, r2
	switch (ctx->state) {
    c39c:	290d      	cmp	r1, #13
    c39e:	f200 80fa 	bhi.w	c596 <rp_enc_execute_fsm+0x206>
    c3a2:	e8df f001 	tbb	[pc, r1]
    c3a6:	1713      	.short	0x1713
    c3a8:	3e251b32 	.word	0x3e251b32
    c3ac:	58554c49 	.word	0x58554c49
    c3b0:	07786762 	.word	0x07786762
	switch (evt) {
    c3b4:	2d08      	cmp	r5, #8
    c3b6:	d10f      	bne.n	c3d8 <rp_enc_execute_fsm+0x48>
		ctx->state = RP_ENC_STATE_WAIT_RX_ENC_REQ;
    c3b8:	f240 3301 	movw	r3, #769	; 0x301
    c3bc:	8163      	strh	r3, [r4, #10]
		conn->lll.enc_tx = 0U;
    c3be:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    c3c2:	f36f 1304 	bfc	r3, #4, #1
    c3c6:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
		break;
    c3ca:	e005      	b.n	c3d8 <rp_enc_execute_fsm+0x48>
	switch (evt) {
    c3cc:	b925      	cbnz	r5, c3d8 <rp_enc_execute_fsm+0x48>
		ctx->state = RP_ENC_STATE_WAIT_RX_ENC_REQ;
    c3ce:	2301      	movs	r3, #1
    c3d0:	72a3      	strb	r3, [r4, #10]
		break;
    c3d2:	e001      	b.n	c3d8 <rp_enc_execute_fsm+0x48>
	switch (evt) {
    c3d4:	2d01      	cmp	r5, #1
    c3d6:	d07f      	beq.n	c4d8 <rp_enc_execute_fsm+0x148>
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
    c3d8:	b002      	add	sp, #8
    c3da:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    c3dc:	2d00      	cmp	r5, #0
    c3de:	d1fb      	bne.n	c3d8 <rp_enc_execute_fsm+0x48>
	if (!llcp_ntf_alloc_is_available()) {
    c3e0:	f000 ff78 	bl	d2d4 <llcp_ntf_alloc_is_available>
    c3e4:	2800      	cmp	r0, #0
    c3e6:	f040 80b5 	bne.w	c554 <rp_enc_execute_fsm+0x1c4>
		ctx->state = RP_ENC_STATE_WAIT_NTF_LTK_REQ;
    c3ea:	2303      	movs	r3, #3
    c3ec:	72a3      	strb	r3, [r4, #10]
    c3ee:	e7f3      	b.n	c3d8 <rp_enc_execute_fsm+0x48>
	switch (evt) {
    c3f0:	2d03      	cmp	r5, #3
    c3f2:	d018      	beq.n	c426 <rp_enc_execute_fsm+0x96>
    c3f4:	2d04      	cmp	r5, #4
    c3f6:	d1ef      	bne.n	c3d8 <rp_enc_execute_fsm+0x48>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
    c3f8:	4621      	mov	r1, r4
    c3fa:	4630      	mov	r0, r6
    c3fc:	f000 ff56 	bl	d2ac <llcp_tx_alloc_peek>
    c400:	2800      	cmp	r0, #0
    c402:	d152      	bne.n	c4aa <rp_enc_execute_fsm+0x11a>
		ctx->state = RP_ENC_STATE_WAIT_TX_REJECT_IND;
    c404:	2306      	movs	r3, #6
    c406:	72a3      	strb	r3, [r4, #10]
    c408:	e7e6      	b.n	c3d8 <rp_enc_execute_fsm+0x48>
	switch (evt) {
    c40a:	2d00      	cmp	r5, #0
    c40c:	d1e4      	bne.n	c3d8 <rp_enc_execute_fsm+0x48>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
    c40e:	4621      	mov	r1, r4
    c410:	4630      	mov	r0, r6
    c412:	f000 ff4b 	bl	d2ac <llcp_tx_alloc_peek>
    c416:	2800      	cmp	r0, #0
    c418:	f040 8095 	bne.w	c546 <rp_enc_execute_fsm+0x1b6>
		ctx->state = RP_ENC_STATE_WAIT_TX_ENC_RSP;
    c41c:	2302      	movs	r3, #2
    c41e:	72a3      	strb	r3, [r4, #10]
    c420:	e7da      	b.n	c3d8 <rp_enc_execute_fsm+0x48>
	switch (evt) {
    c422:	2d00      	cmp	r5, #0
    c424:	d1d8      	bne.n	c3d8 <rp_enc_execute_fsm+0x48>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
    c426:	4621      	mov	r1, r4
    c428:	4630      	mov	r0, r6
    c42a:	f000 ff3f 	bl	d2ac <llcp_tx_alloc_peek>
    c42e:	2800      	cmp	r0, #0
    c430:	d134      	bne.n	c49c <rp_enc_execute_fsm+0x10c>
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_REQ;
    c432:	2305      	movs	r3, #5
    c434:	72a3      	strb	r3, [r4, #10]
    c436:	e7cf      	b.n	c3d8 <rp_enc_execute_fsm+0x48>
	switch (evt) {
    c438:	2d00      	cmp	r5, #0
    c43a:	d1cd      	bne.n	c3d8 <rp_enc_execute_fsm+0x48>
    c43c:	e7dc      	b.n	c3f8 <rp_enc_execute_fsm+0x68>
	switch (evt) {
    c43e:	2d02      	cmp	r5, #2
    c440:	d1ca      	bne.n	c3d8 <rp_enc_execute_fsm+0x48>
		rp_enc_complete(conn, ctx, evt, param);
    c442:	4621      	mov	r1, r4
    c444:	4630      	mov	r0, r6
}
    c446:	b002      	add	sp, #8
    c448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_enc_complete(conn, ctx, evt, param);
    c44c:	f7ff bf36 	b.w	c2bc <rp_enc_complete.isra.0>
	switch (evt) {
    c450:	2d00      	cmp	r5, #0
    c452:	d1c1      	bne.n	c3d8 <rp_enc_execute_fsm+0x48>
    c454:	e7f5      	b.n	c442 <rp_enc_execute_fsm+0xb2>
	switch (evt) {
    c456:	2d00      	cmp	r5, #0
    c458:	d1be      	bne.n	c3d8 <rp_enc_execute_fsm+0x48>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
    c45a:	4621      	mov	r1, r4
    c45c:	f000 ff26 	bl	d2ac <llcp_tx_alloc_peek>
    c460:	2800      	cmp	r0, #0
    c462:	d17e      	bne.n	c562 <rp_enc_execute_fsm+0x1d2>
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_RSP;
    c464:	2309      	movs	r3, #9
    c466:	72a3      	strb	r3, [r4, #10]
    c468:	e7b6      	b.n	c3d8 <rp_enc_execute_fsm+0x48>
	switch (evt) {
    c46a:	2d00      	cmp	r5, #0
    c46c:	d1b4      	bne.n	c3d8 <rp_enc_execute_fsm+0x48>
		ctx->state = RP_ENC_STATE_WAIT_RX_PAUSE_ENC_REQ;
    c46e:	230b      	movs	r3, #11
    c470:	72a3      	strb	r3, [r4, #10]
		break;
    c472:	e7b1      	b.n	c3d8 <rp_enc_execute_fsm+0x48>
	switch (evt) {
    c474:	2d07      	cmp	r5, #7
    c476:	d1af      	bne.n	c3d8 <rp_enc_execute_fsm+0x48>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
    c478:	2101      	movs	r1, #1
    c47a:	f000 ff41 	bl	d300 <llcp_tx_pause_data>
		ull_conn_pause_rx_data(conn);
    c47e:	4630      	mov	r0, r6
    c480:	f7ff fc6c 	bl	bd5c <ull_conn_pause_rx_data>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
    c484:	4621      	mov	r1, r4
    c486:	4630      	mov	r0, r6
    c488:	f000 ff10 	bl	d2ac <llcp_tx_alloc_peek>
    c48c:	2800      	cmp	r0, #0
    c48e:	d14b      	bne.n	c528 <rp_enc_execute_fsm+0x198>
		ctx->state = RP_ENC_STATE_WAIT_TX_PAUSE_ENC_RSP;
    c490:	230c      	movs	r3, #12
    c492:	72a3      	strb	r3, [r4, #10]
    c494:	e7a0      	b.n	c3d8 <rp_enc_execute_fsm+0x48>
	switch (evt) {
    c496:	2d00      	cmp	r5, #0
    c498:	d19e      	bne.n	c3d8 <rp_enc_execute_fsm+0x48>
    c49a:	e7f3      	b.n	c484 <rp_enc_execute_fsm+0xf4>
    c49c:	4621      	mov	r1, r4
    c49e:	4630      	mov	r0, r6
}
    c4a0:	b002      	add	sp, #8
    c4a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c4a6:	f7ff be9d 	b.w	c1e4 <rp_enc_send_start_enc_req.part.0>
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_REJECT_IND);
    c4aa:	220d      	movs	r2, #13
    c4ac:	4621      	mov	r1, r4
    c4ae:	4630      	mov	r0, r6
    c4b0:	f7ff fe10 	bl	c0d4 <llcp_rp_enc_tx>
		llcp_rr_complete(conn);
    c4b4:	4630      	mov	r0, r6
    c4b6:	f003 fdd3 	bl	10060 <llcp_rr_complete>
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
    c4ba:	2300      	movs	r3, #0
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
    c4bc:	2101      	movs	r1, #1
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
    c4be:	72a3      	strb	r3, [r4, #10]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
    c4c0:	4630      	mov	r0, r6
    c4c2:	f000 ff31 	bl	d328 <llcp_tx_resume_data>
		ull_conn_resume_rx_data(conn);
    c4c6:	4630      	mov	r0, r6
    c4c8:	f7ff fc50 	bl	bd6c <ull_conn_resume_rx_data>
		llcp_lr_resume(conn);
    c4cc:	4630      	mov	r0, r6
}
    c4ce:	b002      	add	sp, #8
    c4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_lr_resume(conn);
    c4d4:	f002 b998 	b.w	e808 <llcp_lr_resume>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
    c4d8:	4629      	mov	r1, r5
    c4da:	9301      	str	r3, [sp, #4]
    c4dc:	f000 ff10 	bl	d300 <llcp_tx_pause_data>
		ull_conn_pause_rx_data(conn);
    c4e0:	4630      	mov	r0, r6
    c4e2:	f7ff fc3b 	bl	bd5c <ull_conn_pause_rx_data>
		llcp_lr_pause(conn);
    c4e6:	4630      	mov	r0, r6
    c4e8:	f002 f98a 	bl	e800 <llcp_lr_pause>
	memcpy(ctx->data.enc.rand, pdu->llctrl.enc_req.rand, sizeof(ctx->data.enc.rand));
    c4ec:	9b01      	ldr	r3, [sp, #4]
    c4ee:	2208      	movs	r2, #8
    c4f0:	1d19      	adds	r1, r3, #4
    c4f2:	f104 001d 	add.w	r0, r4, #29
    c4f6:	f00b fa81 	bl	179fc <memcpy>
	ctx->data.enc.ediv[0] = pdu->llctrl.enc_req.ediv[0];
    c4fa:	9b01      	ldr	r3, [sp, #4]
    c4fc:	7b1a      	ldrb	r2, [r3, #12]
    c4fe:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	ctx->data.enc.ediv[1] = pdu->llctrl.enc_req.ediv[1];
    c502:	7b59      	ldrb	r1, [r3, #13]
    c504:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	memcpy(&ctx->data.enc.skdm, pdu->llctrl.enc_req.skdm, sizeof(ctx->data.enc.skdm));
    c508:	2208      	movs	r2, #8
    c50a:	f103 010e 	add.w	r1, r3, #14
    c50e:	f104 0037 	add.w	r0, r4, #55	; 0x37
    c512:	f00b fa73 	bl	179fc <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[0], pdu->llctrl.enc_req.ivm, sizeof(pdu->llctrl.enc_req.ivm));
    c516:	9b01      	ldr	r3, [sp, #4]
    c518:	2204      	movs	r2, #4
    c51a:	f103 0116 	add.w	r1, r3, #22
    c51e:	f106 00a8 	add.w	r0, r6, #168	; 0xa8
    c522:	f00b fa6b 	bl	179fc <memcpy>
    c526:	e772      	b.n	c40e <rp_enc_execute_fsm+0x7e>
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP);
    c528:	220b      	movs	r2, #11
    c52a:	4621      	mov	r1, r4
    c52c:	4630      	mov	r0, r6
    c52e:	f7ff fdd1 	bl	c0d4 <llcp_rp_enc_tx>
		ctx->state = RP_ENC_STATE_WAIT_RX_PAUSE_ENC_RSP;
    c532:	f640 330d 	movw	r3, #2829	; 0xb0d
    c536:	8163      	strh	r3, [r4, #10]
		conn->lll.enc_rx = 0U;
    c538:	f896 308e 	ldrb.w	r3, [r6, #142]	; 0x8e
    c53c:	f36f 03c3 	bfc	r3, #3, #1
    c540:	f886 308e 	strb.w	r3, [r6, #142]	; 0x8e
}
    c544:	e748      	b.n	c3d8 <rp_enc_execute_fsm+0x48>
    c546:	4621      	mov	r1, r4
    c548:	4630      	mov	r0, r6
}
    c54a:	b002      	add	sp, #8
    c54c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c550:	f7ff be92 	b.w	c278 <rp_enc_send_enc_rsp.part.0.isra.0>
		rp_enc_ntf_ltk(conn, ctx);
    c554:	4621      	mov	r1, r4
    c556:	4630      	mov	r0, r6
    c558:	f7ff fe1a 	bl	c190 <rp_enc_ntf_ltk>
		ctx->state = RP_ENC_STATE_WAIT_LTK_REPLY;
    c55c:	2304      	movs	r3, #4
    c55e:	72a3      	strb	r3, [r4, #10]
}
    c560:	e73a      	b.n	c3d8 <rp_enc_execute_fsm+0x48>
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_START_ENC_RSP);
    c562:	2206      	movs	r2, #6
    c564:	4621      	mov	r1, r4
    c566:	4630      	mov	r0, r6
    c568:	f7ff fdb4 	bl	c0d4 <llcp_rp_enc_tx>
		llcp_rr_complete(conn);
    c56c:	4630      	mov	r0, r6
    c56e:	f003 fd77 	bl	10060 <llcp_rr_complete>
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
    c572:	2101      	movs	r1, #1
    c574:	4630      	mov	r0, r6
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
    c576:	72a5      	strb	r5, [r4, #10]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
    c578:	f000 fed6 	bl	d328 <llcp_tx_resume_data>
		ull_conn_resume_rx_data(conn);
    c57c:	4630      	mov	r0, r6
    c57e:	f7ff fbf5 	bl	bd6c <ull_conn_resume_rx_data>
		llcp_lr_resume(conn);
    c582:	4630      	mov	r0, r6
    c584:	f002 f940 	bl	e808 <llcp_lr_resume>
		conn->lll.enc_tx = 1U;
    c588:	f896 308e 	ldrb.w	r3, [r6, #142]	; 0x8e
    c58c:	f043 0310 	orr.w	r3, r3, #16
    c590:	f886 308e 	strb.w	r3, [r6, #142]	; 0x8e
}
    c594:	e720      	b.n	c3d8 <rp_enc_execute_fsm+0x48>
		LL_ASSERT(0);
    c596:	4a07      	ldr	r2, [pc, #28]	; (c5b4 <rp_enc_execute_fsm+0x224>)
    c598:	4907      	ldr	r1, [pc, #28]	; (c5b8 <rp_enc_execute_fsm+0x228>)
    c59a:	4808      	ldr	r0, [pc, #32]	; (c5bc <rp_enc_execute_fsm+0x22c>)
    c59c:	f240 43b1 	movw	r3, #1201	; 0x4b1
    c5a0:	f00a ff9f 	bl	174e2 <assert_print>
    c5a4:	4040      	eors	r0, r0
    c5a6:	f380 8811 	msr	BASEPRI, r0
    c5aa:	f04f 0003 	mov.w	r0, #3
    c5ae:	df02      	svc	2
}
    c5b0:	e712      	b.n	c3d8 <rp_enc_execute_fsm+0x48>
    c5b2:	bf00      	nop
    c5b4:	0001bf18 	.word	0x0001bf18
    c5b8:	0001b908 	.word	0x0001b908
    c5bc:	0001b844 	.word	0x0001b844

0000c5c0 <llcp_rp_enc_rx>:

void llcp_rp_enc_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
    c5c0:	f892 c01f 	ldrb.w	ip, [r2, #31]
    c5c4:	f1ac 0c03 	sub.w	ip, ip, #3
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
    c5c8:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
    c5cc:	f1bc 0f08 	cmp.w	ip, #8
    c5d0:	d806      	bhi.n	c5e0 <llcp_rp_enc_rx+0x20>
    c5d2:	e8df f00c 	tbb	[pc, ip]
    c5d6:	0512      	.short	0x0512
    c5d8:	05050f05 	.word	0x05050f05
    c5dc:	0c05      	.short	0x0c05
    c5de:	09          	.byte	0x09
    c5df:	00          	.byte	0x00
		 * immediately exit the Connection state, and shall transition to the Standby state.
		 * The Host shall be notified that the link has been disconnected with the error
		 * code Connection Terminated Due to MIC Failure (0x3D).
		 */

		conn->llcp_terminate.reason_final = BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;
    c5e0:	233d      	movs	r3, #61	; 0x3d
    c5e2:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
	}
}
    c5e6:	4770      	bx	lr
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_PAUSE_ENC_RSP, pdu);
    c5e8:	2208      	movs	r2, #8
    c5ea:	f7ff bed1 	b.w	c390 <rp_enc_execute_fsm>
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_PAUSE_ENC_REQ, pdu);
    c5ee:	2207      	movs	r2, #7
    c5f0:	f7ff bece 	b.w	c390 <rp_enc_execute_fsm>
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_START_ENC_RSP, pdu);
    c5f4:	2202      	movs	r2, #2
    c5f6:	f7ff becb 	b.w	c390 <rp_enc_execute_fsm>
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_ENC_REQ, pdu);
    c5fa:	2201      	movs	r2, #1
    c5fc:	f7ff bec8 	b.w	c390 <rp_enc_execute_fsm>

0000c600 <llcp_rp_enc_init_proc>:

void llcp_rp_enc_init_proc(struct proc_ctx *ctx)
{
    c600:	b508      	push	{r3, lr}
	switch (ctx->proc) {
    c602:	7a03      	ldrb	r3, [r0, #8]
    c604:	2b05      	cmp	r3, #5
    c606:	d00f      	beq.n	c628 <llcp_rp_enc_init_proc+0x28>
    c608:	2b06      	cmp	r3, #6
    c60a:	d010      	beq.n	c62e <llcp_rp_enc_init_proc+0x2e>
		break;
	case PROC_ENCRYPTION_PAUSE:
		ctx->state = RP_ENC_STATE_ENCRYPTED;
		break;
	default:
		LL_ASSERT(0);
    c60c:	4a09      	ldr	r2, [pc, #36]	; (c634 <llcp_rp_enc_init_proc+0x34>)
    c60e:	490a      	ldr	r1, [pc, #40]	; (c638 <llcp_rp_enc_init_proc+0x38>)
    c610:	480a      	ldr	r0, [pc, #40]	; (c63c <llcp_rp_enc_init_proc+0x3c>)
    c612:	f240 43e6 	movw	r3, #1254	; 0x4e6
    c616:	f00a ff64 	bl	174e2 <assert_print>
    c61a:	4040      	eors	r0, r0
    c61c:	f380 8811 	msr	BASEPRI, r0
    c620:	f04f 0003 	mov.w	r0, #3
    c624:	df02      	svc	2
	}
}
    c626:	bd08      	pop	{r3, pc}
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
    c628:	2300      	movs	r3, #0
    c62a:	7283      	strb	r3, [r0, #10]
}
    c62c:	bd08      	pop	{r3, pc}
		ctx->state = RP_ENC_STATE_ENCRYPTED;
    c62e:	230a      	movs	r3, #10
    c630:	7283      	strb	r3, [r0, #10]
}
    c632:	bd08      	pop	{r3, pc}
    c634:	0001bf18 	.word	0x0001bf18
    c638:	0001b908 	.word	0x0001b908
    c63c:	0001b844 	.word	0x0001b844

0000c640 <llcp_rp_enc_ltk_req_reply>:

void llcp_rp_enc_ltk_req_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_LTK_REQ_REPLY, NULL);
    c640:	2300      	movs	r3, #0
    c642:	2203      	movs	r2, #3
    c644:	f7ff bea4 	b.w	c390 <rp_enc_execute_fsm>

0000c648 <llcp_rp_enc_ltk_req_neg_reply>:
}

void llcp_rp_enc_ltk_req_neg_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_LTK_REQ_NEG_REPLY, NULL);
    c648:	2300      	movs	r3, #0
    c64a:	2204      	movs	r2, #4
    c64c:	f7ff bea0 	b.w	c390 <rp_enc_execute_fsm>

0000c650 <llcp_rp_enc_ltk_req_reply_allowed>:
}

bool llcp_rp_enc_ltk_req_reply_allowed(struct ll_conn *conn, struct proc_ctx *ctx)
{
	return (ctx->state == RP_ENC_STATE_WAIT_LTK_REPLY);
    c650:	7a88      	ldrb	r0, [r1, #10]
}
    c652:	f1a0 0004 	sub.w	r0, r0, #4
    c656:	fab0 f080 	clz	r0, r0
    c65a:	0940      	lsrs	r0, r0, #5
    c65c:	4770      	bx	lr
    c65e:	bf00      	nop

0000c660 <llcp_rp_enc_run>:

void llcp_rp_enc_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
    c660:	4613      	mov	r3, r2
	rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_RUN, param);
    c662:	2200      	movs	r2, #0
    c664:	f7ff be94 	b.w	c390 <rp_enc_execute_fsm>

0000c668 <pu_check_update_ind>:
	 */
	return (phy < 5 && phy != 3);
}

static uint8_t pu_check_update_ind(struct ll_conn *conn, struct proc_ctx *ctx)
{
    c668:	b570      	push	{r4, r5, r6, lr}
	uint8_t ret = 0;

	/* Check if either phy selected is invalid */
	if (!phy_valid(ctx->data.pu.c_to_p_phy) || !phy_valid(ctx->data.pu.p_to_c_phy)) {
    c66a:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
    c66e:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
	return (phy < 5 && phy != 3);
    c672:	2b04      	cmp	r3, #4
{
    c674:	460c      	mov	r4, r1
	return (phy < 5 && phy != 3);
    c676:	d803      	bhi.n	c680 <pu_check_update_ind+0x18>
    c678:	2b03      	cmp	r3, #3
    c67a:	d001      	beq.n	c680 <pu_check_update_ind+0x18>
    c67c:	2a04      	cmp	r2, #4
    c67e:	d90b      	bls.n	c698 <pu_check_update_ind+0x30>
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
		ret = 1;
	}

	/* Both tx and rx PHY unchanged */
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
    c680:	4313      	orrs	r3, r2
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    c682:	2111      	movs	r1, #17
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
    c684:	f013 0307 	ands.w	r3, r3, #7
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    c688:	77a1      	strb	r1, [r4, #30]
		ret = 1;
    c68a:	f04f 0501 	mov.w	r5, #1
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
    c68e:	d10b      	bne.n	c6a8 <pu_check_update_ind+0x40>
		ret = 1;
	} else {
		/* if instant already passed, quit procedure with error */
		if (is_instant_reached_or_passed(ctx->data.pu.instant,
						 ull_conn_event_counter(conn))) {
			ctx->data.pu.error = BT_HCI_ERR_INSTANT_PASSED;
    c690:	77a3      	strb	r3, [r4, #30]
		ret = 1;
    c692:	2501      	movs	r5, #1
			ret = 1;
		}
	}
	return ret;
}
    c694:	4628      	mov	r0, r5
    c696:	bd70      	pop	{r4, r5, r6, pc}
	return (phy < 5 && phy != 3);
    c698:	2a03      	cmp	r2, #3
    c69a:	d00d      	beq.n	c6b8 <pu_check_update_ind+0x50>
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
    c69c:	4313      	orrs	r3, r2
    c69e:	f013 0307 	ands.w	r3, r3, #7
	uint8_t ret = 0;
    c6a2:	f04f 0500 	mov.w	r5, #0
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
    c6a6:	d0f3      	beq.n	c690 <pu_check_update_ind+0x28>
		if (is_instant_reached_or_passed(ctx->data.pu.instant,
    c6a8:	8c26      	ldrh	r6, [r4, #32]
    c6aa:	f7ff fb67 	bl	bd7c <ull_conn_event_counter>
    c6ae:	1b80      	subs	r0, r0, r6
    c6b0:	0403      	lsls	r3, r0, #16
    c6b2:	d4ef      	bmi.n	c694 <pu_check_update_ind+0x2c>
    c6b4:	2328      	movs	r3, #40	; 0x28
    c6b6:	e7eb      	b.n	c690 <pu_check_update_ind+0x28>
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    c6b8:	2311      	movs	r3, #17
    c6ba:	778b      	strb	r3, [r1, #30]
		ret = 1;
    c6bc:	2501      	movs	r5, #1
    c6be:	e7f3      	b.n	c6a8 <pu_check_update_ind+0x40>

0000c6c0 <pu_ntf>:
	/* Restart procedure response timeout timer */
	llcp_lr_prt_restart(conn);
}

static void pu_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
    c6c0:	b570      	push	{r4, r5, r6, lr}
    c6c2:	4606      	mov	r6, r0
    c6c4:	460d      	mov	r5, r1
	struct node_rx_pdu *ntf;
	struct node_rx_pu *pdu;

	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
    c6c6:	f000 fe15 	bl	d2f4 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
    c6ca:	4604      	mov	r4, r0
    c6cc:	b1c0      	cbz	r0, c700 <pu_ntf+0x40>

	ntf->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c6ce:	231d      	movs	r3, #29
    c6d0:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
    c6d2:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    c6d4:	80e3      	strh	r3, [r4, #6]
	pdu = (struct node_rx_pu *)ntf->pdu;

	pdu->status = ctx->data.pu.error;
    c6d6:	7fab      	ldrb	r3, [r5, #30]
    c6d8:	7723      	strb	r3, [r4, #28]
	pdu->rx = conn->lll.phy_rx;
    c6da:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
	pdu->tx = conn->lll.phy_tx;

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
    c6de:	6820      	ldr	r0, [r4, #0]
	pdu->rx = conn->lll.phy_rx;
    c6e0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c6e4:	77a3      	strb	r3, [r4, #30]
	pdu->tx = conn->lll.phy_tx;
    c6e6:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    c6ea:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c6ee:	7763      	strb	r3, [r4, #29]
	ll_rx_put_sched(ntf->hdr.link, ntf);
    c6f0:	4621      	mov	r1, r4
    c6f2:	f7fc f803 	bl	86fc <ll_rx_put_sched>
	ctx->data.pu.ntf_pu = 0;
    c6f6:	7f6b      	ldrb	r3, [r5, #29]
    c6f8:	f36f 0300 	bfc	r3, #0, #1
    c6fc:	776b      	strb	r3, [r5, #29]
}
    c6fe:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(ntf);
    c700:	4a06      	ldr	r2, [pc, #24]	; (c71c <pu_ntf+0x5c>)
    c702:	4907      	ldr	r1, [pc, #28]	; (c720 <pu_ntf+0x60>)
    c704:	4807      	ldr	r0, [pc, #28]	; (c724 <pu_ntf+0x64>)
    c706:	f240 13a5 	movw	r3, #421	; 0x1a5
    c70a:	f00a feea 	bl	174e2 <assert_print>
    c70e:	4040      	eors	r0, r0
    c710:	f380 8811 	msr	BASEPRI, r0
    c714:	f04f 0003 	mov.w	r0, #3
    c718:	df02      	svc	2
    c71a:	e7d8      	b.n	c6ce <pu_ntf+0xe>
    c71c:	0001bf60 	.word	0x0001bf60
    c720:	0001bf5c 	.word	0x0001bf5c
    c724:	0001b844 	.word	0x0001b844

0000c728 <pu_update_eff_times>:
{
    c728:	b5f0      	push	{r4, r5, r6, r7, lr}
    c72a:	460e      	mov	r6, r1
    c72c:	b083      	sub	sp, #12
	ull_dle_max_time_get(conn, &max_rx_time, &max_tx_time);
    c72e:	f10d 0206 	add.w	r2, sp, #6
    c732:	a901      	add	r1, sp, #4
	uint16_t eff_tx_time = lll->dle.eff.max_tx_time;
    c734:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
	uint16_t eff_rx_time = lll->dle.eff.max_rx_time;
    c738:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
{
    c73c:	4604      	mov	r4, r0
	ull_dle_max_time_get(conn, &max_rx_time, &max_tx_time);
    c73e:	f7ff fb3f 	bl	bdc0 <ull_dle_max_time_get>
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_PERIPHERAL)) ||
    c742:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    c746:	2a00      	cmp	r2, #0
    c748:	d15c      	bne.n	c804 <pu_update_eff_times+0xdc>
    c74a:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    c74e:	b9fb      	cbnz	r3, c790 <pu_update_eff_times+0x68>
	if ((eff_tx_time > lll->dle.eff.max_tx_time) ||
    c750:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    c754:	42ab      	cmp	r3, r5
    c756:	d30e      	bcc.n	c776 <pu_update_eff_times+0x4e>
    c758:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    c75c:	429a      	cmp	r2, r3
    c75e:	d30a      	bcc.n	c776 <pu_update_eff_times+0x4e>
	    (eff_rx_time > lll->dle.eff.max_rx_time) ||
    c760:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
	    (lll->dle.eff.max_tx_time > max_tx_time) ||
    c764:	42bb      	cmp	r3, r7
    c766:	d306      	bcc.n	c776 <pu_update_eff_times+0x4e>
	    (eff_rx_time > lll->dle.eff.max_rx_time) ||
    c768:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c76c:	429a      	cmp	r2, r3
    c76e:	d302      	bcc.n	c776 <pu_update_eff_times+0x4e>
	return 0U;
    c770:	2000      	movs	r0, #0
}
    c772:	b003      	add	sp, #12
    c774:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lll->evt_len_upd = 1U;
    c776:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
		lll->dle.eff.max_tx_time = eff_tx_time;
    c77a:	f8a4 506c 	strh.w	r5, [r4, #108]	; 0x6c
		lll->evt_len_upd = 1U;
    c77e:	f043 0301 	orr.w	r3, r3, #1
		return 1U;
    c782:	2001      	movs	r0, #1
		lll->dle.eff.max_rx_time = eff_rx_time;
    c784:	f8a4 706e 	strh.w	r7, [r4, #110]	; 0x6e
		lll->evt_len_upd = 1U;
    c788:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
}
    c78c:	b003      	add	sp, #12
    c78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    (ctx->data.pu.c_to_p_phy && (lll->role == BT_HCI_ROLE_CENTRAL))) {
    c790:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
    c794:	2800      	cmp	r0, #0
    c796:	db1d      	blt.n	c7d4 <pu_update_eff_times+0xac>
			pu_calc_eff_time(lll->dle.eff.max_tx_octets, lll->phy_tx, max_tx_time);
    c798:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
	uint16_t payload_time = PDU_DC_MAX_US(max_octets, phy);
    c79c:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
    c7a0:	f001 0303 	and.w	r3, r1, #3
    c7a4:	442b      	add	r3, r5
    c7a6:	330d      	adds	r3, #13
    c7a8:	00db      	lsls	r3, r3, #3
    c7aa:	f3c1 0140 	ubfx	r1, r1, #1, #1
    c7ae:	40cb      	lsrs	r3, r1
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, payload_time);
    c7b0:	b29b      	uxth	r3, r3
	eff_time = MIN(eff_time, default_time);
    c7b2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, payload_time);
    c7b6:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    c7ba:	bf38      	it	cc
    c7bc:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	eff_time = MIN(eff_time, default_time);
    c7c0:	429d      	cmp	r5, r3
    c7c2:	bf28      	it	cs
    c7c4:	461d      	movcs	r5, r3
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_CENTRAL)) ||
    c7c6:	b332      	cbz	r2, c816 <pu_update_eff_times+0xee>
    c7c8:	2800      	cmp	r0, #0
    c7ca:	da03      	bge.n	c7d4 <pu_update_eff_times+0xac>
    c7cc:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    c7d0:	2b00      	cmp	r3, #0
    c7d2:	d0bd      	beq.n	c750 <pu_update_eff_times+0x28>
			pu_calc_eff_time(lll->dle.eff.max_rx_octets, lll->phy_rx, max_rx_time);
    c7d4:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
	uint16_t payload_time = PDU_DC_MAX_US(max_octets, phy);
    c7d8:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	eff_time = MIN(eff_time, default_time);
    c7dc:	f8bd 7004 	ldrh.w	r7, [sp, #4]
	uint16_t payload_time = PDU_DC_MAX_US(max_octets, phy);
    c7e0:	f002 0303 	and.w	r3, r2, #3
    c7e4:	440b      	add	r3, r1
    c7e6:	330d      	adds	r3, #13
    c7e8:	00db      	lsls	r3, r3, #3
    c7ea:	f3c2 0240 	ubfx	r2, r2, #1, #1
    c7ee:	40d3      	lsrs	r3, r2
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, payload_time);
    c7f0:	b29b      	uxth	r3, r3
    c7f2:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    c7f6:	bf38      	it	cc
    c7f8:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	eff_time = MIN(eff_time, default_time);
    c7fc:	429f      	cmp	r7, r3
    c7fe:	bf28      	it	cs
    c800:	461f      	movcs	r7, r3
	return eff_time;
    c802:	e7a5      	b.n	c750 <pu_update_eff_times+0x28>
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_PERIPHERAL)) ||
    c804:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
    c808:	2800      	cmp	r0, #0
    c80a:	dbc5      	blt.n	c798 <pu_update_eff_times+0x70>
    c80c:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    c810:	2b00      	cmp	r3, #0
    c812:	d0df      	beq.n	c7d4 <pu_update_eff_times+0xac>
    c814:	e7c0      	b.n	c798 <pu_update_eff_times+0x70>
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_CENTRAL)) ||
    c816:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    c81a:	2b00      	cmp	r3, #0
    c81c:	d098      	beq.n	c750 <pu_update_eff_times+0x28>
	    (ctx->data.pu.c_to_p_phy && (lll->role == BT_HCI_ROLE_PERIPHERAL))) {
    c81e:	2800      	cmp	r0, #0
    c820:	da96      	bge.n	c750 <pu_update_eff_times+0x28>
    c822:	e7d7      	b.n	c7d4 <pu_update_eff_times+0xac>

0000c824 <rp_pu_send_phy_rsp.constprop.0>:
	}
}
#endif /* CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_PERIPHERAL)
static void rp_pu_send_phy_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    c824:	b570      	push	{r4, r5, r6, lr}
    c826:	4605      	mov	r5, r0
    c828:	460c      	mov	r4, r1
{
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx) ||
    c82a:	f003 fb93 	bl	ff54 <llcp_rr_ispaused>
    c82e:	b110      	cbz	r0, c836 <rp_pu_send_phy_rsp.constprop.0+0x12>
	    (llcp_rr_get_paused_cmd(conn) == PROC_PHY_UPDATE)) {
		ctx->state = RP_PU_STATE_WAIT_TX_PHY_RSP;
    c830:	2302      	movs	r3, #2
    c832:	72a3      	strb	r3, [r4, #10]
		llcp_rr_set_paused_cmd(conn, PROC_CTE_REQ);
		rp_pu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_PHY_RSP);
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND;
		ctx->state = RP_PU_STATE_WAIT_TX_ACK_PHY_RSP;
	}
}
    c834:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx) ||
    c836:	4621      	mov	r1, r4
    c838:	4628      	mov	r0, r5
    c83a:	f000 fd37 	bl	d2ac <llcp_tx_alloc_peek>
    c83e:	2800      	cmp	r0, #0
    c840:	d0f6      	beq.n	c830 <rp_pu_send_phy_rsp.constprop.0+0xc>
	    (llcp_rr_get_paused_cmd(conn) == PROC_PHY_UPDATE)) {
    c842:	4628      	mov	r0, r5
    c844:	f003 fb7a 	bl	ff3c <llcp_rr_get_paused_cmd>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx) ||
    c848:	2807      	cmp	r0, #7
    c84a:	d0f1      	beq.n	c830 <rp_pu_send_phy_rsp.constprop.0+0xc>
		llcp_rr_set_paused_cmd(conn, PROC_CTE_REQ);
    c84c:	210d      	movs	r1, #13
    c84e:	4628      	mov	r0, r5
    c850:	f003 fb72 	bl	ff38 <llcp_rr_set_paused_cmd>
	tx = llcp_tx_alloc(conn, ctx);
    c854:	4621      	mov	r1, r4
    c856:	4628      	mov	r0, r5
    c858:	f000 fd30 	bl	d2bc <llcp_tx_alloc>
	LL_ASSERT(tx);
    c85c:	4606      	mov	r6, r0
    c85e:	b188      	cbz	r0, c884 <rp_pu_send_phy_rsp.constprop.0+0x60>
		llcp_pdu_encode_phy_rsp(conn, pdu);
    c860:	1d31      	adds	r1, r6, #4
    c862:	4628      	mov	r0, r5
    c864:	f002 fa6c 	bl	ed40 <llcp_pdu_encode_phy_rsp>
	ctx->tx_ack = tx;
    c868:	6166      	str	r6, [r4, #20]
	ctx->tx_opcode = pdu->llctrl.opcode;
    c86a:	79f3      	ldrb	r3, [r6, #7]
    c86c:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
    c86e:	4631      	mov	r1, r6
    c870:	4628      	mov	r0, r5
    c872:	f000 fd41 	bl	d2f8 <llcp_tx_enqueue>
	llcp_rr_prt_restart(conn);
    c876:	4628      	mov	r0, r5
    c878:	f003 fb74 	bl	ff64 <llcp_rr_prt_restart>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND;
    c87c:	2318      	movs	r3, #24
    c87e:	72e3      	strb	r3, [r4, #11]
    c880:	2303      	movs	r3, #3
    c882:	e7d6      	b.n	c832 <rp_pu_send_phy_rsp.constprop.0+0xe>
	LL_ASSERT(tx);
    c884:	4a06      	ldr	r2, [pc, #24]	; (c8a0 <rp_pu_send_phy_rsp.constprop.0+0x7c>)
    c886:	4907      	ldr	r1, [pc, #28]	; (c8a4 <rp_pu_send_phy_rsp.constprop.0+0x80>)
    c888:	4807      	ldr	r0, [pc, #28]	; (c8a8 <rp_pu_send_phy_rsp.constprop.0+0x84>)
    c88a:	f240 3392 	movw	r3, #914	; 0x392
    c88e:	f00a fe28 	bl	174e2 <assert_print>
    c892:	4040      	eors	r0, r0
    c894:	f380 8811 	msr	BASEPRI, r0
    c898:	f04f 0003 	mov.w	r0, #3
    c89c:	df02      	svc	2
    c89e:	e7df      	b.n	c860 <rp_pu_send_phy_rsp.constprop.0+0x3c>
    c8a0:	0001bf60 	.word	0x0001bf60
    c8a4:	0001bee8 	.word	0x0001bee8
    c8a8:	0001b844 	.word	0x0001b844

0000c8ac <pu_dle_ntf.constprop.0>:
static void pu_dle_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
    c8ac:	b538      	push	{r3, r4, r5, lr}
    c8ae:	4605      	mov	r5, r0
	ntf = llcp_ntf_alloc();
    c8b0:	f000 fd20 	bl	d2f4 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
    c8b4:	4604      	mov	r4, r0
    c8b6:	b170      	cbz	r0, c8d6 <pu_dle_ntf.constprop.0+0x2a>
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
    c8b8:	2303      	movs	r3, #3
    c8ba:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
    c8bc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    c8be:	80e3      	strh	r3, [r4, #6]
	llcp_ntf_encode_length_change(conn, pdu);
    c8c0:	4628      	mov	r0, r5
    c8c2:	f104 011c 	add.w	r1, r4, #28
    c8c6:	f002 fb4b 	bl	ef60 <llcp_ntf_encode_length_change>
	ll_rx_put_sched(ntf->hdr.link, ntf);
    c8ca:	6820      	ldr	r0, [r4, #0]
    c8cc:	4621      	mov	r1, r4
}
    c8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
    c8d2:	f7fb bf13 	b.w	86fc <ll_rx_put_sched>
	LL_ASSERT(ntf);
    c8d6:	4a07      	ldr	r2, [pc, #28]	; (c8f4 <pu_dle_ntf.constprop.0+0x48>)
    c8d8:	4907      	ldr	r1, [pc, #28]	; (c8f8 <pu_dle_ntf.constprop.0+0x4c>)
    c8da:	4808      	ldr	r0, [pc, #32]	; (c8fc <pu_dle_ntf.constprop.0+0x50>)
    c8dc:	f44f 73de 	mov.w	r3, #444	; 0x1bc
    c8e0:	f00a fdff 	bl	174e2 <assert_print>
    c8e4:	4040      	eors	r0, r0
    c8e6:	f380 8811 	msr	BASEPRI, r0
    c8ea:	f04f 0003 	mov.w	r0, #3
    c8ee:	df02      	svc	2
    c8f0:	e7e2      	b.n	c8b8 <pu_dle_ntf.constprop.0+0xc>
    c8f2:	bf00      	nop
    c8f4:	0001bf60 	.word	0x0001bf60
    c8f8:	0001bf5c 	.word	0x0001bf5c
    c8fc:	0001b844 	.word	0x0001b844

0000c900 <lp_pu_tx_ntf.constprop.0>:
static void lp_pu_tx_ntf(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt)
    c900:	b570      	push	{r4, r5, r6, lr}
	uint8_t ntf_count = ctx->data.pu.ntf_pu + NTF_DLE;
    c902:	7f4a      	ldrb	r2, [r1, #29]
    c904:	f3c2 0300 	ubfx	r3, r2, #0, #1
    c908:	f3c2 0c40 	ubfx	ip, r2, #1, #1
    c90c:	4463      	add	r3, ip
    c90e:	b2db      	uxtb	r3, r3
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
    c910:	2b02      	cmp	r3, #2
static void lp_pu_tx_ntf(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt)
    c912:	460c      	mov	r4, r1
    c914:	4605      	mov	r5, r0
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
    c916:	d025      	beq.n	c964 <lp_pu_tx_ntf.constprop.0+0x64>
	if (ntf_count && !llcp_ntf_alloc_num_available(ntf_count)) {
    c918:	b983      	cbnz	r3, c93c <lp_pu_tx_ntf.constprop.0+0x3c>
		if (ctx->data.pu.ntf_pu) {
    c91a:	07d6      	lsls	r6, r2, #31
    c91c:	d428      	bmi.n	c970 <lp_pu_tx_ntf.constprop.0+0x70>
		if (ctx->data.pu.ntf_dle) {
    c91e:	0793      	lsls	r3, r2, #30
    c920:	d502      	bpl.n	c928 <lp_pu_tx_ntf.constprop.0+0x28>
			pu_dle_ntf(conn, ctx);
    c922:	4628      	mov	r0, r5
    c924:	f7ff ffc2 	bl	c8ac <pu_dle_ntf.constprop.0>
		llcp_lr_complete(conn);
    c928:	4628      	mov	r0, r5
    c92a:	f001 fff5 	bl	e918 <llcp_lr_complete>
		ctx->state = LP_PU_STATE_IDLE;
    c92e:	2100      	movs	r1, #0
    c930:	72a1      	strb	r1, [r4, #10]
		llcp_rr_set_paused_cmd(conn, PROC_NONE);
    c932:	4628      	mov	r0, r5
}
    c934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_rr_set_paused_cmd(conn, PROC_NONE);
    c938:	f003 bafe 	b.w	ff38 <llcp_rr_set_paused_cmd>
    c93c:	2601      	movs	r6, #1
	if (ntf_count && !llcp_ntf_alloc_num_available(ntf_count)) {
    c93e:	4630      	mov	r0, r6
    c940:	f000 fcd0 	bl	d2e4 <llcp_ntf_alloc_num_available>
    c944:	b158      	cbz	r0, c95e <lp_pu_tx_ntf.constprop.0+0x5e>
		if (ctx->data.pu.ntf_pu) {
    c946:	7f62      	ldrb	r2, [r4, #29]
    c948:	07d1      	lsls	r1, r2, #31
    c94a:	d5e8      	bpl.n	c91e <lp_pu_tx_ntf.constprop.0+0x1e>
			pu_ntf(conn, ctx);
    c94c:	4621      	mov	r1, r4
    c94e:	4628      	mov	r0, r5
    c950:	f7ff feb6 	bl	c6c0 <pu_ntf>
			if (ntf_count == 1 && NTF_DLE == 1) {
    c954:	2e01      	cmp	r6, #1
    c956:	d10f      	bne.n	c978 <lp_pu_tx_ntf.constprop.0+0x78>
    c958:	7f63      	ldrb	r3, [r4, #29]
    c95a:	079a      	lsls	r2, r3, #30
    c95c:	d5e4      	bpl.n	c928 <lp_pu_tx_ntf.constprop.0+0x28>
		ctx->state = LP_PU_STATE_WAIT_NTF;
    c95e:	2309      	movs	r3, #9
    c960:	72a3      	strb	r3, [r4, #10]
}
    c962:	bd70      	pop	{r4, r5, r6, pc}
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
    c964:	4618      	mov	r0, r3
    c966:	f000 fcbd 	bl	d2e4 <llcp_ntf_alloc_num_available>
    c96a:	1c46      	adds	r6, r0, #1
    c96c:	b2f6      	uxtb	r6, r6
    c96e:	e7e6      	b.n	c93e <lp_pu_tx_ntf.constprop.0+0x3e>
			pu_ntf(conn, ctx);
    c970:	f7ff fea6 	bl	c6c0 <pu_ntf>
		if (ctx->data.pu.ntf_dle) {
    c974:	7f62      	ldrb	r2, [r4, #29]
    c976:	e7d2      	b.n	c91e <lp_pu_tx_ntf.constprop.0+0x1e>
			if (ntf_count == 1 && NTF_DLE == 1) {
    c978:	7f62      	ldrb	r2, [r4, #29]
    c97a:	e7d0      	b.n	c91e <lp_pu_tx_ntf.constprop.0+0x1e>

0000c97c <lp_pu_send_phy_req.constprop.0>:
static void lp_pu_send_phy_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    c97c:	b570      	push	{r4, r5, r6, lr}
    c97e:	4605      	mov	r5, r0
    c980:	460c      	mov	r4, r1
	if (llcp_lr_ispaused(conn) || llcp_rr_get_collision(conn) ||
    c982:	f001 ff35 	bl	e7f0 <llcp_lr_ispaused>
    c986:	b110      	cbz	r0, c98e <lp_pu_send_phy_req.constprop.0+0x12>
		ctx->state = LP_PU_STATE_WAIT_TX_PHY_REQ;
    c988:	2301      	movs	r3, #1
    c98a:	72a3      	strb	r3, [r4, #10]
}
    c98c:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_lr_ispaused(conn) || llcp_rr_get_collision(conn) ||
    c98e:	4628      	mov	r0, r5
    c990:	f003 fad6 	bl	ff40 <llcp_rr_get_collision>
    c994:	2800      	cmp	r0, #0
    c996:	d1f7      	bne.n	c988 <lp_pu_send_phy_req.constprop.0+0xc>
	    !llcp_tx_alloc_peek(conn, ctx) ||
    c998:	4621      	mov	r1, r4
    c99a:	4628      	mov	r0, r5
    c99c:	f000 fc86 	bl	d2ac <llcp_tx_alloc_peek>
	if (llcp_lr_ispaused(conn) || llcp_rr_get_collision(conn) ||
    c9a0:	2800      	cmp	r0, #0
    c9a2:	d0f1      	beq.n	c988 <lp_pu_send_phy_req.constprop.0+0xc>
	    (llcp_rr_get_paused_cmd(conn) == PROC_PHY_UPDATE)) {
    c9a4:	4628      	mov	r0, r5
    c9a6:	f003 fac9 	bl	ff3c <llcp_rr_get_paused_cmd>
	    !llcp_tx_alloc_peek(conn, ctx) ||
    c9aa:	2807      	cmp	r0, #7
    c9ac:	d0ec      	beq.n	c988 <lp_pu_send_phy_req.constprop.0+0xc>
		llcp_rr_set_incompat(conn, INCOMPAT_RESOLVABLE);
    c9ae:	2101      	movs	r1, #1
    c9b0:	4628      	mov	r0, r5
    c9b2:	f003 fabd 	bl	ff30 <llcp_rr_set_incompat>
		llcp_rr_set_paused_cmd(conn, PROC_CTE_REQ);
    c9b6:	210d      	movs	r1, #13
    c9b8:	4628      	mov	r0, r5
    c9ba:	f003 fabd 	bl	ff38 <llcp_rr_set_paused_cmd>
	tx = llcp_tx_alloc(conn, ctx);
    c9be:	4621      	mov	r1, r4
    c9c0:	4628      	mov	r0, r5
    c9c2:	f000 fc7b 	bl	d2bc <llcp_tx_alloc>
	LL_ASSERT(tx);
    c9c6:	4606      	mov	r6, r0
    c9c8:	b360      	cbz	r0, ca24 <lp_pu_send_phy_req.constprop.0+0xa8>
	conn->phy_pref_rx = ctx->data.pu.rx;
    c9ca:	7f23      	ldrb	r3, [r4, #28]
    c9cc:	f895 218c 	ldrb.w	r2, [r5, #396]	; 0x18c
    c9d0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c9d4:	f363 02c5 	bfi	r2, r3, #3, #3
    c9d8:	f885 218c 	strb.w	r2, [r5, #396]	; 0x18c
	conn->phy_pref_tx = ctx->data.pu.tx;
    c9dc:	7f22      	ldrb	r2, [r4, #28]
    c9de:	f895 318c 	ldrb.w	r3, [r5, #396]	; 0x18c
    c9e2:	f362 0302 	bfi	r3, r2, #0, #3
    c9e6:	f885 318c 	strb.w	r3, [r5, #396]	; 0x18c
	conn->lll.phy_flags = ctx->data.pu.flags;
    c9ea:	7f23      	ldrb	r3, [r4, #28]
    c9ec:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
    c9f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c9f4:	f363 02c3 	bfi	r2, r3, #3, #1
    c9f8:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
		llcp_pdu_encode_phy_req(ctx, pdu);
    c9fc:	1d31      	adds	r1, r6, #4
    c9fe:	4620      	mov	r0, r4
    ca00:	f002 f980 	bl	ed04 <llcp_pdu_encode_phy_req>
	ctx->tx_ack = tx;
    ca04:	6166      	str	r6, [r4, #20]
	ctx->tx_opcode = pdu->llctrl.opcode;
    ca06:	79f3      	ldrb	r3, [r6, #7]
    ca08:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
    ca0a:	4631      	mov	r1, r6
    ca0c:	4628      	mov	r0, r5
    ca0e:	f000 fc73 	bl	d2f8 <llcp_tx_enqueue>
	llcp_lr_prt_restart(conn);
    ca12:	4628      	mov	r0, r5
    ca14:	f001 fefc 	bl	e810 <llcp_lr_prt_restart>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    ca18:	2102      	movs	r1, #2
    ca1a:	4628      	mov	r0, r5
    ca1c:	f000 fc70 	bl	d300 <llcp_tx_pause_data>
    ca20:	2302      	movs	r3, #2
    ca22:	e7b2      	b.n	c98a <lp_pu_send_phy_req.constprop.0+0xe>
	LL_ASSERT(tx);
    ca24:	4a06      	ldr	r2, [pc, #24]	; (ca40 <lp_pu_send_phy_req.constprop.0+0xc4>)
    ca26:	4907      	ldr	r1, [pc, #28]	; (ca44 <lp_pu_send_phy_req.constprop.0+0xc8>)
    ca28:	4807      	ldr	r0, [pc, #28]	; (ca48 <lp_pu_send_phy_req.constprop.0+0xcc>)
    ca2a:	f44f 73bf 	mov.w	r3, #382	; 0x17e
    ca2e:	f00a fd58 	bl	174e2 <assert_print>
    ca32:	4040      	eors	r0, r0
    ca34:	f380 8811 	msr	BASEPRI, r0
    ca38:	f04f 0003 	mov.w	r0, #3
    ca3c:	df02      	svc	2
    ca3e:	e7c4      	b.n	c9ca <lp_pu_send_phy_req.constprop.0+0x4e>
    ca40:	0001bf60 	.word	0x0001bf60
    ca44:	0001bee8 	.word	0x0001bee8
    ca48:	0001b844 	.word	0x0001b844

0000ca4c <lp_pu_execute_fsm>:
{
    ca4c:	b570      	push	{r4, r5, r6, lr}
    ca4e:	460c      	mov	r4, r1
	switch (ctx->state) {
    ca50:	7a89      	ldrb	r1, [r1, #10]
{
    ca52:	b082      	sub	sp, #8
    ca54:	4606      	mov	r6, r0
    ca56:	461d      	mov	r5, r3
	switch (ctx->state) {
    ca58:	2909      	cmp	r1, #9
    ca5a:	d80b      	bhi.n	ca74 <lp_pu_execute_fsm+0x28>
    ca5c:	e8df f001 	tbb	[pc, r1]
    ca60:	0a190505 	.word	0x0a190505
    ca64:	662e0a0a 	.word	0x662e0a0a
    ca68:	a096      	.short	0xa096
	switch (evt) {
    ca6a:	2a00      	cmp	r2, #0
    ca6c:	f000 809c 	beq.w	cba8 <lp_pu_execute_fsm+0x15c>
}
    ca70:	b002      	add	sp, #8
    ca72:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
    ca74:	4a94      	ldr	r2, [pc, #592]	; (ccc8 <lp_pu_execute_fsm+0x27c>)
    ca76:	4995      	ldr	r1, [pc, #596]	; (cccc <lp_pu_execute_fsm+0x280>)
    ca78:	4895      	ldr	r0, [pc, #596]	; (ccd0 <lp_pu_execute_fsm+0x284>)
    ca7a:	f44f 7353 	mov.w	r3, #844	; 0x34c
    ca7e:	f00a fd30 	bl	174e2 <assert_print>
    ca82:	4040      	eors	r0, r0
    ca84:	f380 8811 	msr	BASEPRI, r0
    ca88:	f04f 0003 	mov.w	r0, #3
    ca8c:	df02      	svc	2
}
    ca8e:	b002      	add	sp, #8
    ca90:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    ca92:	2a03      	cmp	r2, #3
    ca94:	d1ec      	bne.n	ca70 <lp_pu_execute_fsm+0x24>
		switch (conn->lll.role) {
    ca96:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
    ca9a:	09db      	lsrs	r3, r3, #7
    ca9c:	f040 80b4 	bne.w	cc08 <lp_pu_execute_fsm+0x1bc>
			LL_ASSERT(0);
    caa0:	4a89      	ldr	r2, [pc, #548]	; (ccc8 <lp_pu_execute_fsm+0x27c>)
    caa2:	498a      	ldr	r1, [pc, #552]	; (cccc <lp_pu_execute_fsm+0x280>)
    caa4:	488a      	ldr	r0, [pc, #552]	; (ccd0 <lp_pu_execute_fsm+0x284>)
    caa6:	f240 2379 	movw	r3, #633	; 0x279
    caaa:	f00a fd1a 	bl	174e2 <assert_print>
    caae:	4040      	eors	r0, r0
    cab0:	f380 8811 	msr	BASEPRI, r0
    cab4:	f04f 0003 	mov.w	r0, #3
    cab8:	df02      	svc	2
    caba:	e7d9      	b.n	ca70 <lp_pu_execute_fsm+0x24>
	switch (evt) {
    cabc:	2a05      	cmp	r2, #5
    cabe:	f000 8095 	beq.w	cbec <lp_pu_execute_fsm+0x1a0>
    cac2:	2a06      	cmp	r2, #6
    cac4:	d076      	beq.n	cbb4 <lp_pu_execute_fsm+0x168>
    cac6:	2a02      	cmp	r2, #2
    cac8:	d1d2      	bne.n	ca70 <lp_pu_execute_fsm+0x24>
		LL_ASSERT(conn->lll.role == BT_HCI_ROLE_PERIPHERAL);
    caca:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    cace:	2b00      	cmp	r3, #0
    cad0:	db0c      	blt.n	caec <lp_pu_execute_fsm+0xa0>
    cad2:	4a7d      	ldr	r2, [pc, #500]	; (ccc8 <lp_pu_execute_fsm+0x27c>)
    cad4:	497f      	ldr	r1, [pc, #508]	; (ccd4 <lp_pu_execute_fsm+0x288>)
    cad6:	487e      	ldr	r0, [pc, #504]	; (ccd0 <lp_pu_execute_fsm+0x284>)
    cad8:	f240 23ba 	movw	r3, #698	; 0x2ba
    cadc:	f00a fd01 	bl	174e2 <assert_print>
    cae0:	4040      	eors	r0, r0
    cae2:	f380 8811 	msr	BASEPRI, r0
    cae6:	f04f 0003 	mov.w	r0, #3
    caea:	df02      	svc	2
		llcp_pdu_decode_phy_update_ind(ctx, (struct pdu_data *)param);
    caec:	4629      	mov	r1, r5
    caee:	4620      	mov	r0, r4
    caf0:	f002 f93c 	bl	ed6c <llcp_pdu_decode_phy_update_ind>
		const uint8_t end_procedure = pu_check_update_ind(conn, ctx);
    caf4:	4621      	mov	r1, r4
    caf6:	4630      	mov	r0, r6
    caf8:	f7ff fdb6 	bl	c668 <pu_check_update_ind>
		if (!end_procedure) {
    cafc:	2800      	cmp	r0, #0
    cafe:	f040 809c 	bne.w	cc3a <lp_pu_execute_fsm+0x1ee>
			if (ctx->data.pu.p_to_c_phy) {
    cb02:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    cb06:	b12b      	cbz	r3, cb14 <lp_pu_execute_fsm+0xc8>
	lll->phy_tx_time = phy_tx;
    cb08:	f896 2076 	ldrb.w	r2, [r6, #118]	; 0x76
    cb0c:	f363 1206 	bfi	r2, r3, #4, #3
    cb10:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
			llcp_lr_prt_stop(conn);
    cb14:	4630      	mov	r0, r6
    cb16:	f001 fe85 	bl	e824 <llcp_lr_prt_stop>
			ctx->state = LP_PU_STATE_WAIT_INSTANT;
    cb1a:	2307      	movs	r3, #7
    cb1c:	72a3      	strb	r3, [r4, #10]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    cb1e:	2102      	movs	r1, #2
    cb20:	4630      	mov	r0, r6
}
    cb22:	b002      	add	sp, #8
    cb24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    cb28:	f000 bbfe 	b.w	d328 <llcp_tx_resume_data>
	switch (evt) {
    cb2c:	2a00      	cmp	r2, #0
    cb2e:	d19f      	bne.n	ca70 <lp_pu_execute_fsm+0x24>
	if (is_instant_reached_or_passed(ctx->data.pu.instant, ull_conn_event_counter(conn))) {
    cb30:	8c25      	ldrh	r5, [r4, #32]
    cb32:	f7ff f923 	bl	bd7c <ull_conn_event_counter>
    cb36:	1b40      	subs	r0, r0, r5
    cb38:	0403      	lsls	r3, r0, #16
    cb3a:	d499      	bmi.n	ca70 <lp_pu_execute_fsm+0x24>
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
    cb3c:	f996 5039 	ldrsb.w	r5, [r6, #57]	; 0x39
	const uint8_t old_tx = lll->phy_tx;
    cb40:	f896 0076 	ldrb.w	r0, [r6, #118]	; 0x76
	const uint8_t old_rx = lll->phy_rx;
    cb44:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
    cb48:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    cb4c:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
    cb50:	2d00      	cmp	r5, #0
	const uint8_t old_tx = lll->phy_tx;
    cb52:	f000 0e07 	and.w	lr, r0, #7
	const uint8_t old_rx = lll->phy_rx;
    cb56:	f003 0c07 	and.w	ip, r3, #7
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
    cb5a:	f2c0 8087 	blt.w	cc6c <lp_pu_execute_fsm+0x220>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
    cb5e:	2100      	movs	r1, #0
    cb60:	4630      	mov	r0, r6
    cb62:	f003 f9e5 	bl	ff30 <llcp_rr_set_incompat>
		ctx->data.pu.ntf_pu = (phy_changed || ctx->data.pu.host_initiated);
    cb66:	7f23      	ldrb	r3, [r4, #28]
		ctx->data.pu.error = BT_HCI_ERR_SUCCESS;
    cb68:	2200      	movs	r2, #0
    cb6a:	77a2      	strb	r2, [r4, #30]
		ctx->data.pu.ntf_pu = (phy_changed || ctx->data.pu.host_initiated);
    cb6c:	09db      	lsrs	r3, r3, #7
    cb6e:	7f62      	ldrb	r2, [r4, #29]
    cb70:	f363 0200 	bfi	r2, r3, #0, #1
    cb74:	7762      	strb	r2, [r4, #29]
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
    cb76:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    cb7a:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
    cb7e:	f362 1306 	bfi	r3, r2, #4, #3
	ctx->state = LP_PU_STATE_WAIT_INSTANT_ON_AIR;
    cb82:	2208      	movs	r2, #8
	lll->phy_tx_time = phy_tx;
    cb84:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	ctx->state = LP_PU_STATE_WAIT_INSTANT_ON_AIR;
    cb88:	72a2      	strb	r2, [r4, #10]
}
    cb8a:	e771      	b.n	ca70 <lp_pu_execute_fsm+0x24>
	switch (evt) {
    cb8c:	2a04      	cmp	r2, #4
    cb8e:	f47f af6f 	bne.w	ca70 <lp_pu_execute_fsm+0x24>
		lp_pu_tx_ntf(conn, ctx, evt);
    cb92:	4621      	mov	r1, r4
    cb94:	4630      	mov	r0, r6
}
    cb96:	b002      	add	sp, #8
    cb98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lp_pu_tx_ntf(conn, ctx, evt);
    cb9c:	f7ff beb0 	b.w	c900 <lp_pu_tx_ntf.constprop.0>
	switch (evt) {
    cba0:	2a00      	cmp	r2, #0
    cba2:	f47f af65 	bne.w	ca70 <lp_pu_execute_fsm+0x24>
    cba6:	e7f4      	b.n	cb92 <lp_pu_execute_fsm+0x146>
		lp_pu_send_phy_req(conn, ctx, evt, param);
    cba8:	4621      	mov	r1, r4
}
    cbaa:	b002      	add	sp, #8
    cbac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lp_pu_send_phy_req(conn, ctx, evt, param);
    cbb0:	f7ff bee4 	b.w	c97c <lp_pu_send_phy_req.constprop.0>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
    cbb4:	2100      	movs	r1, #0
    cbb6:	f003 f9bb 	bl	ff30 <llcp_rr_set_incompat>
	conn->llcp.fex.features_used &= ~ll_feat_mask;
    cbba:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
    cbbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    cbc2:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
		ctx->data.pu.ntf_pu = 1;
    cbc6:	7f63      	ldrb	r3, [r4, #29]
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    cbc8:	221a      	movs	r2, #26
    cbca:	77a2      	strb	r2, [r4, #30]
		ctx->data.pu.ntf_pu = 1;
    cbcc:	f043 0301 	orr.w	r3, r3, #1
    cbd0:	7763      	strb	r3, [r4, #29]
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
    cbd2:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    cbd6:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
    cbda:	f362 1306 	bfi	r3, r2, #4, #3
	lp_pu_tx_ntf(conn, ctx, evt);
    cbde:	4621      	mov	r1, r4
    cbe0:	4630      	mov	r0, r6
	lll->phy_tx_time = phy_tx;
    cbe2:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	lp_pu_tx_ntf(conn, ctx, evt);
    cbe6:	f7ff fe8b 	bl	c900 <lp_pu_tx_ntf.constprop.0>
}
    cbea:	e798      	b.n	cb1e <lp_pu_execute_fsm+0xd2>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
    cbec:	2100      	movs	r1, #0
    cbee:	f003 f99f 	bl	ff30 <llcp_rr_set_incompat>
		llcp_pdu_decode_reject_ext_ind(ctx, (struct pdu_data *) param);
    cbf2:	4629      	mov	r1, r5
    cbf4:	4620      	mov	r0, r4
    cbf6:	f002 f87d 	bl	ecf4 <llcp_pdu_decode_reject_ext_ind>
		ctx->data.pu.ntf_pu = 1;
    cbfa:	7f63      	ldrb	r3, [r4, #29]
		ctx->data.pu.error = ctx->reject_ext_ind.error_code;
    cbfc:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
    cc00:	77a2      	strb	r2, [r4, #30]
		ctx->data.pu.ntf_pu = 1;
    cc02:	f043 0301 	orr.w	r3, r3, #1
    cc06:	e7e3      	b.n	cbd0 <lp_pu_execute_fsm+0x184>
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    cc08:	4b33      	ldr	r3, [pc, #204]	; (ccd8 <lp_pu_execute_fsm+0x28c>)
	const uint8_t phys = phy_tx | lll->phy_tx;
    cc0a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    cc0e:	e893 0003 	ldmia.w	r3, {r0, r1}
				conn, pu_select_phy_timing_restrict(conn, ctx->data.pu.tx));
    cc12:	7f23      	ldrb	r3, [r4, #28]
	return phy_tx_time[phys];
    cc14:	4313      	orrs	r3, r2
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    cc16:	ad02      	add	r5, sp, #8
	return phy_tx_time[phys];
    cc18:	f003 0307 	and.w	r3, r3, #7
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    cc1c:	e905 0003 	stmdb	r5, {r0, r1}
	return phy_tx_time[phys];
    cc20:	3308      	adds	r3, #8
    cc22:	446b      	add	r3, sp
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    cc24:	2102      	movs	r1, #2
	return phy_tx_time[phys];
    cc26:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	lll->phy_tx_time = phy_tx;
    cc2a:	f363 1206 	bfi	r2, r3, #4, #3
			ctx->state = LP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
    cc2e:	f641 0306 	movw	r3, #6150	; 0x1806
	lll->phy_tx_time = phy_tx;
    cc32:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
			ctx->state = LP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
    cc36:	8163      	strh	r3, [r4, #10]
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    cc38:	e772      	b.n	cb20 <lp_pu_execute_fsm+0xd4>
			llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
    cc3a:	2100      	movs	r1, #0
    cc3c:	4630      	mov	r0, r6
    cc3e:	f003 f977 	bl	ff30 <llcp_rr_set_incompat>
			if (ctx->data.pu.error != BT_HCI_ERR_SUCCESS) {
    cc42:	7fa3      	ldrb	r3, [r4, #30]
    cc44:	b10b      	cbz	r3, cc4a <lp_pu_execute_fsm+0x1fe>
				conn->llcp_terminate.reason_final = ctx->data.pu.error;
    cc46:	f886 3148 	strb.w	r3, [r6, #328]	; 0x148
			ctx->data.pu.ntf_pu = ctx->data.pu.host_initiated;
    cc4a:	7f23      	ldrb	r3, [r4, #28]
    cc4c:	7f62      	ldrb	r2, [r4, #29]
    cc4e:	09db      	lsrs	r3, r3, #7
    cc50:	f363 0200 	bfi	r2, r3, #0, #1
    cc54:	7762      	strb	r2, [r4, #29]
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
    cc56:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    cc5a:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
    cc5e:	f362 1306 	bfi	r3, r2, #4, #3
	lp_pu_tx_ntf(conn, ctx, evt);
    cc62:	4621      	mov	r1, r4
	lll->phy_tx_time = phy_tx;
    cc64:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	lp_pu_tx_ntf(conn, ctx, evt);
    cc68:	4630      	mov	r0, r6
    cc6a:	e7bc      	b.n	cbe6 <lp_pu_execute_fsm+0x19a>
		if (p_to_c_phy) {
    cc6c:	f011 0103 	ands.w	r1, r1, #3
    cc70:	d01c      	beq.n	ccac <lp_pu_execute_fsm+0x260>
			lll->phy_tx = p_to_c_phy;
    cc72:	f361 0002 	bfi	r0, r1, #0, #3
		if (c_to_p_phy) {
    cc76:	f012 0203 	ands.w	r2, r2, #3
			lll->phy_tx = p_to_c_phy;
    cc7a:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
		if (c_to_p_phy) {
    cc7e:	d020      	beq.n	ccc2 <lp_pu_execute_fsm+0x276>
			lll->phy_rx = c_to_p_phy;
    cc80:	f362 0302 	bfi	r3, r2, #0, #3
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
    cc84:	458e      	cmp	lr, r1
			lll->phy_rx = c_to_p_phy;
    cc86:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
    cc8a:	d017      	beq.n	ccbc <lp_pu_execute_fsm+0x270>
			ctx->data.pu.ntf_dle = pu_update_eff_times(conn, ctx);
    cc8c:	4621      	mov	r1, r4
    cc8e:	4630      	mov	r0, r6
    cc90:	f7ff fd4a 	bl	c728 <pu_update_eff_times>
    cc94:	7f63      	ldrb	r3, [r4, #29]
    cc96:	f360 0341 	bfi	r3, r0, #1, #1
    cc9a:	7763      	strb	r3, [r4, #29]
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
    cc9c:	2100      	movs	r1, #0
    cc9e:	4630      	mov	r0, r6
    cca0:	f003 f946 	bl	ff30 <llcp_rr_set_incompat>
		ctx->data.pu.error = BT_HCI_ERR_SUCCESS;
    cca4:	2300      	movs	r3, #0
    cca6:	77a3      	strb	r3, [r4, #30]
    cca8:	2301      	movs	r3, #1
    ccaa:	e760      	b.n	cb6e <lp_pu_execute_fsm+0x122>
		if (c_to_p_phy) {
    ccac:	f012 0203 	ands.w	r2, r2, #3
    ccb0:	f43f af55 	beq.w	cb5e <lp_pu_execute_fsm+0x112>
			lll->phy_rx = c_to_p_phy;
    ccb4:	f362 0302 	bfi	r3, r2, #0, #3
    ccb8:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
    ccbc:	4594      	cmp	ip, r2
    ccbe:	d1e5      	bne.n	cc8c <lp_pu_execute_fsm+0x240>
    ccc0:	e74d      	b.n	cb5e <lp_pu_execute_fsm+0x112>
    ccc2:	458e      	cmp	lr, r1
    ccc4:	d1e2      	bne.n	cc8c <lp_pu_execute_fsm+0x240>
    ccc6:	e74a      	b.n	cb5e <lp_pu_execute_fsm+0x112>
    ccc8:	0001bf60 	.word	0x0001bf60
    cccc:	0001b908 	.word	0x0001b908
    ccd0:	0001b844 	.word	0x0001b844
    ccd4:	0001bfa4 	.word	0x0001bfa4
    ccd8:	0001b3a8 	.word	0x0001b3a8

0000ccdc <llcp_lp_pu_rx>:
	switch (pdu->llctrl.opcode) {
    ccdc:	f892 c01f 	ldrb.w	ip, [r2, #31]
    cce0:	f1bc 0f11 	cmp.w	ip, #17
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
    cce4:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
    cce8:	d00f      	beq.n	cd0a <llcp_lp_pu_rx+0x2e>
    ccea:	f1bc 0f18 	cmp.w	ip, #24
    ccee:	d012      	beq.n	cd16 <llcp_lp_pu_rx+0x3a>
    ccf0:	f1bc 0f07 	cmp.w	ip, #7
    ccf4:	d00c      	beq.n	cd10 <llcp_lp_pu_rx+0x34>
{
    ccf6:	b510      	push	{r4, lr}
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
    ccf8:	2324      	movs	r3, #36	; 0x24
    ccfa:	460c      	mov	r4, r1
    ccfc:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
		llcp_lr_complete(conn);
    cd00:	f001 fe0a 	bl	e918 <llcp_lr_complete>
		ctx->state = LP_PU_STATE_IDLE;
    cd04:	2300      	movs	r3, #0
    cd06:	72a3      	strb	r3, [r4, #10]
}
    cd08:	bd10      	pop	{r4, pc}
		lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_REJECT, pdu);
    cd0a:	2205      	movs	r2, #5
    cd0c:	f7ff be9e 	b.w	ca4c <lp_pu_execute_fsm>
		lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_UNKNOWN, pdu);
    cd10:	2206      	movs	r2, #6
    cd12:	f7ff be9b 	b.w	ca4c <lp_pu_execute_fsm>
		lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_PHY_UPDATE_IND, pdu);
    cd16:	2202      	movs	r2, #2
    cd18:	f7ff be98 	b.w	ca4c <lp_pu_execute_fsm>

0000cd1c <llcp_lp_pu_init_proc>:
	ctx->state = LP_PU_STATE_IDLE;
    cd1c:	2300      	movs	r3, #0
    cd1e:	7283      	strb	r3, [r0, #10]
}
    cd20:	4770      	bx	lr
    cd22:	bf00      	nop

0000cd24 <llcp_lp_pu_run>:
{
    cd24:	4613      	mov	r3, r2
	lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_RUN, param);
    cd26:	2200      	movs	r2, #0
    cd28:	f7ff be90 	b.w	ca4c <lp_pu_execute_fsm>

0000cd2c <llcp_lp_pu_tx_ack>:
{
    cd2c:	4613      	mov	r3, r2
	lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_ACK, param);
    cd2e:	2203      	movs	r2, #3
    cd30:	f7ff be8c 	b.w	ca4c <lp_pu_execute_fsm>

0000cd34 <llcp_lp_pu_tx_ntf>:
	lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_NTF, NULL);
    cd34:	2300      	movs	r3, #0
    cd36:	2204      	movs	r2, #4
    cd38:	f7ff be88 	b.w	ca4c <lp_pu_execute_fsm>

0000cd3c <rp_pu_tx_ntf>:
{
    cd3c:	b570      	push	{r4, r5, r6, lr}
	uint8_t ntf_count = ctx->data.pu.ntf_pu + NTF_DLE;
    cd3e:	7f4a      	ldrb	r2, [r1, #29]
    cd40:	f3c2 0300 	ubfx	r3, r2, #0, #1
    cd44:	f3c2 0c40 	ubfx	ip, r2, #1, #1
    cd48:	4463      	add	r3, ip
    cd4a:	b2db      	uxtb	r3, r3
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
    cd4c:	2b02      	cmp	r3, #2
{
    cd4e:	460c      	mov	r4, r1
    cd50:	4605      	mov	r5, r0
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
    cd52:	d025      	beq.n	cda0 <rp_pu_tx_ntf+0x64>
	if ((ntf_count > 0) && !llcp_ntf_alloc_num_available(ntf_count)) {
    cd54:	b983      	cbnz	r3, cd78 <rp_pu_tx_ntf+0x3c>
		if (ctx->data.pu.ntf_pu) {
    cd56:	07d6      	lsls	r6, r2, #31
    cd58:	d428      	bmi.n	cdac <rp_pu_tx_ntf+0x70>
		if (ctx->data.pu.ntf_dle) {
    cd5a:	0793      	lsls	r3, r2, #30
    cd5c:	d502      	bpl.n	cd64 <rp_pu_tx_ntf+0x28>
			pu_dle_ntf(conn, ctx);
    cd5e:	4628      	mov	r0, r5
    cd60:	f7ff fda4 	bl	c8ac <pu_dle_ntf.constprop.0>
	llcp_rr_set_paused_cmd(conn, PROC_NONE);
    cd64:	2100      	movs	r1, #0
    cd66:	4628      	mov	r0, r5
    cd68:	f003 f8e6 	bl	ff38 <llcp_rr_set_paused_cmd>
	llcp_rr_complete(conn);
    cd6c:	4628      	mov	r0, r5
    cd6e:	f003 f977 	bl	10060 <llcp_rr_complete>
}
    cd72:	2300      	movs	r3, #0
		ctx->state = RP_PU_STATE_WAIT_NTF;
    cd74:	72a3      	strb	r3, [r4, #10]
}
    cd76:	bd70      	pop	{r4, r5, r6, pc}
    cd78:	2601      	movs	r6, #1
	if ((ntf_count > 0) && !llcp_ntf_alloc_num_available(ntf_count)) {
    cd7a:	4630      	mov	r0, r6
    cd7c:	f000 fab2 	bl	d2e4 <llcp_ntf_alloc_num_available>
    cd80:	b158      	cbz	r0, cd9a <rp_pu_tx_ntf+0x5e>
		if (ctx->data.pu.ntf_pu) {
    cd82:	7f62      	ldrb	r2, [r4, #29]
    cd84:	07d1      	lsls	r1, r2, #31
    cd86:	d5e8      	bpl.n	cd5a <rp_pu_tx_ntf+0x1e>
			pu_ntf(conn, ctx);
    cd88:	4621      	mov	r1, r4
    cd8a:	4628      	mov	r0, r5
    cd8c:	f7ff fc98 	bl	c6c0 <pu_ntf>
			if (ntf_count == 1 && NTF_DLE == 1) {
    cd90:	2e01      	cmp	r6, #1
    cd92:	d10f      	bne.n	cdb4 <rp_pu_tx_ntf+0x78>
    cd94:	7f63      	ldrb	r3, [r4, #29]
    cd96:	079a      	lsls	r2, r3, #30
    cd98:	d5e4      	bpl.n	cd64 <rp_pu_tx_ntf+0x28>
		ctx->state = RP_PU_STATE_WAIT_NTF;
    cd9a:	2309      	movs	r3, #9
    cd9c:	72a3      	strb	r3, [r4, #10]
}
    cd9e:	bd70      	pop	{r4, r5, r6, pc}
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
    cda0:	4618      	mov	r0, r3
    cda2:	f000 fa9f 	bl	d2e4 <llcp_ntf_alloc_num_available>
    cda6:	1c46      	adds	r6, r0, #1
    cda8:	b2f6      	uxtb	r6, r6
    cdaa:	e7e6      	b.n	cd7a <rp_pu_tx_ntf+0x3e>
			pu_ntf(conn, ctx);
    cdac:	f7ff fc88 	bl	c6c0 <pu_ntf>
		if (ctx->data.pu.ntf_dle) {
    cdb0:	7f62      	ldrb	r2, [r4, #29]
    cdb2:	e7d2      	b.n	cd5a <rp_pu_tx_ntf+0x1e>
			if (ntf_count == 1 && NTF_DLE == 1) {
    cdb4:	7f62      	ldrb	r2, [r4, #29]
    cdb6:	e7d0      	b.n	cd5a <rp_pu_tx_ntf+0x1e>

0000cdb8 <rp_pu_execute_fsm>:
		break;
	}
}

static void rp_pu_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
{
    cdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdba:	460c      	mov	r4, r1
	switch (ctx->state) {
    cdbc:	7a89      	ldrb	r1, [r1, #10]
{
    cdbe:	b083      	sub	sp, #12
    cdc0:	4606      	mov	r6, r0
    cdc2:	4615      	mov	r5, r2
	switch (ctx->state) {
    cdc4:	2909      	cmp	r1, #9
    cdc6:	d810      	bhi.n	cdea <rp_pu_execute_fsm+0x32>
    cdc8:	e8df f011 	tbh	[pc, r1, lsl #1]
    cdcc:	009800de 	.word	0x009800de
    cdd0:	001e00d4 	.word	0x001e00d4
    cdd4:	000f000f 	.word	0x000f000f
    cdd8:	0061004e 	.word	0x0061004e
    cddc:	000a008d 	.word	0x000a008d
	switch (evt) {
    cde0:	2d00      	cmp	r5, #0
    cde2:	f000 8083 	beq.w	ceec <rp_pu_execute_fsm+0x134>
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
    cde6:	b003      	add	sp, #12
    cde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(0);
    cdea:	4a88      	ldr	r2, [pc, #544]	; (d00c <rp_pu_execute_fsm+0x254>)
    cdec:	4988      	ldr	r1, [pc, #544]	; (d010 <rp_pu_execute_fsm+0x258>)
    cdee:	4889      	ldr	r0, [pc, #548]	; (d014 <rp_pu_execute_fsm+0x25c>)
    cdf0:	f240 5304 	movw	r3, #1284	; 0x504
    cdf4:	f00a fb75 	bl	174e2 <assert_print>
    cdf8:	4040      	eors	r0, r0
    cdfa:	f380 8811 	msr	BASEPRI, r0
    cdfe:	f04f 0003 	mov.w	r0, #3
    ce02:	df02      	svc	2
}
    ce04:	b003      	add	sp, #12
    ce06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (evt) {
    ce08:	2d02      	cmp	r5, #2
    ce0a:	d1ec      	bne.n	cde6 <rp_pu_execute_fsm+0x2e>
			LL_ASSERT(conn->lll.role == BT_HCI_ROLE_PERIPHERAL);
    ce0c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    ce10:	2b00      	cmp	r3, #0
    ce12:	db0c      	blt.n	ce2e <rp_pu_execute_fsm+0x76>
    ce14:	4a7d      	ldr	r2, [pc, #500]	; (d00c <rp_pu_execute_fsm+0x254>)
    ce16:	4980      	ldr	r1, [pc, #512]	; (d018 <rp_pu_execute_fsm+0x260>)
    ce18:	487e      	ldr	r0, [pc, #504]	; (d014 <rp_pu_execute_fsm+0x25c>)
    ce1a:	f240 4355 	movw	r3, #1109	; 0x455
    ce1e:	f00a fb60 	bl	174e2 <assert_print>
    ce22:	4040      	eors	r0, r0
    ce24:	f380 8811 	msr	BASEPRI, r0
    ce28:	f04f 0003 	mov.w	r0, #3
    ce2c:	df02      	svc	2
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    ce2e:	4b7b      	ldr	r3, [pc, #492]	; (d01c <rp_pu_execute_fsm+0x264>)
	const uint8_t phys = phy_tx | lll->phy_tx;
    ce30:	f896 2076 	ldrb.w	r2, [r6, #118]	; 0x76
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    ce34:	e893 0003 	ldmia.w	r3, {r0, r1}
				conn, pu_select_phy_timing_restrict(conn, ctx->data.pu.tx));
    ce38:	7f23      	ldrb	r3, [r4, #28]
	return phy_tx_time[phys];
    ce3a:	4313      	orrs	r3, r2
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    ce3c:	ad02      	add	r5, sp, #8
	return phy_tx_time[phys];
    ce3e:	f003 0307 	and.w	r3, r3, #7
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    ce42:	e905 0003 	stmdb	r5, {r0, r1}
	return phy_tx_time[phys];
    ce46:	3308      	adds	r3, #8
    ce48:	446b      	add	r3, sp
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    ce4a:	2102      	movs	r1, #2
	return phy_tx_time[phys];
    ce4c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    ce50:	4630      	mov	r0, r6
	lll->phy_tx_time = phy_tx;
    ce52:	f363 1206 	bfi	r2, r3, #4, #3
			ctx->state = RP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
    ce56:	2306      	movs	r3, #6
	lll->phy_tx_time = phy_tx;
    ce58:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
			ctx->state = RP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
    ce5c:	72a3      	strb	r3, [r4, #10]
}
    ce5e:	b003      	add	sp, #12
    ce60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    ce64:	f000 ba60 	b.w	d328 <llcp_tx_resume_data>
	switch (evt) {
    ce68:	2d03      	cmp	r5, #3
    ce6a:	d1bc      	bne.n	cde6 <rp_pu_execute_fsm+0x2e>
		llcp_pdu_decode_phy_update_ind(ctx, (struct pdu_data *)param);
    ce6c:	4619      	mov	r1, r3
    ce6e:	4620      	mov	r0, r4
    ce70:	f001 ff7c 	bl	ed6c <llcp_pdu_decode_phy_update_ind>
		const uint8_t end_procedure = pu_check_update_ind(conn, ctx);
    ce74:	4621      	mov	r1, r4
    ce76:	4630      	mov	r0, r6
    ce78:	f7ff fbf6 	bl	c668 <pu_check_update_ind>
		if (!end_procedure) {
    ce7c:	2800      	cmp	r0, #0
    ce7e:	f000 8096 	beq.w	cfae <rp_pu_execute_fsm+0x1f6>
			if (ctx->data.pu.error == BT_HCI_ERR_INSTANT_PASSED) {
    ce82:	7fa3      	ldrb	r3, [r4, #30]
    ce84:	2b28      	cmp	r3, #40	; 0x28
				conn->llcp_terminate.reason_final = BT_HCI_ERR_INSTANT_PASSED;
    ce86:	bf08      	it	eq
    ce88:	f886 3148 	strbeq.w	r3, [r6, #328]	; 0x148
    ce8c:	e01d      	b.n	ceca <rp_pu_execute_fsm+0x112>
	switch (evt) {
    ce8e:	2d00      	cmp	r5, #0
    ce90:	d1a9      	bne.n	cde6 <rp_pu_execute_fsm+0x2e>
	if (is_instant_reached_or_passed(ctx->data.pu.instant, ull_conn_event_counter(conn))) {
    ce92:	8c27      	ldrh	r7, [r4, #32]
    ce94:	f7fe ff72 	bl	bd7c <ull_conn_event_counter>
    ce98:	1bc0      	subs	r0, r0, r7
    ce9a:	0403      	lsls	r3, r0, #16
    ce9c:	d4a3      	bmi.n	cde6 <rp_pu_execute_fsm+0x2e>
		ctx->data.pu.error = BT_HCI_ERR_SUCCESS;
    ce9e:	77a5      	strb	r5, [r4, #30]
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
    cea0:	f996 5039 	ldrsb.w	r5, [r6, #57]	; 0x39
	const uint8_t old_tx = lll->phy_tx;
    cea4:	f896 0076 	ldrb.w	r0, [r6, #118]	; 0x76
	const uint8_t old_rx = lll->phy_rx;
    cea8:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
    ceac:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    ceb0:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
    ceb4:	2d00      	cmp	r5, #0
	const uint8_t old_tx = lll->phy_tx;
    ceb6:	f000 0c07 	and.w	ip, r0, #7
	const uint8_t old_rx = lll->phy_rx;
    ceba:	f003 0707 	and.w	r7, r3, #7
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
    cebe:	db7c      	blt.n	cfba <rp_pu_execute_fsm+0x202>
{
    cec0:	2200      	movs	r2, #0
		ctx->data.pu.ntf_pu = phy_changed;
    cec2:	7f63      	ldrb	r3, [r4, #29]
    cec4:	f362 0300 	bfi	r3, r2, #0, #1
    cec8:	7763      	strb	r3, [r4, #29]
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
    ceca:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    cece:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
    ced2:	f362 1306 	bfi	r3, r2, #4, #3
    ced6:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	if (ctx->data.pu.ntf_pu) {
    ceda:	7f63      	ldrb	r3, [r4, #29]
    cedc:	07da      	lsls	r2, r3, #31
    cede:	d55c      	bpl.n	cf9a <rp_pu_execute_fsm+0x1e2>
		ctx->state = RP_PU_STATE_WAIT_INSTANT_ON_AIR;
    cee0:	2308      	movs	r3, #8
    cee2:	72a3      	strb	r3, [r4, #10]
    cee4:	e77f      	b.n	cde6 <rp_pu_execute_fsm+0x2e>
	switch (evt) {
    cee6:	2d04      	cmp	r5, #4
    cee8:	f47f af7d 	bne.w	cde6 <rp_pu_execute_fsm+0x2e>
		rp_pu_tx_ntf(conn, ctx, evt, param);
    ceec:	462a      	mov	r2, r5
    ceee:	4621      	mov	r1, r4
    cef0:	4630      	mov	r0, r6
}
    cef2:	b003      	add	sp, #12
    cef4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		rp_pu_tx_ntf(conn, ctx, evt, param);
    cef8:	f7ff bf20 	b.w	cd3c <rp_pu_tx_ntf>
	llcp_pdu_decode_phy_req(ctx, (struct pdu_data *)param);
    cefc:	4619      	mov	r1, r3
    cefe:	4620      	mov	r0, r4
    cf00:	f001 ff14 	bl	ed2c <llcp_pdu_decode_phy_req>
	ctx->data.pu.rx &= rx;
    cf04:	7f22      	ldrb	r2, [r4, #28]
	pu_combine_phys(conn, ctx, conn->phy_pref_tx, conn->phy_pref_rx);
    cf06:	f896 318c 	ldrb.w	r3, [r6, #396]	; 0x18c
	ctx->data.pu.rx &= rx;
    cf0a:	f3c2 00c2 	ubfx	r0, r2, #3, #3
	pu_combine_phys(conn, ctx, conn->phy_pref_tx, conn->phy_pref_rx);
    cf0e:	f3c3 01c2 	ubfx	r1, r3, #3, #3
	ctx->data.pu.tx &= tx;
    cf12:	4001      	ands	r1, r0
	pu_combine_phys(conn, ctx, conn->phy_pref_tx, conn->phy_pref_rx);
    cf14:	f3c3 0302 	ubfx	r3, r3, #0, #3
	ctx->data.pu.tx &= tx;
    cf18:	f3c2 0002 	ubfx	r0, r2, #0, #3
    cf1c:	4003      	ands	r3, r0
    cf1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    cf22:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    cf26:	4313      	orrs	r3, r2
    cf28:	7723      	strb	r3, [r4, #28]
	if (conn->lll.role == BT_HCI_ROLE_CENTRAL && (!ctx->data.pu.rx || !ctx->data.pu.tx)) {
    cf2a:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
    cf2e:	2b00      	cmp	r3, #0
    cf30:	db07      	blt.n	cf42 <rp_pu_execute_fsm+0x18a>
    cf32:	7f23      	ldrb	r3, [r4, #28]
    cf34:	f013 0f38 	tst.w	r3, #56	; 0x38
    cf38:	d12c      	bne.n	cf94 <rp_pu_execute_fsm+0x1dc>
		ctx->data.pu.tx = 0;
    cf3a:	7f23      	ldrb	r3, [r4, #28]
    cf3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    cf40:	7723      	strb	r3, [r4, #28]
	llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    cf42:	2102      	movs	r1, #2
    cf44:	4630      	mov	r0, r6
    cf46:	f000 f9db 	bl	d300 <llcp_tx_pause_data>
	switch (evt) {
    cf4a:	2d01      	cmp	r5, #1
    cf4c:	f47f af4b 	bne.w	cde6 <rp_pu_execute_fsm+0x2e>
		switch (conn->lll.role) {
    cf50:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    cf54:	09db      	lsrs	r3, r3, #7
    cf56:	d110      	bne.n	cf7a <rp_pu_execute_fsm+0x1c2>
			LL_ASSERT(0);
    cf58:	4a2c      	ldr	r2, [pc, #176]	; (d00c <rp_pu_execute_fsm+0x254>)
    cf5a:	492d      	ldr	r1, [pc, #180]	; (d010 <rp_pu_execute_fsm+0x258>)
    cf5c:	482d      	ldr	r0, [pc, #180]	; (d014 <rp_pu_execute_fsm+0x25c>)
    cf5e:	f240 4335 	movw	r3, #1077	; 0x435
    cf62:	f00a fabe 	bl	174e2 <assert_print>
    cf66:	4040      	eors	r0, r0
    cf68:	f380 8811 	msr	BASEPRI, r0
    cf6c:	f04f 0003 	mov.w	r0, #3
    cf70:	df02      	svc	2
    cf72:	e738      	b.n	cde6 <rp_pu_execute_fsm+0x2e>
	switch (evt) {
    cf74:	2d00      	cmp	r5, #0
    cf76:	f47f af36 	bne.w	cde6 <rp_pu_execute_fsm+0x2e>
			rp_pu_send_phy_rsp(conn, ctx, evt, param);
    cf7a:	4621      	mov	r1, r4
    cf7c:	4630      	mov	r0, r6
}
    cf7e:	b003      	add	sp, #12
    cf80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			rp_pu_send_phy_rsp(conn, ctx, evt, param);
    cf84:	f7ff bc4e 	b.w	c824 <rp_pu_send_phy_rsp.constprop.0>
	switch (evt) {
    cf88:	2d00      	cmp	r5, #0
    cf8a:	f47f af2c 	bne.w	cde6 <rp_pu_execute_fsm+0x2e>
		ctx->state = RP_PU_STATE_WAIT_RX_PHY_REQ;
    cf8e:	2301      	movs	r3, #1
    cf90:	72a3      	strb	r3, [r4, #10]
		break;
    cf92:	e728      	b.n	cde6 <rp_pu_execute_fsm+0x2e>
	if (conn->lll.role == BT_HCI_ROLE_CENTRAL && (!ctx->data.pu.rx || !ctx->data.pu.tx)) {
    cf94:	0759      	lsls	r1, r3, #29
    cf96:	d1d4      	bne.n	cf42 <rp_pu_execute_fsm+0x18a>
    cf98:	e7cf      	b.n	cf3a <rp_pu_execute_fsm+0x182>
	llcp_rr_set_paused_cmd(conn, PROC_NONE);
    cf9a:	2100      	movs	r1, #0
    cf9c:	4630      	mov	r0, r6
    cf9e:	f002 ffcb 	bl	ff38 <llcp_rr_set_paused_cmd>
	llcp_rr_complete(conn);
    cfa2:	4630      	mov	r0, r6
    cfa4:	f003 f85c 	bl	10060 <llcp_rr_complete>
	ctx->state = RP_PU_STATE_IDLE;
    cfa8:	2300      	movs	r3, #0
    cfaa:	72a3      	strb	r3, [r4, #10]
}
    cfac:	e71b      	b.n	cde6 <rp_pu_execute_fsm+0x2e>
			llcp_rr_prt_stop(conn);
    cfae:	4630      	mov	r0, r6
    cfb0:	f002 ffde 	bl	ff70 <llcp_rr_prt_stop>
			ctx->state = RP_PU_STATE_WAIT_INSTANT;
    cfb4:	2307      	movs	r3, #7
    cfb6:	72a3      	strb	r3, [r4, #10]
    cfb8:	e715      	b.n	cde6 <rp_pu_execute_fsm+0x2e>
		if (p_to_c_phy) {
    cfba:	f011 0103 	ands.w	r1, r1, #3
    cfbe:	d016      	beq.n	cfee <rp_pu_execute_fsm+0x236>
			lll->phy_tx = p_to_c_phy;
    cfc0:	f361 0002 	bfi	r0, r1, #0, #3
		if (c_to_p_phy) {
    cfc4:	f012 0203 	ands.w	r2, r2, #3
			lll->phy_tx = p_to_c_phy;
    cfc8:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
		if (c_to_p_phy) {
    cfcc:	d01a      	beq.n	d004 <rp_pu_execute_fsm+0x24c>
			lll->phy_rx = c_to_p_phy;
    cfce:	f362 0302 	bfi	r3, r2, #0, #3
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
    cfd2:	458c      	cmp	ip, r1
			lll->phy_rx = c_to_p_phy;
    cfd4:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
    cfd8:	d011      	beq.n	cffe <rp_pu_execute_fsm+0x246>
			ctx->data.pu.ntf_dle = pu_update_eff_times(conn, ctx);
    cfda:	4621      	mov	r1, r4
    cfdc:	4630      	mov	r0, r6
    cfde:	f7ff fba3 	bl	c728 <pu_update_eff_times>
    cfe2:	7f63      	ldrb	r3, [r4, #29]
    cfe4:	f360 0341 	bfi	r3, r0, #1, #1
    cfe8:	2201      	movs	r2, #1
    cfea:	7763      	strb	r3, [r4, #29]
    cfec:	e769      	b.n	cec2 <rp_pu_execute_fsm+0x10a>
		if (c_to_p_phy) {
    cfee:	f012 0203 	ands.w	r2, r2, #3
    cff2:	f43f af65 	beq.w	cec0 <rp_pu_execute_fsm+0x108>
			lll->phy_rx = c_to_p_phy;
    cff6:	f362 0302 	bfi	r3, r2, #0, #3
    cffa:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
    cffe:	4297      	cmp	r7, r2
    d000:	d1eb      	bne.n	cfda <rp_pu_execute_fsm+0x222>
    d002:	e75d      	b.n	cec0 <rp_pu_execute_fsm+0x108>
    d004:	458c      	cmp	ip, r1
    d006:	d1e8      	bne.n	cfda <rp_pu_execute_fsm+0x222>
    d008:	e75a      	b.n	cec0 <rp_pu_execute_fsm+0x108>
    d00a:	bf00      	nop
    d00c:	0001bf60 	.word	0x0001bf60
    d010:	0001b908 	.word	0x0001b908
    d014:	0001b844 	.word	0x0001b844
    d018:	0001bfa4 	.word	0x0001bfa4
    d01c:	0001b3a8 	.word	0x0001b3a8

0000d020 <llcp_rp_pu_rx>:

void llcp_rp_pu_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
    d020:	b510      	push	{r4, lr}
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
    d022:	f892 e01f 	ldrb.w	lr, [r2, #31]
    d026:	f1be 0f16 	cmp.w	lr, #22
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
    d02a:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
    d02e:	d00b      	beq.n	d048 <llcp_rp_pu_rx+0x28>
    d030:	f1be 0f18 	cmp.w	lr, #24
    d034:	d00d      	beq.n	d052 <llcp_rp_pu_rx+0x32>
		break;
#endif /* CONFIG_BT_PERIPHERAL */
	default:
		/* Invalid behaviour */
		/* Invalid PDU received so terminate connection */
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
    d036:	2324      	movs	r3, #36	; 0x24
    d038:	460c      	mov	r4, r1
    d03a:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
		llcp_rr_complete(conn);
    d03e:	f003 f80f 	bl	10060 <llcp_rr_complete>
		ctx->state = RP_PU_STATE_IDLE;
    d042:	2300      	movs	r3, #0
    d044:	72a3      	strb	r3, [r4, #10]
		break;
	}
}
    d046:	bd10      	pop	{r4, pc}
    d048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_PHY_REQ, pdu);
    d04c:	2201      	movs	r2, #1
    d04e:	f7ff beb3 	b.w	cdb8 <rp_pu_execute_fsm>
}
    d052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_PHY_UPDATE_IND, pdu);
    d056:	2203      	movs	r2, #3
    d058:	f7ff beae 	b.w	cdb8 <rp_pu_execute_fsm>

0000d05c <llcp_rp_pu_init_proc>:

void llcp_rp_pu_init_proc(struct proc_ctx *ctx)
    d05c:	2300      	movs	r3, #0
    d05e:	7283      	strb	r3, [r0, #10]
    d060:	4770      	bx	lr
    d062:	bf00      	nop

0000d064 <llcp_rp_pu_run>:
{
	ctx->state = RP_PU_STATE_IDLE;
}

void llcp_rp_pu_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
    d064:	4613      	mov	r3, r2
	rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_RUN, param);
    d066:	2200      	movs	r2, #0
    d068:	f7ff bea6 	b.w	cdb8 <rp_pu_execute_fsm>

0000d06c <llcp_rp_pu_tx_ack>:
}

void llcp_rp_pu_tx_ack(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
    d06c:	4613      	mov	r3, r2
	rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_ACK, param);
    d06e:	2202      	movs	r2, #2
    d070:	f7ff bea2 	b.w	cdb8 <rp_pu_execute_fsm>

0000d074 <llcp_rp_pu_tx_ntf>:
}

void llcp_rp_pu_tx_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_NTF, NULL);
    d074:	2300      	movs	r3, #0
    d076:	2204      	movs	r2, #4
    d078:	f7ff be9e 	b.w	cdb8 <rp_pu_execute_fsm>

0000d07c <ull_tx_q_init>:

#include "ull_tx_queue.h"

void ull_tx_q_init(struct ull_tx_q *queue)
{
	queue->pause_data = 0U;
    d07c:	2300      	movs	r3, #0
    d07e:	7003      	strb	r3, [r0, #0]
	list->head = NULL;
    d080:	6043      	str	r3, [r0, #4]
    d082:	6083      	str	r3, [r0, #8]
    d084:	60c3      	str	r3, [r0, #12]
    d086:	6103      	str	r3, [r0, #16]
	sys_slist_init(&queue->tx_list);
	sys_slist_init(&queue->data_list);
}
    d088:	4770      	bx	lr
    d08a:	bf00      	nop

0000d08c <ull_tx_q_pause_data>:

void ull_tx_q_pause_data(struct ull_tx_q *queue)
{
	queue->pause_data++;
    d08c:	7803      	ldrb	r3, [r0, #0]
    d08e:	3301      	adds	r3, #1
    d090:	7003      	strb	r3, [r0, #0]
}
    d092:	4770      	bx	lr

0000d094 <ull_tx_q_resume_data>:

void ull_tx_q_resume_data(struct ull_tx_q *queue)
{
	if (queue->pause_data > 0) {
    d094:	7803      	ldrb	r3, [r0, #0]
    d096:	b95b      	cbnz	r3, d0b0 <ull_tx_q_resume_data+0x1c>
	return list->head;
    d098:	68c3      	ldr	r3, [r0, #12]
		queue->pause_data--;
	}

	/* move all paused data to the tail of tx list, only if not empty and no longer paused */
	if (!queue->pause_data &&  !sys_slist_is_empty(&queue->data_list)) {
    d09a:	b17b      	cbz	r3, d0bc <ull_tx_q_resume_data+0x28>
	return list->tail;
    d09c:	6902      	ldr	r2, [r0, #16]
Z_GENLIST_APPEND_LIST(slist, snode)
    d09e:	b11a      	cbz	r2, d0a8 <ull_tx_q_resume_data+0x14>
	return list->tail;
    d0a0:	6881      	ldr	r1, [r0, #8]
Z_GENLIST_APPEND_LIST(slist, snode)
    d0a2:	b161      	cbz	r1, d0be <ull_tx_q_resume_data+0x2a>
	parent->next = child;
    d0a4:	600b      	str	r3, [r1, #0]
	list->tail = node;
    d0a6:	6082      	str	r2, [r0, #8]
	list->head = NULL;
    d0a8:	2300      	movs	r3, #0
    d0aa:	60c3      	str	r3, [r0, #12]
    d0ac:	6103      	str	r3, [r0, #16]
		sys_slist_merge_slist(&queue->tx_list, &queue->data_list);
	}
}
    d0ae:	4770      	bx	lr
		queue->pause_data--;
    d0b0:	3b01      	subs	r3, #1
    d0b2:	b2db      	uxtb	r3, r3
    d0b4:	7003      	strb	r3, [r0, #0]
	if (!queue->pause_data &&  !sys_slist_is_empty(&queue->data_list)) {
    d0b6:	2b00      	cmp	r3, #0
    d0b8:	d0ee      	beq.n	d098 <ull_tx_q_resume_data+0x4>
}
    d0ba:	4770      	bx	lr
    d0bc:	4770      	bx	lr
	list->head = node;
    d0be:	6043      	str	r3, [r0, #4]
}
    d0c0:	e7f1      	b.n	d0a6 <ull_tx_q_resume_data+0x12>
    d0c2:	bf00      	nop

0000d0c4 <ull_tx_q_enqueue_data>:

void ull_tx_q_enqueue_data(struct ull_tx_q *queue, struct node_tx *tx)
{
	sys_slist_t *list;

	if (queue->pause_data) {
    d0c4:	7803      	ldrb	r3, [r0, #0]
    d0c6:	b13b      	cbz	r3, d0d8 <ull_tx_q_enqueue_data+0x14>
	parent->next = child;
    d0c8:	2300      	movs	r3, #0
		/* enqueue data pdu into paused data wait list */
		list = &queue->data_list;
    d0ca:	300c      	adds	r0, #12
    d0cc:	600b      	str	r3, [r1, #0]
	return list->tail;
    d0ce:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
    d0d0:	b143      	cbz	r3, d0e4 <ull_tx_q_enqueue_data+0x20>
	parent->next = child;
    d0d2:	6019      	str	r1, [r3, #0]
	list->tail = node;
    d0d4:	6041      	str	r1, [r0, #4]
		/* enqueue data pdu into tx list */
		list = &queue->tx_list;
	}

	sys_slist_append(list, (sys_snode_t *)tx);
}
    d0d6:	4770      	bx	lr
	parent->next = child;
    d0d8:	2300      	movs	r3, #0
		list = &queue->tx_list;
    d0da:	3004      	adds	r0, #4
    d0dc:	600b      	str	r3, [r1, #0]
	return list->tail;
    d0de:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
    d0e0:	2b00      	cmp	r3, #0
    d0e2:	d1f6      	bne.n	d0d2 <ull_tx_q_enqueue_data+0xe>
	list->head = node;
    d0e4:	6001      	str	r1, [r0, #0]
    d0e6:	6041      	str	r1, [r0, #4]
}
    d0e8:	4770      	bx	lr
    d0ea:	bf00      	nop

0000d0ec <ull_tx_q_enqueue_ctrl>:
	parent->next = child;
    d0ec:	2300      	movs	r3, #0
    d0ee:	600b      	str	r3, [r1, #0]
	return list->tail;
    d0f0:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
    d0f2:	b113      	cbz	r3, d0fa <ull_tx_q_enqueue_ctrl+0xe>
	parent->next = child;
    d0f4:	6019      	str	r1, [r3, #0]
	list->tail = node;
    d0f6:	6081      	str	r1, [r0, #8]

void ull_tx_q_enqueue_ctrl(struct ull_tx_q *queue, struct node_tx *tx)
{
	/* enqueue ctrl pdu into tx list */
	sys_slist_append(&queue->tx_list, (sys_snode_t *)tx);
}
    d0f8:	4770      	bx	lr
	list->head = node;
    d0fa:	6041      	str	r1, [r0, #4]
    d0fc:	6081      	str	r1, [r0, #8]
}
    d0fe:	4770      	bx	lr

0000d100 <ull_tx_q_peek>:
	struct node_tx *tx;

	tx = (struct node_tx *)sys_slist_peek_head(&queue->tx_list);

	return tx;
}
    d100:	6840      	ldr	r0, [r0, #4]
    d102:	4770      	bx	lr

0000d104 <ull_tx_q_dequeue>:

struct node_tx *ull_tx_q_dequeue(struct ull_tx_q *queue)
{
    d104:	4603      	mov	r3, r0
	return list->head;
    d106:	6840      	ldr	r0, [r0, #4]
Z_GENLIST_GET(slist, snode)
    d108:	b128      	cbz	r0, d116 <ull_tx_q_dequeue+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d10a:	6899      	ldr	r1, [r3, #8]
	return node->next;
    d10c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
    d10e:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d110:	4288      	cmp	r0, r1
	list->tail = node;
    d112:	bf08      	it	eq
    d114:	609a      	streq	r2, [r3, #8]
	struct node_tx *tx;

	tx = (struct node_tx *)sys_slist_get(&queue->tx_list);

	return tx;
}
    d116:	4770      	bx	lr

0000d118 <pdu_validate_conn_update_ind>:
#define VALIDATE_PDU_LEN(pdu, type) (pdu->len == PDU_DATA_LLCTRL_LEN(type))

#if defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_conn_update_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, conn_update_ind);
    d118:	7840      	ldrb	r0, [r0, #1]
}
    d11a:	f1a0 000c 	sub.w	r0, r0, #12
    d11e:	fab0 f080 	clz	r0, r0
    d122:	0940      	lsrs	r0, r0, #5
    d124:	4770      	bx	lr
    d126:	bf00      	nop

0000d128 <pdu_validate_chan_map_ind>:

static bool pdu_validate_chan_map_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, chan_map_ind);
    d128:	7840      	ldrb	r0, [r0, #1]
}
    d12a:	f1a0 0008 	sub.w	r0, r0, #8
    d12e:	fab0 f080 	clz	r0, r0
    d132:	0940      	lsrs	r0, r0, #5
    d134:	4770      	bx	lr
    d136:	bf00      	nop

0000d138 <pdu_validate_terminate_ind>:
#endif /* CONFIG_BT_PERIPHERAL */

static bool pdu_validate_terminate_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, terminate_ind);
    d138:	7840      	ldrb	r0, [r0, #1]
}
    d13a:	f1a0 0002 	sub.w	r0, r0, #2
    d13e:	fab0 f080 	clz	r0, r0
    d142:	0940      	lsrs	r0, r0, #5
    d144:	4770      	bx	lr
    d146:	bf00      	nop

0000d148 <pdu_validate_enc_req>:

#if defined(CONFIG_BT_CTLR_LE_ENC) && defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_enc_req(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, enc_req);
    d148:	7840      	ldrb	r0, [r0, #1]
}
    d14a:	f1a0 0017 	sub.w	r0, r0, #23
    d14e:	fab0 f080 	clz	r0, r0
    d152:	0940      	lsrs	r0, r0, #5
    d154:	4770      	bx	lr
    d156:	bf00      	nop

0000d158 <pdu_validate_start_enc_rsp>:
#endif /* CONFIG_BT_CTLR_LE_ENC && CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_CTLR_LE_ENC) && defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_start_enc_rsp(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, start_enc_rsp);
    d158:	7840      	ldrb	r0, [r0, #1]
}
    d15a:	f1a0 0001 	sub.w	r0, r0, #1
    d15e:	fab0 f080 	clz	r0, r0
    d162:	0940      	lsrs	r0, r0, #5
    d164:	4770      	bx	lr
    d166:	bf00      	nop

0000d168 <pdu_validate_feature_req>:
}

#if defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_feature_req(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, feature_req);
    d168:	7840      	ldrb	r0, [r0, #1]
}
    d16a:	f1a0 0009 	sub.w	r0, r0, #9
    d16e:	fab0 f080 	clz	r0, r0
    d172:	0940      	lsrs	r0, r0, #5
    d174:	4770      	bx	lr
    d176:	bf00      	nop

0000d178 <pdu_validate_version_ind>:
}
#endif

static bool pdu_validate_version_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, version_ind);
    d178:	7840      	ldrb	r0, [r0, #1]
}
    d17a:	f1a0 0006 	sub.w	r0, r0, #6
    d17e:	fab0 f080 	clz	r0, r0
    d182:	0940      	lsrs	r0, r0, #5
    d184:	4770      	bx	lr
    d186:	bf00      	nop

0000d188 <pdu_validate_conn_param_req>:
#endif /* CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG && CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static bool pdu_validate_conn_param_req(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, conn_param_req);
    d188:	7840      	ldrb	r0, [r0, #1]
}
    d18a:	f1a0 0018 	sub.w	r0, r0, #24
    d18e:	fab0 f080 	clz	r0, r0
    d192:	0940      	lsrs	r0, r0, #5
    d194:	4770      	bx	lr
    d196:	bf00      	nop

0000d198 <pdu_validate_reject_ext_ind>:
	return VALIDATE_PDU_LEN(pdu, conn_param_rsp);
}

static bool pdu_validate_reject_ext_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, reject_ext_ind);
    d198:	7840      	ldrb	r0, [r0, #1]
}
    d19a:	f1a0 0003 	sub.w	r0, r0, #3
    d19e:	fab0 f080 	clz	r0, r0
    d1a2:	0940      	lsrs	r0, r0, #5
    d1a4:	4770      	bx	lr
    d1a6:	bf00      	nop

0000d1a8 <pdu_validate_phy_upd_ind>:
	return VALIDATE_PDU_LEN(pdu, phy_rsp);
}

static bool pdu_validate_phy_upd_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, phy_upd_ind);
    d1a8:	7840      	ldrb	r0, [r0, #1]
}
    d1aa:	f1a0 0005 	sub.w	r0, r0, #5
    d1ae:	fab0 f080 	clz	r0, r0
    d1b2:	0940      	lsrs	r0, r0, #5
    d1b4:	4770      	bx	lr
    d1b6:	bf00      	nop

0000d1b8 <pdu_validate_clock_accuracy_rsp>:
{
	return VALIDATE_PDU_LEN(pdu, clock_accuracy_req);
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static bool pdu_validate_clock_accuracy_rsp(struct pdu_data *pdu)
    d1b8:	7840      	ldrb	r0, [r0, #1]
    d1ba:	f1a0 0002 	sub.w	r0, r0, #2
    d1be:	fab0 f080 	clz	r0, r0
    d1c2:	0940      	lsrs	r0, r0, #5
    d1c4:	4770      	bx	lr
    d1c6:	bf00      	nop

0000d1c8 <pdu_validate_unknown_rsp>:
static bool pdu_validate_unknown_rsp(struct pdu_data *pdu)
    d1c8:	7840      	ldrb	r0, [r0, #1]
    d1ca:	f1a0 0002 	sub.w	r0, r0, #2
    d1ce:	fab0 f080 	clz	r0, r0
    d1d2:	0940      	lsrs	r0, r0, #5
    d1d4:	4770      	bx	lr
    d1d6:	bf00      	nop

0000d1d8 <pdu_validate_pause_enc_req>:
static bool pdu_validate_pause_enc_req(struct pdu_data *pdu)
    d1d8:	7840      	ldrb	r0, [r0, #1]
    d1da:	f1a0 0001 	sub.w	r0, r0, #1
    d1de:	fab0 f080 	clz	r0, r0
    d1e2:	0940      	lsrs	r0, r0, #5
    d1e4:	4770      	bx	lr
    d1e6:	bf00      	nop

0000d1e8 <pdu_validate_reject_ind>:
static bool pdu_validate_reject_ind(struct pdu_data *pdu)
    d1e8:	7840      	ldrb	r0, [r0, #1]
    d1ea:	f1a0 0002 	sub.w	r0, r0, #2
    d1ee:	fab0 f080 	clz	r0, r0
    d1f2:	0940      	lsrs	r0, r0, #5
    d1f4:	4770      	bx	lr
    d1f6:	bf00      	nop

0000d1f8 <pdu_validate_conn_param_rsp>:
static bool pdu_validate_conn_param_rsp(struct pdu_data *pdu)
    d1f8:	7840      	ldrb	r0, [r0, #1]
    d1fa:	f1a0 0018 	sub.w	r0, r0, #24
    d1fe:	fab0 f080 	clz	r0, r0
    d202:	0940      	lsrs	r0, r0, #5
    d204:	4770      	bx	lr
    d206:	bf00      	nop

0000d208 <pdu_validate_ping_req>:
static bool pdu_validate_ping_req(struct pdu_data *pdu)
    d208:	7840      	ldrb	r0, [r0, #1]
    d20a:	f1a0 0001 	sub.w	r0, r0, #1
    d20e:	fab0 f080 	clz	r0, r0
    d212:	0940      	lsrs	r0, r0, #5
    d214:	4770      	bx	lr
    d216:	bf00      	nop

0000d218 <pdu_validate_ping_rsp>:
static bool pdu_validate_ping_rsp(struct pdu_data *pdu)
    d218:	7840      	ldrb	r0, [r0, #1]
    d21a:	f1a0 0001 	sub.w	r0, r0, #1
    d21e:	fab0 f080 	clz	r0, r0
    d222:	0940      	lsrs	r0, r0, #5
    d224:	4770      	bx	lr
    d226:	bf00      	nop

0000d228 <pdu_validate_length_req>:
static bool pdu_validate_length_req(struct pdu_data *pdu)
    d228:	7840      	ldrb	r0, [r0, #1]
    d22a:	f1a0 0009 	sub.w	r0, r0, #9
    d22e:	fab0 f080 	clz	r0, r0
    d232:	0940      	lsrs	r0, r0, #5
    d234:	4770      	bx	lr
    d236:	bf00      	nop

0000d238 <pdu_validate_length_rsp>:
static bool pdu_validate_length_rsp(struct pdu_data *pdu)
    d238:	7840      	ldrb	r0, [r0, #1]
    d23a:	f1a0 0009 	sub.w	r0, r0, #9
    d23e:	fab0 f080 	clz	r0, r0
    d242:	0940      	lsrs	r0, r0, #5
    d244:	4770      	bx	lr
    d246:	bf00      	nop

0000d248 <pdu_validate_phy_req>:
static bool pdu_validate_phy_req(struct pdu_data *pdu)
    d248:	7840      	ldrb	r0, [r0, #1]
    d24a:	f1a0 0003 	sub.w	r0, r0, #3
    d24e:	fab0 f080 	clz	r0, r0
    d252:	0940      	lsrs	r0, r0, #5
    d254:	4770      	bx	lr
    d256:	bf00      	nop

0000d258 <pdu_validate_phy_rsp>:
static bool pdu_validate_phy_rsp(struct pdu_data *pdu)
    d258:	7840      	ldrb	r0, [r0, #1]
    d25a:	f1a0 0003 	sub.w	r0, r0, #3
    d25e:	fab0 f080 	clz	r0, r0
    d262:	0940      	lsrs	r0, r0, #5
    d264:	4770      	bx	lr
    d266:	bf00      	nop

0000d268 <llcp_proc_ctx_release>:
{
    d268:	b510      	push	{r4, lr}
	LL_ASSERT(ctx->owner);
    d26a:	6841      	ldr	r1, [r0, #4]
{
    d26c:	4604      	mov	r4, r0
	LL_ASSERT(ctx->owner);
    d26e:	b121      	cbz	r1, d27a <llcp_proc_ctx_release+0x12>
	mem_release(ctx, &ctx->owner->free);
    d270:	4620      	mov	r0, r4
}
    d272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_release(ctx, &ctx->owner->free);
    d276:	f7f9 b96d 	b.w	6554 <mem_release>
	LL_ASSERT(ctx->owner);
    d27a:	4a09      	ldr	r2, [pc, #36]	; (d2a0 <llcp_proc_ctx_release+0x38>)
    d27c:	4909      	ldr	r1, [pc, #36]	; (d2a4 <llcp_proc_ctx_release+0x3c>)
    d27e:	480a      	ldr	r0, [pc, #40]	; (d2a8 <llcp_proc_ctx_release+0x40>)
    d280:	2360      	movs	r3, #96	; 0x60
    d282:	f00a f92e 	bl	174e2 <assert_print>
    d286:	4040      	eors	r0, r0
    d288:	f380 8811 	msr	BASEPRI, r0
    d28c:	f04f 0003 	mov.w	r0, #3
    d290:	df02      	svc	2
	mem_release(ctx, &ctx->owner->free);
    d292:	6861      	ldr	r1, [r4, #4]
    d294:	4620      	mov	r0, r4
}
    d296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_release(ctx, &ctx->owner->free);
    d29a:	f7f9 b95b 	b.w	6554 <mem_release>
    d29e:	bf00      	nop
    d2a0:	0001bfbc 	.word	0x0001bfbc
    d2a4:	0001bffc 	.word	0x0001bffc
    d2a8:	0001b844 	.word	0x0001b844

0000d2ac <llcp_tx_alloc_peek>:
	return mem_tx.free != NULL;
    d2ac:	4b02      	ldr	r3, [pc, #8]	; (d2b8 <llcp_tx_alloc_peek+0xc>)
    d2ae:	6818      	ldr	r0, [r3, #0]
}
    d2b0:	3800      	subs	r0, #0
    d2b2:	bf18      	it	ne
    d2b4:	2001      	movne	r0, #1
    d2b6:	4770      	bx	lr
    d2b8:	20000604 	.word	0x20000604

0000d2bc <llcp_tx_alloc>:
{
    d2bc:	b510      	push	{r4, lr}
	tx = (struct node_tx *)mem_acquire(&mem_tx.free);
    d2be:	4804      	ldr	r0, [pc, #16]	; (d2d0 <llcp_tx_alloc+0x14>)
    d2c0:	f7f9 f92c 	bl	651c <mem_acquire>
    d2c4:	4604      	mov	r4, r0
	ull_pdu_data_init(pdu);
    d2c6:	3004      	adds	r0, #4
    d2c8:	f7fe fd46 	bl	bd58 <ull_pdu_data_init>
}
    d2cc:	4620      	mov	r0, r4
    d2ce:	bd10      	pop	{r4, pc}
    d2d0:	20000604 	.word	0x20000604

0000d2d4 <llcp_ntf_alloc_is_available>:
{
    d2d4:	b508      	push	{r3, lr}
	return ll_pdu_rx_alloc_peek(1) != NULL;
    d2d6:	2001      	movs	r0, #1
    d2d8:	f7fb fa24 	bl	8724 <ll_pdu_rx_alloc_peek>
}
    d2dc:	3800      	subs	r0, #0
    d2de:	bf18      	it	ne
    d2e0:	2001      	movne	r0, #1
    d2e2:	bd08      	pop	{r3, pc}

0000d2e4 <llcp_ntf_alloc_num_available>:
{
    d2e4:	b508      	push	{r3, lr}
	return ll_pdu_rx_alloc_peek(count) != NULL;
    d2e6:	f7fb fa1d 	bl	8724 <ll_pdu_rx_alloc_peek>
}
    d2ea:	3800      	subs	r0, #0
    d2ec:	bf18      	it	ne
    d2ee:	2001      	movne	r0, #1
    d2f0:	bd08      	pop	{r3, pc}
    d2f2:	bf00      	nop

0000d2f4 <llcp_ntf_alloc>:
	return ll_pdu_rx_alloc();
    d2f4:	f7fb ba38 	b.w	8768 <ll_pdu_rx_alloc>

0000d2f8 <llcp_tx_enqueue>:
	ull_tx_q_enqueue_ctrl(&conn->tx_q, tx);
    d2f8:	30d4      	adds	r0, #212	; 0xd4
    d2fa:	f7ff bef7 	b.w	d0ec <ull_tx_q_enqueue_ctrl>
    d2fe:	bf00      	nop

0000d300 <llcp_tx_pause_data>:
{
    d300:	b538      	push	{r3, r4, r5, lr}
	if (conn->llcp.tx_q_pause_data_mask == 0) {
    d302:	f890 3146 	ldrb.w	r3, [r0, #326]	; 0x146
{
    d306:	4605      	mov	r5, r0
    d308:	460c      	mov	r4, r1
	if (conn->llcp.tx_q_pause_data_mask == 0) {
    d30a:	b11b      	cbz	r3, d314 <llcp_tx_pause_data+0x14>
	conn->llcp.tx_q_pause_data_mask |= pause_mask;
    d30c:	431c      	orrs	r4, r3
    d30e:	f885 4146 	strb.w	r4, [r5, #326]	; 0x146
}
    d312:	bd38      	pop	{r3, r4, r5, pc}
		ull_tx_q_pause_data(&conn->tx_q);
    d314:	30d4      	adds	r0, #212	; 0xd4
    d316:	f7ff feb9 	bl	d08c <ull_tx_q_pause_data>
	conn->llcp.tx_q_pause_data_mask |= pause_mask;
    d31a:	f895 3146 	ldrb.w	r3, [r5, #326]	; 0x146
    d31e:	431c      	orrs	r4, r3
    d320:	f885 4146 	strb.w	r4, [r5, #326]	; 0x146
}
    d324:	bd38      	pop	{r3, r4, r5, pc}
    d326:	bf00      	nop

0000d328 <llcp_tx_resume_data>:
	conn->llcp.tx_q_pause_data_mask &= ~resume_mask;
    d328:	f890 3146 	ldrb.w	r3, [r0, #326]	; 0x146
    d32c:	ea23 0101 	bic.w	r1, r3, r1
    d330:	f880 1146 	strb.w	r1, [r0, #326]	; 0x146
	if (conn->llcp.tx_q_pause_data_mask == 0) {
    d334:	b101      	cbz	r1, d338 <llcp_tx_resume_data+0x10>
}
    d336:	4770      	bx	lr
		ull_tx_q_resume_data(&conn->tx_q);
    d338:	30d4      	adds	r0, #212	; 0xd4
    d33a:	f7ff beab 	b.w	d094 <ull_tx_q_resume_data>
    d33e:	bf00      	nop

0000d340 <llcp_create_local_procedure>:
{
    d340:	b570      	push	{r4, r5, r6, lr}
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
    d342:	4e20      	ldr	r6, [pc, #128]	; (d3c4 <llcp_create_local_procedure+0x84>)
{
    d344:	4605      	mov	r5, r0
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
    d346:	4630      	mov	r0, r6
    d348:	f7f9 f8e8 	bl	651c <mem_acquire>
	if (ctx) {
    d34c:	4604      	mov	r4, r0
    d34e:	b1e8      	cbz	r0, d38c <llcp_create_local_procedure+0x4c>
	ctx->collision = 0U;
    d350:	2100      	movs	r1, #0
		ctx->owner = owner;
    d352:	6046      	str	r6, [r0, #4]
	ctx->proc = proc;
    d354:	7205      	strb	r5, [r0, #8]
	ctx->collision = 0U;
    d356:	6101      	str	r1, [r0, #16]
	ctx->done = 0U;
    d358:	6181      	str	r1, [r0, #24]
	ctx->rx_greedy = 0U;
    d35a:	7301      	strb	r1, [r0, #12]
	ctx->tx_ack = NULL;
    d35c:	6141      	str	r1, [r0, #20]
	memset((void *)&ctx->data, 0, sizeof(ctx->data));
    d35e:	222c      	movs	r2, #44	; 0x2c
    d360:	301c      	adds	r0, #28
    d362:	f00a fb56 	bl	17a12 <memset>
	switch (ctx->proc) {
    d366:	7a23      	ldrb	r3, [r4, #8]
	ctx->rx_opcode = ULL_LLCP_INVALID_OPCODE;
    d368:	22ff      	movs	r2, #255	; 0xff
	switch (ctx->proc) {
    d36a:	3b01      	subs	r3, #1
	ctx->rx_opcode = ULL_LLCP_INVALID_OPCODE;
    d36c:	72e2      	strb	r2, [r4, #11]
	ctx->tx_opcode = ULL_LLCP_INVALID_OPCODE;
    d36e:	7362      	strb	r2, [r4, #13]
	ctx->response_opcode = ULL_LLCP_INVALID_OPCODE;
    d370:	7262      	strb	r2, [r4, #9]
	switch (ctx->proc) {
    d372:	2b0b      	cmp	r3, #11
    d374:	d811      	bhi.n	d39a <llcp_create_local_procedure+0x5a>
    d376:	e8df f003 	tbb	[pc, r3]
    d37a:	0606      	.short	0x0606
    d37c:	10100606 	.word	0x10100606
    d380:	060b0b1f 	.word	0x060b0b1f
    d384:	0610      	.short	0x0610
		llcp_lp_comm_init_proc(ctx);
    d386:	4620      	mov	r0, r4
    d388:	f001 f870 	bl	e46c <llcp_lp_comm_init_proc>
}
    d38c:	4620      	mov	r0, r4
    d38e:	bd70      	pop	{r4, r5, r6, pc}
		llcp_lp_cu_init_proc(ctx);
    d390:	4620      	mov	r0, r4
    d392:	f002 fae5 	bl	f960 <llcp_lp_cu_init_proc>
}
    d396:	4620      	mov	r0, r4
    d398:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
    d39a:	4a0b      	ldr	r2, [pc, #44]	; (d3c8 <llcp_create_local_procedure+0x88>)
    d39c:	490b      	ldr	r1, [pc, #44]	; (d3cc <llcp_create_local_procedure+0x8c>)
    d39e:	480c      	ldr	r0, [pc, #48]	; (d3d0 <llcp_create_local_procedure+0x90>)
    d3a0:	f44f 73c2 	mov.w	r3, #388	; 0x184
    d3a4:	f00a f89d 	bl	174e2 <assert_print>
    d3a8:	4040      	eors	r0, r0
    d3aa:	f380 8811 	msr	BASEPRI, r0
    d3ae:	f04f 0003 	mov.w	r0, #3
    d3b2:	df02      	svc	2
}
    d3b4:	4620      	mov	r0, r4
    d3b6:	bd70      	pop	{r4, r5, r6, pc}
		llcp_lp_pu_init_proc(ctx);
    d3b8:	4620      	mov	r0, r4
    d3ba:	f7ff fcaf 	bl	cd1c <llcp_lp_pu_init_proc>
}
    d3be:	4620      	mov	r0, r4
    d3c0:	bd70      	pop	{r4, r5, r6, pc}
    d3c2:	bf00      	nop
    d3c4:	200005fc 	.word	0x200005fc
    d3c8:	0001bfbc 	.word	0x0001bfbc
    d3cc:	0001b908 	.word	0x0001b908
    d3d0:	0001b844 	.word	0x0001b844

0000d3d4 <llcp_create_remote_procedure>:
{
    d3d4:	b570      	push	{r4, r5, r6, lr}
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
    d3d6:	4e22      	ldr	r6, [pc, #136]	; (d460 <llcp_create_remote_procedure+0x8c>)
{
    d3d8:	4605      	mov	r5, r0
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
    d3da:	4630      	mov	r0, r6
    d3dc:	f7f9 f89e 	bl	651c <mem_acquire>
	if (ctx) {
    d3e0:	4604      	mov	r4, r0
    d3e2:	b1e8      	cbz	r0, d420 <llcp_create_remote_procedure+0x4c>
	ctx->collision = 0U;
    d3e4:	2100      	movs	r1, #0
		ctx->owner = owner;
    d3e6:	6046      	str	r6, [r0, #4]
	ctx->proc = proc;
    d3e8:	7205      	strb	r5, [r0, #8]
	ctx->collision = 0U;
    d3ea:	6101      	str	r1, [r0, #16]
	ctx->done = 0U;
    d3ec:	6181      	str	r1, [r0, #24]
	ctx->rx_greedy = 0U;
    d3ee:	7301      	strb	r1, [r0, #12]
	ctx->tx_ack = NULL;
    d3f0:	6141      	str	r1, [r0, #20]
	memset((void *)&ctx->data, 0, sizeof(ctx->data));
    d3f2:	222c      	movs	r2, #44	; 0x2c
    d3f4:	301c      	adds	r0, #28
    d3f6:	f00a fb0c 	bl	17a12 <memset>
	switch (ctx->proc) {
    d3fa:	7a22      	ldrb	r2, [r4, #8]
	ctx->rx_opcode = ULL_LLCP_INVALID_OPCODE;
    d3fc:	23ff      	movs	r3, #255	; 0xff
    d3fe:	72e3      	strb	r3, [r4, #11]
	ctx->tx_opcode = ULL_LLCP_INVALID_OPCODE;
    d400:	7363      	strb	r3, [r4, #13]
	ctx->response_opcode = ULL_LLCP_INVALID_OPCODE;
    d402:	7263      	strb	r3, [r4, #9]
	switch (ctx->proc) {
    d404:	2a0c      	cmp	r2, #12
    d406:	d81d      	bhi.n	d444 <llcp_create_remote_procedure+0x70>
    d408:	e8df f002 	tbb	[pc, r2]
    d40c:	0707070a 	.word	0x0707070a
    d410:	180c0c07 	.word	0x180c0c07
    d414:	14071010 	.word	0x14071010
    d418:	07          	.byte	0x07
    d419:	00          	.byte	0x00
		llcp_rp_comm_init_proc(ctx);
    d41a:	4620      	mov	r0, r4
    d41c:	f001 f838 	bl	e490 <llcp_rp_comm_init_proc>
}
    d420:	4620      	mov	r0, r4
    d422:	bd70      	pop	{r4, r5, r6, pc}
		llcp_rp_enc_init_proc(ctx);
    d424:	4620      	mov	r0, r4
    d426:	f7ff f8eb 	bl	c600 <llcp_rp_enc_init_proc>
		break;
    d42a:	e7f9      	b.n	d420 <llcp_create_remote_procedure+0x4c>
		llcp_rp_cu_init_proc(ctx);
    d42c:	4620      	mov	r0, r4
    d42e:	f002 fac5 	bl	f9bc <llcp_rp_cu_init_proc>
		break;
    d432:	e7f5      	b.n	d420 <llcp_create_remote_procedure+0x4c>
		llcp_rp_chmu_init_proc(ctx);
    d434:	4620      	mov	r0, r4
    d436:	f002 fb15 	bl	fa64 <llcp_rp_chmu_init_proc>
		break;
    d43a:	e7f1      	b.n	d420 <llcp_create_remote_procedure+0x4c>
		llcp_rp_pu_init_proc(ctx);
    d43c:	4620      	mov	r0, r4
    d43e:	f7ff fe0d 	bl	d05c <llcp_rp_pu_init_proc>
		break;
    d442:	e7ed      	b.n	d420 <llcp_create_remote_procedure+0x4c>
		LL_ASSERT(0);
    d444:	4a07      	ldr	r2, [pc, #28]	; (d464 <llcp_create_remote_procedure+0x90>)
    d446:	4908      	ldr	r1, [pc, #32]	; (d468 <llcp_create_remote_procedure+0x94>)
    d448:	4808      	ldr	r0, [pc, #32]	; (d46c <llcp_create_remote_procedure+0x98>)
    d44a:	f240 13db 	movw	r3, #475	; 0x1db
    d44e:	f00a f848 	bl	174e2 <assert_print>
    d452:	4040      	eors	r0, r0
    d454:	f380 8811 	msr	BASEPRI, r0
    d458:	f04f 0003 	mov.w	r0, #3
    d45c:	df02      	svc	2
		break;
    d45e:	e7df      	b.n	d420 <llcp_create_remote_procedure+0x4c>
    d460:	200005f4 	.word	0x200005f4
    d464:	0001bfbc 	.word	0x0001bfbc
    d468:	0001b908 	.word	0x0001b908
    d46c:	0001b844 	.word	0x0001b844

0000d470 <ull_cp_init>:
{
    d470:	b510      	push	{r4, lr}
	mem_init(mem_local_ctx.pool, PROC_CTX_BUF_SIZE,
    d472:	4b0a      	ldr	r3, [pc, #40]	; (d49c <ull_cp_init+0x2c>)
    d474:	2206      	movs	r2, #6
    d476:	6858      	ldr	r0, [r3, #4]
    d478:	214c      	movs	r1, #76	; 0x4c
    d47a:	f7f9 f81f 	bl	64bc <mem_init>
	mem_init(mem_remote_ctx.pool, PROC_CTX_BUF_SIZE,
    d47e:	4b08      	ldr	r3, [pc, #32]	; (d4a0 <ull_cp_init+0x30>)
    d480:	2201      	movs	r2, #1
    d482:	6858      	ldr	r0, [r3, #4]
    d484:	214c      	movs	r1, #76	; 0x4c
    d486:	f7f9 f819 	bl	64bc <mem_init>
	mem_init(mem_tx.pool, TX_CTRL_BUF_SIZE, LLCP_TX_CTRL_BUF_COUNT, &mem_tx.free);
    d48a:	4b06      	ldr	r3, [pc, #24]	; (d4a4 <ull_cp_init+0x34>)
}
    d48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_init(mem_tx.pool, TX_CTRL_BUF_SIZE, LLCP_TX_CTRL_BUF_COUNT, &mem_tx.free);
    d490:	6858      	ldr	r0, [r3, #4]
    d492:	2204      	movs	r2, #4
    d494:	212c      	movs	r1, #44	; 0x2c
    d496:	f7f9 b811 	b.w	64bc <mem_init>
    d49a:	bf00      	nop
    d49c:	200005fc 	.word	0x200005fc
    d4a0:	200005f4 	.word	0x200005f4
    d4a4:	20000604 	.word	0x20000604

0000d4a8 <ull_llcp_init>:
{
    d4a8:	b538      	push	{r3, r4, r5, lr}
    d4aa:	4604      	mov	r4, r0
	list->head = NULL;
    d4ac:	2500      	movs	r5, #0
	llcp_lr_init(conn);
    d4ae:	f001 fa27 	bl	e900 <llcp_lr_init>
	llcp_rr_init(conn);
    d4b2:	4620      	mov	r0, r4
	list->tail = NULL;
    d4b4:	e9c4 553a 	strd	r5, r5, [r4, #232]	; 0xe8
	conn->llcp.local.pause = 0U;
    d4b8:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
	llcp_rr_init(conn);
    d4bc:	f002 fdc4 	bl	10048 <llcp_rr_init>
	memset(&conn->llcp.vex, 0, sizeof(conn->llcp.vex));
    d4c0:	2207      	movs	r2, #7
    d4c2:	4629      	mov	r1, r5
    d4c4:	e9c4 553e 	strd	r5, r5, [r4, #248]	; 0xf8
	conn->llcp.remote.incompat = INCOMPAT_NO_COLLISION;
    d4c8:	f884 5106 	strb.w	r5, [r4, #262]	; 0x106
	conn->llcp.remote.pause = 0U;
    d4cc:	f8a4 5104 	strh.w	r5, [r4, #260]	; 0x104
	conn->llcp.prt_reload = 0U;
    d4d0:	f8a4 5108 	strh.w	r5, [r4, #264]	; 0x108
	memset(&conn->llcp.vex, 0, sizeof(conn->llcp.vex));
    d4d4:	f504 708a 	add.w	r0, r4, #276	; 0x114
    d4d8:	f00a fa9b 	bl	17a12 <memset>
	memset(&conn->llcp.muc, 0, sizeof(conn->llcp.muc));
    d4dc:	2202      	movs	r2, #2
    d4de:	4629      	mov	r1, r5
    d4e0:	f504 709c 	add.w	r0, r4, #312	; 0x138
    d4e4:	f00a fa95 	bl	17a12 <memset>
	memset(&conn->llcp.fex, 0, sizeof(conn->llcp.fex));
    d4e8:	2218      	movs	r2, #24
    d4ea:	4629      	mov	r1, r5
    d4ec:	f504 7090 	add.w	r0, r4, #288	; 0x120
    d4f0:	f00a fa8f 	bl	17a12 <memset>
	conn->llcp.fex.features_used = ll_feat_get();
    d4f4:	f7fa fbc6 	bl	7c84 <ll_feat_get>
	conn->lll.enc_rx = 0U;
    d4f8:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	conn->llcp.tx_q_pause_data_mask = 0;
    d4fc:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
	conn->llcp.fex.features_used = ll_feat_get();
    d500:	e9c4 014c 	strd	r0, r1, [r4, #304]	; 0x130
	conn->lll.enc_rx = 0U;
    d504:	f023 0318 	bic.w	r3, r3, #24
    d508:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	conn->lll.event_counter = 0;
    d50c:	8665      	strh	r5, [r4, #50]	; 0x32
}
    d50e:	bd38      	pop	{r3, r4, r5, pc}

0000d510 <ull_cp_release_tx>:
	mem_release(tx, &mem_tx.free);
    d510:	4608      	mov	r0, r1
    d512:	4901      	ldr	r1, [pc, #4]	; (d518 <ull_cp_release_tx+0x8>)
    d514:	f7f9 b81e 	b.w	6554 <mem_release>
    d518:	20000604 	.word	0x20000604

0000d51c <ull_cp_prt_elapse>:
{
    d51c:	b538      	push	{r3, r4, r5, lr}
	if (*expire != 0U) {
    d51e:	f8b0 50f2 	ldrh.w	r5, [r0, #242]	; 0xf2
{
    d522:	4603      	mov	r3, r0
    d524:	4614      	mov	r4, r2
	if (*expire != 0U) {
    d526:	b125      	cbz	r5, d532 <ull_cp_prt_elapse+0x16>
		if (*expire > elapsed_event) {
    d528:	42a9      	cmp	r1, r5
    d52a:	d20e      	bcs.n	d54a <ull_cp_prt_elapse+0x2e>
			*expire -= elapsed_event;
    d52c:	1a6d      	subs	r5, r5, r1
    d52e:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	if (*expire != 0U) {
    d532:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
    d536:	b122      	cbz	r2, d542 <ull_cp_prt_elapse+0x26>
		if (*expire > elapsed_event) {
    d538:	4291      	cmp	r1, r2
    d53a:	d20d      	bcs.n	d558 <ull_cp_prt_elapse+0x3c>
			*expire -= elapsed_event;
    d53c:	1a52      	subs	r2, r2, r1
    d53e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	return 0;
    d542:	2300      	movs	r3, #0
    d544:	4618      	mov	r0, r3
			*error_code = ctx->data.term.error_code;
    d546:	7023      	strb	r3, [r4, #0]
}
    d548:	bd38      	pop	{r3, r4, r5, pc}
		ctx = llcp_lr_peek(conn);
    d54a:	f001 f883 	bl	e654 <llcp_lr_peek>
		LL_ASSERT(ctx);
    d54e:	4605      	mov	r5, r0
    d550:	b150      	cbz	r0, d568 <ull_cp_prt_elapse+0x4c>
		if (ctx->proc == PROC_TERMINATE) {
    d552:	7a2b      	ldrb	r3, [r5, #8]
    d554:	2b0a      	cmp	r3, #10
    d556:	d003      	beq.n	d560 <ull_cp_prt_elapse+0x44>
	return 0;
    d558:	2322      	movs	r3, #34	; 0x22
		return -ETIMEDOUT;
    d55a:	f06f 0073 	mvn.w	r0, #115	; 0x73
    d55e:	e7f2      	b.n	d546 <ull_cp_prt_elapse+0x2a>
			*error_code = ctx->data.term.error_code;
    d560:	7f2b      	ldrb	r3, [r5, #28]
		return -ETIMEDOUT;
    d562:	f06f 0073 	mvn.w	r0, #115	; 0x73
    d566:	e7ee      	b.n	d546 <ull_cp_prt_elapse+0x2a>
		LL_ASSERT(ctx);
    d568:	4a06      	ldr	r2, [pc, #24]	; (d584 <ull_cp_prt_elapse+0x68>)
    d56a:	4907      	ldr	r1, [pc, #28]	; (d588 <ull_cp_prt_elapse+0x6c>)
    d56c:	4807      	ldr	r0, [pc, #28]	; (d58c <ull_cp_prt_elapse+0x70>)
    d56e:	f240 2363 	movw	r3, #611	; 0x263
    d572:	f009 ffb6 	bl	174e2 <assert_print>
    d576:	4040      	eors	r0, r0
    d578:	f380 8811 	msr	BASEPRI, r0
    d57c:	f04f 0003 	mov.w	r0, #3
    d580:	df02      	svc	2
    d582:	e7e6      	b.n	d552 <ull_cp_prt_elapse+0x36>
    d584:	0001bfbc 	.word	0x0001bfbc
    d588:	0001c008 	.word	0x0001c008
    d58c:	0001b844 	.word	0x0001b844

0000d590 <ull_cp_prt_reload_set>:
	conn->llcp.prt_reload = RADIO_CONN_EVENTS((40U * 1000U * 1000U), conn_intv_us);
    d590:	4b03      	ldr	r3, [pc, #12]	; (d5a0 <ull_cp_prt_reload_set+0x10>)
    d592:	440b      	add	r3, r1
    d594:	fbb3 f3f1 	udiv	r3, r3, r1
    d598:	f8a0 3108 	strh.w	r3, [r0, #264]	; 0x108
}
    d59c:	4770      	bx	lr
    d59e:	bf00      	nop
    d5a0:	026259ff 	.word	0x026259ff

0000d5a4 <ull_cp_run>:
{
    d5a4:	b510      	push	{r4, lr}
    d5a6:	4604      	mov	r4, r0
	llcp_rr_run(conn);
    d5a8:	f002 fd56 	bl	10058 <llcp_rr_run>
	llcp_lr_run(conn);
    d5ac:	4620      	mov	r0, r4
}
    d5ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	llcp_lr_run(conn);
    d5b2:	f001 b9ad 	b.w	e910 <llcp_lr_run>
    d5b6:	bf00      	nop

0000d5b8 <ull_cp_state_set>:
{
    d5b8:	b510      	push	{r4, lr}
    d5ba:	4604      	mov	r4, r0
	switch (state) {
    d5bc:	b111      	cbz	r1, d5c4 <ull_cp_state_set+0xc>
    d5be:	2901      	cmp	r1, #1
    d5c0:	d007      	beq.n	d5d2 <ull_cp_state_set+0x1a>
}
    d5c2:	bd10      	pop	{r4, pc}
		llcp_rr_connect(conn);
    d5c4:	f002 fd50 	bl	10068 <llcp_rr_connect>
		llcp_lr_connect(conn);
    d5c8:	4620      	mov	r0, r4
}
    d5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_lr_connect(conn);
    d5ce:	f001 b9cb 	b.w	e968 <llcp_lr_connect>
		llcp_rr_disconnect(conn);
    d5d2:	f002 fd4d 	bl	10070 <llcp_rr_disconnect>
		llcp_lr_disconnect(conn);
    d5d6:	4620      	mov	r0, r4
}
    d5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_lr_disconnect(conn);
    d5dc:	f001 b9e6 	b.w	e9ac <llcp_lr_disconnect>

0000d5e0 <ull_cp_min_used_chans>:
	if (conn->lll.role != BT_HCI_ROLE_PERIPHERAL) {
    d5e0:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    d5e4:	2b00      	cmp	r3, #0
    d5e6:	da11      	bge.n	d60c <ull_cp_min_used_chans+0x2c>
{
    d5e8:	b570      	push	{r4, r5, r6, lr}
    d5ea:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_MIN_USED_CHANS);
    d5ec:	2003      	movs	r0, #3
    d5ee:	460e      	mov	r6, r1
    d5f0:	4615      	mov	r5, r2
    d5f2:	f7ff fea5 	bl	d340 <llcp_create_local_procedure>
	if (!ctx) {
    d5f6:	4601      	mov	r1, r0
    d5f8:	b130      	cbz	r0, d608 <ull_cp_min_used_chans+0x28>
	ctx->data.muc.phys = phys;
    d5fa:	7706      	strb	r6, [r0, #28]
	ctx->data.muc.min_used_chans = min_used_chans;
    d5fc:	7745      	strb	r5, [r0, #29]
	llcp_lr_enqueue(conn, ctx);
    d5fe:	4620      	mov	r0, r4
    d600:	f000 fff4 	bl	e5ec <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    d604:	2000      	movs	r0, #0
}
    d606:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    d608:	200c      	movs	r0, #12
}
    d60a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    d60c:	200c      	movs	r0, #12
}
    d60e:	4770      	bx	lr

0000d610 <ull_cp_le_ping>:
{
    d610:	b510      	push	{r4, lr}
    d612:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_LE_PING);
    d614:	2001      	movs	r0, #1
    d616:	f7ff fe93 	bl	d340 <llcp_create_local_procedure>
	if (!ctx) {
    d61a:	b128      	cbz	r0, d628 <ull_cp_le_ping+0x18>
    d61c:	4601      	mov	r1, r0
	llcp_lr_enqueue(conn, ctx);
    d61e:	4620      	mov	r0, r4
    d620:	f000 ffe4 	bl	e5ec <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    d624:	2000      	movs	r0, #0
}
    d626:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    d628:	200c      	movs	r0, #12
}
    d62a:	bd10      	pop	{r4, pc}

0000d62c <ull_cp_feature_exchange>:
{
    d62c:	b510      	push	{r4, lr}
    d62e:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_FEATURE_EXCHANGE);
    d630:	2002      	movs	r0, #2
    d632:	f7ff fe85 	bl	d340 <llcp_create_local_procedure>
	if (!ctx) {
    d636:	b128      	cbz	r0, d644 <ull_cp_feature_exchange+0x18>
    d638:	4601      	mov	r1, r0
	llcp_lr_enqueue(conn, ctx);
    d63a:	4620      	mov	r0, r4
    d63c:	f000 ffd6 	bl	e5ec <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    d640:	2000      	movs	r0, #0
}
    d642:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    d644:	200c      	movs	r0, #12
}
    d646:	bd10      	pop	{r4, pc}

0000d648 <ull_cp_version_exchange>:
{
    d648:	b510      	push	{r4, lr}
    d64a:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_VERSION_EXCHANGE);
    d64c:	2004      	movs	r0, #4
    d64e:	f7ff fe77 	bl	d340 <llcp_create_local_procedure>
	if (!ctx) {
    d652:	b128      	cbz	r0, d660 <ull_cp_version_exchange+0x18>
    d654:	4601      	mov	r1, r0
	llcp_lr_enqueue(conn, ctx);
    d656:	4620      	mov	r0, r4
    d658:	f000 ffc8 	bl	e5ec <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    d65c:	2000      	movs	r0, #0
}
    d65e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    d660:	200c      	movs	r0, #12
}
    d662:	bd10      	pop	{r4, pc}

0000d664 <ull_cp_phy_update>:
{
    d664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d668:	4605      	mov	r5, r0
	ctx = llcp_create_local_procedure(PROC_PHY_UPDATE);
    d66a:	2007      	movs	r0, #7
{
    d66c:	f89d 6018 	ldrb.w	r6, [sp, #24]
    d670:	4688      	mov	r8, r1
    d672:	4617      	mov	r7, r2
    d674:	461c      	mov	r4, r3
	ctx = llcp_create_local_procedure(PROC_PHY_UPDATE);
    d676:	f7ff fe63 	bl	d340 <llcp_create_local_procedure>
	if (!ctx) {
    d67a:	b1a0      	cbz	r0, d6a6 <ull_cp_phy_update+0x42>
	ctx->data.pu.tx = tx;
    d67c:	00e3      	lsls	r3, r4, #3
    d67e:	f008 0807 	and.w	r8, r8, #7
    d682:	f003 0338 	and.w	r3, r3, #56	; 0x38
    d686:	01bf      	lsls	r7, r7, #6
    d688:	ea43 0308 	orr.w	r3, r3, r8
    d68c:	f007 0740 	and.w	r7, r7, #64	; 0x40
    d690:	433b      	orrs	r3, r7
    d692:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
    d696:	4601      	mov	r1, r0
    d698:	7703      	strb	r3, [r0, #28]
	llcp_lr_enqueue(conn, ctx);
    d69a:	4628      	mov	r0, r5
    d69c:	f000 ffa6 	bl	e5ec <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    d6a0:	2000      	movs	r0, #0
}
    d6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    d6a6:	200c      	movs	r0, #12
}
    d6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d6ac <ull_cp_terminate>:
{
    d6ac:	b538      	push	{r3, r4, r5, lr}
    d6ae:	4604      	mov	r4, r0
    d6b0:	460d      	mov	r5, r1
	llcp_lr_abort(conn);
    d6b2:	f001 f97f 	bl	e9b4 <llcp_lr_abort>
	ctx = llcp_create_local_procedure(PROC_TERMINATE);
    d6b6:	200a      	movs	r0, #10
    d6b8:	f7ff fe42 	bl	d340 <llcp_create_local_procedure>
	if (!ctx) {
    d6bc:	b130      	cbz	r0, d6cc <ull_cp_terminate+0x20>
    d6be:	4601      	mov	r1, r0
	ctx->data.term.error_code = error_code;
    d6c0:	7705      	strb	r5, [r0, #28]
	llcp_lr_enqueue(conn, ctx);
    d6c2:	4620      	mov	r0, r4
    d6c4:	f000 ff92 	bl	e5ec <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    d6c8:	2000      	movs	r0, #0
}
    d6ca:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    d6cc:	200c      	movs	r0, #12
}
    d6ce:	bd38      	pop	{r3, r4, r5, pc}

0000d6d0 <ull_cp_chan_map_update_pending>:
{
    d6d0:	b508      	push	{r3, lr}
	if (conn->lll.role == BT_HCI_ROLE_CENTRAL) {
    d6d2:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	db08      	blt.n	d6ec <ull_cp_chan_map_update_pending+0x1c>
		ctx = llcp_lr_peek(conn);
    d6da:	f000 ffbb 	bl	e654 <llcp_lr_peek>
	if (ctx && ctx->proc == PROC_CHAN_MAP_UPDATE) {
    d6de:	b120      	cbz	r0, d6ea <ull_cp_chan_map_update_pending+0x1a>
    d6e0:	7a03      	ldrb	r3, [r0, #8]
    d6e2:	2b0b      	cmp	r3, #11
		return ctx->data.chmu.chm;
    d6e4:	bf0c      	ite	eq
    d6e6:	301e      	addeq	r0, #30
	return NULL;
    d6e8:	2000      	movne	r0, #0
}
    d6ea:	bd08      	pop	{r3, pc}
		ctx = llcp_rr_peek(conn);
    d6ec:	f002 fc2e 	bl	ff4c <llcp_rr_peek>
    d6f0:	e7f5      	b.n	d6de <ull_cp_chan_map_update_pending+0xe>
    d6f2:	bf00      	nop

0000d6f4 <ull_cp_data_length_update>:
{
    d6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d6f6:	4605      	mov	r5, r0
	ctx = llcp_create_local_procedure(PROC_DATA_LENGTH_UPDATE);
    d6f8:	200c      	movs	r0, #12
{
    d6fa:	460e      	mov	r6, r1
    d6fc:	4617      	mov	r7, r2
	ctx = llcp_create_local_procedure(PROC_DATA_LENGTH_UPDATE);
    d6fe:	f7ff fe1f 	bl	d340 <llcp_create_local_procedure>
	if (!ctx) {
    d702:	b158      	cbz	r0, d71c <ull_cp_data_length_update+0x28>
    d704:	4604      	mov	r4, r0
	ull_dle_local_tx_update(conn, max_tx_octets, max_tx_time);
    d706:	463a      	mov	r2, r7
    d708:	4631      	mov	r1, r6
    d70a:	4628      	mov	r0, r5
    d70c:	f7fe fc58 	bl	bfc0 <ull_dle_local_tx_update>
	llcp_lr_enqueue(conn, ctx);
    d710:	4628      	mov	r0, r5
    d712:	4621      	mov	r1, r4
    d714:	f000 ff6a 	bl	e5ec <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    d718:	2000      	movs	r0, #0
}
    d71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    d71c:	200c      	movs	r0, #12
}
    d71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d720 <ull_cp_ltk_req_reply>:
{
    d720:	b570      	push	{r4, r5, r6, lr}
    d722:	4605      	mov	r5, r0
    d724:	460e      	mov	r6, r1
	ctx = llcp_rr_peek(conn);
    d726:	f002 fc11 	bl	ff4c <llcp_rr_peek>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
    d72a:	b120      	cbz	r0, d736 <ull_cp_ltk_req_reply+0x16>
    d72c:	7a03      	ldrb	r3, [r0, #8]
    d72e:	3b05      	subs	r3, #5
    d730:	2b01      	cmp	r3, #1
    d732:	4604      	mov	r4, r0
    d734:	d901      	bls.n	d73a <ull_cp_ltk_req_reply+0x1a>
	return BT_HCI_ERR_CMD_DISALLOWED;
    d736:	200c      	movs	r0, #12
}
    d738:	bd70      	pop	{r4, r5, r6, pc}
	    llcp_rp_enc_ltk_req_reply_allowed(conn, ctx)) {
    d73a:	4601      	mov	r1, r0
    d73c:	4628      	mov	r0, r5
    d73e:	f7fe ff87 	bl	c650 <llcp_rp_enc_ltk_req_reply_allowed>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
    d742:	2800      	cmp	r0, #0
    d744:	d0f7      	beq.n	d736 <ull_cp_ltk_req_reply+0x16>
		memcpy(ctx->data.enc.ltk, ltk, sizeof(ctx->data.enc.ltk));
    d746:	2210      	movs	r2, #16
    d748:	4631      	mov	r1, r6
    d74a:	f104 0027 	add.w	r0, r4, #39	; 0x27
    d74e:	f00a f955 	bl	179fc <memcpy>
		llcp_rp_enc_ltk_req_reply(conn, ctx);
    d752:	4628      	mov	r0, r5
    d754:	4621      	mov	r1, r4
    d756:	f7fe ff73 	bl	c640 <llcp_rp_enc_ltk_req_reply>
		return BT_HCI_ERR_SUCCESS;
    d75a:	2000      	movs	r0, #0
}
    d75c:	bd70      	pop	{r4, r5, r6, pc}
    d75e:	bf00      	nop

0000d760 <ull_cp_ltk_req_neq_reply>:
{
    d760:	b538      	push	{r3, r4, r5, lr}
    d762:	4605      	mov	r5, r0
	ctx = llcp_rr_peek(conn);
    d764:	f002 fbf2 	bl	ff4c <llcp_rr_peek>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
    d768:	b120      	cbz	r0, d774 <ull_cp_ltk_req_neq_reply+0x14>
    d76a:	7a03      	ldrb	r3, [r0, #8]
    d76c:	3b05      	subs	r3, #5
    d76e:	2b01      	cmp	r3, #1
    d770:	4604      	mov	r4, r0
    d772:	d901      	bls.n	d778 <ull_cp_ltk_req_neq_reply+0x18>
	return BT_HCI_ERR_CMD_DISALLOWED;
    d774:	200c      	movs	r0, #12
}
    d776:	bd38      	pop	{r3, r4, r5, pc}
	    llcp_rp_enc_ltk_req_reply_allowed(conn, ctx)) {
    d778:	4601      	mov	r1, r0
    d77a:	4628      	mov	r0, r5
    d77c:	f7fe ff68 	bl	c650 <llcp_rp_enc_ltk_req_reply_allowed>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
    d780:	2800      	cmp	r0, #0
    d782:	d0f7      	beq.n	d774 <ull_cp_ltk_req_neq_reply+0x14>
		llcp_rp_enc_ltk_req_neg_reply(conn, ctx);
    d784:	4628      	mov	r0, r5
    d786:	4621      	mov	r1, r4
    d788:	f7fe ff5e 	bl	c648 <llcp_rp_enc_ltk_req_neg_reply>
		return BT_HCI_ERR_SUCCESS;
    d78c:	2000      	movs	r0, #0
}
    d78e:	bd38      	pop	{r3, r4, r5, pc}

0000d790 <ull_cp_conn_update>:
{
    d790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d794:	4605      	mov	r5, r0
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_CONN_PARAM_REQ) != 0;
    d796:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d79a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    d79e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    d7a0:	469a      	mov	sl, r3
	if (feature_conn_param_req(conn)) {
    d7a2:	0783      	lsls	r3, r0, #30
{
    d7a4:	4688      	mov	r8, r1
    d7a6:	4617      	mov	r7, r2
	if (feature_conn_param_req(conn)) {
    d7a8:	d42f      	bmi.n	d80a <ull_cp_conn_update+0x7a>
	} else if (conn->lll.role == BT_HCI_ROLE_CENTRAL) {
    d7aa:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    d7ae:	2b00      	cmp	r3, #0
    d7b0:	db4a      	blt.n	d848 <ull_cp_conn_update+0xb8>
		ctx = llcp_create_local_procedure(PROC_CONN_UPDATE);
    d7b2:	2008      	movs	r0, #8
    d7b4:	f7ff fdc4 	bl	d340 <llcp_create_local_procedure>
    d7b8:	4604      	mov	r4, r0
	if (!ctx) {
    d7ba:	2c00      	cmp	r4, #0
    d7bc:	d052      	beq.n	d864 <ull_cp_conn_update+0xd4>
	if (ctx->proc == PROC_CONN_UPDATE) {
    d7be:	7a23      	ldrb	r3, [r4, #8]
    d7c0:	2b08      	cmp	r3, #8
    d7c2:	d027      	beq.n	d814 <ull_cp_conn_update+0x84>
	} else if (ctx->proc == PROC_CONN_PARAM_REQ) {
    d7c4:	2b09      	cmp	r3, #9
    d7c6:	d131      	bne.n	d82c <ull_cp_conn_update+0x9c>
		ctx->data.cu.interval_min = interval_min;
    d7c8:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
		ctx->data.cu.interval_max = interval_max;
    d7cc:	8527      	strh	r7, [r4, #40]	; 0x28
		ctx->data.cu.latency = latency;
    d7ce:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
		ctx->data.cu.timeout = timeout;
    d7d2:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
		ctx->data.cu.offsets[0] = offsets ? offsets[0] : 0x0000;
    d7d6:	2e00      	cmp	r6, #0
    d7d8:	d039      	beq.n	d84e <ull_cp_conn_update+0xbe>
    d7da:	8833      	ldrh	r3, [r6, #0]
    d7dc:	8663      	strh	r3, [r4, #50]	; 0x32
		ctx->data.cu.offsets[1] = offsets ? offsets[1] : 0xffff;
    d7de:	8873      	ldrh	r3, [r6, #2]
    d7e0:	86a3      	strh	r3, [r4, #52]	; 0x34
		ctx->data.cu.offsets[2] = offsets ? offsets[2] : 0xffff;
    d7e2:	88b3      	ldrh	r3, [r6, #4]
    d7e4:	86e3      	strh	r3, [r4, #54]	; 0x36
		ctx->data.cu.offsets[3] = offsets ? offsets[3] : 0xffff;
    d7e6:	88f3      	ldrh	r3, [r6, #6]
    d7e8:	8723      	strh	r3, [r4, #56]	; 0x38
		ctx->data.cu.offsets[4] = offsets ? offsets[4] : 0xffff;
    d7ea:	8933      	ldrh	r3, [r6, #8]
    d7ec:	8763      	strh	r3, [r4, #58]	; 0x3a
		ctx->data.cu.offsets[5] = offsets ? offsets[5] : 0xffff;
    d7ee:	8973      	ldrh	r3, [r6, #10]
    d7f0:	87a3      	strh	r3, [r4, #60]	; 0x3c
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    d7f2:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    d7f6:	2b00      	cmp	r3, #0
    d7f8:	da11      	bge.n	d81e <ull_cp_conn_update+0x8e>
			uint16_t handle = ll_conn_handle_get(conn);
    d7fa:	4628      	mov	r0, r5
    d7fc:	f7fd fd64 	bl	b2c8 <ll_conn_handle_get>
    d800:	4601      	mov	r1, r0
			ull_periph_latency_cancel(conn, handle);
    d802:	4628      	mov	r0, r5
    d804:	f002 fd52 	bl	102ac <ull_periph_latency_cancel>
    d808:	e009      	b.n	d81e <ull_cp_conn_update+0x8e>
		ctx = llcp_create_local_procedure(PROC_CONN_PARAM_REQ);
    d80a:	2009      	movs	r0, #9
    d80c:	f7ff fd98 	bl	d340 <llcp_create_local_procedure>
    d810:	4604      	mov	r4, r0
    d812:	e7d2      	b.n	d7ba <ull_cp_conn_update+0x2a>
		ctx->data.cu.interval_max = interval_max;
    d814:	8527      	strh	r7, [r4, #40]	; 0x28
		ctx->data.cu.latency = latency;
    d816:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
		ctx->data.cu.timeout = timeout;
    d81a:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
	llcp_lr_enqueue(conn, ctx);
    d81e:	4628      	mov	r0, r5
    d820:	4621      	mov	r1, r4
    d822:	f000 fee3 	bl	e5ec <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    d826:	2000      	movs	r0, #0
}
    d828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LL_ASSERT(0); /* Unknown procedure */
    d82c:	4a0e      	ldr	r2, [pc, #56]	; (d868 <ull_cp_conn_update+0xd8>)
    d82e:	490f      	ldr	r1, [pc, #60]	; (d86c <ull_cp_conn_update+0xdc>)
    d830:	480f      	ldr	r0, [pc, #60]	; (d870 <ull_cp_conn_update+0xe0>)
    d832:	f240 4337 	movw	r3, #1079	; 0x437
    d836:	f009 fe54 	bl	174e2 <assert_print>
    d83a:	4040      	eors	r0, r0
    d83c:	f380 8811 	msr	BASEPRI, r0
    d840:	f04f 0003 	mov.w	r0, #3
    d844:	df02      	svc	2
    d846:	e7ea      	b.n	d81e <ull_cp_conn_update+0x8e>
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    d848:	201a      	movs	r0, #26
}
    d84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ctx->data.cu.offsets[0] = offsets ? offsets[0] : 0x0000;
    d84e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d852:	4a08      	ldr	r2, [pc, #32]	; (d874 <ull_cp_conn_update+0xe4>)
    d854:	f8c4 3036 	str.w	r3, [r4, #54]	; 0x36
		ctx->data.cu.offsets[4] = offsets ? offsets[4] : 0xffff;
    d858:	8763      	strh	r3, [r4, #58]	; 0x3a
		ctx->data.cu.offsets[0] = offsets ? offsets[0] : 0x0000;
    d85a:	f8c4 2032 	str.w	r2, [r4, #50]	; 0x32
		ctx->data.cu.offsets[5] = offsets ? offsets[5] : 0xffff;
    d85e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d862:	e7c5      	b.n	d7f0 <ull_cp_conn_update+0x60>
		return BT_HCI_ERR_CMD_DISALLOWED;
    d864:	200c      	movs	r0, #12
    d866:	e7df      	b.n	d828 <ull_cp_conn_update+0x98>
    d868:	0001bfbc 	.word	0x0001bfbc
    d86c:	0001b908 	.word	0x0001b908
    d870:	0001b844 	.word	0x0001b844
    d874:	ffff0000 	.word	0xffff0000

0000d878 <ull_cp_remote_dle_pending>:
{
    d878:	b508      	push	{r3, lr}
	ctx = llcp_rr_peek(conn);
    d87a:	f002 fb67 	bl	ff4c <llcp_rr_peek>
	return (ctx && ctx->proc == PROC_DATA_LENGTH_UPDATE);
    d87e:	b128      	cbz	r0, d88c <ull_cp_remote_dle_pending+0x14>
    d880:	7a00      	ldrb	r0, [r0, #8]
    d882:	f1a0 000c 	sub.w	r0, r0, #12
    d886:	fab0 f080 	clz	r0, r0
    d88a:	0940      	lsrs	r0, r0, #5
}
    d88c:	bd08      	pop	{r3, pc}
    d88e:	bf00      	nop

0000d890 <ull_cp_conn_param_req_reply>:
{
    d890:	b510      	push	{r4, lr}
    d892:	4604      	mov	r4, r0
	ctx = llcp_rr_peek(conn);
    d894:	f002 fb5a 	bl	ff4c <llcp_rr_peek>
	if (ctx && ctx->proc == PROC_CONN_PARAM_REQ) {
    d898:	b110      	cbz	r0, d8a0 <ull_cp_conn_param_req_reply+0x10>
    d89a:	7a03      	ldrb	r3, [r0, #8]
    d89c:	2b09      	cmp	r3, #9
    d89e:	d000      	beq.n	d8a2 <ull_cp_conn_param_req_reply+0x12>
}
    d8a0:	bd10      	pop	{r4, pc}
		llcp_rp_conn_param_req_reply(conn, ctx);
    d8a2:	4601      	mov	r1, r0
    d8a4:	4620      	mov	r0, r4
}
    d8a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_rp_conn_param_req_reply(conn, ctx);
    d8aa:	f002 b88f 	b.w	f9cc <llcp_rp_conn_param_req_reply>
    d8ae:	bf00      	nop

0000d8b0 <ull_cp_conn_param_req_neg_reply>:
{
    d8b0:	b538      	push	{r3, r4, r5, lr}
    d8b2:	4604      	mov	r4, r0
    d8b4:	460d      	mov	r5, r1
	ctx = llcp_rr_peek(conn);
    d8b6:	f002 fb49 	bl	ff4c <llcp_rr_peek>
	if (ctx && ctx->proc == PROC_CONN_PARAM_REQ) {
    d8ba:	b110      	cbz	r0, d8c2 <ull_cp_conn_param_req_neg_reply+0x12>
    d8bc:	7a03      	ldrb	r3, [r0, #8]
    d8be:	2b09      	cmp	r3, #9
    d8c0:	d000      	beq.n	d8c4 <ull_cp_conn_param_req_neg_reply+0x14>
}
    d8c2:	bd38      	pop	{r3, r4, r5, pc}
		ctx->data.cu.error = error_code;
    d8c4:	7705      	strb	r5, [r0, #28]
		llcp_rp_conn_param_req_neg_reply(conn, ctx);
    d8c6:	4601      	mov	r1, r0
    d8c8:	4620      	mov	r0, r4
}
    d8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		llcp_rp_conn_param_req_neg_reply(conn, ctx);
    d8ce:	f002 b881 	b.w	f9d4 <llcp_rp_conn_param_req_neg_reply>
    d8d2:	bf00      	nop

0000d8d4 <ull_cp_remote_cpr_pending>:
{
    d8d4:	b508      	push	{r3, lr}
	ctx = llcp_rr_peek(conn);
    d8d6:	f002 fb39 	bl	ff4c <llcp_rr_peek>
	return (ctx && ctx->proc == PROC_CONN_PARAM_REQ);
    d8da:	b128      	cbz	r0, d8e8 <ull_cp_remote_cpr_pending+0x14>
    d8dc:	7a00      	ldrb	r0, [r0, #8]
    d8de:	f1a0 0009 	sub.w	r0, r0, #9
    d8e2:	fab0 f080 	clz	r0, r0
    d8e6:	0940      	lsrs	r0, r0, #5
}
    d8e8:	bd08      	pop	{r3, pc}
    d8ea:	bf00      	nop

0000d8ec <ull_cp_tx_ack>:
	/* consider unsupported and unknows PDUs as valid */
	return true;
}

void ull_cp_tx_ack(struct ll_conn *conn, struct node_tx *tx)
{
    d8ec:	b538      	push	{r3, r4, r5, lr}
    d8ee:	4605      	mov	r5, r0
    d8f0:	460c      	mov	r4, r1
	struct proc_ctx *ctx;

	ctx = llcp_lr_peek(conn);
    d8f2:	f000 feaf 	bl	e654 <llcp_lr_peek>
	if (ctx && ctx->tx_ack == tx) {
    d8f6:	b110      	cbz	r0, d8fe <ull_cp_tx_ack+0x12>
    d8f8:	6943      	ldr	r3, [r0, #20]
    d8fa:	42a3      	cmp	r3, r4
    d8fc:	d00e      	beq.n	d91c <ull_cp_tx_ack+0x30>
		/* TX ack re. local request */
		llcp_lr_tx_ack(conn, ctx, tx);
	}

	ctx = llcp_rr_peek(conn);
    d8fe:	4628      	mov	r0, r5
    d900:	f002 fb24 	bl	ff4c <llcp_rr_peek>
	if (ctx && ctx->tx_ack == tx) {
    d904:	b110      	cbz	r0, d90c <ull_cp_tx_ack+0x20>
    d906:	6943      	ldr	r3, [r0, #20]
    d908:	42a3      	cmp	r3, r4
    d90a:	d000      	beq.n	d90e <ull_cp_tx_ack+0x22>
		/* TX ack re. remote response */
		llcp_rr_tx_ack(conn, ctx, tx);
	}
}
    d90c:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rr_tx_ack(conn, ctx, tx);
    d90e:	4622      	mov	r2, r4
    d910:	4601      	mov	r1, r0
    d912:	4628      	mov	r0, r5
}
    d914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		llcp_rr_tx_ack(conn, ctx, tx);
    d918:	f002 bb6e 	b.w	fff8 <llcp_rr_tx_ack>
		llcp_lr_tx_ack(conn, ctx, tx);
    d91c:	4601      	mov	r1, r0
    d91e:	4622      	mov	r2, r4
    d920:	4628      	mov	r0, r5
    d922:	f000 ffbb 	bl	e89c <llcp_lr_tx_ack>
    d926:	e7ea      	b.n	d8fe <ull_cp_tx_ack+0x12>

0000d928 <ull_cp_tx_ntf>:

void ull_cp_tx_ntf(struct ll_conn *conn)
{
    d928:	b510      	push	{r4, lr}
    d92a:	4604      	mov	r4, r0
	struct proc_ctx *ctx;

	ctx = llcp_lr_peek(conn);
    d92c:	f000 fe92 	bl	e654 <llcp_lr_peek>
	if (ctx) {
    d930:	b118      	cbz	r0, d93a <ull_cp_tx_ntf+0x12>
    d932:	4601      	mov	r1, r0
		/* TX notifications towards Host */
		llcp_lr_tx_ntf(conn, ctx);
    d934:	4620      	mov	r0, r4
    d936:	f000 ffd1 	bl	e8dc <llcp_lr_tx_ntf>
	}

	ctx = llcp_rr_peek(conn);
    d93a:	4620      	mov	r0, r4
    d93c:	f002 fb06 	bl	ff4c <llcp_rr_peek>
	if (ctx) {
    d940:	4601      	mov	r1, r0
    d942:	b120      	cbz	r0, d94e <ull_cp_tx_ntf+0x26>
		/* TX notifications towards Host */
		llcp_rr_tx_ntf(conn, ctx);
    d944:	4620      	mov	r0, r4
	}
}
    d946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_rr_tx_ntf(conn, ctx);
    d94a:	f002 bb6b 	b.w	10024 <llcp_rr_tx_ntf>
}
    d94e:	bd10      	pop	{r4, pc}

0000d950 <ull_cp_rx>:

void ull_cp_rx(struct ll_conn *conn, struct node_rx_pdu *rx)
{
    d950:	b570      	push	{r4, r5, r6, lr}
	if (pdu->len < 1) {
    d952:	7f4b      	ldrb	r3, [r1, #29]
{
    d954:	460c      	mov	r4, r1
    d956:	4605      	mov	r5, r0
	if (pdu->len < 1) {
    d958:	2b00      	cmp	r3, #0
    d95a:	d03e      	beq.n	d9da <ull_cp_rx+0x8a>
	if (pdu->llctrl.opcode < ARRAY_SIZE(pdu_validate)) {
    d95c:	7fcb      	ldrb	r3, [r1, #31]
    d95e:	2b1e      	cmp	r3, #30
    d960:	d929      	bls.n	d9b6 <ull_cp_rx+0x66>
		/*  Process LL_TERMINATE_IND PDU's as new procedure */
		ctx_l = NULL;
		ctx_r = NULL;
	} else {
		/* Query local and remote activity */
		ctx_l = llcp_lr_peek(conn);
    d962:	4628      	mov	r0, r5
    d964:	f000 fe76 	bl	e654 <llcp_lr_peek>
    d968:	4606      	mov	r6, r0
		ctx_r = llcp_rr_peek(conn);
    d96a:	4628      	mov	r0, r5
    d96c:	f002 faee 	bl	ff4c <llcp_rr_peek>
    d970:	4601      	mov	r1, r0
	}

	if (ctx_l) {
    d972:	2e00      	cmp	r6, #0
    d974:	d05c      	beq.n	da30 <ull_cp_rx+0xe0>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    d976:	7af2      	ldrb	r2, [r6, #11]
    d978:	7fe3      	ldrb	r3, [r4, #31]
		/* Local active procedure */

		if (ctx_r) {
    d97a:	2800      	cmp	r0, #0
    d97c:	d046      	beq.n	da0c <ull_cp_rx+0xbc>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    d97e:	4293      	cmp	r3, r2
    d980:	7ac0      	ldrb	r0, [r0, #11]
    d982:	d06f      	beq.n	da64 <ull_cp_rx+0x114>
    d984:	7b32      	ldrb	r2, [r6, #12]
    d986:	2a00      	cmp	r2, #0
    d988:	d05a      	beq.n	da40 <ull_cp_rx+0xf0>
    d98a:	4298      	cmp	r0, r3
    d98c:	d077      	beq.n	da7e <ull_cp_rx+0x12e>
    d98e:	7b0a      	ldrb	r2, [r1, #12]
    d990:	2a00      	cmp	r2, #0
    d992:	d174      	bne.n	da7e <ull_cp_rx+0x12e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    d994:	2b07      	cmp	r3, #7
    d996:	f000 80a3 	beq.w	dae0 <ull_cp_rx+0x190>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
    d99a:	2b11      	cmp	r3, #17
    d99c:	d104      	bne.n	d9a8 <ull_cp_rx+0x58>
    d99e:	f894 2020 	ldrb.w	r2, [r4, #32]
    d9a2:	7b4b      	ldrb	r3, [r1, #13]
    d9a4:	429a      	cmp	r2, r3
    d9a6:	d06a      	beq.n	da7e <ull_cp_rx+0x12e>
				 * Expected local procedure PDU
				 * No remote active procedure
				 */

				/* Process PDU in local procedure */
				llcp_lr_rx(conn, ctx_l, rx);
    d9a8:	4622      	mov	r2, r4
    d9aa:	4631      	mov	r1, r6
    d9ac:	4628      	mov	r0, r5
		 */

		/* Process PDU as a new remote request */
		llcp_rr_new(conn, rx, pdu_valid);
	}
}
    d9ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				llcp_lr_rx(conn, ctx_l, rx);
    d9b2:	f000 bf3b 	b.w	e82c <llcp_lr_rx>
		cb = pdu_validate[pdu->llctrl.opcode].validate_cb;
    d9b6:	4a4e      	ldr	r2, [pc, #312]	; (daf0 <ull_cp_rx+0x1a0>)
    d9b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
		if (cb) {
    d9bc:	b122      	cbz	r2, d9c8 <ull_cp_rx+0x78>
			return cb(pdu);
    d9be:	f101 001c 	add.w	r0, r1, #28
    d9c2:	4790      	blx	r2
	if (!pdu_valid) {
    d9c4:	b158      	cbz	r0, d9de <ull_cp_rx+0x8e>
	return pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
    d9c6:	7fe3      	ldrb	r3, [r4, #31]
	} else if (pdu_is_terminate(pdu)) {
    d9c8:	2b02      	cmp	r3, #2
    d9ca:	d1ca      	bne.n	d962 <ull_cp_rx+0x12>
{
    d9cc:	2201      	movs	r2, #1
		llcp_rr_new(conn, rx, pdu_valid);
    d9ce:	4621      	mov	r1, r4
    d9d0:	4628      	mov	r0, r5
}
    d9d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_rr_new(conn, rx, pdu_valid);
    d9d6:	f002 bb4f 	b.w	10078 <llcp_rr_new>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    d9da:	23ff      	movs	r3, #255	; 0xff
    d9dc:	77cb      	strb	r3, [r1, #31]
		ctx = llcp_lr_peek(conn);
    d9de:	4628      	mov	r0, r5
    d9e0:	f000 fe38 	bl	e654 <llcp_lr_peek>
		if (ctx && pdu_is_expected(pdu, ctx)) {
    d9e4:	b128      	cbz	r0, d9f2 <ull_cp_rx+0xa2>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    d9e6:	7fe2      	ldrb	r2, [r4, #31]
    d9e8:	7ac3      	ldrb	r3, [r0, #11]
    d9ea:	429a      	cmp	r2, r3
    d9ec:	d00d      	beq.n	da0a <ull_cp_rx+0xba>
    d9ee:	7b03      	ldrb	r3, [r0, #12]
    d9f0:	b95b      	cbnz	r3, da0a <ull_cp_rx+0xba>
		ctx = llcp_rr_peek(conn);
    d9f2:	4628      	mov	r0, r5
    d9f4:	f002 faaa 	bl	ff4c <llcp_rr_peek>
		if (ctx && pdu_is_expected(pdu, ctx)) {
    d9f8:	2800      	cmp	r0, #0
    d9fa:	d05e      	beq.n	daba <ull_cp_rx+0x16a>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    d9fc:	7fe2      	ldrb	r2, [r4, #31]
    d9fe:	7ac3      	ldrb	r3, [r0, #11]
    da00:	429a      	cmp	r2, r3
    da02:	d002      	beq.n	da0a <ull_cp_rx+0xba>
    da04:	7b02      	ldrb	r2, [r0, #12]
    da06:	2a00      	cmp	r2, #0
    da08:	d0e1      	beq.n	d9ce <ull_cp_rx+0x7e>
}
    da0a:	bd70      	pop	{r4, r5, r6, pc}
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    da0c:	4293      	cmp	r3, r2
    da0e:	d0cb      	beq.n	d9a8 <ull_cp_rx+0x58>
    da10:	7b32      	ldrb	r2, [r6, #12]
    da12:	2a00      	cmp	r2, #0
    da14:	d1c8      	bne.n	d9a8 <ull_cp_rx+0x58>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    da16:	2b07      	cmp	r3, #7
    da18:	d05c      	beq.n	dad4 <ull_cp_rx+0x184>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
    da1a:	2b11      	cmp	r3, #17
    da1c:	d05a      	beq.n	dad4 <ull_cp_rx+0x184>
	return (pdu_is_reject_ext(pdu, ctx) || pdu_is_reject(pdu, ctx));
    da1e:	2b0d      	cmp	r3, #13
    da20:	d0c2      	beq.n	d9a8 <ull_cp_rx+0x58>
				llcp_rr_new(conn, rx, true);
    da22:	4621      	mov	r1, r4
    da24:	4628      	mov	r0, r5
    da26:	2201      	movs	r2, #1
}
    da28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				llcp_rr_new(conn, rx, true);
    da2c:	f002 bb24 	b.w	10078 <llcp_rr_new>
	} else if (ctx_r) {
    da30:	2800      	cmp	r0, #0
    da32:	d0cb      	beq.n	d9cc <ull_cp_rx+0x7c>
		llcp_rr_rx(conn, ctx_r, rx);
    da34:	4622      	mov	r2, r4
    da36:	4628      	mov	r0, r5
}
    da38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_rr_rx(conn, ctx_r, rx);
    da3c:	f002 ba9c 	b.w	ff78 <llcp_rr_rx>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    da40:	2b07      	cmp	r3, #7
    da42:	d03c      	beq.n	dabe <ull_cp_rx+0x16e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
    da44:	2b11      	cmp	r3, #17
    da46:	d028      	beq.n	da9a <ull_cp_rx+0x14a>
	return (pdu_is_reject_ext(pdu, ctx) || pdu_is_reject(pdu, ctx));
    da48:	f1b3 020d 	subs.w	r2, r3, #13
    da4c:	bf18      	it	ne
    da4e:	2201      	movne	r2, #1
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    da50:	4298      	cmp	r0, r3
    da52:	d02f      	beq.n	dab4 <ull_cp_rx+0x164>
    da54:	7b0b      	ldrb	r3, [r1, #12]
    da56:	bb6b      	cbnz	r3, dab4 <ull_cp_rx+0x164>
			if (unexpected_l && unexpected_r) {
    da58:	2a00      	cmp	r2, #0
    da5a:	d0a5      	beq.n	d9a8 <ull_cp_rx+0x58>
				conn->llcp_terminate.reason_final = BT_HCI_ERR_LOCALHOST_TERM_CONN;
    da5c:	2316      	movs	r3, #22
    da5e:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
}
    da62:	bd70      	pop	{r4, r5, r6, pc}
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    da64:	4298      	cmp	r0, r3
    da66:	d00a      	beq.n	da7e <ull_cp_rx+0x12e>
    da68:	7b0a      	ldrb	r2, [r1, #12]
    da6a:	b942      	cbnz	r2, da7e <ull_cp_rx+0x12e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    da6c:	2b07      	cmp	r3, #7
    da6e:	d037      	beq.n	dae0 <ull_cp_rx+0x190>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
    da70:	2b11      	cmp	r3, #17
    da72:	d199      	bne.n	d9a8 <ull_cp_rx+0x58>
    da74:	7b4a      	ldrb	r2, [r1, #13]
    da76:	f894 3020 	ldrb.w	r3, [r4, #32]
    da7a:	429a      	cmp	r2, r3
    da7c:	d194      	bne.n	d9a8 <ull_cp_rx+0x58>
				LL_ASSERT(0);
    da7e:	4a1d      	ldr	r2, [pc, #116]	; (daf4 <ull_cp_rx+0x1a4>)
    da80:	491d      	ldr	r1, [pc, #116]	; (daf8 <ull_cp_rx+0x1a8>)
    da82:	481e      	ldr	r0, [pc, #120]	; (dafc <ull_cp_rx+0x1ac>)
    da84:	f240 63f7 	movw	r3, #1783	; 0x6f7
    da88:	f009 fd2b 	bl	174e2 <assert_print>
    da8c:	4040      	eors	r0, r0
    da8e:	f380 8811 	msr	BASEPRI, r0
    da92:	f04f 0003 	mov.w	r0, #3
    da96:	df02      	svc	2
}
    da98:	bd70      	pop	{r4, r5, r6, pc}
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
    da9a:	7b72      	ldrb	r2, [r6, #13]
    da9c:	f894 3020 	ldrb.w	r3, [r4, #32]
    daa0:	1ad2      	subs	r2, r2, r3
    daa2:	bf18      	it	ne
    daa4:	2201      	movne	r2, #1
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    daa6:	2811      	cmp	r0, #17
    daa8:	d004      	beq.n	dab4 <ull_cp_rx+0x164>
    daaa:	7b08      	ldrb	r0, [r1, #12]
    daac:	b910      	cbnz	r0, dab4 <ull_cp_rx+0x164>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
    daae:	7b48      	ldrb	r0, [r1, #13]
    dab0:	4298      	cmp	r0, r3
    dab2:	d1d1      	bne.n	da58 <ull_cp_rx+0x108>
			if (unexpected_l && unexpected_r) {
    dab4:	2a00      	cmp	r2, #0
    dab6:	d1bd      	bne.n	da34 <ull_cp_rx+0xe4>
    dab8:	e7e1      	b.n	da7e <ull_cp_rx+0x12e>
    daba:	4602      	mov	r2, r0
    dabc:	e787      	b.n	d9ce <ull_cp_rx+0x7e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    dabe:	7b72      	ldrb	r2, [r6, #13]
    dac0:	f894 3020 	ldrb.w	r3, [r4, #32]
    dac4:	1ad2      	subs	r2, r2, r3
    dac6:	bf18      	it	ne
    dac8:	2201      	movne	r2, #1
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    daca:	2807      	cmp	r0, #7
    dacc:	d1ed      	bne.n	daaa <ull_cp_rx+0x15a>
			if (unexpected_l && unexpected_r) {
    dace:	2a00      	cmp	r2, #0
    dad0:	d1b0      	bne.n	da34 <ull_cp_rx+0xe4>
    dad2:	e7d4      	b.n	da7e <ull_cp_rx+0x12e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
    dad4:	7b72      	ldrb	r2, [r6, #13]
    dad6:	f894 3020 	ldrb.w	r3, [r4, #32]
    dada:	429a      	cmp	r2, r3
    dadc:	d1a1      	bne.n	da22 <ull_cp_rx+0xd2>
    dade:	e763      	b.n	d9a8 <ull_cp_rx+0x58>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    dae0:	7b4a      	ldrb	r2, [r1, #13]
    dae2:	f894 3020 	ldrb.w	r3, [r4, #32]
    dae6:	429a      	cmp	r2, r3
    dae8:	f47f af5e 	bne.w	d9a8 <ull_cp_rx+0x58>
    daec:	e7c7      	b.n	da7e <ull_cp_rx+0x12e>
    daee:	bf00      	nop
    daf0:	0001c00c 	.word	0x0001c00c
    daf4:	0001bfbc 	.word	0x0001bfbc
    daf8:	0001b908 	.word	0x0001b908
    dafc:	0001b844 	.word	0x0001b844

0000db00 <rp_comm_ntf>:
{
	llcp_ntf_encode_length_change(conn, pdu);
}

static void rp_comm_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
    db00:	b570      	push	{r4, r5, r6, lr}
    db02:	4605      	mov	r5, r0
    db04:	460e      	mov	r6, r1
	struct node_rx_pdu *ntf;
	struct pdu_data *pdu;

	ARG_UNUSED(pdu);
	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
    db06:	f7ff fbf5 	bl	d2f4 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
    db0a:	4604      	mov	r4, r0
    db0c:	b320      	cbz	r0, db58 <rp_comm_ntf+0x58>

	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
    db0e:	2303      	movs	r3, #3
    db10:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
    db12:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    db14:	80e3      	strh	r3, [r4, #6]
	pdu = (struct pdu_data *)ntf->pdu;
	switch (ctx->proc) {
    db16:	7a33      	ldrb	r3, [r6, #8]
    db18:	2b0c      	cmp	r3, #12
    db1a:	d012      	beq.n	db42 <rp_comm_ntf+0x42>
	case PROC_DATA_LENGTH_UPDATE:
		rp_comm_ntf_length_change(conn, ctx, pdu);
		break;
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
	default:
		LL_ASSERT(0);
    db1c:	4a15      	ldr	r2, [pc, #84]	; (db74 <rp_comm_ntf+0x74>)
    db1e:	4916      	ldr	r1, [pc, #88]	; (db78 <rp_comm_ntf+0x78>)
    db20:	4816      	ldr	r0, [pc, #88]	; (db7c <rp_comm_ntf+0x7c>)
    db22:	f240 4384 	movw	r3, #1156	; 0x484
    db26:	f009 fcdc 	bl	174e2 <assert_print>
    db2a:	4040      	eors	r0, r0
    db2c:	f380 8811 	msr	BASEPRI, r0
    db30:	f04f 0003 	mov.w	r0, #3
    db34:	df02      	svc	2
		break;
	}

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
    db36:	6820      	ldr	r0, [r4, #0]
    db38:	4621      	mov	r1, r4
}
    db3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
    db3e:	f7fa bddd 	b.w	86fc <ll_rx_put_sched>
	llcp_ntf_encode_length_change(conn, pdu);
    db42:	f104 011c 	add.w	r1, r4, #28
    db46:	4628      	mov	r0, r5
    db48:	f001 fa0a 	bl	ef60 <llcp_ntf_encode_length_change>
	ll_rx_put_sched(ntf->hdr.link, ntf);
    db4c:	6820      	ldr	r0, [r4, #0]
    db4e:	4621      	mov	r1, r4
}
    db50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
    db54:	f7fa bdd2 	b.w	86fc <ll_rx_put_sched>
	LL_ASSERT(ntf);
    db58:	4a06      	ldr	r2, [pc, #24]	; (db74 <rp_comm_ntf+0x74>)
    db5a:	4909      	ldr	r1, [pc, #36]	; (db80 <rp_comm_ntf+0x80>)
    db5c:	4807      	ldr	r0, [pc, #28]	; (db7c <rp_comm_ntf+0x7c>)
    db5e:	f240 4375 	movw	r3, #1141	; 0x475
    db62:	f009 fcbe 	bl	174e2 <assert_print>
    db66:	4040      	eors	r0, r0
    db68:	f380 8811 	msr	BASEPRI, r0
    db6c:	f04f 0003 	mov.w	r0, #3
    db70:	df02      	svc	2
    db72:	e7cc      	b.n	db0e <rp_comm_ntf+0xe>
    db74:	0001c088 	.word	0x0001c088
    db78:	0001b908 	.word	0x0001b908
    db7c:	0001b844 	.word	0x0001b844
    db80:	0001bf5c 	.word	0x0001bf5c

0000db84 <lp_comm_tx>:
{
    db84:	b570      	push	{r4, r5, r6, lr}
    db86:	4606      	mov	r6, r0
    db88:	460c      	mov	r4, r1
	tx = llcp_tx_alloc(conn, ctx);
    db8a:	f7ff fb97 	bl	d2bc <llcp_tx_alloc>
	LL_ASSERT(tx);
    db8e:	4605      	mov	r5, r0
    db90:	2800      	cmp	r0, #0
    db92:	d060      	beq.n	dc56 <lp_comm_tx+0xd2>
	switch (ctx->proc) {
    db94:	7a23      	ldrb	r3, [r4, #8]
    db96:	3b01      	subs	r3, #1
	pdu = (struct pdu_data *)tx->pdu;
    db98:	1d29      	adds	r1, r5, #4
	switch (ctx->proc) {
    db9a:	2b0b      	cmp	r3, #11
    db9c:	d807      	bhi.n	dbae <lp_comm_tx+0x2a>
    db9e:	e8df f003 	tbb	[pc, r3]
    dba2:	2620      	.short	0x2620
    dba4:	0606332c 	.word	0x0606332c
    dba8:	39060606 	.word	0x39060606
    dbac:	4006      	.short	0x4006
		LL_ASSERT(0);
    dbae:	4a30      	ldr	r2, [pc, #192]	; (dc70 <lp_comm_tx+0xec>)
    dbb0:	4930      	ldr	r1, [pc, #192]	; (dc74 <lp_comm_tx+0xf0>)
    dbb2:	4831      	ldr	r0, [pc, #196]	; (dc78 <lp_comm_tx+0xf4>)
    dbb4:	23d1      	movs	r3, #209	; 0xd1
    dbb6:	f009 fc94 	bl	174e2 <assert_print>
    dbba:	4040      	eors	r0, r0
    dbbc:	f380 8811 	msr	BASEPRI, r0
    dbc0:	f04f 0003 	mov.w	r0, #3
    dbc4:	df02      	svc	2
	ctx->tx_opcode = pdu->llctrl.opcode;
    dbc6:	79eb      	ldrb	r3, [r5, #7]
    dbc8:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
    dbca:	4629      	mov	r1, r5
    dbcc:	4630      	mov	r0, r6
    dbce:	f7ff fb93 	bl	d2f8 <llcp_tx_enqueue>
	if (ctx->proc != PROC_TERMINATE) {
    dbd2:	7a23      	ldrb	r3, [r4, #8]
    dbd4:	2b0a      	cmp	r3, #10
    dbd6:	d02a      	beq.n	dc2e <lp_comm_tx+0xaa>
		llcp_lr_prt_restart(conn);
    dbd8:	4630      	mov	r0, r6
}
    dbda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_lr_prt_restart(conn);
    dbde:	f000 be17 	b.w	e810 <llcp_lr_prt_restart>
		llcp_pdu_encode_ping_req(pdu);
    dbe2:	4608      	mov	r0, r1
    dbe4:	f000 fefc 	bl	e9e0 <llcp_pdu_encode_ping_req>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    dbe8:	2313      	movs	r3, #19
    dbea:	72e3      	strb	r3, [r4, #11]
		break;
    dbec:	e7eb      	b.n	dbc6 <lp_comm_tx+0x42>
		llcp_pdu_encode_feature_req(conn, pdu);
    dbee:	4630      	mov	r0, r6
    dbf0:	f000 ff2a 	bl	ea48 <llcp_pdu_encode_feature_req>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    dbf4:	2309      	movs	r3, #9
    dbf6:	72e3      	strb	r3, [r4, #11]
		break;
    dbf8:	e7e5      	b.n	dbc6 <lp_comm_tx+0x42>
		llcp_pdu_encode_min_used_chans_ind(ctx, pdu);
    dbfa:	4620      	mov	r0, r4
    dbfc:	f000 ffbc 	bl	eb78 <llcp_pdu_encode_min_used_chans_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    dc00:	23ff      	movs	r3, #255	; 0xff
		ctx->tx_ack = tx;
    dc02:	6165      	str	r5, [r4, #20]
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    dc04:	72e3      	strb	r3, [r4, #11]
		break;
    dc06:	e7de      	b.n	dbc6 <lp_comm_tx+0x42>
		llcp_pdu_encode_version_ind(pdu);
    dc08:	4608      	mov	r0, r1
    dc0a:	f000 ffd3 	bl	ebb4 <llcp_pdu_encode_version_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    dc0e:	230c      	movs	r3, #12
    dc10:	72e3      	strb	r3, [r4, #11]
		break;
    dc12:	e7d8      	b.n	dbc6 <lp_comm_tx+0x42>
		llcp_pdu_encode_terminate_ind(ctx, pdu);
    dc14:	4620      	mov	r0, r4
    dc16:	f000 ffbf 	bl	eb98 <llcp_pdu_encode_terminate_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    dc1a:	23ff      	movs	r3, #255	; 0xff
		ctx->tx_ack = tx;
    dc1c:	6165      	str	r5, [r4, #20]
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    dc1e:	72e3      	strb	r3, [r4, #11]
		break;
    dc20:	e7d1      	b.n	dbc6 <lp_comm_tx+0x42>
		llcp_pdu_encode_length_req(conn, pdu);
    dc22:	4630      	mov	r0, r6
    dc24:	f001 f96c 	bl	ef00 <llcp_pdu_encode_length_req>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    dc28:	2315      	movs	r3, #21
    dc2a:	72e3      	strb	r3, [r4, #11]
		break;
    dc2c:	e7cb      	b.n	dbc6 <lp_comm_tx+0x42>
		const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
    dc2e:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
		const uint16_t sto_reload = RADIO_CONN_EVENTS(
    dc30:	f8b6 1184 	ldrh.w	r1, [r6, #388]	; 0x184
		const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
    dc34:	f240 42e2 	movw	r2, #1250	; 0x4e2
    dc38:	fb02 f303 	mul.w	r3, r2, r3
		const uint16_t sto_reload = RADIO_CONN_EVENTS(
    dc3c:	f242 7210 	movw	r2, #10000	; 0x2710
    dc40:	fb02 3101 	mla	r1, r2, r1, r3
    dc44:	3901      	subs	r1, #1
		llcp_lr_prt_restart_with_value(conn, sto_reload);
    dc46:	4630      	mov	r0, r6
		const uint16_t sto_reload = RADIO_CONN_EVENTS(
    dc48:	fbb1 f1f3 	udiv	r1, r1, r3
}
    dc4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_lr_prt_restart_with_value(conn, sto_reload);
    dc50:	b289      	uxth	r1, r1
    dc52:	f000 bde3 	b.w	e81c <llcp_lr_prt_restart_with_value>
	LL_ASSERT(tx);
    dc56:	4a06      	ldr	r2, [pc, #24]	; (dc70 <lp_comm_tx+0xec>)
    dc58:	4908      	ldr	r1, [pc, #32]	; (dc7c <lp_comm_tx+0xf8>)
    dc5a:	4807      	ldr	r0, [pc, #28]	; (dc78 <lp_comm_tx+0xf4>)
    dc5c:	2396      	movs	r3, #150	; 0x96
    dc5e:	f009 fc40 	bl	174e2 <assert_print>
    dc62:	4040      	eors	r0, r0
    dc64:	f380 8811 	msr	BASEPRI, r0
    dc68:	f04f 0003 	mov.w	r0, #3
    dc6c:	df02      	svc	2
    dc6e:	e791      	b.n	db94 <lp_comm_tx+0x10>
    dc70:	0001c088 	.word	0x0001c088
    dc74:	0001b908 	.word	0x0001b908
    dc78:	0001b844 	.word	0x0001b844
    dc7c:	0001bee8 	.word	0x0001bee8

0000dc80 <rp_comm_tx_proxy>:
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static bool rp_comm_tx_proxy(struct ll_conn *conn, struct proc_ctx *ctx, const bool complete)
{
    dc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc84:	4607      	mov	r7, r0
    dc86:	460c      	mov	r4, r1
    dc88:	4616      	mov	r6, r2
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    dc8a:	f002 f963 	bl	ff54 <llcp_rr_ispaused>
    dc8e:	b128      	cbz	r0, dc9c <rp_comm_tx_proxy+0x1c>
		ctx->state = RP_COMMON_STATE_WAIT_TX;
    dc90:	2303      	movs	r3, #3
    dc92:	72a3      	strb	r3, [r4, #10]
		return false;
    dc94:	2500      	movs	r5, #0
		llcp_rr_complete(conn);
		ctx->state = RP_COMMON_STATE_IDLE;
	}

	return true;
}
    dc96:	4628      	mov	r0, r5
    dc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    dc9c:	4621      	mov	r1, r4
    dc9e:	4638      	mov	r0, r7
    dca0:	f7ff fb04 	bl	d2ac <llcp_tx_alloc_peek>
    dca4:	4605      	mov	r5, r0
    dca6:	2800      	cmp	r0, #0
    dca8:	d0f2      	beq.n	dc90 <rp_comm_tx_proxy+0x10>
	tx = llcp_tx_alloc(conn, ctx);
    dcaa:	4621      	mov	r1, r4
    dcac:	4638      	mov	r0, r7
    dcae:	f7ff fb05 	bl	d2bc <llcp_tx_alloc>
	LL_ASSERT(tx);
    dcb2:	4680      	mov	r8, r0
    dcb4:	b370      	cbz	r0, dd14 <rp_comm_tx_proxy+0x94>
	switch (ctx->proc) {
    dcb6:	7a23      	ldrb	r3, [r4, #8]
    dcb8:	3b01      	subs	r3, #1
	pdu = (struct pdu_data *)tx->pdu;
    dcba:	f108 0104 	add.w	r1, r8, #4
	switch (ctx->proc) {
    dcbe:	2b0b      	cmp	r3, #11
    dcc0:	d807      	bhi.n	dcd2 <rp_comm_tx_proxy+0x52>
    dcc2:	e8df f003 	tbb	[pc, r3]
    dcc6:	4335      	.short	0x4335
    dcc8:	06064906 	.word	0x06064906
    dccc:	06060606 	.word	0x06060606
    dcd0:	3b06      	.short	0x3b06
		LL_ASSERT(0);
    dcd2:	4a24      	ldr	r2, [pc, #144]	; (dd64 <rp_comm_tx_proxy+0xe4>)
    dcd4:	4924      	ldr	r1, [pc, #144]	; (dd68 <rp_comm_tx_proxy+0xe8>)
    dcd6:	4825      	ldr	r0, [pc, #148]	; (dd6c <rp_comm_tx_proxy+0xec>)
    dcd8:	f240 434f 	movw	r3, #1103	; 0x44f
    dcdc:	f009 fc01 	bl	174e2 <assert_print>
    dce0:	4040      	eors	r0, r0
    dce2:	f380 8811 	msr	BASEPRI, r0
    dce6:	f04f 0003 	mov.w	r0, #3
    dcea:	df02      	svc	2
	ctx->tx_opcode = pdu->llctrl.opcode;
    dcec:	f898 3007 	ldrb.w	r3, [r8, #7]
    dcf0:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
    dcf2:	4641      	mov	r1, r8
    dcf4:	4638      	mov	r0, r7
    dcf6:	f7ff faff 	bl	d2f8 <llcp_tx_enqueue>
	llcp_rr_prt_restart(conn);
    dcfa:	4638      	mov	r0, r7
    dcfc:	f002 f932 	bl	ff64 <llcp_rr_prt_restart>
	ctx->state = RP_COMMON_STATE_WAIT_TX_ACK;
    dd00:	2304      	movs	r3, #4
    dd02:	72a3      	strb	r3, [r4, #10]
	if (complete) {
    dd04:	2e00      	cmp	r6, #0
    dd06:	d0c6      	beq.n	dc96 <rp_comm_tx_proxy+0x16>
		llcp_rr_complete(conn);
    dd08:	4638      	mov	r0, r7
    dd0a:	f002 f9a9 	bl	10060 <llcp_rr_complete>
		ctx->state = RP_COMMON_STATE_IDLE;
    dd0e:	2300      	movs	r3, #0
    dd10:	72a3      	strb	r3, [r4, #10]
    dd12:	e7c0      	b.n	dc96 <rp_comm_tx_proxy+0x16>
	LL_ASSERT(tx);
    dd14:	4a13      	ldr	r2, [pc, #76]	; (dd64 <rp_comm_tx_proxy+0xe4>)
    dd16:	4916      	ldr	r1, [pc, #88]	; (dd70 <rp_comm_tx_proxy+0xf0>)
    dd18:	4814      	ldr	r0, [pc, #80]	; (dd6c <rp_comm_tx_proxy+0xec>)
    dd1a:	f240 4309 	movw	r3, #1033	; 0x409
    dd1e:	f009 fbe0 	bl	174e2 <assert_print>
    dd22:	4040      	eors	r0, r0
    dd24:	f380 8811 	msr	BASEPRI, r0
    dd28:	f04f 0003 	mov.w	r0, #3
    dd2c:	df02      	svc	2
    dd2e:	e7c2      	b.n	dcb6 <rp_comm_tx_proxy+0x36>
		llcp_pdu_encode_ping_rsp(pdu);
    dd30:	4608      	mov	r0, r1
    dd32:	f000 fe5f 	bl	e9f4 <llcp_pdu_encode_ping_rsp>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    dd36:	23ff      	movs	r3, #255	; 0xff
    dd38:	72e3      	strb	r3, [r4, #11]
		break;
    dd3a:	e7d7      	b.n	dcec <rp_comm_tx_proxy+0x6c>
		llcp_pdu_encode_length_rsp(conn, pdu);
    dd3c:	4638      	mov	r0, r7
    dd3e:	f001 f8f7 	bl	ef30 <llcp_pdu_encode_length_rsp>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    dd42:	23ff      	movs	r3, #255	; 0xff
		ctx->tx_ack = tx;
    dd44:	f8c4 8014 	str.w	r8, [r4, #20]
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    dd48:	72e3      	strb	r3, [r4, #11]
		break;
    dd4a:	e7cf      	b.n	dcec <rp_comm_tx_proxy+0x6c>
		llcp_pdu_encode_feature_rsp(conn, pdu);
    dd4c:	4638      	mov	r0, r7
    dd4e:	f000 fe9f 	bl	ea90 <llcp_pdu_encode_feature_rsp>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    dd52:	23ff      	movs	r3, #255	; 0xff
    dd54:	72e3      	strb	r3, [r4, #11]
		break;
    dd56:	e7c9      	b.n	dcec <rp_comm_tx_proxy+0x6c>
		llcp_pdu_encode_version_ind(pdu);
    dd58:	4608      	mov	r0, r1
    dd5a:	f000 ff2b 	bl	ebb4 <llcp_pdu_encode_version_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    dd5e:	23ff      	movs	r3, #255	; 0xff
    dd60:	72e3      	strb	r3, [r4, #11]
		break;
    dd62:	e7c3      	b.n	dcec <rp_comm_tx_proxy+0x6c>
    dd64:	0001c088 	.word	0x0001c088
    dd68:	0001b908 	.word	0x0001b908
    dd6c:	0001b844 	.word	0x0001b844
    dd70:	0001bee8 	.word	0x0001bee8

0000dd74 <rp_comm_send_rsp.constprop.0>:

static void rp_comm_send_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    dd74:	b538      	push	{r3, r4, r5, lr}
{
	switch (ctx->proc) {
    dd76:	7a0b      	ldrb	r3, [r1, #8]
    dd78:	3b01      	subs	r3, #1
static void rp_comm_send_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    dd7a:	460c      	mov	r4, r1
    dd7c:	4605      	mov	r5, r0
	switch (ctx->proc) {
    dd7e:	2b0b      	cmp	r3, #11
    dd80:	d80c      	bhi.n	dd9c <rp_comm_send_rsp.constprop.0+0x28>
    dd82:	e8df f003 	tbb	[pc, r3]
    dd86:	0606      	.short	0x0606
    dd88:	0b0b260b 	.word	0x0b0b260b
    dd8c:	190b0b0b 	.word	0x190b0b0b
    dd90:	210b      	.short	0x210b
#endif /* CONFIG_BT_CTLR_SCA_UPDATE */
	default:
		/* Unknown procedure */
		LL_ASSERT(0);
	}
}
    dd92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		rp_comm_tx_proxy(conn, ctx, true);
    dd96:	2201      	movs	r2, #1
    dd98:	f7ff bf72 	b.w	dc80 <rp_comm_tx_proxy>
		LL_ASSERT(0);
    dd9c:	4a15      	ldr	r2, [pc, #84]	; (ddf4 <rp_comm_send_rsp.constprop.0+0x80>)
    dd9e:	4916      	ldr	r1, [pc, #88]	; (ddf8 <rp_comm_send_rsp.constprop.0+0x84>)
    dda0:	4816      	ldr	r0, [pc, #88]	; (ddfc <rp_comm_send_rsp.constprop.0+0x88>)
    dda2:	f240 5307 	movw	r3, #1287	; 0x507
    dda6:	f009 fb9c 	bl	174e2 <assert_print>
    ddaa:	4040      	eors	r0, r0
    ddac:	f380 8811 	msr	BASEPRI, r0
    ddb0:	f04f 0003 	mov.w	r0, #3
    ddb4:	df02      	svc	2
}
    ddb6:	bd38      	pop	{r3, r4, r5, pc}
	llcp_rr_complete(conn);
    ddb8:	f002 f952 	bl	10060 <llcp_rr_complete>
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
    ddbc:	7f23      	ldrb	r3, [r4, #28]
	ctx->state = RP_COMMON_STATE_IDLE;
    ddbe:	2200      	movs	r2, #0
    ddc0:	72a2      	strb	r2, [r4, #10]
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
    ddc2:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
}
    ddc6:	bd38      	pop	{r3, r4, r5, pc}
    ddc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		rp_comm_tx_proxy(conn, ctx, false);
    ddcc:	2200      	movs	r2, #0
    ddce:	f7ff bf57 	b.w	dc80 <rp_comm_tx_proxy>
		if (!conn->llcp.vex.sent) {
    ddd2:	f890 3114 	ldrb.w	r3, [r0, #276]	; 0x114
    ddd6:	b943      	cbnz	r3, ddea <rp_comm_send_rsp.constprop.0+0x76>
			if (rp_comm_tx_proxy(conn, ctx, true)) {
    ddd8:	2201      	movs	r2, #1
    ddda:	f7ff ff51 	bl	dc80 <rp_comm_tx_proxy>
    ddde:	2800      	cmp	r0, #0
    dde0:	d0e9      	beq.n	ddb6 <rp_comm_send_rsp.constprop.0+0x42>
				conn->llcp.vex.sent = 1;
    dde2:	2301      	movs	r3, #1
    dde4:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
}
    dde8:	bd38      	pop	{r3, r4, r5, pc}
			llcp_rr_complete(conn);
    ddea:	f002 f939 	bl	10060 <llcp_rr_complete>
			ctx->state = RP_COMMON_STATE_IDLE;
    ddee:	2300      	movs	r3, #0
    ddf0:	72a3      	strb	r3, [r4, #10]
}
    ddf2:	bd38      	pop	{r3, r4, r5, pc}
    ddf4:	0001c088 	.word	0x0001c088
    ddf8:	0001b908 	.word	0x0001b908
    ddfc:	0001b844 	.word	0x0001b844

0000de00 <rp_comm_execute_fsm>:
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static void rp_comm_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
				void *param)
{
    de00:	b570      	push	{r4, r5, r6, lr}
    de02:	460c      	mov	r4, r1
	switch (ctx->state) {
    de04:	7a89      	ldrb	r1, [r1, #10]
{
    de06:	4605      	mov	r5, r0
	switch (ctx->state) {
    de08:	2905      	cmp	r1, #5
    de0a:	f200 8095 	bhi.w	df38 <rp_comm_execute_fsm+0x138>
    de0e:	e8df f001 	tbb	[pc, r1]
    de12:	0d08      	.short	0x0d08
    de14:	03362e20 	.word	0x03362e20
	if (llcp_ntf_alloc_is_available()) {
    de18:	f7ff fa5c 	bl	d2d4 <llcp_ntf_alloc_is_available>
    de1c:	2800      	cmp	r0, #0
    de1e:	d145      	bne.n	deac <rp_comm_execute_fsm+0xac>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
    de20:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    de22:	2a00      	cmp	r2, #0
    de24:	d1fc      	bne.n	de20 <rp_comm_execute_fsm+0x20>
		ctx->state = RP_COMMON_STATE_WAIT_RX;
    de26:	2301      	movs	r3, #1
    de28:	72a3      	strb	r3, [r4, #10]
}
    de2a:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    de2c:	2a02      	cmp	r2, #2
    de2e:	d1f7      	bne.n	de20 <rp_comm_execute_fsm+0x20>
	ctx->response_opcode = pdu->llctrl.opcode;
    de30:	78da      	ldrb	r2, [r3, #3]
    de32:	7262      	strb	r2, [r4, #9]
	switch (pdu->llctrl.opcode) {
    de34:	3a02      	subs	r2, #2
    de36:	2a12      	cmp	r2, #18
    de38:	d850      	bhi.n	dedc <rp_comm_execute_fsm+0xdc>
    de3a:	e8df f002 	tbb	[pc, r2]
    de3e:	4f74      	.short	0x4f74
    de40:	4f4f4f4f 	.word	0x4f4f4f4f
    de44:	4f4f4f6f 	.word	0x4f4f4f6f
    de48:	4f4f4f6a 	.word	0x4f4f4f6a
    de4c:	4f1a4f4f 	.word	0x4f1a4f4f
    de50:	5d          	.byte	0x5d
    de51:	00          	.byte	0x00
	switch (evt) {
    de52:	2a00      	cmp	r2, #0
    de54:	d1e4      	bne.n	de20 <rp_comm_execute_fsm+0x20>
		LL_ASSERT(ctx->proc == PROC_TERMINATE);
    de56:	7a23      	ldrb	r3, [r4, #8]
    de58:	2b0a      	cmp	r3, #10
    de5a:	d131      	bne.n	dec0 <rp_comm_execute_fsm+0xc0>
	llcp_rr_complete(conn);
    de5c:	4628      	mov	r0, r5
    de5e:	f002 f8ff 	bl	10060 <llcp_rr_complete>
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
    de62:	7f23      	ldrb	r3, [r4, #28]
	ctx->state = RP_COMMON_STATE_IDLE;
    de64:	2200      	movs	r2, #0
    de66:	72a2      	strb	r2, [r4, #10]
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
    de68:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
}
    de6c:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    de6e:	2a00      	cmp	r2, #0
    de70:	d1d6      	bne.n	de20 <rp_comm_execute_fsm+0x20>
		rp_comm_send_rsp(conn, ctx, evt, param);
    de72:	4621      	mov	r1, r4
    de74:	4628      	mov	r0, r5
}
    de76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_comm_send_rsp(conn, ctx, evt, param);
    de7a:	f7ff bf7b 	b.w	dd74 <rp_comm_send_rsp.constprop.0>
	switch (evt) {
    de7e:	2a01      	cmp	r2, #1
    de80:	d1ce      	bne.n	de20 <rp_comm_execute_fsm+0x20>
		switch (ctx->proc) {
    de82:	7a23      	ldrb	r3, [r4, #8]
    de84:	2b0c      	cmp	r3, #12
    de86:	d1cb      	bne.n	de20 <rp_comm_execute_fsm+0x20>
			uint8_t dle_changed = ull_dle_update_eff_tx(conn);
    de88:	4628      	mov	r0, r5
    de8a:	f7fe f857 	bl	bf3c <ull_dle_update_eff_tx>
			dle_changed |= ctx->data.dle.ntf_dle;
    de8e:	7f23      	ldrb	r3, [r4, #28]
    de90:	ea40 0603 	orr.w	r6, r0, r3
    de94:	b2f6      	uxtb	r6, r6
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
    de96:	2104      	movs	r1, #4
    de98:	4628      	mov	r0, r5
    de9a:	f7ff fa45 	bl	d328 <llcp_tx_resume_data>
			if (dle_changed && !llcp_ntf_alloc_is_available()) {
    de9e:	b14e      	cbz	r6, deb4 <rp_comm_execute_fsm+0xb4>
    dea0:	f7ff fa18 	bl	d2d4 <llcp_ntf_alloc_is_available>
    dea4:	b910      	cbnz	r0, deac <rp_comm_execute_fsm+0xac>
				ctx->state = RP_COMMON_STATE_WAIT_NTF;
    dea6:	2305      	movs	r3, #5
    dea8:	72a3      	strb	r3, [r4, #10]
}
    deaa:	bd70      	pop	{r4, r5, r6, pc}
					rp_comm_ntf(conn, ctx);
    deac:	4621      	mov	r1, r4
    deae:	4628      	mov	r0, r5
    deb0:	f7ff fe26 	bl	db00 <rp_comm_ntf>
				llcp_rr_complete(conn);
    deb4:	4628      	mov	r0, r5
    deb6:	f002 f8d3 	bl	10060 <llcp_rr_complete>
				ctx->state = RP_COMMON_STATE_IDLE;
    deba:	2300      	movs	r3, #0
    debc:	72a3      	strb	r3, [r4, #10]
}
    debe:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(ctx->proc == PROC_TERMINATE);
    dec0:	4a24      	ldr	r2, [pc, #144]	; (df54 <rp_comm_execute_fsm+0x154>)
    dec2:	4925      	ldr	r1, [pc, #148]	; (df58 <rp_comm_execute_fsm+0x158>)
    dec4:	4825      	ldr	r0, [pc, #148]	; (df5c <rp_comm_execute_fsm+0x15c>)
    dec6:	f240 531d 	movw	r3, #1309	; 0x51d
    deca:	f009 fb0a 	bl	174e2 <assert_print>
    dece:	4040      	eors	r0, r0
    ded0:	f380 8811 	msr	BASEPRI, r0
    ded4:	f04f 0003 	mov.w	r0, #3
    ded8:	df02      	svc	2
    deda:	e7bf      	b.n	de5c <rp_comm_execute_fsm+0x5c>
		LL_ASSERT(0);
    dedc:	4a1d      	ldr	r2, [pc, #116]	; (df54 <rp_comm_execute_fsm+0x154>)
    dede:	4920      	ldr	r1, [pc, #128]	; (df60 <rp_comm_execute_fsm+0x160>)
    dee0:	481e      	ldr	r0, [pc, #120]	; (df5c <rp_comm_execute_fsm+0x15c>)
    dee2:	f240 33fe 	movw	r3, #1022	; 0x3fe
    dee6:	f009 fafc 	bl	174e2 <assert_print>
    deea:	4040      	eors	r0, r0
    deec:	f380 8811 	msr	BASEPRI, r0
    def0:	f04f 0003 	mov.w	r0, #3
    def4:	df02      	svc	2
    def6:	e7bc      	b.n	de72 <rp_comm_execute_fsm+0x72>
		llcp_pdu_decode_length_req(conn, pdu);
    def8:	4619      	mov	r1, r3
    defa:	4628      	mov	r0, r5
    defc:	f001 f848 	bl	ef90 <llcp_pdu_decode_length_req>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
    df00:	2104      	movs	r1, #4
    df02:	4628      	mov	r0, r5
    df04:	f7ff f9fc 	bl	d300 <llcp_tx_pause_data>
		ctx->data.dle.ntf_dle = ull_dle_update_eff_rx(conn);
    df08:	4628      	mov	r0, r5
    df0a:	f7fd ffdf 	bl	becc <ull_dle_update_eff_rx>
    df0e:	7720      	strb	r0, [r4, #28]
		break;
    df10:	e7af      	b.n	de72 <rp_comm_execute_fsm+0x72>
		llcp_pdu_decode_version_ind(conn, pdu);
    df12:	4619      	mov	r1, r3
    df14:	4628      	mov	r0, r5
    df16:	f000 fe75 	bl	ec04 <llcp_pdu_decode_version_ind>
		break;
    df1a:	e7aa      	b.n	de72 <rp_comm_execute_fsm+0x72>
		llcp_pdu_decode_feature_req(conn, pdu);
    df1c:	4619      	mov	r1, r3
    df1e:	4628      	mov	r0, r5
    df20:	f000 fdf6 	bl	eb10 <llcp_pdu_decode_feature_req>
		if (feature_phy_coded(conn)) {
    df24:	e7a5      	b.n	de72 <rp_comm_execute_fsm+0x72>
		llcp_pdu_decode_terminate_ind(ctx, pdu);
    df26:	4619      	mov	r1, r3
    df28:	4620      	mov	r0, r4
    df2a:	f000 fe3f 	bl	ebac <llcp_pdu_decode_terminate_ind>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_TERMINATE);
    df2e:	2108      	movs	r1, #8
    df30:	4628      	mov	r0, r5
    df32:	f7ff f9e5 	bl	d300 <llcp_tx_pause_data>
		break;
    df36:	e79c      	b.n	de72 <rp_comm_execute_fsm+0x72>
		LL_ASSERT(0);
    df38:	4a06      	ldr	r2, [pc, #24]	; (df54 <rp_comm_execute_fsm+0x154>)
    df3a:	4909      	ldr	r1, [pc, #36]	; (df60 <rp_comm_execute_fsm+0x160>)
    df3c:	4807      	ldr	r0, [pc, #28]	; (df5c <rp_comm_execute_fsm+0x15c>)
    df3e:	f240 539c 	movw	r3, #1436	; 0x59c
    df42:	f009 face 	bl	174e2 <assert_print>
    df46:	4040      	eors	r0, r0
    df48:	f380 8811 	msr	BASEPRI, r0
    df4c:	f04f 0003 	mov.w	r0, #3
    df50:	df02      	svc	2
}
    df52:	bd70      	pop	{r4, r5, r6, pc}
    df54:	0001c088 	.word	0x0001c088
    df58:	0001c0d0 	.word	0x0001c0d0
    df5c:	0001b844 	.word	0x0001b844
    df60:	0001b908 	.word	0x0001b908

0000df64 <lp_comm_ntf>:
{
    df64:	b570      	push	{r4, r5, r6, lr}
    df66:	4606      	mov	r6, r0
    df68:	460d      	mov	r5, r1
	ntf = llcp_ntf_alloc();
    df6a:	f7ff f9c3 	bl	d2f4 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
    df6e:	4604      	mov	r4, r0
    df70:	2800      	cmp	r0, #0
    df72:	d05c      	beq.n	e02e <lp_comm_ntf+0xca>
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
    df74:	2303      	movs	r3, #3
    df76:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
    df78:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    df7a:	80e3      	strh	r3, [r4, #6]
	switch (ctx->proc) {
    df7c:	7a2b      	ldrb	r3, [r5, #8]
    df7e:	2b04      	cmp	r3, #4
	pdu = (struct pdu_data *)ntf->pdu;
    df80:	f104 011c 	add.w	r1, r4, #28
	switch (ctx->proc) {
    df84:	d016      	beq.n	dfb4 <lp_comm_ntf+0x50>
    df86:	2b0c      	cmp	r3, #12
    df88:	d03c      	beq.n	e004 <lp_comm_ntf+0xa0>
    df8a:	2b02      	cmp	r3, #2
    df8c:	d028      	beq.n	dfe0 <lp_comm_ntf+0x7c>
		LL_ASSERT(0);
    df8e:	4a2f      	ldr	r2, [pc, #188]	; (e04c <lp_comm_ntf+0xe8>)
    df90:	492f      	ldr	r1, [pc, #188]	; (e050 <lp_comm_ntf+0xec>)
    df92:	4830      	ldr	r0, [pc, #192]	; (e054 <lp_comm_ntf+0xf0>)
    df94:	f240 139d 	movw	r3, #413	; 0x19d
    df98:	f009 faa3 	bl	174e2 <assert_print>
    df9c:	4040      	eors	r0, r0
    df9e:	f380 8811 	msr	BASEPRI, r0
    dfa2:	f04f 0003 	mov.w	r0, #3
    dfa6:	df02      	svc	2
	ll_rx_put_sched(ntf->hdr.link, ntf);
    dfa8:	6820      	ldr	r0, [r4, #0]
    dfaa:	4621      	mov	r1, r4
}
    dfac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
    dfb0:	f7fa bba4 	b.w	86fc <ll_rx_put_sched>
	switch (ctx->response_opcode) {
    dfb4:	7a6b      	ldrb	r3, [r5, #9]
    dfb6:	2b0c      	cmp	r3, #12
    dfb8:	d031      	beq.n	e01e <lp_comm_ntf+0xba>
		LL_ASSERT(0);
    dfba:	4a24      	ldr	r2, [pc, #144]	; (e04c <lp_comm_ntf+0xe8>)
    dfbc:	4924      	ldr	r1, [pc, #144]	; (e050 <lp_comm_ntf+0xec>)
    dfbe:	4825      	ldr	r0, [pc, #148]	; (e054 <lp_comm_ntf+0xf0>)
    dfc0:	f240 1303 	movw	r3, #259	; 0x103
    dfc4:	f009 fa8d 	bl	174e2 <assert_print>
    dfc8:	4040      	eors	r0, r0
    dfca:	f380 8811 	msr	BASEPRI, r0
    dfce:	f04f 0003 	mov.w	r0, #3
    dfd2:	df02      	svc	2
	ll_rx_put_sched(ntf->hdr.link, ntf);
    dfd4:	6820      	ldr	r0, [r4, #0]
    dfd6:	4621      	mov	r1, r4
}
    dfd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
    dfdc:	f7fa bb8e 	b.w	86fc <ll_rx_put_sched>
	switch (ctx->response_opcode) {
    dfe0:	7a6b      	ldrb	r3, [r5, #9]
    dfe2:	2b07      	cmp	r3, #7
    dfe4:	d01f      	beq.n	e026 <lp_comm_ntf+0xc2>
    dfe6:	2b09      	cmp	r3, #9
    dfe8:	d015      	beq.n	e016 <lp_comm_ntf+0xb2>
		LL_ASSERT(0);
    dfea:	4a18      	ldr	r2, [pc, #96]	; (e04c <lp_comm_ntf+0xe8>)
    dfec:	4918      	ldr	r1, [pc, #96]	; (e050 <lp_comm_ntf+0xec>)
    dfee:	4819      	ldr	r0, [pc, #100]	; (e054 <lp_comm_ntf+0xf0>)
    dff0:	23f6      	movs	r3, #246	; 0xf6
    dff2:	f009 fa76 	bl	174e2 <assert_print>
    dff6:	4040      	eors	r0, r0
    dff8:	f380 8811 	msr	BASEPRI, r0
    dffc:	f04f 0003 	mov.w	r0, #3
    e000:	df02      	svc	2
    e002:	e7d1      	b.n	dfa8 <lp_comm_ntf+0x44>
	llcp_ntf_encode_length_change(conn, pdu);
    e004:	4630      	mov	r0, r6
    e006:	f000 ffab 	bl	ef60 <llcp_ntf_encode_length_change>
	ll_rx_put_sched(ntf->hdr.link, ntf);
    e00a:	6820      	ldr	r0, [r4, #0]
    e00c:	4621      	mov	r1, r4
}
    e00e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
    e012:	f7fa bb73 	b.w	86fc <ll_rx_put_sched>
		llcp_ntf_encode_feature_rsp(conn, pdu);
    e016:	4630      	mov	r0, r6
    e018:	f000 fd5c 	bl	ead4 <llcp_ntf_encode_feature_rsp>
		break;
    e01c:	e7c4      	b.n	dfa8 <lp_comm_ntf+0x44>
		llcp_ntf_encode_version_ind(conn, pdu);
    e01e:	4630      	mov	r0, r6
    e020:	f000 fdda 	bl	ebd8 <llcp_ntf_encode_version_ind>
		break;
    e024:	e7c0      	b.n	dfa8 <lp_comm_ntf+0x44>
		llcp_ntf_encode_unknown_rsp(ctx, pdu);
    e026:	4628      	mov	r0, r5
    e028:	f000 fd00 	bl	ea2c <llcp_ntf_encode_unknown_rsp>
		break;
    e02c:	e7bc      	b.n	dfa8 <lp_comm_ntf+0x44>
	LL_ASSERT(ntf);
    e02e:	4a07      	ldr	r2, [pc, #28]	; (e04c <lp_comm_ntf+0xe8>)
    e030:	4909      	ldr	r1, [pc, #36]	; (e058 <lp_comm_ntf+0xf4>)
    e032:	4808      	ldr	r0, [pc, #32]	; (e054 <lp_comm_ntf+0xf0>)
    e034:	f44f 73c0 	mov.w	r3, #384	; 0x180
    e038:	f009 fa53 	bl	174e2 <assert_print>
    e03c:	4040      	eors	r0, r0
    e03e:	f380 8811 	msr	BASEPRI, r0
    e042:	f04f 0003 	mov.w	r0, #3
    e046:	df02      	svc	2
    e048:	e794      	b.n	df74 <lp_comm_ntf+0x10>
    e04a:	bf00      	nop
    e04c:	0001c088 	.word	0x0001c088
    e050:	0001b908 	.word	0x0001b908
    e054:	0001b844 	.word	0x0001b844
    e058:	0001bf5c 	.word	0x0001bf5c

0000e05c <lp_comm_complete.constprop.0>:
static void lp_comm_complete(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    e05c:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
    e05e:	7a0b      	ldrb	r3, [r1, #8]
    e060:	3b01      	subs	r3, #1
static void lp_comm_complete(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    e062:	460c      	mov	r4, r1
    e064:	4605      	mov	r5, r0
	switch (ctx->proc) {
    e066:	2b0b      	cmp	r3, #11
    e068:	d815      	bhi.n	e096 <lp_comm_complete.constprop.0+0x3a>
    e06a:	e8df f003 	tbb	[pc, r3]
    e06e:	2206      	.short	0x2206
    e070:	1414280e 	.word	0x1414280e
    e074:	31141414 	.word	0x31141414
    e078:	3914      	.short	0x3914
		if (ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP ||
    e07a:	7a4b      	ldrb	r3, [r1, #9]
    e07c:	2b07      	cmp	r3, #7
    e07e:	d004      	beq.n	e08a <lp_comm_complete.constprop.0+0x2e>
    e080:	2b13      	cmp	r3, #19
    e082:	d002      	beq.n	e08a <lp_comm_complete.constprop.0+0x2e>
	conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
    e084:	2324      	movs	r3, #36	; 0x24
    e086:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
	llcp_lr_complete(conn);
    e08a:	4628      	mov	r0, r5
    e08c:	f000 fc44 	bl	e918 <llcp_lr_complete>
	ctx->state = LP_COMMON_STATE_IDLE;
    e090:	2300      	movs	r3, #0
    e092:	72a3      	strb	r3, [r4, #10]
}
    e094:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(0);
    e096:	4a2c      	ldr	r2, [pc, #176]	; (e148 <lp_comm_complete.constprop.0+0xec>)
    e098:	492c      	ldr	r1, [pc, #176]	; (e14c <lp_comm_complete.constprop.0+0xf0>)
    e09a:	482d      	ldr	r0, [pc, #180]	; (e150 <lp_comm_complete.constprop.0+0xf4>)
    e09c:	f240 2339 	movw	r3, #569	; 0x239
    e0a0:	f009 fa1f 	bl	174e2 <assert_print>
    e0a4:	4040      	eors	r0, r0
    e0a6:	f380 8811 	msr	BASEPRI, r0
    e0aa:	f04f 0003 	mov.w	r0, #3
    e0ae:	df02      	svc	2
}
    e0b0:	bd38      	pop	{r3, r4, r5, pc}
			(ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP ||
    e0b2:	7a4b      	ldrb	r3, [r1, #9]
    e0b4:	2b07      	cmp	r3, #7
    e0b6:	d005      	beq.n	e0c4 <lp_comm_complete.constprop.0+0x68>
    e0b8:	2b09      	cmp	r3, #9
    e0ba:	d1e3      	bne.n	e084 <lp_comm_complete.constprop.0+0x28>
    e0bc:	e002      	b.n	e0c4 <lp_comm_complete.constprop.0+0x68>
	if (valid_pdu) {
    e0be:	7a4b      	ldrb	r3, [r1, #9]
    e0c0:	2b0c      	cmp	r3, #12
    e0c2:	d1df      	bne.n	e084 <lp_comm_complete.constprop.0+0x28>
		if (!llcp_ntf_alloc_is_available()) {
    e0c4:	f7ff f906 	bl	d2d4 <llcp_ntf_alloc_is_available>
    e0c8:	bb20      	cbnz	r0, e114 <lp_comm_complete.constprop.0+0xb8>
			ctx->state = LP_COMMON_STATE_WAIT_NTF;
    e0ca:	2304      	movs	r3, #4
    e0cc:	72a3      	strb	r3, [r4, #10]
}
    e0ce:	bd38      	pop	{r3, r4, r5, pc}
		llcp_lr_complete(conn);
    e0d0:	f000 fc22 	bl	e918 <llcp_lr_complete>
		ctx->state = LP_COMMON_STATE_IDLE;
    e0d4:	2200      	movs	r2, #0
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LOCALHOST_TERM_CONN;
    e0d6:	2316      	movs	r3, #22
		ctx->state = LP_COMMON_STATE_IDLE;
    e0d8:	72a2      	strb	r2, [r4, #10]
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LOCALHOST_TERM_CONN;
    e0da:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
}
    e0de:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
    e0e0:	7a4b      	ldrb	r3, [r1, #9]
    e0e2:	2b15      	cmp	r3, #21
    e0e4:	d020      	beq.n	e128 <lp_comm_complete.constprop.0+0xcc>
		} else if (ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) {
    e0e6:	2b07      	cmp	r3, #7
    e0e8:	d1cc      	bne.n	e084 <lp_comm_complete.constprop.0+0x28>
	conn->llcp.fex.features_used &= ~ll_feat_mask;
    e0ea:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
    e0ee:	f023 0320 	bic.w	r3, r3, #32
    e0f2:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
			llcp_lr_complete(conn);
    e0f6:	f000 fc0f 	bl	e918 <llcp_lr_complete>
			ctx->state = LP_COMMON_STATE_IDLE;
    e0fa:	2300      	movs	r3, #0
				ctx->state = LP_COMMON_STATE_WAIT_NTF;
    e0fc:	72a3      	strb	r3, [r4, #10]
		if (!ull_cp_remote_dle_pending(conn)) {
    e0fe:	4628      	mov	r0, r5
    e100:	f7ff fbba 	bl	d878 <ull_cp_remote_dle_pending>
    e104:	2800      	cmp	r0, #0
    e106:	d1c5      	bne.n	e094 <lp_comm_complete.constprop.0+0x38>
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
    e108:	4628      	mov	r0, r5
    e10a:	2104      	movs	r1, #4
}
    e10c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
    e110:	f7ff b90a 	b.w	d328 <llcp_tx_resume_data>
			lp_comm_ntf(conn, ctx);
    e114:	4621      	mov	r1, r4
    e116:	4628      	mov	r0, r5
    e118:	f7ff ff24 	bl	df64 <lp_comm_ntf>
			llcp_lr_complete(conn);
    e11c:	4628      	mov	r0, r5
    e11e:	f000 fbfb 	bl	e918 <llcp_lr_complete>
			ctx->state = LP_COMMON_STATE_IDLE;
    e122:	2300      	movs	r3, #0
    e124:	72a3      	strb	r3, [r4, #10]
}
    e126:	bd38      	pop	{r3, r4, r5, pc}
			uint8_t dle_changed = ull_dle_update_eff(conn);
    e128:	f7fd fe50 	bl	bdcc <ull_dle_update_eff>
			if (dle_changed && !llcp_ntf_alloc_is_available()) {
    e12c:	b140      	cbz	r0, e140 <lp_comm_complete.constprop.0+0xe4>
    e12e:	f7ff f8d1 	bl	d2d4 <llcp_ntf_alloc_is_available>
    e132:	b908      	cbnz	r0, e138 <lp_comm_complete.constprop.0+0xdc>
    e134:	2304      	movs	r3, #4
    e136:	e7e1      	b.n	e0fc <lp_comm_complete.constprop.0+0xa0>
					lp_comm_ntf(conn, ctx);
    e138:	4621      	mov	r1, r4
    e13a:	4628      	mov	r0, r5
    e13c:	f7ff ff12 	bl	df64 <lp_comm_ntf>
				llcp_lr_complete(conn);
    e140:	4628      	mov	r0, r5
    e142:	f000 fbe9 	bl	e918 <llcp_lr_complete>
				ctx->state = LP_COMMON_STATE_IDLE;
    e146:	e7d8      	b.n	e0fa <lp_comm_complete.constprop.0+0x9e>
    e148:	0001c088 	.word	0x0001c088
    e14c:	0001b908 	.word	0x0001b908
    e150:	0001b844 	.word	0x0001b844

0000e154 <lp_comm_send_req.constprop.0.isra.0>:
static void lp_comm_send_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    e154:	b570      	push	{r4, r5, r6, lr}
	switch (ctx->proc) {
    e156:	7a0e      	ldrb	r6, [r1, #8]
    e158:	1e73      	subs	r3, r6, #1
static void lp_comm_send_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    e15a:	460c      	mov	r4, r1
    e15c:	4605      	mov	r5, r0
	switch (ctx->proc) {
    e15e:	2b0b      	cmp	r3, #11
    e160:	d807      	bhi.n	e172 <lp_comm_send_req.constprop.0.isra.0+0x1e>
    e162:	e8df f003 	tbb	[pc, r3]
    e166:	1b14      	.short	0x1b14
    e168:	0606432f 	.word	0x0606432f
    e16c:	60060606 	.word	0x60060606
    e170:	6d06      	.short	0x6d06
		LL_ASSERT(0);
    e172:	4a4f      	ldr	r2, [pc, #316]	; (e2b0 <lp_comm_send_req.constprop.0.isra.0+0x15c>)
    e174:	494f      	ldr	r1, [pc, #316]	; (e2b4 <lp_comm_send_req.constprop.0.isra.0+0x160>)
    e176:	4850      	ldr	r0, [pc, #320]	; (e2b8 <lp_comm_send_req.constprop.0.isra.0+0x164>)
    e178:	f240 23b5 	movw	r3, #693	; 0x2b5
    e17c:	f009 f9b1 	bl	174e2 <assert_print>
    e180:	4040      	eors	r0, r0
    e182:	f380 8811 	msr	BASEPRI, r0
    e186:	f04f 0003 	mov.w	r0, #3
    e18a:	df02      	svc	2
}
    e18c:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    e18e:	f000 fb2f 	bl	e7f0 <llcp_lr_ispaused>
    e192:	2800      	cmp	r0, #0
    e194:	d079      	beq.n	e28a <lp_comm_send_req.constprop.0.isra.0+0x136>
		ctx->state = LP_COMMON_STATE_WAIT_TX;
    e196:	2301      	movs	r3, #1
    e198:	72a3      	strb	r3, [r4, #10]
}
    e19a:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    e19c:	f000 fb28 	bl	e7f0 <llcp_lr_ispaused>
    e1a0:	2800      	cmp	r0, #0
    e1a2:	d1f8      	bne.n	e196 <lp_comm_send_req.constprop.0.isra.0+0x42>
    e1a4:	4621      	mov	r1, r4
    e1a6:	4628      	mov	r0, r5
    e1a8:	f7ff f880 	bl	d2ac <llcp_tx_alloc_peek>
    e1ac:	2800      	cmp	r0, #0
    e1ae:	d0f2      	beq.n	e196 <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
    e1b0:	4621      	mov	r1, r4
    e1b2:	4628      	mov	r0, r5
    e1b4:	f7ff fce6 	bl	db84 <lp_comm_tx>
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
    e1b8:	6963      	ldr	r3, [r4, #20]
    e1ba:	2b00      	cmp	r3, #0
    e1bc:	bf08      	it	eq
    e1be:	2603      	moveq	r6, #3
    e1c0:	72a6      	strb	r6, [r4, #10]
}
    e1c2:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    e1c4:	f000 fb14 	bl	e7f0 <llcp_lr_ispaused>
    e1c8:	2800      	cmp	r0, #0
    e1ca:	d1e4      	bne.n	e196 <lp_comm_send_req.constprop.0.isra.0+0x42>
    e1cc:	4621      	mov	r1, r4
    e1ce:	4628      	mov	r0, r5
    e1d0:	f7ff f86c 	bl	d2ac <llcp_tx_alloc_peek>
    e1d4:	2800      	cmp	r0, #0
    e1d6:	d0de      	beq.n	e196 <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
    e1d8:	4621      	mov	r1, r4
    e1da:	4628      	mov	r0, r5
    e1dc:	f7ff fcd2 	bl	db84 <lp_comm_tx>
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
    e1e0:	6963      	ldr	r3, [r4, #20]
    e1e2:	2b00      	cmp	r3, #0
    e1e4:	bf18      	it	ne
    e1e6:	2602      	movne	r6, #2
    e1e8:	72a6      	strb	r6, [r4, #10]
}
    e1ea:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->llcp.vex.sent) {
    e1ec:	f890 3114 	ldrb.w	r3, [r0, #276]	; 0x114
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	d13e      	bne.n	e272 <lp_comm_send_req.constprop.0.isra.0+0x11e>
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    e1f4:	f000 fafc 	bl	e7f0 <llcp_lr_ispaused>
    e1f8:	2800      	cmp	r0, #0
    e1fa:	d1cc      	bne.n	e196 <lp_comm_send_req.constprop.0.isra.0+0x42>
    e1fc:	4621      	mov	r1, r4
    e1fe:	4628      	mov	r0, r5
    e200:	f7ff f854 	bl	d2ac <llcp_tx_alloc_peek>
    e204:	2800      	cmp	r0, #0
    e206:	d0c6      	beq.n	e196 <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
    e208:	4621      	mov	r1, r4
    e20a:	4628      	mov	r0, r5
    e20c:	f7ff fcba 	bl	db84 <lp_comm_tx>
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
    e210:	6962      	ldr	r2, [r4, #20]
    e212:	2a00      	cmp	r2, #0
				conn->llcp.vex.sent = 1;
    e214:	f04f 0301 	mov.w	r3, #1
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
    e218:	bf0c      	ite	eq
    e21a:	2203      	moveq	r2, #3
    e21c:	2202      	movne	r2, #2
    e21e:	72a2      	strb	r2, [r4, #10]
				conn->llcp.vex.sent = 1;
    e220:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
}
    e224:	bd70      	pop	{r4, r5, r6, pc}
		if (!llcp_tx_alloc_peek(conn, ctx)) {
    e226:	f7ff f841 	bl	d2ac <llcp_tx_alloc_peek>
    e22a:	2800      	cmp	r0, #0
    e22c:	d0b3      	beq.n	e196 <lp_comm_send_req.constprop.0.isra.0+0x42>
			lp_comm_tx(conn, ctx);
    e22e:	4621      	mov	r1, r4
    e230:	4628      	mov	r0, r5
    e232:	f7ff fca7 	bl	db84 <lp_comm_tx>
			ctx->data.term.error_code = BT_HCI_ERR_LOCALHOST_TERM_CONN;
    e236:	2216      	movs	r2, #22
			ctx->state = LP_COMMON_STATE_WAIT_TX_ACK;
    e238:	2302      	movs	r3, #2
			ctx->data.term.error_code = BT_HCI_ERR_LOCALHOST_TERM_CONN;
    e23a:	7722      	strb	r2, [r4, #28]
			ctx->state = LP_COMMON_STATE_WAIT_TX_ACK;
    e23c:	72a3      	strb	r3, [r4, #10]
}
    e23e:	bd70      	pop	{r4, r5, r6, pc}
		if (!ull_cp_remote_dle_pending(conn)) {
    e240:	f7ff fb1a 	bl	d878 <ull_cp_remote_dle_pending>
    e244:	b9d8      	cbnz	r0, e27e <lp_comm_send_req.constprop.0.isra.0+0x12a>
			if (llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    e246:	4628      	mov	r0, r5
    e248:	f000 fad2 	bl	e7f0 <llcp_lr_ispaused>
    e24c:	2800      	cmp	r0, #0
    e24e:	d1a2      	bne.n	e196 <lp_comm_send_req.constprop.0.isra.0+0x42>
    e250:	4621      	mov	r1, r4
    e252:	4628      	mov	r0, r5
    e254:	f7ff f82a 	bl	d2ac <llcp_tx_alloc_peek>
    e258:	2800      	cmp	r0, #0
    e25a:	d09c      	beq.n	e196 <lp_comm_send_req.constprop.0.isra.0+0x42>
				llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
    e25c:	2104      	movs	r1, #4
    e25e:	4628      	mov	r0, r5
    e260:	f7ff f84e 	bl	d300 <llcp_tx_pause_data>
				lp_comm_tx(conn, ctx);
    e264:	4621      	mov	r1, r4
    e266:	4628      	mov	r0, r5
    e268:	f7ff fc8c 	bl	db84 <lp_comm_tx>
				ctx->state = LP_COMMON_STATE_WAIT_RX;
    e26c:	2303      	movs	r3, #3
    e26e:	72a3      	strb	r3, [r4, #10]
}
    e270:	bd70      	pop	{r4, r5, r6, pc}
			ctx->response_opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    e272:	230c      	movs	r3, #12
    e274:	724b      	strb	r3, [r1, #9]
}
    e276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			lp_comm_complete(conn, ctx, evt, param);
    e27a:	f7ff beef 	b.w	e05c <lp_comm_complete.constprop.0>
			llcp_lr_complete(conn);
    e27e:	4628      	mov	r0, r5
    e280:	f000 fb4a 	bl	e918 <llcp_lr_complete>
			ctx->state = LP_COMMON_STATE_IDLE;
    e284:	2300      	movs	r3, #0
    e286:	72a3      	strb	r3, [r4, #10]
}
    e288:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    e28a:	4621      	mov	r1, r4
    e28c:	4628      	mov	r0, r5
    e28e:	f7ff f80d 	bl	d2ac <llcp_tx_alloc_peek>
    e292:	2800      	cmp	r0, #0
    e294:	f43f af7f 	beq.w	e196 <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
    e298:	4621      	mov	r1, r4
    e29a:	4628      	mov	r0, r5
    e29c:	f7ff fc72 	bl	db84 <lp_comm_tx>
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
    e2a0:	6963      	ldr	r3, [r4, #20]
    e2a2:	2b00      	cmp	r3, #0
    e2a4:	bf0c      	ite	eq
    e2a6:	2303      	moveq	r3, #3
    e2a8:	2302      	movne	r3, #2
    e2aa:	72a3      	strb	r3, [r4, #10]
}
    e2ac:	bd70      	pop	{r4, r5, r6, pc}
    e2ae:	bf00      	nop
    e2b0:	0001c088 	.word	0x0001c088
    e2b4:	0001b908 	.word	0x0001b908
    e2b8:	0001b844 	.word	0x0001b844

0000e2bc <lp_comm_execute_fsm>:
{
    e2bc:	b530      	push	{r4, r5, lr}
    e2be:	460c      	mov	r4, r1
	switch (ctx->state) {
    e2c0:	7a89      	ldrb	r1, [r1, #10]
{
    e2c2:	b083      	sub	sp, #12
    e2c4:	4605      	mov	r5, r0
	switch (ctx->state) {
    e2c6:	2904      	cmp	r1, #4
    e2c8:	f200 80b1 	bhi.w	e42e <lp_comm_execute_fsm+0x172>
    e2cc:	e8df f001 	tbb	[pc, r1]
    e2d0:	371e2e1a 	.word	0x371e2e1a
    e2d4:	03          	.byte	0x03
    e2d5:	00          	.byte	0x00
	switch (evt) {
    e2d6:	b9ba      	cbnz	r2, e308 <lp_comm_execute_fsm+0x4c>
		switch (ctx->proc) {
    e2d8:	7a21      	ldrb	r1, [r4, #8]
    e2da:	290c      	cmp	r1, #12
    e2dc:	d814      	bhi.n	e308 <lp_comm_execute_fsm+0x4c>
    e2de:	f241 0314 	movw	r3, #4116	; 0x1014
    e2e2:	40cb      	lsrs	r3, r1
    e2e4:	07db      	lsls	r3, r3, #31
    e2e6:	d50f      	bpl.n	e308 <lp_comm_execute_fsm+0x4c>
			if (llcp_ntf_alloc_is_available()) {
    e2e8:	9201      	str	r2, [sp, #4]
    e2ea:	f7fe fff3 	bl	d2d4 <llcp_ntf_alloc_is_available>
    e2ee:	b158      	cbz	r0, e308 <lp_comm_execute_fsm+0x4c>
				lp_comm_ntf(conn, ctx);
    e2f0:	4621      	mov	r1, r4
    e2f2:	4628      	mov	r0, r5
    e2f4:	f7ff fe36 	bl	df64 <lp_comm_ntf>
				llcp_lr_complete(conn);
    e2f8:	4628      	mov	r0, r5
    e2fa:	f000 fb0d 	bl	e918 <llcp_lr_complete>
				ctx->state = LP_COMMON_STATE_IDLE;
    e2fe:	9a01      	ldr	r2, [sp, #4]
    e300:	72a2      	strb	r2, [r4, #10]
    e302:	e001      	b.n	e308 <lp_comm_execute_fsm+0x4c>
	switch (evt) {
    e304:	2a00      	cmp	r2, #0
    e306:	d055      	beq.n	e3b4 <lp_comm_execute_fsm+0xf8>
}
    e308:	b003      	add	sp, #12
    e30a:	bd30      	pop	{r4, r5, pc}
	switch (evt) {
    e30c:	2a05      	cmp	r2, #5
    e30e:	d1fb      	bne.n	e308 <lp_comm_execute_fsm+0x4c>
		switch (ctx->proc) {
    e310:	7a23      	ldrb	r3, [r4, #8]
    e312:	2b03      	cmp	r3, #3
    e314:	d001      	beq.n	e31a <lp_comm_execute_fsm+0x5e>
    e316:	2b0a      	cmp	r3, #10
    e318:	d1f6      	bne.n	e308 <lp_comm_execute_fsm+0x4c>
			ctx->tx_ack = NULL;
    e31a:	2300      	movs	r3, #0
    e31c:	6163      	str	r3, [r4, #20]
		lp_comm_complete(conn, ctx, evt, param);
    e31e:	4621      	mov	r1, r4
    e320:	4628      	mov	r0, r5
}
    e322:	b003      	add	sp, #12
    e324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		lp_comm_complete(conn, ctx, evt, param);
    e328:	f7ff be98 	b.w	e05c <lp_comm_complete.constprop.0>
	switch (evt) {
    e32c:	2a00      	cmp	r2, #0
    e32e:	d1eb      	bne.n	e308 <lp_comm_execute_fsm+0x4c>
		lp_comm_send_req(conn, ctx, evt, param);
    e330:	4621      	mov	r1, r4
    e332:	4628      	mov	r0, r5
}
    e334:	b003      	add	sp, #12
    e336:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		lp_comm_send_req(conn, ctx, evt, param);
    e33a:	f7ff bf0b 	b.w	e154 <lp_comm_send_req.constprop.0.isra.0>
	switch (evt) {
    e33e:	2a01      	cmp	r2, #1
    e340:	d1e2      	bne.n	e308 <lp_comm_execute_fsm+0x4c>
	ctx->response_opcode = pdu->llctrl.opcode;
    e342:	78da      	ldrb	r2, [r3, #3]
    e344:	7262      	strb	r2, [r4, #9]
	switch (pdu->llctrl.opcode) {
    e346:	3a02      	subs	r2, #2
    e348:	2a17      	cmp	r2, #23
    e34a:	d83b      	bhi.n	e3c4 <lp_comm_execute_fsm+0x108>
    e34c:	a101      	add	r1, pc, #4	; (adr r1, e354 <lp_comm_execute_fsm+0x98>)
    e34e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    e352:	bf00      	nop
    e354:	0000e3e1 	.word	0x0000e3e1
    e358:	0000e3c5 	.word	0x0000e3c5
    e35c:	0000e3c5 	.word	0x0000e3c5
    e360:	0000e3c5 	.word	0x0000e3c5
    e364:	0000e3c5 	.word	0x0000e3c5
    e368:	0000e425 	.word	0x0000e425
    e36c:	0000e3c5 	.word	0x0000e3c5
    e370:	0000e41b 	.word	0x0000e41b
    e374:	0000e3c5 	.word	0x0000e3c5
    e378:	0000e3c5 	.word	0x0000e3c5
    e37c:	0000e3fd 	.word	0x0000e3fd
    e380:	0000e31f 	.word	0x0000e31f
    e384:	0000e3c5 	.word	0x0000e3c5
    e388:	0000e3c5 	.word	0x0000e3c5
    e38c:	0000e3c5 	.word	0x0000e3c5
    e390:	0000e411 	.word	0x0000e411
    e394:	0000e3c5 	.word	0x0000e3c5
    e398:	0000e31f 	.word	0x0000e31f
    e39c:	0000e3c5 	.word	0x0000e3c5
    e3a0:	0000e407 	.word	0x0000e407
    e3a4:	0000e3c5 	.word	0x0000e3c5
    e3a8:	0000e3c5 	.word	0x0000e3c5
    e3ac:	0000e3c5 	.word	0x0000e3c5
    e3b0:	0000e31f 	.word	0x0000e31f
		if (llcp_lr_ispaused(conn)) {
    e3b4:	4628      	mov	r0, r5
    e3b6:	f000 fa1b 	bl	e7f0 <llcp_lr_ispaused>
    e3ba:	2800      	cmp	r0, #0
    e3bc:	d0b8      	beq.n	e330 <lp_comm_execute_fsm+0x74>
			ctx->state = LP_COMMON_STATE_WAIT_TX;
    e3be:	2301      	movs	r3, #1
    e3c0:	72a3      	strb	r3, [r4, #10]
    e3c2:	e7a1      	b.n	e308 <lp_comm_execute_fsm+0x4c>
		LL_ASSERT(0);
    e3c4:	4a21      	ldr	r2, [pc, #132]	; (e44c <lp_comm_execute_fsm+0x190>)
    e3c6:	4922      	ldr	r1, [pc, #136]	; (e450 <lp_comm_execute_fsm+0x194>)
    e3c8:	4822      	ldr	r0, [pc, #136]	; (e454 <lp_comm_execute_fsm+0x198>)
    e3ca:	f44f 734f 	mov.w	r3, #828	; 0x33c
    e3ce:	f009 f888 	bl	174e2 <assert_print>
    e3d2:	4040      	eors	r0, r0
    e3d4:	f380 8811 	msr	BASEPRI, r0
    e3d8:	f04f 0003 	mov.w	r0, #3
    e3dc:	df02      	svc	2
    e3de:	e79e      	b.n	e31e <lp_comm_execute_fsm+0x62>
		LL_ASSERT(0);
    e3e0:	4a1a      	ldr	r2, [pc, #104]	; (e44c <lp_comm_execute_fsm+0x190>)
    e3e2:	491b      	ldr	r1, [pc, #108]	; (e450 <lp_comm_execute_fsm+0x194>)
    e3e4:	481b      	ldr	r0, [pc, #108]	; (e454 <lp_comm_execute_fsm+0x198>)
    e3e6:	f240 3323 	movw	r3, #803	; 0x323
    e3ea:	f009 f87a 	bl	174e2 <assert_print>
    e3ee:	4040      	eors	r0, r0
    e3f0:	f380 8811 	msr	BASEPRI, r0
    e3f4:	f04f 0003 	mov.w	r0, #3
    e3f8:	df02      	svc	2
		break;
    e3fa:	e790      	b.n	e31e <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_version_ind(conn, pdu);
    e3fc:	4619      	mov	r1, r3
    e3fe:	4628      	mov	r0, r5
    e400:	f000 fc00 	bl	ec04 <llcp_pdu_decode_version_ind>
		break;
    e404:	e78b      	b.n	e31e <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_length_rsp(conn, pdu);
    e406:	4619      	mov	r1, r3
    e408:	4628      	mov	r0, r5
    e40a:	f000 fde9 	bl	efe0 <llcp_pdu_decode_length_rsp>
		break;
    e40e:	e786      	b.n	e31e <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_reject_ext_ind(ctx, pdu);
    e410:	4619      	mov	r1, r3
    e412:	4620      	mov	r0, r4
    e414:	f000 fc6e 	bl	ecf4 <llcp_pdu_decode_reject_ext_ind>
		break;
    e418:	e781      	b.n	e31e <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_feature_rsp(conn, pdu);
    e41a:	4619      	mov	r1, r3
    e41c:	4628      	mov	r0, r5
    e41e:	f000 fb93 	bl	eb48 <llcp_pdu_decode_feature_rsp>
		if (feature_phy_coded(conn)) {
    e422:	e77c      	b.n	e31e <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_unknown_rsp(ctx, pdu);
    e424:	4619      	mov	r1, r3
    e426:	4620      	mov	r0, r4
    e428:	f000 fafc 	bl	ea24 <llcp_pdu_decode_unknown_rsp>
		break;
    e42c:	e777      	b.n	e31e <lp_comm_execute_fsm+0x62>
		LL_ASSERT(0);
    e42e:	4a07      	ldr	r2, [pc, #28]	; (e44c <lp_comm_execute_fsm+0x190>)
    e430:	4907      	ldr	r1, [pc, #28]	; (e450 <lp_comm_execute_fsm+0x194>)
    e432:	4808      	ldr	r0, [pc, #32]	; (e454 <lp_comm_execute_fsm+0x198>)
    e434:	f240 3389 	movw	r3, #905	; 0x389
    e438:	f009 f853 	bl	174e2 <assert_print>
    e43c:	4040      	eors	r0, r0
    e43e:	f380 8811 	msr	BASEPRI, r0
    e442:	f04f 0003 	mov.w	r0, #3
    e446:	df02      	svc	2
}
    e448:	e75e      	b.n	e308 <lp_comm_execute_fsm+0x4c>
    e44a:	bf00      	nop
    e44c:	0001c088 	.word	0x0001c088
    e450:	0001b908 	.word	0x0001b908
    e454:	0001b844 	.word	0x0001b844

0000e458 <llcp_lp_comm_tx_ack>:
	lp_comm_execute_fsm(conn, ctx, LP_COMMON_EVT_ACK, tx->pdu);
    e458:	1d13      	adds	r3, r2, #4
    e45a:	2205      	movs	r2, #5
    e45c:	f7ff bf2e 	b.w	e2bc <lp_comm_execute_fsm>

0000e460 <llcp_lp_comm_rx>:
	lp_comm_execute_fsm(conn, ctx, LP_COMMON_EVT_RESPONSE, rx->pdu);
    e460:	f102 031c 	add.w	r3, r2, #28
    e464:	2201      	movs	r2, #1
    e466:	f7ff bf29 	b.w	e2bc <lp_comm_execute_fsm>
    e46a:	bf00      	nop

0000e46c <llcp_lp_comm_init_proc>:
	ctx->state = LP_COMMON_STATE_IDLE;
    e46c:	2300      	movs	r3, #0
    e46e:	7283      	strb	r3, [r0, #10]
}
    e470:	4770      	bx	lr
    e472:	bf00      	nop

0000e474 <llcp_lp_comm_run>:
{
    e474:	4613      	mov	r3, r2
	lp_comm_execute_fsm(conn, ctx, LP_COMMON_EVT_RUN, param);
    e476:	2200      	movs	r2, #0
    e478:	f7ff bf20 	b.w	e2bc <lp_comm_execute_fsm>

0000e47c <llcp_rp_comm_rx>:

void llcp_rp_comm_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
	rp_comm_execute_fsm(conn, ctx, RP_COMMON_EVT_REQUEST, rx->pdu);
    e47c:	f102 031c 	add.w	r3, r2, #28
    e480:	2202      	movs	r2, #2
    e482:	f7ff bcbd 	b.w	de00 <rp_comm_execute_fsm>
    e486:	bf00      	nop

0000e488 <llcp_rp_comm_tx_ack>:
}

void llcp_rp_comm_tx_ack(struct ll_conn *conn, struct proc_ctx *ctx, struct node_tx *tx)
{
	rp_comm_execute_fsm(conn, ctx, RP_COMMON_EVT_ACK, tx->pdu);
    e488:	1d13      	adds	r3, r2, #4
    e48a:	2201      	movs	r2, #1
    e48c:	f7ff bcb8 	b.w	de00 <rp_comm_execute_fsm>

0000e490 <llcp_rp_comm_init_proc>:
}

void llcp_rp_comm_init_proc(struct proc_ctx *ctx)
    e490:	2300      	movs	r3, #0
    e492:	7283      	strb	r3, [r0, #10]
    e494:	4770      	bx	lr
    e496:	bf00      	nop

0000e498 <llcp_rp_comm_run>:
{
	ctx->state = RP_COMMON_STATE_IDLE;
}

void llcp_rp_comm_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
    e498:	4613      	mov	r3, r2
	rp_comm_execute_fsm(conn, ctx, RP_COMMON_EVT_RUN, param);
    e49a:	2200      	movs	r2, #0
    e49c:	f7ff bcb0 	b.w	de00 <rp_comm_execute_fsm>

0000e4a0 <lr_dequeue>:

	shared_data_access_unlock(key);
}

static struct proc_ctx *lr_dequeue(struct ll_conn *conn)
{
    e4a0:	b570      	push	{r4, r5, r6, lr}
    e4a2:	4604      	mov	r4, r0
	if (mayfly_is_running()) {
    e4a4:	f004 fd08 	bl	12eb8 <mayfly_is_running>
    e4a8:	b168      	cbz	r0, e4c6 <lr_dequeue+0x26>
	return list->head;
    e4aa:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
Z_GENLIST_GET(slist, snode)
    e4ae:	b145      	cbz	r5, e4c2 <lr_dequeue+0x22>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e4b0:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	return node->next;
    e4b4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    e4b6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e4ba:	4295      	cmp	r5, r2
	list->tail = node;
    e4bc:	bf08      	it	eq
    e4be:	f8c4 30ec 	streq.w	r3, [r4, #236]	; 0xec
	ctx = (struct proc_ctx *)sys_slist_get(&conn->llcp.local.pend_proc_list);

	shared_data_access_unlock(key);

	return ctx;
}
    e4c2:	4628      	mov	r0, r5
    e4c4:	bd70      	pop	{r4, r5, r6, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    e4c6:	4605      	mov	r5, r0
    e4c8:	2101      	movs	r1, #1
    e4ca:	2003      	movs	r0, #3
    e4cc:	f004 fc96 	bl	12dfc <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    e4d0:	462a      	mov	r2, r5
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    e4d2:	4606      	mov	r6, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    e4d4:	2101      	movs	r1, #1
    e4d6:	2003      	movs	r0, #3
    e4d8:	f7f8 f8c8 	bl	666c <mayfly_enable>
	return list->head;
    e4dc:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
Z_GENLIST_GET(slist, snode)
    e4e0:	b145      	cbz	r5, e4f4 <lr_dequeue+0x54>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e4e2:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	return node->next;
    e4e6:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    e4e8:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e4ec:	4295      	cmp	r5, r2
	list->tail = node;
    e4ee:	bf08      	it	eq
    e4f0:	f8c4 30ec 	streq.w	r3, [r4, #236]	; 0xec
	if (key) {
    e4f4:	2e00      	cmp	r6, #0
    e4f6:	d0e4      	beq.n	e4c2 <lr_dequeue+0x22>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
    e4f8:	2201      	movs	r2, #1
    e4fa:	4611      	mov	r1, r2
    e4fc:	2003      	movs	r0, #3
    e4fe:	f7f8 f8b5 	bl	666c <mayfly_enable>
}
    e502:	4628      	mov	r0, r5
    e504:	bd70      	pop	{r4, r5, r6, pc}
    e506:	bf00      	nop

0000e508 <lr_act_complete>:

	llcp_lr_check_done(conn, ctx);
}

static void lr_act_complete(struct ll_conn *conn)
{
    e508:	b570      	push	{r4, r5, r6, lr}
    e50a:	4604      	mov	r4, r0
	if (mayfly_is_running()) {
    e50c:	f004 fcd4 	bl	12eb8 <mayfly_is_running>
    e510:	b140      	cbz	r0, e524 <lr_act_complete+0x1c>
	return list->head;
    e512:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
	struct proc_ctx *ctx;

	ctx = llcp_lr_peek(conn);
	LL_ASSERT(ctx != NULL);
    e516:	b1dd      	cbz	r5, e550 <lr_act_complete+0x48>
	conn->llcp.local.prt_expire = 0U;
    e518:	2200      	movs	r2, #0

	/* Stop procedure response timeout timer */
	llcp_lr_prt_stop(conn);

	/* Mark the procedure as safe to delete */
	ctx->done = 1U;
    e51a:	2301      	movs	r3, #1
	conn->llcp.local.prt_expire = 0U;
    e51c:	f8a4 20f2 	strh.w	r2, [r4, #242]	; 0xf2
	ctx->done = 1U;
    e520:	61ab      	str	r3, [r5, #24]
}
    e522:	bd70      	pop	{r4, r5, r6, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    e524:	4605      	mov	r5, r0
    e526:	2101      	movs	r1, #1
    e528:	2003      	movs	r0, #3
    e52a:	f004 fc67 	bl	12dfc <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    e52e:	462a      	mov	r2, r5
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    e530:	4606      	mov	r6, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    e532:	2101      	movs	r1, #1
    e534:	2003      	movs	r0, #3
    e536:	f7f8 f899 	bl	666c <mayfly_enable>
    e53a:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
	if (key) {
    e53e:	2e00      	cmp	r6, #0
    e540:	d0e9      	beq.n	e516 <lr_act_complete+0xe>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
    e542:	2201      	movs	r2, #1
    e544:	4611      	mov	r1, r2
    e546:	2003      	movs	r0, #3
    e548:	f7f8 f890 	bl	666c <mayfly_enable>
	LL_ASSERT(ctx != NULL);
    e54c:	2d00      	cmp	r5, #0
    e54e:	d1e3      	bne.n	e518 <lr_act_complete+0x10>
    e550:	4a06      	ldr	r2, [pc, #24]	; (e56c <lr_act_complete+0x64>)
    e552:	4907      	ldr	r1, [pc, #28]	; (e570 <lr_act_complete+0x68>)
    e554:	4807      	ldr	r0, [pc, #28]	; (e574 <lr_act_complete+0x6c>)
    e556:	f240 139d 	movw	r3, #413	; 0x19d
    e55a:	f008 ffc2 	bl	174e2 <assert_print>
    e55e:	4040      	eors	r0, r0
    e560:	f380 8811 	msr	BASEPRI, r0
    e564:	f04f 0003 	mov.w	r0, #3
    e568:	df02      	svc	2
    e56a:	e7d5      	b.n	e518 <lr_act_complete+0x10>
    e56c:	0001c0ec 	.word	0x0001c0ec
    e570:	0001c134 	.word	0x0001c134
    e574:	0001b844 	.word	0x0001b844

0000e578 <llcp_lr_check_done.part.0>:
void llcp_lr_check_done(struct ll_conn *conn, struct proc_ctx *ctx)
    e578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e57a:	4605      	mov	r5, r0
    e57c:	460c      	mov	r4, r1
	if (mayfly_is_running()) {
    e57e:	f004 fc9b 	bl	12eb8 <mayfly_is_running>
    e582:	b1b8      	cbz	r0, e5b4 <llcp_lr_check_done.part.0+0x3c>
    e584:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
		LL_ASSERT(ctx_header == ctx);
    e588:	42b4      	cmp	r4, r6
    e58a:	d00b      	beq.n	e5a4 <llcp_lr_check_done.part.0+0x2c>
    e58c:	4a14      	ldr	r2, [pc, #80]	; (e5e0 <llcp_lr_check_done.part.0+0x68>)
    e58e:	4915      	ldr	r1, [pc, #84]	; (e5e4 <llcp_lr_check_done.part.0+0x6c>)
    e590:	4815      	ldr	r0, [pc, #84]	; (e5e8 <llcp_lr_check_done.part.0+0x70>)
    e592:	2350      	movs	r3, #80	; 0x50
    e594:	f008 ffa5 	bl	174e2 <assert_print>
    e598:	4040      	eors	r0, r0
    e59a:	f380 8811 	msr	BASEPRI, r0
    e59e:	f04f 0003 	mov.w	r0, #3
    e5a2:	df02      	svc	2
		lr_dequeue(conn);
    e5a4:	4628      	mov	r0, r5
    e5a6:	f7ff ff7b 	bl	e4a0 <lr_dequeue>
		llcp_proc_ctx_release(ctx);
    e5aa:	4620      	mov	r0, r4
}
    e5ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		llcp_proc_ctx_release(ctx);
    e5b0:	f7fe be5a 	b.w	d268 <llcp_proc_ctx_release>
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    e5b4:	4606      	mov	r6, r0
    e5b6:	2101      	movs	r1, #1
    e5b8:	2003      	movs	r0, #3
    e5ba:	f004 fc1f 	bl	12dfc <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    e5be:	4632      	mov	r2, r6
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    e5c0:	4607      	mov	r7, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    e5c2:	2101      	movs	r1, #1
    e5c4:	2003      	movs	r0, #3
    e5c6:	f7f8 f851 	bl	666c <mayfly_enable>
    e5ca:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
	if (key) {
    e5ce:	2f00      	cmp	r7, #0
    e5d0:	d0da      	beq.n	e588 <llcp_lr_check_done.part.0+0x10>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
    e5d2:	2201      	movs	r2, #1
    e5d4:	4611      	mov	r1, r2
    e5d6:	2003      	movs	r0, #3
    e5d8:	f7f8 f848 	bl	666c <mayfly_enable>
    e5dc:	e7d4      	b.n	e588 <llcp_lr_check_done.part.0+0x10>
    e5de:	bf00      	nop
    e5e0:	0001c0ec 	.word	0x0001c0ec
    e5e4:	0001c148 	.word	0x0001c148
    e5e8:	0001b844 	.word	0x0001b844

0000e5ec <llcp_lr_enqueue>:
{
    e5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e5ee:	4605      	mov	r5, r0
    e5f0:	460c      	mov	r4, r1
	if (mayfly_is_running()) {
    e5f2:	f004 fc61 	bl	12eb8 <mayfly_is_running>
    e5f6:	b140      	cbz	r0, e60a <llcp_lr_enqueue+0x1e>
	parent->next = child;
    e5f8:	2300      	movs	r3, #0
    e5fa:	6023      	str	r3, [r4, #0]
	return list->tail;
    e5fc:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
Z_GENLIST_APPEND(slist, snode)
    e600:	b1f3      	cbz	r3, e640 <llcp_lr_enqueue+0x54>
	parent->next = child;
    e602:	601c      	str	r4, [r3, #0]
	list->tail = node;
    e604:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
}
    e608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    e60a:	4606      	mov	r6, r0
    e60c:	2101      	movs	r1, #1
    e60e:	2003      	movs	r0, #3
    e610:	f004 fbf4 	bl	12dfc <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    e614:	4632      	mov	r2, r6
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    e616:	4607      	mov	r7, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    e618:	2101      	movs	r1, #1
    e61a:	2003      	movs	r0, #3
    e61c:	f7f8 f826 	bl	666c <mayfly_enable>
	parent->next = child;
    e620:	6026      	str	r6, [r4, #0]
	return list->tail;
    e622:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
Z_GENLIST_APPEND(slist, snode)
    e626:	b183      	cbz	r3, e64a <llcp_lr_enqueue+0x5e>
	parent->next = child;
    e628:	601c      	str	r4, [r3, #0]
	list->tail = node;
    e62a:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
	if (key) {
    e62e:	2f00      	cmp	r7, #0
    e630:	d0ea      	beq.n	e608 <llcp_lr_enqueue+0x1c>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
    e632:	2201      	movs	r2, #1
}
    e634:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
    e638:	4611      	mov	r1, r2
    e63a:	2003      	movs	r0, #3
    e63c:	f7f8 b816 	b.w	666c <mayfly_enable>
	list->head = node;
    e640:	f8c5 40e8 	str.w	r4, [r5, #232]	; 0xe8
    e644:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
}
    e648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e64a:	f8c5 40e8 	str.w	r4, [r5, #232]	; 0xe8
    e64e:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
}
    e652:	e7ec      	b.n	e62e <llcp_lr_enqueue+0x42>

0000e654 <llcp_lr_peek>:
{
    e654:	b570      	push	{r4, r5, r6, lr}
    e656:	4605      	mov	r5, r0
	if (mayfly_is_running()) {
    e658:	f004 fc2e 	bl	12eb8 <mayfly_is_running>
    e65c:	b118      	cbz	r0, e666 <llcp_lr_peek+0x12>
	return list->head;
    e65e:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
}
    e662:	4620      	mov	r0, r4
    e664:	bd70      	pop	{r4, r5, r6, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    e666:	4604      	mov	r4, r0
    e668:	2101      	movs	r1, #1
    e66a:	2003      	movs	r0, #3
    e66c:	f004 fbc6 	bl	12dfc <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    e670:	4622      	mov	r2, r4
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    e672:	4606      	mov	r6, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    e674:	2101      	movs	r1, #1
    e676:	2003      	movs	r0, #3
    e678:	f7f7 fff8 	bl	666c <mayfly_enable>
    e67c:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
	if (key) {
    e680:	2e00      	cmp	r6, #0
    e682:	d0ee      	beq.n	e662 <llcp_lr_peek+0xe>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
    e684:	2201      	movs	r2, #1
    e686:	4611      	mov	r1, r2
    e688:	2003      	movs	r0, #3
    e68a:	f7f7 ffef 	bl	666c <mayfly_enable>
}
    e68e:	4620      	mov	r0, r4
    e690:	bd70      	pop	{r4, r5, r6, pc}
    e692:	bf00      	nop

0000e694 <lr_act_run>:
{
    e694:	b538      	push	{r3, r4, r5, lr}
    e696:	4605      	mov	r5, r0
	ctx = llcp_lr_peek(conn);
    e698:	f7ff ffdc 	bl	e654 <llcp_lr_peek>
	switch (ctx->proc) {
    e69c:	7a03      	ldrb	r3, [r0, #8]
    e69e:	3b01      	subs	r3, #1
	ctx = llcp_lr_peek(conn);
    e6a0:	4604      	mov	r4, r0
	switch (ctx->proc) {
    e6a2:	2b0b      	cmp	r3, #11
    e6a4:	d81b      	bhi.n	e6de <lr_act_run+0x4a>
    e6a6:	e8df f003 	tbb	[pc, r3]
    e6aa:	0606      	.short	0x0606
    e6ac:	1a1a0606 	.word	0x1a1a0606
    e6b0:	06141428 	.word	0x06141428
    e6b4:	061a      	.short	0x061a
		llcp_lp_comm_run(conn, ctx, NULL);
    e6b6:	4601      	mov	r1, r0
    e6b8:	2200      	movs	r2, #0
    e6ba:	4628      	mov	r0, r5
    e6bc:	f7ff feda 	bl	e474 <llcp_lp_comm_run>
	if (ctx->done) {
    e6c0:	69a3      	ldr	r3, [r4, #24]
    e6c2:	b903      	cbnz	r3, e6c6 <lr_act_run+0x32>
}
    e6c4:	bd38      	pop	{r3, r4, r5, pc}
    e6c6:	4621      	mov	r1, r4
    e6c8:	4628      	mov	r0, r5
    e6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e6ce:	f7ff bf53 	b.w	e578 <llcp_lr_check_done.part.0>
		llcp_lp_cu_run(conn, ctx, NULL);
    e6d2:	4601      	mov	r1, r0
    e6d4:	2200      	movs	r2, #0
    e6d6:	4628      	mov	r0, r5
    e6d8:	f001 f946 	bl	f968 <llcp_lp_cu_run>
		break;
    e6dc:	e7f0      	b.n	e6c0 <lr_act_run+0x2c>
		LL_ASSERT(0);
    e6de:	4a0a      	ldr	r2, [pc, #40]	; (e708 <lr_act_run+0x74>)
    e6e0:	490a      	ldr	r1, [pc, #40]	; (e70c <lr_act_run+0x78>)
    e6e2:	480b      	ldr	r0, [pc, #44]	; (e710 <lr_act_run+0x7c>)
    e6e4:	f240 1391 	movw	r3, #401	; 0x191
    e6e8:	f008 fefb 	bl	174e2 <assert_print>
    e6ec:	4040      	eors	r0, r0
    e6ee:	f380 8811 	msr	BASEPRI, r0
    e6f2:	f04f 0003 	mov.w	r0, #3
    e6f6:	df02      	svc	2
		break;
    e6f8:	e7e2      	b.n	e6c0 <lr_act_run+0x2c>
		llcp_lp_pu_run(conn, ctx, NULL);
    e6fa:	4601      	mov	r1, r0
    e6fc:	2200      	movs	r2, #0
    e6fe:	4628      	mov	r0, r5
    e700:	f7fe fb10 	bl	cd24 <llcp_lp_pu_run>
		break;
    e704:	e7dc      	b.n	e6c0 <lr_act_run+0x2c>
    e706:	bf00      	nop
    e708:	0001c0ec 	.word	0x0001c0ec
    e70c:	0001b908 	.word	0x0001b908
    e710:	0001b844 	.word	0x0001b844

0000e714 <lr_st_active.constprop.0>:
	}
}

static void lr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
{
	switch (evt) {
    e714:	2901      	cmp	r1, #1
static void lr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
    e716:	b510      	push	{r4, lr}
    e718:	4604      	mov	r4, r0
	switch (evt) {
    e71a:	d017      	beq.n	e74c <lr_st_active.constprop.0+0x38>
    e71c:	2903      	cmp	r1, #3
    e71e:	d004      	beq.n	e72a <lr_st_active.constprop.0+0x16>
    e720:	b159      	cbz	r1, e73a <lr_st_active.constprop.0+0x26>
		break;
	default:
		/* Ignore other evts */
		break;
	}
}
    e722:	bd10      	pop	{r4, pc}
		llcp_proc_ctx_release(ctx);
    e724:	f7fe fda0 	bl	d268 <llcp_proc_ctx_release>
		ctx = lr_dequeue(conn);
    e728:	4620      	mov	r0, r4
    e72a:	f7ff feb9 	bl	e4a0 <lr_dequeue>
	while (ctx != NULL) {
    e72e:	2800      	cmp	r0, #0
    e730:	d1f8      	bne.n	e724 <lr_st_active.constprop.0+0x10>
	conn->llcp.local.state = state;
    e732:	2302      	movs	r3, #2
    e734:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
}
    e738:	bd10      	pop	{r4, pc}
		if (llcp_lr_peek(conn)) {
    e73a:	f7ff ff8b 	bl	e654 <llcp_lr_peek>
    e73e:	2800      	cmp	r0, #0
    e740:	d0ef      	beq.n	e722 <lr_st_active.constprop.0+0xe>
			lr_act_run(conn);
    e742:	4620      	mov	r0, r4
}
    e744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			lr_act_run(conn);
    e748:	f7ff bfa4 	b.w	e694 <lr_act_run>
		lr_act_complete(conn);
    e74c:	f7ff fedc 	bl	e508 <lr_act_complete>
	conn->llcp.local.state = state;
    e750:	2300      	movs	r3, #0
    e752:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
}
    e756:	bd10      	pop	{r4, pc}

0000e758 <lr_execute_fsm.constprop.0>:
		/* Ignore other evts */
		break;
	}
}

static void lr_execute_fsm(struct ll_conn *conn, uint8_t evt, void *param)
    e758:	b538      	push	{r3, r4, r5, lr}
{
	switch (conn->llcp.local.state) {
    e75a:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
static void lr_execute_fsm(struct ll_conn *conn, uint8_t evt, void *param)
    e75e:	4604      	mov	r4, r0
	switch (conn->llcp.local.state) {
    e760:	2b03      	cmp	r3, #3
    e762:	d831      	bhi.n	e7c8 <lr_execute_fsm.constprop.0+0x70>
    e764:	e8df f003 	tbb	[pc, r3]
    e768:	020c0206 	.word	0x020c0206
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
    e76c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lr_st_active(conn, evt, param);
    e770:	f7ff bfd0 	b.w	e714 <lr_st_active.constprop.0>
	switch (evt) {
    e774:	2901      	cmp	r1, #1
    e776:	d023      	beq.n	e7c0 <lr_execute_fsm.constprop.0+0x68>
    e778:	2903      	cmp	r1, #3
    e77a:	d009      	beq.n	e790 <lr_execute_fsm.constprop.0+0x38>
    e77c:	b189      	cbz	r1, e7a2 <lr_execute_fsm.constprop.0+0x4a>
}
    e77e:	bd38      	pop	{r3, r4, r5, pc}
	switch (evt) {
    e780:	2902      	cmp	r1, #2
    e782:	d1fc      	bne.n	e77e <lr_execute_fsm.constprop.0+0x26>
	conn->llcp.local.state = state;
    e784:	2300      	movs	r3, #0
    e786:	f880 30f0 	strb.w	r3, [r0, #240]	; 0xf0
}
    e78a:	bd38      	pop	{r3, r4, r5, pc}
		llcp_proc_ctx_release(ctx);
    e78c:	f7fe fd6c 	bl	d268 <llcp_proc_ctx_release>
		ctx = lr_dequeue(conn);
    e790:	4620      	mov	r0, r4
    e792:	f7ff fe85 	bl	e4a0 <lr_dequeue>
	while (ctx != NULL) {
    e796:	2800      	cmp	r0, #0
    e798:	d1f8      	bne.n	e78c <lr_execute_fsm.constprop.0+0x34>
	conn->llcp.local.state = state;
    e79a:	2302      	movs	r3, #2
    e79c:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
}
    e7a0:	bd38      	pop	{r3, r4, r5, pc}
		ctx = llcp_lr_peek(conn);
    e7a2:	f7ff ff57 	bl	e654 <llcp_lr_peek>
		if (ctx) {
    e7a6:	2800      	cmp	r0, #0
    e7a8:	d0e9      	beq.n	e77e <lr_execute_fsm.constprop.0+0x26>
			const enum llcp_proc curr_proc = ctx->proc;
    e7aa:	7a05      	ldrb	r5, [r0, #8]
			lr_act_run(conn);
    e7ac:	4620      	mov	r0, r4
    e7ae:	f7ff ff71 	bl	e694 <lr_act_run>
			if (curr_proc != PROC_TERMINATE) {
    e7b2:	2d0a      	cmp	r5, #10
	conn->llcp.local.state = state;
    e7b4:	bf14      	ite	ne
    e7b6:	2301      	movne	r3, #1
    e7b8:	2303      	moveq	r3, #3
    e7ba:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
}
    e7be:	bd38      	pop	{r3, r4, r5, pc}
    e7c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lr_act_complete(conn);
    e7c4:	f7ff bea0 	b.w	e508 <lr_act_complete>
		LL_ASSERT(0);
    e7c8:	4a06      	ldr	r2, [pc, #24]	; (e7e4 <lr_execute_fsm.constprop.0+0x8c>)
    e7ca:	4907      	ldr	r1, [pc, #28]	; (e7e8 <lr_execute_fsm.constprop.0+0x90>)
    e7cc:	4807      	ldr	r0, [pc, #28]	; (e7ec <lr_execute_fsm.constprop.0+0x94>)
    e7ce:	f240 232b 	movw	r3, #555	; 0x22b
    e7d2:	f008 fe86 	bl	174e2 <assert_print>
    e7d6:	4040      	eors	r0, r0
    e7d8:	f380 8811 	msr	BASEPRI, r0
    e7dc:	f04f 0003 	mov.w	r0, #3
    e7e0:	df02      	svc	2
}
    e7e2:	bd38      	pop	{r3, r4, r5, pc}
    e7e4:	0001c0ec 	.word	0x0001c0ec
    e7e8:	0001b908 	.word	0x0001b908
    e7ec:	0001b844 	.word	0x0001b844

0000e7f0 <llcp_lr_ispaused>:
	return conn->llcp.local.pause == 1U;
    e7f0:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
}
    e7f4:	f1a0 0001 	sub.w	r0, r0, #1
    e7f8:	fab0 f080 	clz	r0, r0
    e7fc:	0940      	lsrs	r0, r0, #5
    e7fe:	4770      	bx	lr

0000e800 <llcp_lr_pause>:
	conn->llcp.local.pause = 1U;
    e800:	2301      	movs	r3, #1
    e802:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
}
    e806:	4770      	bx	lr

0000e808 <llcp_lr_resume>:
	conn->llcp.local.pause = 0U;
    e808:	2300      	movs	r3, #0
    e80a:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
}
    e80e:	4770      	bx	lr

0000e810 <llcp_lr_prt_restart>:
	conn->llcp.local.prt_expire = conn->llcp.prt_reload;
    e810:	f8b0 3108 	ldrh.w	r3, [r0, #264]	; 0x108
    e814:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
}
    e818:	4770      	bx	lr
    e81a:	bf00      	nop

0000e81c <llcp_lr_prt_restart_with_value>:
	conn->llcp.local.prt_expire = value;
    e81c:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
}
    e820:	4770      	bx	lr
    e822:	bf00      	nop

0000e824 <llcp_lr_prt_stop>:
	conn->llcp.local.prt_expire = 0U;
    e824:	2300      	movs	r3, #0
    e826:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
}
    e82a:	4770      	bx	lr

0000e82c <llcp_lr_rx>:
{
    e82c:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
    e82e:	7a0b      	ldrb	r3, [r1, #8]
    e830:	3b01      	subs	r3, #1
{
    e832:	460c      	mov	r4, r1
    e834:	4605      	mov	r5, r0
	switch (ctx->proc) {
    e836:	2b0b      	cmp	r3, #11
    e838:	d817      	bhi.n	e86a <llcp_lr_rx+0x3e>
    e83a:	e8df f003 	tbb	[pc, r3]
    e83e:	0606      	.short	0x0606
    e840:	16160606 	.word	0x16160606
    e844:	06121224 	.word	0x06121224
    e848:	0616      	.short	0x0616
		llcp_lp_comm_rx(conn, ctx, rx);
    e84a:	4621      	mov	r1, r4
    e84c:	f7ff fe08 	bl	e460 <llcp_lp_comm_rx>
	if (ctx->done) {
    e850:	69a3      	ldr	r3, [r4, #24]
    e852:	b903      	cbnz	r3, e856 <llcp_lr_rx+0x2a>
}
    e854:	bd38      	pop	{r3, r4, r5, pc}
    e856:	4621      	mov	r1, r4
    e858:	4628      	mov	r0, r5
    e85a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e85e:	f7ff be8b 	b.w	e578 <llcp_lr_check_done.part.0>
		llcp_lp_cu_rx(conn, ctx, rx);
    e862:	4621      	mov	r1, r4
    e864:	f001 f828 	bl	f8b8 <llcp_lp_cu_rx>
		break;
    e868:	e7f2      	b.n	e850 <llcp_lr_rx+0x24>
		LL_ASSERT(0);
    e86a:	4a09      	ldr	r2, [pc, #36]	; (e890 <llcp_lr_rx+0x64>)
    e86c:	4909      	ldr	r1, [pc, #36]	; (e894 <llcp_lr_rx+0x68>)
    e86e:	480a      	ldr	r0, [pc, #40]	; (e898 <llcp_lr_rx+0x6c>)
    e870:	f240 130f 	movw	r3, #271	; 0x10f
    e874:	f008 fe35 	bl	174e2 <assert_print>
    e878:	4040      	eors	r0, r0
    e87a:	f380 8811 	msr	BASEPRI, r0
    e87e:	f04f 0003 	mov.w	r0, #3
    e882:	df02      	svc	2
		break;
    e884:	e7e4      	b.n	e850 <llcp_lr_rx+0x24>
		llcp_lp_pu_rx(conn, ctx, rx);
    e886:	4621      	mov	r1, r4
    e888:	f7fe fa28 	bl	ccdc <llcp_lp_pu_rx>
		break;
    e88c:	e7e0      	b.n	e850 <llcp_lr_rx+0x24>
    e88e:	bf00      	nop
    e890:	0001c0ec 	.word	0x0001c0ec
    e894:	0001b908 	.word	0x0001b908
    e898:	0001b844 	.word	0x0001b844

0000e89c <llcp_lr_tx_ack>:
{
    e89c:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
    e89e:	7a0b      	ldrb	r3, [r1, #8]
    e8a0:	3b03      	subs	r3, #3
{
    e8a2:	460c      	mov	r4, r1
    e8a4:	4605      	mov	r5, r0
	switch (ctx->proc) {
    e8a6:	2b09      	cmp	r3, #9
    e8a8:	d809      	bhi.n	e8be <llcp_lr_tx_ack+0x22>
    e8aa:	e8df f003 	tbb	[pc, r3]
    e8ae:	0805      	.short	0x0805
    e8b0:	080b0808 	.word	0x080b0808
    e8b4:	05080508 	.word	0x05080508
		llcp_lp_comm_tx_ack(conn, ctx, tx);
    e8b8:	4621      	mov	r1, r4
    e8ba:	f7ff fdcd 	bl	e458 <llcp_lp_comm_tx_ack>
	if (ctx->done) {
    e8be:	69a3      	ldr	r3, [r4, #24]
    e8c0:	b933      	cbnz	r3, e8d0 <llcp_lr_tx_ack+0x34>
}
    e8c2:	bd38      	pop	{r3, r4, r5, pc}
		llcp_lp_pu_tx_ack(conn, ctx, tx);
    e8c4:	4621      	mov	r1, r4
    e8c6:	f7fe fa31 	bl	cd2c <llcp_lp_pu_tx_ack>
	if (ctx->done) {
    e8ca:	69a3      	ldr	r3, [r4, #24]
    e8cc:	2b00      	cmp	r3, #0
    e8ce:	d0f8      	beq.n	e8c2 <llcp_lr_tx_ack+0x26>
    e8d0:	4621      	mov	r1, r4
    e8d2:	4628      	mov	r0, r5
}
    e8d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e8d8:	f7ff be4e 	b.w	e578 <llcp_lr_check_done.part.0>

0000e8dc <llcp_lr_tx_ntf>:
{
    e8dc:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
    e8de:	7a0b      	ldrb	r3, [r1, #8]
    e8e0:	2b07      	cmp	r3, #7
{
    e8e2:	460c      	mov	r4, r1
    e8e4:	4605      	mov	r5, r0
	switch (ctx->proc) {
    e8e6:	d008      	beq.n	e8fa <llcp_lr_tx_ntf+0x1e>
	if (ctx->done) {
    e8e8:	69a3      	ldr	r3, [r4, #24]
    e8ea:	b903      	cbnz	r3, e8ee <llcp_lr_tx_ntf+0x12>
}
    e8ec:	bd38      	pop	{r3, r4, r5, pc}
    e8ee:	4621      	mov	r1, r4
    e8f0:	4628      	mov	r0, r5
    e8f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e8f6:	f7ff be3f 	b.w	e578 <llcp_lr_check_done.part.0>
		llcp_lp_pu_tx_ntf(conn, ctx);
    e8fa:	f7fe fa1b 	bl	cd34 <llcp_lp_pu_tx_ntf>
		break;
    e8fe:	e7f3      	b.n	e8e8 <llcp_lr_tx_ntf+0xc>

0000e900 <llcp_lr_init>:
	conn->llcp.local.state = state;
    e900:	2202      	movs	r2, #2

void llcp_lr_init(struct ll_conn *conn)
{
	lr_set_state(conn, LR_STATE_DISCONNECT);
	conn->llcp.local.prt_expire = 0U;
    e902:	2300      	movs	r3, #0
	conn->llcp.local.state = state;
    e904:	f880 20f0 	strb.w	r2, [r0, #240]	; 0xf0
	conn->llcp.local.prt_expire = 0U;
    e908:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
}
    e90c:	4770      	bx	lr
    e90e:	bf00      	nop

0000e910 <llcp_lr_run>:

void llcp_lr_run(struct ll_conn *conn)
{
	lr_execute_fsm(conn, LR_EVT_RUN, NULL);
    e910:	2100      	movs	r1, #0
    e912:	f7ff bf21 	b.w	e758 <lr_execute_fsm.constprop.0>
    e916:	bf00      	nop

0000e918 <llcp_lr_complete>:
}

void llcp_lr_complete(struct ll_conn *conn)
{
    e918:	b510      	push	{r4, lr}
	switch (conn->llcp.local.state) {
    e91a:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
{
    e91e:	4604      	mov	r4, r0
	switch (conn->llcp.local.state) {
    e920:	2b03      	cmp	r3, #3
    e922:	d80d      	bhi.n	e940 <llcp_lr_complete+0x28>
    e924:	e8df f003 	tbb	[pc, r3]
    e928:	02070208 	.word	0x02070208
		lr_act_complete(conn);
    e92c:	f7ff fdec 	bl	e508 <lr_act_complete>
	conn->llcp.local.state = state;
    e930:	2300      	movs	r3, #0
    e932:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	lr_execute_fsm(conn, LR_EVT_COMPLETE, NULL);
}
    e936:	bd10      	pop	{r4, pc}
    e938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lr_act_complete(conn);
    e93c:	f7ff bde4 	b.w	e508 <lr_act_complete>
		LL_ASSERT(0);
    e940:	4a06      	ldr	r2, [pc, #24]	; (e95c <llcp_lr_complete+0x44>)
    e942:	4907      	ldr	r1, [pc, #28]	; (e960 <llcp_lr_complete+0x48>)
    e944:	4807      	ldr	r0, [pc, #28]	; (e964 <llcp_lr_complete+0x4c>)
    e946:	f240 232b 	movw	r3, #555	; 0x22b
    e94a:	f008 fdca 	bl	174e2 <assert_print>
    e94e:	4040      	eors	r0, r0
    e950:	f380 8811 	msr	BASEPRI, r0
    e954:	f04f 0003 	mov.w	r0, #3
    e958:	df02      	svc	2
}
    e95a:	bd10      	pop	{r4, pc}
    e95c:	0001c0ec 	.word	0x0001c0ec
    e960:	0001b908 	.word	0x0001b908
    e964:	0001b844 	.word	0x0001b844

0000e968 <llcp_lr_connect>:

void llcp_lr_connect(struct ll_conn *conn)
{
    e968:	b508      	push	{r3, lr}
	switch (conn->llcp.local.state) {
    e96a:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
    e96e:	2b02      	cmp	r3, #2
    e970:	d011      	beq.n	e996 <llcp_lr_connect+0x2e>
    e972:	d800      	bhi.n	e976 <llcp_lr_connect+0xe>
	lr_execute_fsm(conn, LR_EVT_CONNECT, NULL);
}
    e974:	bd08      	pop	{r3, pc}
	switch (conn->llcp.local.state) {
    e976:	2b03      	cmp	r3, #3
    e978:	d0fc      	beq.n	e974 <llcp_lr_connect+0xc>
		LL_ASSERT(0);
    e97a:	4a09      	ldr	r2, [pc, #36]	; (e9a0 <llcp_lr_connect+0x38>)
    e97c:	4909      	ldr	r1, [pc, #36]	; (e9a4 <llcp_lr_connect+0x3c>)
    e97e:	480a      	ldr	r0, [pc, #40]	; (e9a8 <llcp_lr_connect+0x40>)
    e980:	f240 232b 	movw	r3, #555	; 0x22b
    e984:	f008 fdad 	bl	174e2 <assert_print>
    e988:	4040      	eors	r0, r0
    e98a:	f380 8811 	msr	BASEPRI, r0
    e98e:	f04f 0003 	mov.w	r0, #3
    e992:	df02      	svc	2
}
    e994:	bd08      	pop	{r3, pc}
	conn->llcp.local.state = state;
    e996:	2300      	movs	r3, #0
    e998:	f880 30f0 	strb.w	r3, [r0, #240]	; 0xf0
}
    e99c:	bd08      	pop	{r3, pc}
    e99e:	bf00      	nop
    e9a0:	0001c0ec 	.word	0x0001c0ec
    e9a4:	0001b908 	.word	0x0001b908
    e9a8:	0001b844 	.word	0x0001b844

0000e9ac <llcp_lr_disconnect>:

void llcp_lr_disconnect(struct ll_conn *conn)
{
	lr_execute_fsm(conn, LR_EVT_DISCONNECT, NULL);
    e9ac:	2103      	movs	r1, #3
    e9ae:	f7ff bed3 	b.w	e758 <lr_execute_fsm.constprop.0>
    e9b2:	bf00      	nop

0000e9b4 <llcp_lr_abort>:
}

void llcp_lr_abort(struct ll_conn *conn)
{
    e9b4:	b538      	push	{r3, r4, r5, lr}
    e9b6:	4604      	mov	r4, r0
	struct proc_ctx *ctx;

	/* Flush all pending procedures */
	ctx = lr_dequeue(conn);
    e9b8:	f7ff fd72 	bl	e4a0 <lr_dequeue>
	while (ctx) {
    e9bc:	b130      	cbz	r0, e9cc <llcp_lr_abort+0x18>
		llcp_proc_ctx_release(ctx);
    e9be:	f7fe fc53 	bl	d268 <llcp_proc_ctx_release>
		ctx = lr_dequeue(conn);
    e9c2:	4620      	mov	r0, r4
    e9c4:	f7ff fd6c 	bl	e4a0 <lr_dequeue>
	while (ctx) {
    e9c8:	2800      	cmp	r0, #0
    e9ca:	d1f8      	bne.n	e9be <llcp_lr_abort+0xa>
	conn->llcp.local.prt_expire = 0U;
    e9cc:	2500      	movs	r5, #0
    e9ce:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
	}

	llcp_lr_prt_stop(conn);
	llcp_rr_set_incompat(conn, 0U);
    e9d2:	4629      	mov	r1, r5
    e9d4:	4620      	mov	r0, r4
    e9d6:	f001 faab 	bl	ff30 <llcp_rr_set_incompat>
	conn->llcp.local.state = state;
    e9da:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
	lr_set_state(conn, LR_STATE_IDLE);
}
    e9de:	bd38      	pop	{r3, r4, r5, pc}

0000e9e0 <llcp_pdu_encode_ping_req>:
 * LE Ping Procedure Helpers
 */

void llcp_pdu_encode_ping_req(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    e9e0:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_req);
    e9e2:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    e9e4:	2212      	movs	r2, #18
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    e9e6:	f043 0303 	orr.w	r3, r3, #3
    e9ea:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_req);
    e9ec:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    e9ee:	70c2      	strb	r2, [r0, #3]
}
    e9f0:	4770      	bx	lr
    e9f2:	bf00      	nop

0000e9f4 <llcp_pdu_encode_ping_rsp>:

void llcp_pdu_encode_ping_rsp(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    e9f4:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_rsp);
    e9f6:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    e9f8:	2213      	movs	r2, #19
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    e9fa:	f043 0303 	orr.w	r3, r3, #3
    e9fe:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_rsp);
    ea00:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    ea02:	70c2      	strb	r2, [r0, #3]
}
    ea04:	4770      	bx	lr
    ea06:	bf00      	nop

0000ea08 <llcp_pdu_encode_unknown_rsp>:
 * Unknown response helper
 */

void llcp_pdu_encode_unknown_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ea08:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
    ea0a:	f04f 0c02 	mov.w	ip, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ea0e:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    ea12:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ea14:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
    ea16:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    ea1a:	70ca      	strb	r2, [r1, #3]

	pdu->llctrl.unknown_rsp.type = ctx->unknown_response.type;
    ea1c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    ea20:	710b      	strb	r3, [r1, #4]
}
    ea22:	4770      	bx	lr

0000ea24 <llcp_pdu_decode_unknown_rsp>:

void llcp_pdu_decode_unknown_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->unknown_response.type = pdu->llctrl.unknown_rsp.type;
    ea24:	790b      	ldrb	r3, [r1, #4]
    ea26:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
}
    ea2a:	4770      	bx	lr

0000ea2c <llcp_ntf_encode_unknown_rsp>:

void llcp_ntf_encode_unknown_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_unknown_rsp *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ea2c:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
    ea2e:	f04f 0c02 	mov.w	ip, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ea32:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    ea36:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ea38:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
    ea3a:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    ea3e:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.unknown_rsp;
	p->type = ctx->unknown_response.type;
    ea40:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    ea44:	710b      	strb	r3, [r1, #4]
}
    ea46:	4770      	bx	lr

0000ea48 <llcp_pdu_encode_feature_req>:

	*featuresout = feat;
}

void llcp_pdu_encode_feature_req(struct ll_conn *conn, struct pdu_data *pdu)
{
    ea48:	b510      	push	{r4, lr}
	struct pdu_data_llctrl_feature_req *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ea4a:	780b      	ldrb	r3, [r1, #0]
{
    ea4c:	460c      	mov	r4, r1
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_req);
    ea4e:	2209      	movs	r2, #9
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_REQ;
    ea50:	2108      	movs	r1, #8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ea52:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_REQ;
    ea56:	70e1      	strb	r1, [r4, #3]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_req);
    ea58:	7062      	strb	r2, [r4, #1]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ea5a:	7023      	strb	r3, [r4, #0]

#if defined(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) && defined(CONFIG_BT_PERIPHERAL)
	if (conn->lll.role == BT_HCI_ROLE_PERIPHERAL) {
    ea5c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PER_INIT_FEAT_XCHG;
    ea60:	2b00      	cmp	r3, #0
    ea62:	bfac      	ite	ge
    ea64:	460b      	movge	r3, r1
    ea66:	230e      	movlt	r3, #14
    ea68:	70e3      	strb	r3, [r4, #3]
	}
#endif /* CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG && CONFIG_BT_PERIPHERAL */

	p = &pdu->llctrl.feature_req;
	sys_put_le64(ll_feat_get(), p->features);
    ea6a:	f7f9 f90b 	bl	7c84 <ll_feat_get>
	dst[0] = val;
    ea6e:	2200      	movs	r2, #0
    ea70:	f361 0207 	bfi	r2, r1, #0, #8
	dst[1] = val >> 8;
    ea74:	f3c1 2c07 	ubfx	ip, r1, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    ea78:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
    ea7a:	f36c 220f 	bfi	r2, ip, #8, #8
    ea7e:	f363 4217 	bfi	r2, r3, #16, #8
	dst[1] = val >> 8;
    ea82:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
    ea84:	f363 621f 	bfi	r2, r3, #24, #8
    ea88:	6060      	str	r0, [r4, #4]
    ea8a:	60a2      	str	r2, [r4, #8]
}
    ea8c:	bd10      	pop	{r4, pc}
    ea8e:	bf00      	nop

0000ea90 <llcp_pdu_encode_feature_rsp>:

void llcp_pdu_encode_feature_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
    ea90:	b538      	push	{r3, r4, r5, lr}
    ea92:	460c      	mov	r4, r1
    ea94:	4605      	mov	r5, r0
	struct pdu_data_llctrl_feature_rsp *p;
	uint64_t feature_rsp = ll_feat_get();
    ea96:	f7f9 f8f5 	bl	7c84 <ll_feat_get>

	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ea9a:	7823      	ldrb	r3, [r4, #0]
    ea9c:	f043 0303 	orr.w	r3, r3, #3
    eaa0:	7023      	strb	r3, [r4, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_rsp);
    eaa2:	2309      	movs	r3, #9
    eaa4:	7063      	strb	r3, [r4, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    eaa6:	70e3      	strb	r3, [r4, #3]

	/*
	 * we only filter on octet 0, remaining 7 octets are the features
	 * we support, as defined in LL_FEAT
	 */
	feature_rsp &= (FEAT_FILT_OCTET0 | conn->llcp.fex.features_used);
    eaa8:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    eaac:	7221      	strb	r1, [r4, #8]
    eaae:	f063 03ff 	orn	r3, r3, #255	; 0xff
    eab2:	4018      	ands	r0, r3
	sys_put_le16(val >> 16, &dst[2]);
    eab4:	0c02      	lsrs	r2, r0, #16
    eab6:	0c0b      	lsrs	r3, r1, #16
	dst[1] = val >> 8;
    eab8:	f3c0 2507 	ubfx	r5, r0, #8, #8
	dst[0] = val;
    eabc:	7120      	strb	r0, [r4, #4]
	dst[1] = val >> 8;
    eabe:	f3c1 2107 	ubfx	r1, r1, #8, #8
    eac2:	0a10      	lsrs	r0, r2, #8
	dst[0] = val;
    eac4:	71a2      	strb	r2, [r4, #6]
	dst[1] = val >> 8;
    eac6:	0a1a      	lsrs	r2, r3, #8
    eac8:	71e0      	strb	r0, [r4, #7]
    eaca:	7165      	strb	r5, [r4, #5]
    eacc:	7261      	strb	r1, [r4, #9]
	dst[0] = val;
    eace:	72a3      	strb	r3, [r4, #10]
	dst[1] = val >> 8;
    ead0:	72e2      	strb	r2, [r4, #11]

	sys_put_le64(feature_rsp, p->features);
}
    ead2:	bd38      	pop	{r3, r4, r5, pc}

0000ead4 <llcp_ntf_encode_feature_rsp>:

void llcp_ntf_encode_feature_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_feature_rsp *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ead4:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_rsp);
    ead6:	2209      	movs	r2, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ead8:	f043 0303 	orr.w	r3, r3, #3
    eadc:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_rsp);
    eade:	704a      	strb	r2, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    eae0:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.feature_rsp;

	sys_put_le64(conn->llcp.fex.features_peer, p->features);
    eae2:	e9d0 234a 	ldrd	r2, r3, [r0, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
    eae6:	0c10      	lsrs	r0, r2, #16
	dst[1] = val >> 8;
    eae8:	f3c2 2c07 	ubfx	ip, r2, #8, #8
	dst[0] = val;
    eaec:	710a      	strb	r2, [r1, #4]
	sys_put_le16(val >> 16, &dst[2]);
    eaee:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
    eaf0:	f881 c005 	strb.w	ip, [r1, #5]
	dst[0] = val;
    eaf4:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
    eaf6:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	dst[0] = val;
    eafa:	720b      	strb	r3, [r1, #8]
	dst[1] = val >> 8;
    eafc:	f3c3 2007 	ubfx	r0, r3, #8, #8
    eb00:	0a13      	lsrs	r3, r2, #8
    eb02:	f881 c007 	strb.w	ip, [r1, #7]
    eb06:	7248      	strb	r0, [r1, #9]
	dst[0] = val;
    eb08:	728a      	strb	r2, [r1, #10]
	dst[1] = val >> 8;
    eb0a:	72cb      	strb	r3, [r1, #11]
}
    eb0c:	4770      	bx	lr
    eb0e:	bf00      	nop

0000eb10 <llcp_pdu_decode_feature_req>:

void llcp_pdu_decode_feature_req(struct ll_conn *conn, struct pdu_data *pdu)
{
    eb10:	b570      	push	{r4, r5, r6, lr}
	feat &= LL_FEAT_BIT_MASK_VALID;
    eb12:	4e0c      	ldr	r6, [pc, #48]	; (eb44 <llcp_pdu_decode_feature_req+0x34>)
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    eb14:	684b      	ldr	r3, [r1, #4]
    eb16:	688d      	ldr	r5, [r1, #8]
{
    eb18:	4604      	mov	r4, r0
	feat &= LL_FEAT_BIT_MASK_VALID;
    eb1a:	401e      	ands	r6, r3
	uint64_t featureset;

	feature_filter(pdu->llctrl.feature_req.features, &featureset);
	conn->llcp.fex.features_used = ll_feat_get() & featureset;
    eb1c:	f7f9 f8b2 	bl	7c84 <ll_feat_get>
    eb20:	ea00 0306 	and.w	r3, r0, r6
    eb24:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130

	featureset &= (FEAT_FILT_OCTET0 | conn->llcp.fex.features_used);
    eb28:	f063 03ff 	orn	r3, r3, #255	; 0xff
	feat &= LL_FEAT_BIT_MASK_VALID;
    eb2c:	f005 05ef 	and.w	r5, r5, #239	; 0xef
	featureset &= (FEAT_FILT_OCTET0 | conn->llcp.fex.features_used);
    eb30:	4033      	ands	r3, r6
	conn->llcp.fex.features_peer = featureset;
    eb32:	e9c4 354a 	strd	r3, r5, [r4, #296]	; 0x128
	conn->llcp.fex.features_used = ll_feat_get() & featureset;
    eb36:	4029      	ands	r1, r5

	conn->llcp.fex.valid = 1;
    eb38:	2201      	movs	r2, #1
	conn->llcp.fex.features_used = ll_feat_get() & featureset;
    eb3a:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	conn->llcp.fex.valid = 1;
    eb3e:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
}
    eb42:	bd70      	pop	{r4, r5, r6, pc}
    eb44:	f787cf2f 	.word	0xf787cf2f

0000eb48 <llcp_pdu_decode_feature_rsp>:

void llcp_pdu_decode_feature_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
    eb48:	b570      	push	{r4, r5, r6, lr}
	feat &= LL_FEAT_BIT_MASK_VALID;
    eb4a:	4e0a      	ldr	r6, [pc, #40]	; (eb74 <llcp_pdu_decode_feature_rsp+0x2c>)
    eb4c:	684b      	ldr	r3, [r1, #4]
    eb4e:	688d      	ldr	r5, [r1, #8]
{
    eb50:	4604      	mov	r4, r0
	feat &= LL_FEAT_BIT_MASK_VALID;
    eb52:	401e      	ands	r6, r3
	uint64_t featureset;

	feature_filter(pdu->llctrl.feature_rsp.features, &featureset);
	conn->llcp.fex.features_used = ll_feat_get() & featureset;
    eb54:	f7f9 f896 	bl	7c84 <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK_VALID;
    eb58:	f005 05ef 	and.w	r5, r5, #239	; 0xef

	conn->llcp.fex.features_peer = featureset;
    eb5c:	e9c4 654a 	strd	r6, r5, [r4, #296]	; 0x128
	conn->llcp.fex.features_used = ll_feat_get() & featureset;
    eb60:	4030      	ands	r0, r6
    eb62:	4029      	ands	r1, r5
	conn->llcp.fex.valid = 1;
    eb64:	2301      	movs	r3, #1
	conn->llcp.fex.features_used = ll_feat_get() & featureset;
    eb66:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    eb6a:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	conn->llcp.fex.valid = 1;
    eb6e:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
}
    eb72:	bd70      	pop	{r4, r5, r6, pc}
    eb74:	f787cf2f 	.word	0xf787cf2f

0000eb78 <llcp_pdu_encode_min_used_chans_ind>:
#if defined(CONFIG_BT_PERIPHERAL)
void llcp_pdu_encode_min_used_chans_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_min_used_chans_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
    eb78:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(min_used_chans_ind);
    eb7a:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    eb7e:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND;
    eb82:	2219      	movs	r2, #25
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    eb84:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(min_used_chans_ind);
    eb86:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND;
    eb8a:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.min_used_chans_ind;
	p->phys = ctx->data.muc.phys;
    eb8c:	7f03      	ldrb	r3, [r0, #28]
    eb8e:	710b      	strb	r3, [r1, #4]
	p->min_used_chans = ctx->data.muc.min_used_chans;
    eb90:	7f43      	ldrb	r3, [r0, #29]
    eb92:	714b      	strb	r3, [r1, #5]
}
    eb94:	4770      	bx	lr
    eb96:	bf00      	nop

0000eb98 <llcp_pdu_encode_terminate_ind>:
 */
void llcp_pdu_encode_terminate_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_terminate_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
    eb98:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(terminate_ind);
    eb9a:	2202      	movs	r2, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    eb9c:	f043 0303 	orr.w	r3, r3, #3
    eba0:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(terminate_ind);
    eba2:	704a      	strb	r2, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
    eba4:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.terminate_ind;
	p->error_code = ctx->data.term.error_code;
    eba6:	7f03      	ldrb	r3, [r0, #28]
    eba8:	710b      	strb	r3, [r1, #4]
}
    ebaa:	4770      	bx	lr

0000ebac <llcp_pdu_decode_terminate_ind>:

void llcp_pdu_decode_terminate_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.term.error_code = pdu->llctrl.terminate_ind.error_code;
    ebac:	790b      	ldrb	r3, [r1, #4]
    ebae:	7703      	strb	r3, [r0, #28]
}
    ebb0:	4770      	bx	lr
    ebb2:	bf00      	nop

0000ebb4 <llcp_pdu_encode_version_ind>:
{
	uint16_t cid;
	uint16_t svn;
	struct pdu_data_llctrl_version_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ebb4:	7803      	ldrb	r3, [r0, #0]

	p = &pdu->llctrl.version_ind;
	p->version_number = LL_VERSION_NUMBER;
	cid = sys_cpu_to_le16(ll_settings_company_id());
	svn = sys_cpu_to_le16(ll_settings_subversion_number());
	p->company_id = cid;
    ebb6:	4a07      	ldr	r2, [pc, #28]	; (ebd4 <llcp_pdu_encode_version_ind+0x20>)
    ebb8:	f8c0 2005 	str.w	r2, [r0, #5]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
    ebbc:	f04f 0c06 	mov.w	ip, #6
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ebc0:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    ebc4:	f640 510c 	movw	r1, #3340	; 0xd0c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ebc8:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
    ebca:	f880 c001 	strb.w	ip, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    ebce:	f8a0 1003 	strh.w	r1, [r0, #3]
	p->sub_version_number = svn;
}
    ebd2:	4770      	bx	lr
    ebd4:	ffff05f1 	.word	0xffff05f1

0000ebd8 <llcp_ntf_encode_version_ind>:

void llcp_ntf_encode_version_ind(struct ll_conn *conn, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_version_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ebd8:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
    ebda:	f04f 0c06 	mov.w	ip, #6
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ebde:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    ebe2:	220c      	movs	r2, #12
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ebe4:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
    ebe6:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    ebea:	70ca      	strb	r2, [r1, #3]

	p = &pdu->llctrl.version_ind;
	p->version_number = conn->llcp.vex.cached.version_number;
    ebec:	f890 3116 	ldrb.w	r3, [r0, #278]	; 0x116
    ebf0:	710b      	strb	r3, [r1, #4]
	p->company_id = sys_cpu_to_le16(conn->llcp.vex.cached.company_id);
    ebf2:	f8b0 3117 	ldrh.w	r3, [r0, #279]	; 0x117
    ebf6:	f8a1 3005 	strh.w	r3, [r1, #5]
	p->sub_version_number = sys_cpu_to_le16(conn->llcp.vex.cached.sub_version_number);
    ebfa:	f8b0 3119 	ldrh.w	r3, [r0, #281]	; 0x119
    ebfe:	f8a1 3007 	strh.w	r3, [r1, #7]
}
    ec02:	4770      	bx	lr

0000ec04 <llcp_pdu_decode_version_ind>:

void llcp_pdu_decode_version_ind(struct ll_conn *conn, struct pdu_data *pdu)
{
	conn->llcp.vex.valid = 1;
    ec04:	2301      	movs	r3, #1
    ec06:	f880 3115 	strb.w	r3, [r0, #277]	; 0x115
	conn->llcp.vex.cached.version_number = pdu->llctrl.version_ind.version_number;
    ec0a:	790b      	ldrb	r3, [r1, #4]
    ec0c:	f880 3116 	strb.w	r3, [r0, #278]	; 0x116
	conn->llcp.vex.cached.company_id = sys_le16_to_cpu(pdu->llctrl.version_ind.company_id);
    ec10:	f8b1 3005 	ldrh.w	r3, [r1, #5]
    ec14:	f8a0 3117 	strh.w	r3, [r0, #279]	; 0x117
	conn->llcp.vex.cached.sub_version_number =
		sys_le16_to_cpu(pdu->llctrl.version_ind.sub_version_number);
    ec18:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.vex.cached.sub_version_number =
    ec1c:	f8a0 3119 	strh.w	r3, [r0, #281]	; 0x119
}
    ec20:	4770      	bx	lr
    ec22:	bf00      	nop

0000ec24 <llcp_ntf_encode_enc_req>:
}
#endif /* CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_PERIPHERAL)
void llcp_ntf_encode_enc_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
    ec24:	b538      	push	{r3, r4, r5, lr}
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ec26:	780b      	ldrb	r3, [r1, #0]
{
    ec28:	460c      	mov	r4, r1
    ec2a:	4605      	mov	r5, r0
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ec2c:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_req);
    ec30:	2117      	movs	r1, #23
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    ec32:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ec34:	7023      	strb	r3, [r4, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_req);
    ec36:	7061      	strb	r1, [r4, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    ec38:	70e2      	strb	r2, [r4, #3]
	memcpy(p->rand, ctx->data.enc.rand, sizeof(p->rand));
    ec3a:	f100 011d 	add.w	r1, r0, #29
    ec3e:	2208      	movs	r2, #8
    ec40:	1d20      	adds	r0, r4, #4
    ec42:	f008 fedb 	bl	179fc <memcpy>
	p->ediv[0] = ctx->data.enc.ediv[0];
    ec46:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    ec4a:	7323      	strb	r3, [r4, #12]
	p->ediv[1] = ctx->data.enc.ediv[1];
    ec4c:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    ec50:	7363      	strb	r3, [r4, #13]
	encode_enc_req(ctx, pdu);
}
    ec52:	bd38      	pop	{r3, r4, r5, pc}

0000ec54 <llcp_pdu_encode_enc_rsp>:

void llcp_pdu_encode_enc_rsp(struct pdu_data *pdu)
{
    ec54:	b510      	push	{r4, lr}
	struct pdu_data_llctrl_enc_rsp *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ec56:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_rsp);
    ec58:	210d      	movs	r1, #13
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    ec5a:	2204      	movs	r2, #4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ec5c:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_rsp);
    ec60:	7041      	strb	r1, [r0, #1]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ec62:	7003      	strb	r3, [r0, #0]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    ec64:	70c2      	strb	r2, [r0, #3]
	p = &pdu->llctrl.enc_rsp;
	/* Optimal getting random data, p->ivs is packed right after p->skds */
	BUILD_ASSERT(offsetof(struct pdu_data_llctrl_enc_rsp, ivs) ==
		     offsetof(struct pdu_data_llctrl_enc_rsp, skds) + sizeof(p->skds),
		     "Member IVS must be after member SKDS");
	csrand_get(p->skds, sizeof(p->skds) + sizeof(p->ivs));
    ec66:	1884      	adds	r4, r0, r2
	if (k_is_in_isr()) {
    ec68:	f00b fc95 	bl	1a596 <k_is_in_isr>
		return lll_csrand_isr_get(buf, len);
    ec6c:	210c      	movs	r1, #12
	if (k_is_in_isr()) {
    ec6e:	b120      	cbz	r0, ec7a <llcp_pdu_encode_enc_rsp+0x26>
		return lll_csrand_isr_get(buf, len);
    ec70:	4620      	mov	r0, r4
}
    ec72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return lll_csrand_isr_get(buf, len);
    ec76:	f001 becf 	b.w	10a18 <lll_csrand_isr_get>
		return lll_csrand_get(buf, len);
    ec7a:	4620      	mov	r0, r4
}
    ec7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return lll_csrand_get(buf, len);
    ec80:	f001 bec0 	b.w	10a04 <lll_csrand_get>

0000ec84 <llcp_pdu_encode_start_enc_req>:

void llcp_pdu_encode_start_enc_req(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ec84:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_req);
    ec86:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_REQ;
    ec88:	2205      	movs	r2, #5
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ec8a:	f043 0303 	orr.w	r3, r3, #3
    ec8e:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_req);
    ec90:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_REQ;
    ec92:	70c2      	strb	r2, [r0, #3]
}
    ec94:	4770      	bx	lr
    ec96:	bf00      	nop

0000ec98 <llcp_pdu_encode_start_enc_rsp>:
#endif /* CONFIG_BT_PERIPHERAL */

void llcp_pdu_encode_start_enc_rsp(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ec98:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_rsp);
    ec9a:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    ec9c:	2206      	movs	r2, #6
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ec9e:	f043 0303 	orr.w	r3, r3, #3
    eca2:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_rsp);
    eca4:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    eca6:	70c2      	strb	r2, [r0, #3]
}
    eca8:	4770      	bx	lr
    ecaa:	bf00      	nop

0000ecac <llcp_pdu_encode_pause_enc_rsp>:
}
#endif /* CONFIG_BT_CENTRAL */

void llcp_pdu_encode_pause_enc_rsp(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ecac:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(pause_enc_rsp);
    ecae:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    ecb0:	220b      	movs	r2, #11
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ecb2:	f043 0303 	orr.w	r3, r3, #3
    ecb6:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(pause_enc_rsp);
    ecb8:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    ecba:	70c2      	strb	r2, [r0, #3]
}
    ecbc:	4770      	bx	lr
    ecbe:	bf00      	nop

0000ecc0 <llcp_pdu_encode_reject_ind>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

void llcp_pdu_encode_reject_ind(struct pdu_data *pdu, uint8_t error_code)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ecc0:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ind);
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
	pdu->llctrl.reject_ind.error_code = error_code;
    ecc2:	7101      	strb	r1, [r0, #4]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ind);
    ecc4:	f04f 0c02 	mov.w	ip, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ecc8:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    eccc:	220d      	movs	r2, #13
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ecce:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ind);
    ecd0:	f880 c001 	strb.w	ip, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    ecd4:	70c2      	strb	r2, [r0, #3]
}
    ecd6:	4770      	bx	lr

0000ecd8 <llcp_pdu_encode_reject_ext_ind>:

void llcp_pdu_encode_reject_ext_ind(struct pdu_data *pdu, uint8_t reject_opcode, uint8_t error_code)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ecd8:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ext_ind);
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    ecda:	7101      	strb	r1, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ecdc:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ext_ind);
    ece0:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ece4:	7003      	strb	r3, [r0, #0]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    ece6:	2311      	movs	r3, #17
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ext_ind);
    ece8:	f880 c001 	strb.w	ip, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    ecec:	70c3      	strb	r3, [r0, #3]
	pdu->llctrl.reject_ext_ind.error_code = error_code;
    ecee:	7142      	strb	r2, [r0, #5]
}
    ecf0:	4770      	bx	lr
    ecf2:	bf00      	nop

0000ecf4 <llcp_pdu_decode_reject_ext_ind>:

void llcp_pdu_decode_reject_ext_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->reject_ext_ind.reject_opcode = pdu->llctrl.reject_ext_ind.reject_opcode;
    ecf4:	790b      	ldrb	r3, [r1, #4]
    ecf6:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
	ctx->reject_ext_ind.error_code = pdu->llctrl.reject_ext_ind.error_code;
    ecfa:	794b      	ldrb	r3, [r1, #5]
    ecfc:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
}
    ed00:	4770      	bx	lr
    ed02:	bf00      	nop

0000ed04 <llcp_pdu_encode_phy_req>:
 * PHY Update Procedure Helper
 */

void llcp_pdu_encode_phy_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ed04:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_req);
    ed06:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ed0a:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    ed0e:	2216      	movs	r2, #22
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ed10:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_req);
    ed12:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    ed16:	70ca      	strb	r2, [r1, #3]
	pdu->llctrl.phy_req.rx_phys = ctx->data.pu.rx;
    ed18:	7f03      	ldrb	r3, [r0, #28]
    ed1a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ed1e:	714b      	strb	r3, [r1, #5]
	pdu->llctrl.phy_req.tx_phys = ctx->data.pu.tx;
    ed20:	7f03      	ldrb	r3, [r0, #28]
    ed22:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ed26:	710b      	strb	r3, [r1, #4]
}
    ed28:	4770      	bx	lr
    ed2a:	bf00      	nop

0000ed2c <llcp_pdu_decode_phy_req>:

void llcp_pdu_decode_phy_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.pu.rx = pdu->llctrl.phy_req.tx_phys;
    ed2c:	790a      	ldrb	r2, [r1, #4]
    ed2e:	7f03      	ldrb	r3, [r0, #28]
    ed30:	f362 03c5 	bfi	r3, r2, #3, #3
    ed34:	7703      	strb	r3, [r0, #28]
	ctx->data.pu.tx = pdu->llctrl.phy_req.rx_phys;
    ed36:	794a      	ldrb	r2, [r1, #5]
    ed38:	f362 0302 	bfi	r3, r2, #0, #3
    ed3c:	7703      	strb	r3, [r0, #28]
}
    ed3e:	4770      	bx	lr

0000ed40 <llcp_pdu_encode_phy_rsp>:

#if defined(CONFIG_BT_PERIPHERAL)
void llcp_pdu_encode_phy_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ed40:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_rsp);
    ed42:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ed46:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    ed4a:	2217      	movs	r2, #23
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ed4c:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_rsp);
    ed4e:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    ed52:	70ca      	strb	r2, [r1, #3]
	pdu->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    ed54:	f890 318c 	ldrb.w	r3, [r0, #396]	; 0x18c
    ed58:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ed5c:	714b      	strb	r3, [r1, #5]
	pdu->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    ed5e:	f890 318c 	ldrb.w	r3, [r0, #396]	; 0x18c
    ed62:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ed66:	710b      	strb	r3, [r1, #4]
}
    ed68:	4770      	bx	lr
    ed6a:	bf00      	nop

0000ed6c <llcp_pdu_decode_phy_update_ind>:
void llcp_pdu_decode_phy_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.pu.instant = sys_le16_to_cpu(pdu->llctrl.phy_upd_ind.instant);
    ed6c:	88cb      	ldrh	r3, [r1, #6]
    ed6e:	8403      	strh	r3, [r0, #32]
	ctx->data.pu.c_to_p_phy = pdu->llctrl.phy_upd_ind.c_to_p_phy;
    ed70:	790b      	ldrb	r3, [r1, #4]
    ed72:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	ctx->data.pu.p_to_c_phy = pdu->llctrl.phy_upd_ind.p_to_c_phy;
    ed76:	794b      	ldrb	r3, [r1, #5]
    ed78:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
}
    ed7c:	4770      	bx	lr
    ed7e:	bf00      	nop

0000ed80 <llcp_pdu_encode_conn_param_req>:
 */
static void encode_conn_param_req_rsp_common(struct proc_ctx *ctx, struct pdu_data *pdu,
					     struct pdu_data_llctrl_conn_param_req_rsp_common *p,
					     uint8_t opcode)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ed80:	780b      	ldrb	r3, [r1, #0]
	/* The '+ 1U' is to count in opcode octet, the first member of struct pdu_data_llctrl */
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
    ed82:	f04f 0c18 	mov.w	ip, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ed86:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
    ed8a:	220f      	movs	r2, #15
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ed8c:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
    ed8e:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
    ed92:	70ca      	strb	r2, [r1, #3]

	p->interval_min = sys_cpu_to_le16(ctx->data.cu.interval_min);
    ed94:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    ed96:	808b      	strh	r3, [r1, #4]
	p->interval_max = sys_cpu_to_le16(ctx->data.cu.interval_max);
    ed98:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    ed9a:	80cb      	strh	r3, [r1, #6]
	p->latency = sys_cpu_to_le16(ctx->data.cu.latency);
    ed9c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    ed9e:	810b      	strh	r3, [r1, #8]
	p->timeout = sys_cpu_to_le16(ctx->data.cu.timeout);
    eda0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    eda2:	814b      	strh	r3, [r1, #10]
	p->preferred_periodicity = ctx->data.cu.preferred_periodicity;
    eda4:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    eda8:	730b      	strb	r3, [r1, #12]
	p->reference_conn_event_count = sys_cpu_to_le16(ctx->data.cu.reference_conn_event_count);
    edaa:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    edac:	f8a1 300d 	strh.w	r3, [r1, #13]
	p->offset0 = sys_cpu_to_le16(ctx->data.cu.offsets[0]);
    edb0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    edb2:	f8a1 300f 	strh.w	r3, [r1, #15]
	p->offset1 = sys_cpu_to_le16(ctx->data.cu.offsets[1]);
    edb6:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    edb8:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset2 = sys_cpu_to_le16(ctx->data.cu.offsets[2]);
    edbc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    edbe:	f8a1 3013 	strh.w	r3, [r1, #19]
	p->offset3 = sys_cpu_to_le16(ctx->data.cu.offsets[3]);
    edc2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    edc4:	f8a1 3015 	strh.w	r3, [r1, #21]
	p->offset4 = sys_cpu_to_le16(ctx->data.cu.offsets[4]);
    edc8:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
    edca:	f8a1 3017 	strh.w	r3, [r1, #23]
	p->offset5 = sys_cpu_to_le16(ctx->data.cu.offsets[5]);
    edce:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    edd0:	f8a1 3019 	strh.w	r3, [r1, #25]
void llcp_pdu_encode_conn_param_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	encode_conn_param_req_rsp_common(ctx, pdu,
		(struct pdu_data_llctrl_conn_param_req_rsp_common *)&pdu->llctrl.conn_param_req,
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ);
}
    edd4:	4770      	bx	lr
    edd6:	bf00      	nop

0000edd8 <llcp_pdu_encode_conn_param_rsp>:
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    edd8:	780b      	ldrb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
    edda:	f04f 0c18 	mov.w	ip, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    edde:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
    ede2:	2210      	movs	r2, #16
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ede4:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
    ede6:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
    edea:	70ca      	strb	r2, [r1, #3]
	p->interval_min = sys_cpu_to_le16(ctx->data.cu.interval_min);
    edec:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    edee:	808b      	strh	r3, [r1, #4]
	p->interval_max = sys_cpu_to_le16(ctx->data.cu.interval_max);
    edf0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    edf2:	80cb      	strh	r3, [r1, #6]
	p->latency = sys_cpu_to_le16(ctx->data.cu.latency);
    edf4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    edf6:	810b      	strh	r3, [r1, #8]
	p->timeout = sys_cpu_to_le16(ctx->data.cu.timeout);
    edf8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    edfa:	814b      	strh	r3, [r1, #10]
	p->preferred_periodicity = ctx->data.cu.preferred_periodicity;
    edfc:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    ee00:	730b      	strb	r3, [r1, #12]
	p->reference_conn_event_count = sys_cpu_to_le16(ctx->data.cu.reference_conn_event_count);
    ee02:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    ee04:	f8a1 300d 	strh.w	r3, [r1, #13]
	p->offset0 = sys_cpu_to_le16(ctx->data.cu.offsets[0]);
    ee08:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    ee0a:	f8a1 300f 	strh.w	r3, [r1, #15]
	p->offset1 = sys_cpu_to_le16(ctx->data.cu.offsets[1]);
    ee0e:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    ee10:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset2 = sys_cpu_to_le16(ctx->data.cu.offsets[2]);
    ee14:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    ee16:	f8a1 3013 	strh.w	r3, [r1, #19]
	p->offset3 = sys_cpu_to_le16(ctx->data.cu.offsets[3]);
    ee1a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    ee1c:	f8a1 3015 	strh.w	r3, [r1, #21]
	p->offset4 = sys_cpu_to_le16(ctx->data.cu.offsets[4]);
    ee20:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
    ee22:	f8a1 3017 	strh.w	r3, [r1, #23]
	p->offset5 = sys_cpu_to_le16(ctx->data.cu.offsets[5]);
    ee26:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    ee28:	f8a1 3019 	strh.w	r3, [r1, #25]
void llcp_pdu_encode_conn_param_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	encode_conn_param_req_rsp_common(ctx, pdu,
		(struct pdu_data_llctrl_conn_param_req_rsp_common *)&pdu->llctrl.conn_param_rsp,
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP);
}
    ee2c:	4770      	bx	lr
    ee2e:	bf00      	nop

0000ee30 <llcp_pdu_decode_conn_param_req>:

static void decode_conn_param_req_rsp_common(struct proc_ctx *ctx,
					     struct pdu_data_llctrl_conn_param_req_rsp_common *p)
{
	ctx->data.cu.interval_min = sys_le16_to_cpu(p->interval_min);
    ee30:	888b      	ldrh	r3, [r1, #4]
    ee32:	84c3      	strh	r3, [r0, #38]	; 0x26
	ctx->data.cu.interval_max = sys_le16_to_cpu(p->interval_max);
    ee34:	88cb      	ldrh	r3, [r1, #6]
    ee36:	8503      	strh	r3, [r0, #40]	; 0x28
	ctx->data.cu.latency = sys_le16_to_cpu(p->latency);
    ee38:	890b      	ldrh	r3, [r1, #8]
    ee3a:	8543      	strh	r3, [r0, #42]	; 0x2a
	ctx->data.cu.timeout = sys_le16_to_cpu(p->timeout);
    ee3c:	894b      	ldrh	r3, [r1, #10]
    ee3e:	8583      	strh	r3, [r0, #44]	; 0x2c
	ctx->data.cu.preferred_periodicity = p->preferred_periodicity;
    ee40:	7b0b      	ldrb	r3, [r1, #12]
    ee42:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
	ctx->data.cu.reference_conn_event_count = sys_le16_to_cpu(p->reference_conn_event_count);
    ee46:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    ee4a:	8603      	strh	r3, [r0, #48]	; 0x30
	ctx->data.cu.offsets[0] = sys_le16_to_cpu(p->offset0);
    ee4c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    ee50:	8643      	strh	r3, [r0, #50]	; 0x32
	ctx->data.cu.offsets[1] = sys_le16_to_cpu(p->offset1);
    ee52:	f8b1 3011 	ldrh.w	r3, [r1, #17]
    ee56:	8683      	strh	r3, [r0, #52]	; 0x34
	ctx->data.cu.offsets[2] = sys_le16_to_cpu(p->offset2);
    ee58:	f8b1 3013 	ldrh.w	r3, [r1, #19]
    ee5c:	86c3      	strh	r3, [r0, #54]	; 0x36
	ctx->data.cu.offsets[3] = sys_le16_to_cpu(p->offset3);
    ee5e:	f8b1 3015 	ldrh.w	r3, [r1, #21]
    ee62:	8703      	strh	r3, [r0, #56]	; 0x38
	ctx->data.cu.offsets[4] = sys_le16_to_cpu(p->offset4);
    ee64:	f8b1 3017 	ldrh.w	r3, [r1, #23]
    ee68:	8743      	strh	r3, [r0, #58]	; 0x3a
	ctx->data.cu.offsets[5] = sys_le16_to_cpu(p->offset5);
    ee6a:	f8b1 3019 	ldrh.w	r3, [r1, #25]
    ee6e:	8783      	strh	r3, [r0, #60]	; 0x3c

void llcp_pdu_decode_conn_param_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	decode_conn_param_req_rsp_common(ctx,
		(struct pdu_data_llctrl_conn_param_req_rsp_common *)&pdu->llctrl.conn_param_req);
}
    ee70:	4770      	bx	lr
    ee72:	bf00      	nop

0000ee74 <llcp_pdu_encode_conn_update_ind>:

void llcp_pdu_encode_conn_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_conn_update_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ee74:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(conn_update_ind);
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    ee76:	2200      	movs	r2, #0
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ee78:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(conn_update_ind);
    ee7c:	f04f 0c0c 	mov.w	ip, #12
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    ee80:	70ca      	strb	r2, [r1, #3]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ee82:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(conn_update_ind);
    ee84:	f881 c001 	strb.w	ip, [r1, #1]

	p = (void *)&pdu->llctrl.conn_update_ind;
	p->win_size = ctx->data.cu.win_size;
    ee88:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    ee8c:	710b      	strb	r3, [r1, #4]
	p->win_offset = sys_cpu_to_le16(ctx->data.cu.win_offset_us / CONN_INT_UNIT_US);
    ee8e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
    ee90:	4a09      	ldr	r2, [pc, #36]	; (eeb8 <llcp_pdu_encode_conn_update_ind+0x44>)
    ee92:	fba2 2303 	umull	r2, r3, r2, r3
    ee96:	0a9b      	lsrs	r3, r3, #10
    ee98:	f8a1 3005 	strh.w	r3, [r1, #5]
	p->latency = sys_cpu_to_le16(ctx->data.cu.latency);
    ee9c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    ee9e:	f8a1 3009 	strh.w	r3, [r1, #9]
	p->interval = sys_cpu_to_le16(ctx->data.cu.interval_max);
    eea2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    eea4:	f8a1 3007 	strh.w	r3, [r1, #7]
	p->timeout = sys_cpu_to_le16(ctx->data.cu.timeout);
    eea8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    eeaa:	f8a1 300b 	strh.w	r3, [r1, #11]
	p->instant = sys_cpu_to_le16(ctx->data.cu.instant);
    eeae:	8c03      	ldrh	r3, [r0, #32]
    eeb0:	f8a1 300d 	strh.w	r3, [r1, #13]
}
    eeb4:	4770      	bx	lr
    eeb6:	bf00      	nop
    eeb8:	d1b71759 	.word	0xd1b71759

0000eebc <llcp_pdu_decode_conn_update_ind>:
void llcp_pdu_decode_conn_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_conn_update_ind *p;

	p = (void *)&pdu->llctrl.conn_update_ind;
	ctx->data.cu.win_size = p->win_size;
    eebc:	790b      	ldrb	r3, [r1, #4]
    eebe:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	ctx->data.cu.win_offset_us = sys_le16_to_cpu(p->win_offset) * CONN_INT_UNIT_US;
    eec2:	f8b1 3005 	ldrh.w	r3, [r1, #5]
    eec6:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    eeca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    eece:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    eed2:	005b      	lsls	r3, r3, #1
    eed4:	8483      	strh	r3, [r0, #36]	; 0x24
	ctx->data.cu.latency = sys_le16_to_cpu(p->latency);
    eed6:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    eeda:	8543      	strh	r3, [r0, #42]	; 0x2a
	ctx->data.cu.interval_max = sys_le16_to_cpu(p->interval);
    eedc:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    eee0:	8503      	strh	r3, [r0, #40]	; 0x28
	ctx->data.cu.timeout = sys_le16_to_cpu(p->timeout);
    eee2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    eee6:	8583      	strh	r3, [r0, #44]	; 0x2c
	ctx->data.cu.instant = sys_le16_to_cpu(p->instant);
    eee8:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    eeec:	8403      	strh	r3, [r0, #32]
}
    eeee:	4770      	bx	lr

0000eef0 <llcp_pdu_decode_chan_map_update_ind>:
	memcpy(p->chm, ctx->data.chmu.chm, sizeof(p->chm));
}

void llcp_pdu_decode_chan_map_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.chmu.instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
    eef0:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    eef4:	8383      	strh	r3, [r0, #28]
	memcpy(ctx->data.chmu.chm, pdu->llctrl.chan_map_ind.chm, sizeof(ctx->data.chmu.chm));
    eef6:	2205      	movs	r2, #5
    eef8:	3104      	adds	r1, #4
    eefa:	301e      	adds	r0, #30
    eefc:	f008 bd7e 	b.w	179fc <memcpy>

0000ef00 <llcp_pdu_encode_length_req>:
static void encode_length_req_rsp_common(struct pdu_data *pdu,
					 struct pdu_data_llctrl_length_req_rsp_common *p,
					 const uint8_t opcode,
					 const struct data_pdu_length *dle)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ef00:	780b      	ldrb	r3, [r1, #0]
	/* The '+ 1U' is to count in opcode octet, the first member of struct pdu_data_llctrl */
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
    ef02:	f04f 0c09 	mov.w	ip, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ef06:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
    ef0a:	2214      	movs	r2, #20
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ef0c:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
    ef0e:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
    ef12:	70ca      	strb	r2, [r1, #3]
	p->max_rx_octets = sys_cpu_to_le16(dle->max_rx_octets);
    ef14:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    ef18:	808b      	strh	r3, [r1, #4]
	p->max_tx_octets = sys_cpu_to_le16(dle->max_tx_octets);
    ef1a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    ef1e:	810b      	strh	r3, [r1, #8]
	p->max_rx_time = sys_cpu_to_le16(dle->max_rx_time);
    ef20:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    ef24:	80cb      	strh	r3, [r1, #6]
	p->max_tx_time = sys_cpu_to_le16(dle->max_tx_time);
    ef26:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
    ef2a:	814b      	strh	r3, [r1, #10]
{
	encode_length_req_rsp_common(pdu,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_req,
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
		&conn->lll.dle.local);
}
    ef2c:	4770      	bx	lr
    ef2e:	bf00      	nop

0000ef30 <llcp_pdu_encode_length_rsp>:
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ef30:	780b      	ldrb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
    ef32:	f04f 0c09 	mov.w	ip, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ef36:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
    ef3a:	2215      	movs	r2, #21
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ef3c:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
    ef3e:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
    ef42:	70ca      	strb	r2, [r1, #3]
	p->max_rx_octets = sys_cpu_to_le16(dle->max_rx_octets);
    ef44:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    ef48:	808b      	strh	r3, [r1, #4]
	p->max_tx_octets = sys_cpu_to_le16(dle->max_tx_octets);
    ef4a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    ef4e:	810b      	strh	r3, [r1, #8]
	p->max_rx_time = sys_cpu_to_le16(dle->max_rx_time);
    ef50:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    ef54:	80cb      	strh	r3, [r1, #6]
	p->max_tx_time = sys_cpu_to_le16(dle->max_tx_time);
    ef56:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
    ef5a:	814b      	strh	r3, [r1, #10]
{
	encode_length_req_rsp_common(pdu,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_rsp,
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP,
		&conn->lll.dle.local);
}
    ef5c:	4770      	bx	lr
    ef5e:	bf00      	nop

0000ef60 <llcp_ntf_encode_length_change>:
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ef60:	780b      	ldrb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
    ef62:	f04f 0c09 	mov.w	ip, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ef66:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
    ef6a:	2215      	movs	r2, #21
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ef6c:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
    ef6e:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
    ef72:	70ca      	strb	r2, [r1, #3]
	p->max_rx_octets = sys_cpu_to_le16(dle->max_rx_octets);
    ef74:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
    ef78:	808b      	strh	r3, [r1, #4]
	p->max_tx_octets = sys_cpu_to_le16(dle->max_tx_octets);
    ef7a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    ef7e:	810b      	strh	r3, [r1, #8]
	p->max_rx_time = sys_cpu_to_le16(dle->max_rx_time);
    ef80:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
    ef84:	80cb      	strh	r3, [r1, #6]
	p->max_tx_time = sys_cpu_to_le16(dle->max_tx_time);
    ef86:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
    ef8a:	814b      	strh	r3, [r1, #10]
{
	encode_length_req_rsp_common(pdu,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_rsp,
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP,
		&conn->lll.dle.eff);
}
    ef8c:	4770      	bx	lr
    ef8e:	bf00      	nop

0000ef90 <llcp_pdu_decode_length_req>:
static void decode_length_req_rsp_common(struct ll_conn *conn,
					 struct pdu_data_llctrl_length_req_rsp_common *p)
{
	struct data_pdu_length remote;

	remote.max_rx_octets = sys_le16_to_cpu(p->max_rx_octets);
    ef90:	888b      	ldrh	r3, [r1, #4]
	if (!IN_RANGE(remote->max_rx_octets, PDU_DC_PAYLOAD_SIZE_MIN,
    ef92:	f1a3 021b 	sub.w	r2, r3, #27
    ef96:	2ae0      	cmp	r2, #224	; 0xe0
    ef98:	d821      	bhi.n	efde <llcp_pdu_decode_length_req+0x4e>
	remote.max_tx_octets = sys_le16_to_cpu(p->max_tx_octets);
    ef9a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
	if (!IN_RANGE(remote->max_tx_octets, PDU_DC_PAYLOAD_SIZE_MIN,
    ef9e:	f1ac 021b 	sub.w	r2, ip, #27
    efa2:	2ae0      	cmp	r2, #224	; 0xe0
    efa4:	d81b      	bhi.n	efde <llcp_pdu_decode_length_req+0x4e>

	conn->lll.dle.remote = remote;
}

void llcp_pdu_decode_length_req(struct ll_conn *conn, struct pdu_data *pdu)
{
    efa6:	b530      	push	{r4, r5, lr}
	remote.max_rx_time = sys_le16_to_cpu(p->max_rx_time);
    efa8:	88cd      	ldrh	r5, [r1, #6]
	if (!IN_RANGE(remote->max_rx_time, PDU_DC_PAYLOAD_TIME_MIN,
    efaa:	f5a5 72a4 	sub.w	r2, r5, #328	; 0x148
    efae:	f244 1e48 	movw	lr, #16712	; 0x4148
    efb2:	b292      	uxth	r2, r2
    efb4:	4572      	cmp	r2, lr
    efb6:	d811      	bhi.n	efdc <llcp_pdu_decode_length_req+0x4c>
	remote.max_tx_time = sys_le16_to_cpu(p->max_tx_time);
    efb8:	894a      	ldrh	r2, [r1, #10]
    efba:	2100      	movs	r1, #0
    efbc:	460c      	mov	r4, r1
    efbe:	f362 040f 	bfi	r4, r2, #0, #16
	if (!IN_RANGE(remote->max_tx_time, PDU_DC_PAYLOAD_TIME_MIN,
    efc2:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
    efc6:	f36c 010f 	bfi	r1, ip, #0, #16
    efca:	b292      	uxth	r2, r2
    efcc:	f363 411f 	bfi	r1, r3, #16, #16
    efd0:	f365 441f 	bfi	r4, r5, #16, #16
    efd4:	4572      	cmp	r2, lr
	conn->lll.dle.remote = remote;
    efd6:	bf98      	it	ls
    efd8:	e9c0 1418 	strdls	r1, r4, [r0, #96]	; 0x60
	decode_length_req_rsp_common(conn,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_req);
}
    efdc:	bd30      	pop	{r4, r5, pc}
    efde:	4770      	bx	lr

0000efe0 <llcp_pdu_decode_length_rsp>:

void llcp_pdu_decode_length_rsp(struct ll_conn *conn, struct pdu_data *pdu)
    efe0:	888b      	ldrh	r3, [r1, #4]
    efe2:	f1a3 021b 	sub.w	r2, r3, #27
    efe6:	2ae0      	cmp	r2, #224	; 0xe0
    efe8:	d821      	bhi.n	f02e <llcp_pdu_decode_length_rsp+0x4e>
    efea:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    efee:	f1ac 021b 	sub.w	r2, ip, #27
    eff2:	2ae0      	cmp	r2, #224	; 0xe0
    eff4:	d81b      	bhi.n	f02e <llcp_pdu_decode_length_rsp+0x4e>
    eff6:	b530      	push	{r4, r5, lr}
    eff8:	88cd      	ldrh	r5, [r1, #6]
    effa:	f5a5 72a4 	sub.w	r2, r5, #328	; 0x148
    effe:	f244 1e48 	movw	lr, #16712	; 0x4148
    f002:	b292      	uxth	r2, r2
    f004:	4572      	cmp	r2, lr
    f006:	d811      	bhi.n	f02c <llcp_pdu_decode_length_rsp+0x4c>
    f008:	894a      	ldrh	r2, [r1, #10]
    f00a:	2100      	movs	r1, #0
    f00c:	460c      	mov	r4, r1
    f00e:	f362 040f 	bfi	r4, r2, #0, #16
    f012:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
    f016:	f36c 010f 	bfi	r1, ip, #0, #16
    f01a:	b292      	uxth	r2, r2
    f01c:	f363 411f 	bfi	r1, r3, #16, #16
    f020:	f365 441f 	bfi	r4, r5, #16, #16
    f024:	4572      	cmp	r2, lr
    f026:	bf98      	it	ls
    f028:	e9c0 1418 	strdls	r1, r4, [r0, #96]	; 0x60
    f02c:	bd30      	pop	{r4, r5, pc}
    f02e:	4770      	bx	lr

0000f030 <cu_ntf>:
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
		(ctx->data.cu.params_changed != 0U));
}

static void cu_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
    f030:	b570      	push	{r4, r5, r6, lr}
    f032:	4606      	mov	r6, r0
    f034:	460d      	mov	r5, r1
	struct node_rx_pdu *ntf;
	struct node_rx_cu *pdu;

	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
    f036:	f7fe f95d 	bl	d2f4 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
    f03a:	4604      	mov	r4, r0
    f03c:	b1c8      	cbz	r0, f072 <cu_ntf+0x42>

	ntf->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    f03e:	2319      	movs	r3, #25
    f040:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
    f042:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    f044:	80e3      	strh	r3, [r4, #6]
	pdu = (struct node_rx_cu *)ntf->pdu;

	pdu->status = ctx->data.cu.error;
    f046:	7f2b      	ldrb	r3, [r5, #28]
    f048:	7723      	strb	r3, [r4, #28]
	if (!ctx->data.cu.error) {
    f04a:	b95b      	cbnz	r3, f064 <cu_ntf+0x34>
		pdu->interval = ctx->data.cu.interval_max;
    f04c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    f04e:	83e3      	strh	r3, [r4, #30]
		pdu->latency = ctx->data.cu.latency;
    f050:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    f052:	8423      	strh	r3, [r4, #32]
		pdu->timeout = ctx->data.cu.timeout;
    f054:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    f056:	8463      	strh	r3, [r4, #34]	; 0x22
		pdu->latency = conn->lll.latency;
		pdu->timeout = conn->supervision_timeout;
	}

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
    f058:	6820      	ldr	r0, [r4, #0]
    f05a:	4621      	mov	r1, r4
}
    f05c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
    f060:	f7f9 bb4c 	b.w	86fc <ll_rx_put_sched>
		pdu->interval = conn->lll.interval;
    f064:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    f066:	83e3      	strh	r3, [r4, #30]
		pdu->latency = conn->lll.latency;
    f068:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
    f06a:	8423      	strh	r3, [r4, #32]
		pdu->timeout = conn->supervision_timeout;
    f06c:	f8b6 3184 	ldrh.w	r3, [r6, #388]	; 0x184
    f070:	e7f1      	b.n	f056 <cu_ntf+0x26>
	LL_ASSERT(ntf);
    f072:	4a06      	ldr	r2, [pc, #24]	; (f08c <cu_ntf+0x5c>)
    f074:	4906      	ldr	r1, [pc, #24]	; (f090 <cu_ntf+0x60>)
    f076:	4807      	ldr	r0, [pc, #28]	; (f094 <cu_ntf+0x64>)
    f078:	23f4      	movs	r3, #244	; 0xf4
    f07a:	f008 fa32 	bl	174e2 <assert_print>
    f07e:	4040      	eors	r0, r0
    f080:	f380 8811 	msr	BASEPRI, r0
    f084:	f04f 0003 	mov.w	r0, #3
    f088:	df02      	svc	2
    f08a:	e7d8      	b.n	f03e <cu_ntf+0xe>
    f08c:	0001c15c 	.word	0x0001c15c
    f090:	0001bf5c 	.word	0x0001bf5c
    f094:	0001b844 	.word	0x0001b844

0000f098 <rp_cu_conn_param_req_ntf>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static void rp_cu_conn_param_req_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
    f098:	b570      	push	{r4, r5, r6, lr}
    f09a:	4606      	mov	r6, r0
    f09c:	460d      	mov	r5, r1
	struct node_rx_pdu *ntf;
	struct pdu_data *pdu;

	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
    f09e:	f7fe f929 	bl	d2f4 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
    f0a2:	4604      	mov	r4, r0
    f0a4:	b170      	cbz	r0, f0c4 <rp_cu_conn_param_req_ntf+0x2c>

	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
    f0a6:	2303      	movs	r3, #3
    f0a8:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
    f0aa:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    f0ac:	80e3      	strh	r3, [r4, #6]
	pdu = (struct pdu_data *)ntf->pdu;

	llcp_pdu_encode_conn_param_req(ctx, pdu);
    f0ae:	4628      	mov	r0, r5
    f0b0:	f104 011c 	add.w	r1, r4, #28
    f0b4:	f7ff fe64 	bl	ed80 <llcp_pdu_encode_conn_param_req>

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
    f0b8:	6820      	ldr	r0, [r4, #0]
    f0ba:	4621      	mov	r1, r4
}
    f0bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
    f0c0:	f7f9 bb1c 	b.w	86fc <ll_rx_put_sched>
	LL_ASSERT(ntf);
    f0c4:	4a06      	ldr	r2, [pc, #24]	; (f0e0 <rp_cu_conn_param_req_ntf+0x48>)
    f0c6:	4907      	ldr	r1, [pc, #28]	; (f0e4 <rp_cu_conn_param_req_ntf+0x4c>)
    f0c8:	4807      	ldr	r0, [pc, #28]	; (f0e8 <rp_cu_conn_param_req_ntf+0x50>)
    f0ca:	f240 23ed 	movw	r3, #749	; 0x2ed
    f0ce:	f008 fa08 	bl	174e2 <assert_print>
    f0d2:	4040      	eors	r0, r0
    f0d4:	f380 8811 	msr	BASEPRI, r0
    f0d8:	f04f 0003 	mov.w	r0, #3
    f0dc:	df02      	svc	2
    f0de:	e7e2      	b.n	f0a6 <rp_cu_conn_param_req_ntf+0xe>
    f0e0:	0001c15c 	.word	0x0001c15c
    f0e4:	0001bf5c 	.word	0x0001bf5c
    f0e8:	0001b844 	.word	0x0001b844

0000f0ec <cu_update_conn_parameters>:
{
    f0ec:	b530      	push	{r4, r5, lr}
	if ((interval != lll->interval) || (latency != lll->latency) ||
    f0ee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	ctx->data.cu.params_changed = cu_have_params_changed(
    f0f0:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    f0f2:	8d4c      	ldrh	r4, [r1, #42]	; 0x2a
    f0f4:	8d8d      	ldrh	r5, [r1, #44]	; 0x2c
	if ((interval != lll->interval) || (latency != lll->latency) ||
    f0f6:	4293      	cmp	r3, r2
{
    f0f8:	b085      	sub	sp, #20
	if ((interval != lll->interval) || (latency != lll->latency) ||
    f0fa:	d102      	bne.n	f102 <cu_update_conn_parameters+0x16>
    f0fc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    f0fe:	42a3      	cmp	r3, r4
    f100:	d013      	beq.n	f12a <cu_update_conn_parameters+0x3e>
    f102:	2301      	movs	r3, #1
	ctx->data.cu.params_changed = cu_have_params_changed(
    f104:	778b      	strb	r3, [r1, #30]
	ull_conn_update_parameters(conn, (ctx->proc == PROC_CONN_UPDATE), ctx->data.cu.win_size,
    f106:	9502      	str	r5, [sp, #8]
    f108:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
    f10a:	e9cd 2400 	strd	r2, r4, [sp]
    f10e:	7a0c      	ldrb	r4, [r1, #8]
    f110:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    f114:	8c09      	ldrh	r1, [r1, #32]
    f116:	9103      	str	r1, [sp, #12]
    f118:	f1a4 0108 	sub.w	r1, r4, #8
    f11c:	fab1 f181 	clz	r1, r1
    f120:	0949      	lsrs	r1, r1, #5
    f122:	f7f1 fdfd 	bl	d20 <ull_conn_update_parameters>
}
    f126:	b005      	add	sp, #20
    f128:	bd30      	pop	{r4, r5, pc}
	if ((interval != lll->interval) || (latency != lll->latency) ||
    f12a:	f8b0 3184 	ldrh.w	r3, [r0, #388]	; 0x184
	ctx->data.cu.params_changed = cu_have_params_changed(
    f12e:	1b5b      	subs	r3, r3, r5
    f130:	bf18      	it	ne
    f132:	2301      	movne	r3, #1
    f134:	e7e6      	b.n	f104 <cu_update_conn_parameters+0x18>
    f136:	bf00      	nop

0000f138 <rp_cu_tx>:
{
    f138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f13a:	4607      	mov	r7, r0
    f13c:	460d      	mov	r5, r1
    f13e:	4616      	mov	r6, r2
	tx = llcp_tx_alloc(conn, ctx);
    f140:	f7fe f8bc 	bl	d2bc <llcp_tx_alloc>
	LL_ASSERT(tx);
    f144:	4604      	mov	r4, r0
    f146:	2800      	cmp	r0, #0
    f148:	d03b      	beq.n	f1c2 <rp_cu_tx+0x8a>
	pdu = (struct pdu_data *)tx->pdu;
    f14a:	1d21      	adds	r1, r4, #4
	switch (opcode) {
    f14c:	2e11      	cmp	r6, #17
    f14e:	d80a      	bhi.n	f166 <rp_cu_tx+0x2e>
    f150:	e8df f006 	tbb	[pc, r6]
    f154:	0909092a 	.word	0x0909092a
    f158:	26090909 	.word	0x26090909
    f15c:	09090909 	.word	0x09090909
    f160:	09090909 	.word	0x09090909
    f164:	202e      	.short	0x202e
		LL_ASSERT(0);
    f166:	4a1e      	ldr	r2, [pc, #120]	; (f1e0 <rp_cu_tx+0xa8>)
    f168:	491e      	ldr	r1, [pc, #120]	; (f1e4 <rp_cu_tx+0xac>)
    f16a:	481f      	ldr	r0, [pc, #124]	; (f1e8 <rp_cu_tx+0xb0>)
    f16c:	f44f 7335 	mov.w	r3, #724	; 0x2d4
    f170:	f008 f9b7 	bl	174e2 <assert_print>
    f174:	4040      	eors	r0, r0
    f176:	f380 8811 	msr	BASEPRI, r0
    f17a:	f04f 0003 	mov.w	r0, #3
    f17e:	df02      	svc	2
	ctx->tx_opcode = pdu->llctrl.opcode;
    f180:	79e3      	ldrb	r3, [r4, #7]
    f182:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
    f184:	4621      	mov	r1, r4
    f186:	4638      	mov	r0, r7
    f188:	f7fe f8b6 	bl	d2f8 <llcp_tx_enqueue>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
    f18c:	7a2b      	ldrb	r3, [r5, #8]
    f18e:	2b09      	cmp	r3, #9
    f190:	d012      	beq.n	f1b8 <rp_cu_tx+0x80>
}
    f192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		llcp_pdu_encode_reject_ext_ind(pdu, ctx->data.cu.rejected_opcode,
    f194:	4608      	mov	r0, r1
    f196:	7f2a      	ldrb	r2, [r5, #28]
    f198:	7f69      	ldrb	r1, [r5, #29]
    f19a:	f7ff fd9d 	bl	ecd8 <llcp_pdu_encode_reject_ext_ind>
		break;
    f19e:	e7ef      	b.n	f180 <rp_cu_tx+0x48>
		llcp_pdu_encode_unknown_rsp(ctx, pdu);
    f1a0:	4628      	mov	r0, r5
    f1a2:	f7ff fc31 	bl	ea08 <llcp_pdu_encode_unknown_rsp>
		break;
    f1a6:	e7eb      	b.n	f180 <rp_cu_tx+0x48>
		llcp_pdu_encode_conn_update_ind(ctx, pdu);
    f1a8:	4628      	mov	r0, r5
    f1aa:	f7ff fe63 	bl	ee74 <llcp_pdu_encode_conn_update_ind>
		break;
    f1ae:	e7e7      	b.n	f180 <rp_cu_tx+0x48>
		llcp_pdu_encode_conn_param_rsp(ctx, pdu);
    f1b0:	4628      	mov	r0, r5
    f1b2:	f7ff fe11 	bl	edd8 <llcp_pdu_encode_conn_param_rsp>
		break;
    f1b6:	e7e3      	b.n	f180 <rp_cu_tx+0x48>
		llcp_rr_prt_restart(conn);
    f1b8:	4638      	mov	r0, r7
}
    f1ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		llcp_rr_prt_restart(conn);
    f1be:	f000 bed1 	b.w	ff64 <llcp_rr_prt_restart>
	LL_ASSERT(tx);
    f1c2:	4a07      	ldr	r2, [pc, #28]	; (f1e0 <rp_cu_tx+0xa8>)
    f1c4:	4909      	ldr	r1, [pc, #36]	; (f1ec <rp_cu_tx+0xb4>)
    f1c6:	4808      	ldr	r0, [pc, #32]	; (f1e8 <rp_cu_tx+0xb0>)
    f1c8:	f240 23bb 	movw	r3, #699	; 0x2bb
    f1cc:	f008 f989 	bl	174e2 <assert_print>
    f1d0:	4040      	eors	r0, r0
    f1d2:	f380 8811 	msr	BASEPRI, r0
    f1d6:	f04f 0003 	mov.w	r0, #3
    f1da:	df02      	svc	2
    f1dc:	e7b5      	b.n	f14a <rp_cu_tx+0x12>
    f1de:	bf00      	nop
    f1e0:	0001c15c 	.word	0x0001c15c
    f1e4:	0001b908 	.word	0x0001b908
    f1e8:	0001b844 	.word	0x0001b844
    f1ec:	0001bee8 	.word	0x0001bee8

0000f1f0 <rp_cu_send_conn_update_ind.constprop.0>:
		cu_ntf(conn, ctx);
		rp_cu_complete(conn, ctx);
	}
}

static void rp_cu_send_conn_update_ind(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
    f1f0:	b570      	push	{r4, r5, r6, lr}
    f1f2:	4606      	mov	r6, r0
    f1f4:	460c      	mov	r4, r1
				       void *param)
{
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f1f6:	f000 fead 	bl	ff54 <llcp_rr_ispaused>
    f1fa:	b110      	cbz	r0, f202 <rp_cu_send_conn_update_ind.constprop.0+0x12>
		ctx->state = RP_CU_STATE_WAIT_TX_CONN_UPDATE_IND;
    f1fc:	2309      	movs	r3, #9
    f1fe:	72a3      	strb	r3, [r4, #10]
		cu_prepare_update_ind(conn, ctx);
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND);
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
		ctx->state = RP_CU_STATE_WAIT_INSTANT;
	}
}
    f200:	bd70      	pop	{r4, r5, r6, pc}
    f202:	4605      	mov	r5, r0
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f204:	4621      	mov	r1, r4
    f206:	4630      	mov	r0, r6
    f208:	f7fe f850 	bl	d2ac <llcp_tx_alloc_peek>
    f20c:	2800      	cmp	r0, #0
    f20e:	d0f5      	beq.n	f1fc <rp_cu_send_conn_update_ind.constprop.0+0xc>
	const uint8_t preferred_periodicity = ctx->data.cu.preferred_periodicity;
    f210:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
		const uint16_t interval_max = (ctx->data.cu.interval_max / preferred_periodicity) *
    f214:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	ctx->data.cu.win_offset_us = 0U;
    f216:	84a5      	strh	r5, [r4, #36]	; 0x24
	ctx->data.cu.win_size = 1U;
    f218:	2301      	movs	r3, #1
    f21a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	if (preferred_periodicity) {
    f21e:	b14a      	cbz	r2, f234 <rp_cu_send_conn_update_ind.constprop.0+0x44>
		const uint16_t interval_max = (ctx->data.cu.interval_max / preferred_periodicity) *
    f220:	fbb1 f3f2 	udiv	r3, r1, r2
    f224:	fb13 f302 	smulbb	r3, r3, r2
		if (interval_max >= ctx->data.cu.interval_min) {
    f228:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		const uint16_t interval_max = (ctx->data.cu.interval_max / preferred_periodicity) *
    f22a:	b29b      	uxth	r3, r3
		if (interval_max >= ctx->data.cu.interval_min) {
    f22c:	429a      	cmp	r2, r3
			ctx->data.cu.interval_max = interval_max;
    f22e:	bf9c      	itt	ls
    f230:	8523      	strhls	r3, [r4, #40]	; 0x28
    f232:	4619      	movls	r1, r3
	if (ctx->data.cu.offsets[0] <= ctx->data.cu.interval_max) {
    f234:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f236:	428b      	cmp	r3, r1
    f238:	d807      	bhi.n	f24a <rp_cu_send_conn_update_ind.constprop.0+0x5a>
		ctx->data.cu.win_offset_us = ctx->data.cu.offsets[0] * CONN_INT_UNIT_US;
    f23a:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    f23e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    f242:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f246:	005b      	lsls	r3, r3, #1
    f248:	84a3      	strh	r3, [r4, #36]	; 0x24
	ctx->data.cu.instant = ull_conn_event_counter(conn) + conn->lll.latency +
    f24a:	4630      	mov	r0, r6
    f24c:	f7fc fd96 	bl	bd7c <ull_conn_event_counter>
    f250:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
    f252:	3306      	adds	r3, #6
    f254:	4418      	add	r0, r3
    f256:	8420      	strh	r0, [r4, #32]
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND);
    f258:	2200      	movs	r2, #0
    f25a:	4621      	mov	r1, r4
    f25c:	4630      	mov	r0, r6
    f25e:	f7ff ff6b 	bl	f138 <rp_cu_tx>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    f262:	23ff      	movs	r3, #255	; 0xff
    f264:	72e3      	strb	r3, [r4, #11]
    f266:	230b      	movs	r3, #11
		ctx->state = RP_CU_STATE_WAIT_TX_CONN_UPDATE_IND;
    f268:	72a3      	strb	r3, [r4, #10]
}
    f26a:	bd70      	pop	{r4, r5, r6, pc}

0000f26c <lp_cu_send_conn_param_req.constprop.0>:
static void lp_cu_send_conn_param_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
    f26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return conn_upd_curr && (conn_upd_curr != conn);
    f270:	4e31      	ldr	r6, [pc, #196]	; (f338 <lp_cu_send_conn_param_req.constprop.0+0xcc>)
    f272:	6833      	ldr	r3, [r6, #0]
    f274:	4604      	mov	r4, r0
    f276:	460d      	mov	r5, r1
    f278:	b12b      	cbz	r3, f286 <lp_cu_send_conn_param_req.constprop.0+0x1a>
    f27a:	4283      	cmp	r3, r0
    f27c:	d003      	beq.n	f286 <lp_cu_send_conn_param_req.constprop.0+0x1a>
		ctx->state = LP_CU_STATE_WAIT_TX_CONN_PARAM_REQ;
    f27e:	2301      	movs	r3, #1
    f280:	72ab      	strb	r3, [r5, #10]
}
    f282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cpr_active_is_set(conn) || llcp_lr_ispaused(conn) ||
    f286:	4620      	mov	r0, r4
    f288:	f7ff fab2 	bl	e7f0 <llcp_lr_ispaused>
    f28c:	2800      	cmp	r0, #0
    f28e:	d1f6      	bne.n	f27e <lp_cu_send_conn_param_req.constprop.0+0x12>
	     llcp_rr_get_collision(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f290:	4620      	mov	r0, r4
    f292:	f000 fe55 	bl	ff40 <llcp_rr_get_collision>
	if (cpr_active_is_set(conn) || llcp_lr_ispaused(conn) ||
    f296:	4607      	mov	r7, r0
    f298:	2800      	cmp	r0, #0
    f29a:	d1f0      	bne.n	f27e <lp_cu_send_conn_param_req.constprop.0+0x12>
	     llcp_rr_get_collision(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f29c:	4629      	mov	r1, r5
    f29e:	4620      	mov	r0, r4
    f2a0:	f7fe f804 	bl	d2ac <llcp_tx_alloc_peek>
    f2a4:	2800      	cmp	r0, #0
    f2a6:	d0ea      	beq.n	f27e <lp_cu_send_conn_param_req.constprop.0+0x12>
		uint16_t event_counter = ull_conn_event_counter(conn);
    f2a8:	4620      	mov	r0, r4
    f2aa:	f7fc fd67 	bl	bd7c <ull_conn_event_counter>
		llcp_rr_set_incompat(conn, INCOMPAT_RESOLVABLE);
    f2ae:	2101      	movs	r1, #1
		uint16_t event_counter = ull_conn_event_counter(conn);
    f2b0:	4680      	mov	r8, r0
		llcp_rr_set_incompat(conn, INCOMPAT_RESOLVABLE);
    f2b2:	4620      	mov	r0, r4
    f2b4:	f000 fe3c 	bl	ff30 <llcp_rr_set_incompat>
		ctx->data.cu.reference_conn_event_count = event_counter;
    f2b8:	f8a5 8030 	strh.w	r8, [r5, #48]	; 0x30
		ctx->data.cu.preferred_periodicity = 0U;
    f2bc:	f885 702e 	strb.w	r7, [r5, #46]	; 0x2e
	tx = llcp_tx_alloc(conn, ctx);
    f2c0:	4629      	mov	r1, r5
    f2c2:	4620      	mov	r0, r4
	conn_upd_curr = conn;
    f2c4:	6034      	str	r4, [r6, #0]
    f2c6:	f7fd fff9 	bl	d2bc <llcp_tx_alloc>
	LL_ASSERT(tx);
    f2ca:	4606      	mov	r6, r0
    f2cc:	b328      	cbz	r0, f31a <lp_cu_send_conn_param_req.constprop.0+0xae>
		llcp_pdu_encode_conn_param_req(ctx, pdu);
    f2ce:	1d31      	adds	r1, r6, #4
    f2d0:	4628      	mov	r0, r5
    f2d2:	f7ff fd55 	bl	ed80 <llcp_pdu_encode_conn_param_req>
	ctx->tx_opcode = pdu->llctrl.opcode;
    f2d6:	79f3      	ldrb	r3, [r6, #7]
    f2d8:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
    f2da:	4631      	mov	r1, r6
    f2dc:	4620      	mov	r0, r4
    f2de:	f7fe f80b 	bl	d2f8 <llcp_tx_enqueue>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
    f2e2:	7a2b      	ldrb	r3, [r5, #8]
    f2e4:	2b09      	cmp	r3, #9
    f2e6:	d014      	beq.n	f312 <lp_cu_send_conn_param_req.constprop.0+0xa6>
		switch (conn->lll.role) {
    f2e8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    f2ec:	09db      	lsrs	r3, r3, #7
    f2ee:	d002      	beq.n	f2f6 <lp_cu_send_conn_param_req.constprop.0+0x8a>
			ctx->state = LP_CU_STATE_WAIT_RX_CONN_UPDATE_IND;
    f2f0:	2304      	movs	r3, #4
    f2f2:	816b      	strh	r3, [r5, #10]
			break;
    f2f4:	e7c5      	b.n	f282 <lp_cu_send_conn_param_req.constprop.0+0x16>
			LL_ASSERT(0);
    f2f6:	4a11      	ldr	r2, [pc, #68]	; (f33c <lp_cu_send_conn_param_req.constprop.0+0xd0>)
    f2f8:	4911      	ldr	r1, [pc, #68]	; (f340 <lp_cu_send_conn_param_req.constprop.0+0xd4>)
    f2fa:	4812      	ldr	r0, [pc, #72]	; (f344 <lp_cu_send_conn_param_req.constprop.0+0xd8>)
    f2fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
    f300:	f008 f8ef 	bl	174e2 <assert_print>
    f304:	4040      	eors	r0, r0
    f306:	f380 8811 	msr	BASEPRI, r0
    f30a:	f04f 0003 	mov.w	r0, #3
    f30e:	df02      	svc	2
}
    f310:	e7b7      	b.n	f282 <lp_cu_send_conn_param_req.constprop.0+0x16>
		llcp_lr_prt_restart(conn);
    f312:	4620      	mov	r0, r4
    f314:	f7ff fa7c 	bl	e810 <llcp_lr_prt_restart>
    f318:	e7e6      	b.n	f2e8 <lp_cu_send_conn_param_req.constprop.0+0x7c>
	LL_ASSERT(tx);
    f31a:	4a08      	ldr	r2, [pc, #32]	; (f33c <lp_cu_send_conn_param_req.constprop.0+0xd0>)
    f31c:	490a      	ldr	r1, [pc, #40]	; (f348 <lp_cu_send_conn_param_req.constprop.0+0xdc>)
    f31e:	4809      	ldr	r0, [pc, #36]	; (f344 <lp_cu_send_conn_param_req.constprop.0+0xd8>)
    f320:	f240 1311 	movw	r3, #273	; 0x111
    f324:	f008 f8dd 	bl	174e2 <assert_print>
    f328:	4040      	eors	r0, r0
    f32a:	f380 8811 	msr	BASEPRI, r0
    f32e:	f04f 0003 	mov.w	r0, #3
    f332:	df02      	svc	2
    f334:	e7cb      	b.n	f2ce <lp_cu_send_conn_param_req.constprop.0+0x62>
    f336:	bf00      	nop
    f338:	20001c90 	.word	0x20001c90
    f33c:	0001c15c 	.word	0x0001c15c
    f340:	0001b908 	.word	0x0001b908
    f344:	0001b844 	.word	0x0001b844
    f348:	0001bee8 	.word	0x0001bee8

0000f34c <rp_cu_send_reject_ext_ind.constprop.0>:

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static void rp_cu_send_reject_ext_ind(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
    f34c:	b570      	push	{r4, r5, r6, lr}
    f34e:	4606      	mov	r6, r0
    f350:	460c      	mov	r4, r1
				      void *param)
{
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f352:	f000 fdff 	bl	ff54 <llcp_rr_ispaused>
    f356:	b110      	cbz	r0, f35e <rp_cu_send_reject_ext_ind.constprop.0+0x12>
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
    f358:	2306      	movs	r3, #6
    f35a:	72a3      	strb	r3, [r4, #10]
	} else {
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND);
		rp_cu_complete(conn, ctx);
	}
}
    f35c:	bd70      	pop	{r4, r5, r6, pc}
    f35e:	4605      	mov	r5, r0
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f360:	4621      	mov	r1, r4
    f362:	4630      	mov	r0, r6
    f364:	f7fd ffa2 	bl	d2ac <llcp_tx_alloc_peek>
    f368:	2800      	cmp	r0, #0
    f36a:	d0f5      	beq.n	f358 <rp_cu_send_reject_ext_ind.constprop.0+0xc>
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND);
    f36c:	2211      	movs	r2, #17
    f36e:	4621      	mov	r1, r4
    f370:	4630      	mov	r0, r6
    f372:	f7ff fee1 	bl	f138 <rp_cu_tx>
	llcp_rr_complete(conn);
    f376:	4630      	mov	r0, r6
    f378:	f000 fe72 	bl	10060 <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
    f37c:	7a23      	ldrb	r3, [r4, #8]
    f37e:	2b09      	cmp	r3, #9
    f380:	d104      	bne.n	f38c <rp_cu_send_reject_ext_ind.constprop.0+0x40>
	if (conn == conn_upd_curr) {
    f382:	4b04      	ldr	r3, [pc, #16]	; (f394 <rp_cu_send_reject_ext_ind.constprop.0+0x48>)
    f384:	681a      	ldr	r2, [r3, #0]
    f386:	4296      	cmp	r6, r2
		conn_upd_curr = NULL;
    f388:	bf08      	it	eq
    f38a:	601d      	streq	r5, [r3, #0]
}
    f38c:	2300      	movs	r3, #0
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
    f38e:	72a3      	strb	r3, [r4, #10]
}
    f390:	bd70      	pop	{r4, r5, r6, pc}
    f392:	bf00      	nop
    f394:	20001c90 	.word	0x20001c90

0000f398 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0>:
		break;
	}
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static void rp_cu_st_wait_conn_param_req_available(struct ll_conn *conn, struct proc_ctx *ctx,
    f398:	b538      	push	{r3, r4, r5, lr}
	return conn_upd_curr && (conn_upd_curr != conn);
    f39a:	4a1d      	ldr	r2, [pc, #116]	; (f410 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x78>)
    f39c:	6813      	ldr	r3, [r2, #0]
    f39e:	4605      	mov	r5, r0
    f3a0:	460c      	mov	r4, r1
    f3a2:	b13b      	cbz	r3, f3b4 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x1c>
    f3a4:	4283      	cmp	r3, r0
    f3a6:	d005      	beq.n	f3b4 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x1c>
	 */
	switch (evt) {
	case RP_CU_EVT_CONN_PARAM_REQ:
	case RP_CU_EVT_RUN:
		if (cpr_active_is_set(conn)) {
			ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_AVAILABLE;
    f3a8:	2302      	movs	r3, #2
    f3aa:	728b      	strb	r3, [r1, #10]
			if (!llcp_rr_ispaused(conn) && llcp_tx_alloc_peek(conn, ctx)) {
    f3ac:	f000 fdd2 	bl	ff54 <llcp_rr_ispaused>
    f3b0:	b1b8      	cbz	r0, f3e2 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x4a>
		}
	default:
		/* Ignore other evts */
		break;
	}
}
    f3b2:	bd38      	pop	{r3, r4, r5, pc}
	if ((interval != lll->interval) || (latency != lll->latency) ||
    f3b4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    f3b6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
	conn_upd_curr = conn;
    f3b8:	6015      	str	r5, [r2, #0]
    f3ba:	4299      	cmp	r1, r3
				cu_have_params_changed(conn, ctx->data.cu.interval_max,
    f3bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    f3be:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	if ((interval != lll->interval) || (latency != lll->latency) ||
    f3c0:	d005      	beq.n	f3ce <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x36>
	if (!llcp_ntf_alloc_is_available()) {
    f3c2:	f7fd ff87 	bl	d2d4 <llcp_ntf_alloc_is_available>
    f3c6:	b9d8      	cbnz	r0, f400 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x68>
		ctx->state = RP_CU_STATE_WAIT_NTF_CONN_PARAM_REQ;
    f3c8:	2303      	movs	r3, #3
    f3ca:	72a3      	strb	r3, [r4, #10]
}
    f3cc:	bd38      	pop	{r3, r4, r5, pc}
	if ((interval != lll->interval) || (latency != lll->latency) ||
    f3ce:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    f3d0:	4293      	cmp	r3, r2
    f3d2:	d1f6      	bne.n	f3c2 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x2a>
    f3d4:	f8b5 3184 	ldrh.w	r3, [r5, #388]	; 0x184
    f3d8:	4283      	cmp	r3, r0
    f3da:	d1f2      	bne.n	f3c2 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x2a>
				ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY_CONTINUE;
    f3dc:	2305      	movs	r3, #5
    f3de:	72a3      	strb	r3, [r4, #10]
}
    f3e0:	bd38      	pop	{r3, r4, r5, pc}
			if (!llcp_rr_ispaused(conn) && llcp_tx_alloc_peek(conn, ctx)) {
    f3e2:	4621      	mov	r1, r4
    f3e4:	4628      	mov	r0, r5
    f3e6:	f7fd ff61 	bl	d2ac <llcp_tx_alloc_peek>
    f3ea:	2800      	cmp	r0, #0
    f3ec:	d0e1      	beq.n	f3b2 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x1a>
				ctx->data.cu.error = BT_HCI_ERR_UNSUPP_LL_PARAM_VAL;
    f3ee:	f44f 6372 	mov.w	r3, #3872	; 0xf20
    f3f2:	83a3      	strh	r3, [r4, #28]
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
    f3f4:	4621      	mov	r1, r4
    f3f6:	4628      	mov	r0, r5
}
    f3f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
    f3fc:	f7ff bfa6 	b.w	f34c <rp_cu_send_reject_ext_ind.constprop.0>
		rp_cu_conn_param_req_ntf(conn, ctx);
    f400:	4621      	mov	r1, r4
    f402:	4628      	mov	r0, r5
    f404:	f7ff fe48 	bl	f098 <rp_cu_conn_param_req_ntf>
		ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY;
    f408:	2304      	movs	r3, #4
    f40a:	72a3      	strb	r3, [r4, #10]
}
    f40c:	bd38      	pop	{r3, r4, r5, pc}
    f40e:	bf00      	nop
    f410:	20001c90 	.word	0x20001c90

0000f414 <rp_cu_check_instant.isra.0>:
		/* Ignore other evts */
		break;
	}
}

static void rp_cu_check_instant(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
    f414:	b538      	push	{r3, r4, r5, lr}
    f416:	460c      	mov	r4, r1
    f418:	4605      	mov	r5, r0
				void *param)
{
	uint16_t event_counter = ull_conn_event_counter(conn);
    f41a:	f7fc fcaf 	bl	bd7c <ull_conn_event_counter>

	if (is_instant_reached_or_passed(ctx->data.cu.instant, event_counter)) {
    f41e:	8c23      	ldrh	r3, [r4, #32]
    f420:	1ac3      	subs	r3, r0, r3
    f422:	041b      	lsls	r3, r3, #16
    f424:	d500      	bpl.n	f428 <rp_cu_check_instant.isra.0+0x14>
			rp_cu_wait_complete(conn, ctx, evt, param);
		} else {
			rp_cu_complete(conn, ctx);
		}
	}
}
    f426:	bd38      	pop	{r3, r4, r5, pc}
		cu_update_conn_parameters(conn, ctx);
    f428:	4621      	mov	r1, r4
    f42a:	4628      	mov	r0, r5
    f42c:	f7ff fe5e 	bl	f0ec <cu_update_conn_parameters>
		if (ctx->proc == PROC_CONN_PARAM_REQ) {
    f430:	7a23      	ldrb	r3, [r4, #8]
    f432:	2b09      	cmp	r3, #9
    f434:	d01d      	beq.n	f472 <rp_cu_check_instant.isra.0+0x5e>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
    f436:	7fa3      	ldrb	r3, [r4, #30]
    f438:	b15b      	cbz	r3, f452 <rp_cu_check_instant.isra.0+0x3e>
			ctx->data.cu.error = BT_HCI_ERR_SUCCESS;
    f43a:	2300      	movs	r3, #0
    f43c:	7723      	strb	r3, [r4, #28]
	if (!llcp_ntf_alloc_is_available()) {
    f43e:	f7fd ff49 	bl	d2d4 <llcp_ntf_alloc_is_available>
    f442:	b910      	cbnz	r0, f44a <rp_cu_check_instant.isra.0+0x36>
		ctx->state = RP_CU_STATE_WAIT_NTF;
    f444:	230c      	movs	r3, #12
    f446:	72a3      	strb	r3, [r4, #10]
}
    f448:	bd38      	pop	{r3, r4, r5, pc}
		cu_ntf(conn, ctx);
    f44a:	4621      	mov	r1, r4
    f44c:	4628      	mov	r0, r5
    f44e:	f7ff fdef 	bl	f030 <cu_ntf>
	llcp_rr_complete(conn);
    f452:	4628      	mov	r0, r5
    f454:	f000 fe04 	bl	10060 <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
    f458:	7a23      	ldrb	r3, [r4, #8]
    f45a:	2b09      	cmp	r3, #9
    f45c:	d002      	beq.n	f464 <rp_cu_check_instant.isra.0+0x50>
	ctx->state = RP_CU_STATE_IDLE;
    f45e:	2300      	movs	r3, #0
    f460:	72a3      	strb	r3, [r4, #10]
}
    f462:	bd38      	pop	{r3, r4, r5, pc}
	if (conn == conn_upd_curr) {
    f464:	4b08      	ldr	r3, [pc, #32]	; (f488 <rp_cu_check_instant.isra.0+0x74>)
    f466:	681a      	ldr	r2, [r3, #0]
    f468:	4295      	cmp	r5, r2
		conn_upd_curr = NULL;
    f46a:	bf04      	itt	eq
    f46c:	2200      	moveq	r2, #0
    f46e:	601a      	streq	r2, [r3, #0]
    f470:	e7f5      	b.n	f45e <rp_cu_check_instant.isra.0+0x4a>
			llcp_rr_prt_stop(conn);
    f472:	4628      	mov	r0, r5
    f474:	f000 fd7c 	bl	ff70 <llcp_rr_prt_stop>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
    f478:	7a23      	ldrb	r3, [r4, #8]
    f47a:	2b09      	cmp	r3, #9
    f47c:	d1db      	bne.n	f436 <rp_cu_check_instant.isra.0+0x22>
    f47e:	7f23      	ldrb	r3, [r4, #28]
    f480:	2b00      	cmp	r3, #0
    f482:	d1da      	bne.n	f43a <rp_cu_check_instant.isra.0+0x26>
    f484:	e7d7      	b.n	f436 <rp_cu_check_instant.isra.0+0x22>
    f486:	bf00      	nop
    f488:	20001c90 	.word	0x20001c90

0000f48c <rp_cu_execute_fsm>:
		break;
	}
}

static void rp_cu_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
{
    f48c:	b570      	push	{r4, r5, r6, lr}
    f48e:	460c      	mov	r4, r1
	switch (ctx->state) {
    f490:	7a89      	ldrb	r1, [r1, #10]
{
    f492:	4605      	mov	r5, r0
	switch (ctx->state) {
    f494:	290c      	cmp	r1, #12
    f496:	f200 80a9 	bhi.w	f5ec <__kernel_ram_size+0x1c>
    f49a:	e8df f001 	tbb	[pc, r1]
    f49e:	170b      	.short	0x170b
    f4a0:	61584e46 	.word	0x61584e46
    f4a4:	8379a771 	.word	0x8379a771
    f4a8:	9e8b      	.short	0x9e8b
    f4aa:	07          	.byte	0x07
    f4ab:	00          	.byte	0x00
	switch (evt) {
    f4ac:	2a00      	cmp	r2, #0
    f4ae:	f000 80ab 	beq.w	f608 <__kernel_ram_size+0x38>
	default:
		/* Unknown state */
		LL_ASSERT(0);
		break;
	}
}
    f4b2:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    f4b4:	2a00      	cmp	r2, #0
    f4b6:	d1fc      	bne.n	f4b2 <rp_cu_execute_fsm+0x26>
		switch (ctx->proc) {
    f4b8:	7a23      	ldrb	r3, [r4, #8]
    f4ba:	2b08      	cmp	r3, #8
    f4bc:	f000 80bc 	beq.w	f638 <__kernel_ram_size+0x68>
    f4c0:	2b09      	cmp	r3, #9
    f4c2:	f040 80ab 	bne.w	f61c <__kernel_ram_size+0x4c>
			ctx->state = RP_CU_STATE_WAIT_RX_CONN_PARAM_REQ;
    f4c6:	2301      	movs	r3, #1
    f4c8:	72a3      	strb	r3, [r4, #10]
}
    f4ca:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    f4cc:	2a01      	cmp	r2, #1
    f4ce:	d1f0      	bne.n	f4b2 <rp_cu_execute_fsm+0x26>
		llcp_pdu_decode_conn_param_req(ctx, param);
    f4d0:	4619      	mov	r1, r3
    f4d2:	4620      	mov	r0, r4
    f4d4:	f7ff fcac 	bl	ee30 <llcp_pdu_decode_conn_param_req>
	const uint16_t interval_min = ctx->data.cu.interval_min;
    f4d8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	const uint16_t interval_max = ctx->data.cu.interval_max; /* unit conn events (ie 1.25ms) */
    f4da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	const uint16_t timeout = ctx->data.cu.timeout; /* unit 10ms */
    f4dc:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	const uint16_t latency = ctx->data.cu.latency;
    f4de:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
	const uint16_t preferred_periodicity = ctx->data.cu.preferred_periodicity;
    f4e0:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
	     ((latency + 1) * interval_max)) ||
    f4e4:	2b05      	cmp	r3, #5
    f4e6:	d917      	bls.n	f518 <rp_cu_execute_fsm+0x8c>
	const bool invalid = ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    f4e8:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
    f4ec:	d814      	bhi.n	f518 <rp_cu_execute_fsm+0x8c>
	    (interval_max > CONN_UPDATE_CONN_INTV_4SEC) ||
    f4ee:	4293      	cmp	r3, r2
    f4f0:	d812      	bhi.n	f518 <rp_cu_execute_fsm+0x8c>
	    (interval_min > interval_max) ||
    f4f2:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    f4f6:	d20f      	bcs.n	f518 <rp_cu_execute_fsm+0x8c>
	    (latency > CONN_UPDATE_LATENCY_MAX) ||
    f4f8:	f1a0 030a 	sub.w	r3, r0, #10
    f4fc:	b29b      	uxth	r3, r3
    f4fe:	f640 4c76 	movw	ip, #3190	; 0xc76
    f502:	4563      	cmp	r3, ip
    f504:	d808      	bhi.n	f518 <rp_cu_execute_fsm+0x8c>
	     ((latency + 1) * interval_max)) ||
    f506:	1c4b      	adds	r3, r1, #1
    f508:	b29b      	uxth	r3, r3
    f50a:	fb02 f303 	mul.w	r3, r2, r3
	    (timeout < CONN_UPDATE_TIMEOUT_100MS) || (timeout > CONN_UPDATE_TIMEOUT_32SEC) ||
    f50e:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
    f512:	d201      	bcs.n	f518 <rp_cu_execute_fsm+0x8c>
	     ((latency + 1) * interval_max)) ||
    f514:	42b2      	cmp	r2, r6
    f516:	d20a      	bcs.n	f52e <rp_cu_execute_fsm+0xa2>
			ctx->data.cu.error = BT_HCI_ERR_INVALID_LL_PARAM;
    f518:	f640 731e 	movw	r3, #3870	; 0xf1e
    f51c:	83a3      	strh	r3, [r4, #28]
			rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
    f51e:	4621      	mov	r1, r4
    f520:	4628      	mov	r0, r5
}
    f522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
    f526:	f7ff bf11 	b.w	f34c <rp_cu_send_reject_ext_ind.constprop.0>
	switch (evt) {
    f52a:	2a01      	cmp	r2, #1
    f52c:	d8c1      	bhi.n	f4b2 <rp_cu_execute_fsm+0x26>
    f52e:	4621      	mov	r1, r4
    f530:	4628      	mov	r0, r5
}
    f532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f536:	f7ff bf2f 	b.w	f398 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0>
	switch (evt) {
    f53a:	2a00      	cmp	r2, #0
    f53c:	d1b9      	bne.n	f4b2 <rp_cu_execute_fsm+0x26>
	if (!llcp_ntf_alloc_is_available()) {
    f53e:	f7fd fec9 	bl	d2d4 <llcp_ntf_alloc_is_available>
    f542:	2800      	cmp	r0, #0
    f544:	f040 809f 	bne.w	f686 <__kernel_ram_size+0xb6>
		ctx->state = RP_CU_STATE_WAIT_NTF_CONN_PARAM_REQ;
    f548:	2303      	movs	r3, #3
    f54a:	72a3      	strb	r3, [r4, #10]
}
    f54c:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    f54e:	2a03      	cmp	r2, #3
    f550:	d061      	beq.n	f616 <__kernel_ram_size+0x46>
    f552:	2a04      	cmp	r2, #4
    f554:	d1ad      	bne.n	f4b2 <rp_cu_execute_fsm+0x26>
		ctx->data.cu.rejected_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    f556:	220f      	movs	r2, #15
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
    f558:	2306      	movs	r3, #6
		ctx->data.cu.rejected_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    f55a:	7762      	strb	r2, [r4, #29]
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
    f55c:	72a3      	strb	r3, [r4, #10]
}
    f55e:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    f560:	2a00      	cmp	r2, #0
    f562:	d1a6      	bne.n	f4b2 <rp_cu_execute_fsm+0x26>
		if (conn->lll.role == BT_HCI_ROLE_CENTRAL) {
    f564:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    f568:	2b00      	cmp	r3, #0
    f56a:	da1d      	bge.n	f5a8 <rp_cu_execute_fsm+0x11c>
			if (!ctx->data.cu.error) {
    f56c:	7f23      	ldrb	r3, [r4, #28]
    f56e:	b18b      	cbz	r3, f594 <rp_cu_execute_fsm+0x108>
				ctx->data.cu.rejected_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    f570:	230f      	movs	r3, #15
    f572:	7763      	strb	r3, [r4, #29]
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
    f574:	4621      	mov	r1, r4
    f576:	4628      	mov	r0, r5
}
    f578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
    f57c:	f7ff bee6 	b.w	f34c <rp_cu_send_reject_ext_ind.constprop.0>
	switch (evt) {
    f580:	2a00      	cmp	r2, #0
    f582:	d196      	bne.n	f4b2 <rp_cu_execute_fsm+0x26>
		rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
    f584:	4621      	mov	r1, r4
    f586:	4628      	mov	r0, r5
}
    f588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
    f58c:	f7ff bede 	b.w	f34c <rp_cu_send_reject_ext_ind.constprop.0>
	switch (evt) {
    f590:	2a00      	cmp	r2, #0
    f592:	d18e      	bne.n	f4b2 <rp_cu_execute_fsm+0x26>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f594:	4628      	mov	r0, r5
    f596:	f000 fcdd 	bl	ff54 <llcp_rr_ispaused>
    f59a:	2800      	cmp	r0, #0
    f59c:	d04f      	beq.n	f63e <__kernel_ram_size+0x6e>
		ctx->state = RP_CU_STATE_WAIT_TX_CONN_PARAM_RSP;
    f59e:	2308      	movs	r3, #8
    f5a0:	72a3      	strb	r3, [r4, #10]
}
    f5a2:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    f5a4:	2a00      	cmp	r2, #0
    f5a6:	d184      	bne.n	f4b2 <rp_cu_execute_fsm+0x26>
		rp_cu_send_conn_update_ind(conn, ctx, evt, param);
    f5a8:	4621      	mov	r1, r4
    f5aa:	4628      	mov	r0, r5
}
    f5ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_send_conn_update_ind(conn, ctx, evt, param);
    f5b0:	f7ff be1e 	b.w	f1f0 <rp_cu_send_conn_update_ind.constprop.0>
	switch (evt) {
    f5b4:	2a02      	cmp	r2, #2
    f5b6:	f47f af7c 	bne.w	f4b2 <rp_cu_execute_fsm+0x26>
		switch (conn->lll.role) {
    f5ba:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f5be:	f3c2 11c0 	ubfx	r1, r2, #7, #1
    f5c2:	09d2      	lsrs	r2, r2, #7
    f5c4:	d149      	bne.n	f65a <__kernel_ram_size+0x8a>
			ctx->unknown_response.type = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    f5c6:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f5ca:	4628      	mov	r0, r5
    f5cc:	f000 fcc2 	bl	ff54 <llcp_rr_ispaused>
    f5d0:	2800      	cmp	r0, #0
    f5d2:	d07a      	beq.n	f6ca <__kernel_ram_size+0xfa>
		ctx->state = RP_CU_STATE_WAIT_TX_UNKNOWN_RSP;
    f5d4:	230d      	movs	r3, #13
    f5d6:	72a3      	strb	r3, [r4, #10]
}
    f5d8:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    f5da:	2a00      	cmp	r2, #0
    f5dc:	f47f af69 	bne.w	f4b2 <rp_cu_execute_fsm+0x26>
		rp_cu_check_instant(conn, ctx, evt, param);
    f5e0:	4621      	mov	r1, r4
    f5e2:	4628      	mov	r0, r5
}
    f5e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_check_instant(conn, ctx, evt, param);
    f5e8:	f7ff bf14 	b.w	f414 <rp_cu_check_instant.isra.0>
		LL_ASSERT(0);
    f5ec:	4a3d      	ldr	r2, [pc, #244]	; (f6e4 <__kernel_ram_size+0x114>)
    f5ee:	493e      	ldr	r1, [pc, #248]	; (f6e8 <__kernel_ram_size+0x118>)
    f5f0:	483e      	ldr	r0, [pc, #248]	; (f6ec <__kernel_ram_size+0x11c>)
    f5f2:	f240 43aa 	movw	r3, #1194	; 0x4aa
    f5f6:	f007 ff74 	bl	174e2 <assert_print>
    f5fa:	4040      	eors	r0, r0
    f5fc:	f380 8811 	msr	BASEPRI, r0
    f600:	f04f 0003 	mov.w	r0, #3
    f604:	df02      	svc	2
}
    f606:	bd70      	pop	{r4, r5, r6, pc}
	if (!llcp_ntf_alloc_is_available()) {
    f608:	f7fd fe64 	bl	d2d4 <llcp_ntf_alloc_is_available>
    f60c:	2800      	cmp	r0, #0
    f60e:	d141      	bne.n	f694 <__kernel_ram_size+0xc4>
		ctx->state = RP_CU_STATE_WAIT_NTF;
    f610:	230c      	movs	r3, #12
    f612:	72a3      	strb	r3, [r4, #10]
}
    f614:	bd70      	pop	{r4, r5, r6, pc}
		ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY_CONTINUE;
    f616:	2305      	movs	r3, #5
    f618:	72a3      	strb	r3, [r4, #10]
}
    f61a:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
    f61c:	4a31      	ldr	r2, [pc, #196]	; (f6e4 <__kernel_ram_size+0x114>)
    f61e:	4932      	ldr	r1, [pc, #200]	; (f6e8 <__kernel_ram_size+0x118>)
    f620:	4832      	ldr	r0, [pc, #200]	; (f6ec <__kernel_ram_size+0x11c>)
    f622:	f240 335b 	movw	r3, #859	; 0x35b
    f626:	f007 ff5c 	bl	174e2 <assert_print>
    f62a:	4040      	eors	r0, r0
    f62c:	f380 8811 	msr	BASEPRI, r0
    f630:	f04f 0003 	mov.w	r0, #3
    f634:	df02      	svc	2
}
    f636:	bd70      	pop	{r4, r5, r6, pc}
			ctx->state = RP_CU_STATE_WAIT_RX_CONN_UPDATE_IND;
    f638:	230a      	movs	r3, #10
    f63a:	72a3      	strb	r3, [r4, #10]
}
    f63c:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f63e:	4621      	mov	r1, r4
    f640:	4628      	mov	r0, r5
    f642:	f7fd fe33 	bl	d2ac <llcp_tx_alloc_peek>
    f646:	2800      	cmp	r0, #0
    f648:	d0a9      	beq.n	f59e <rp_cu_execute_fsm+0x112>
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP);
    f64a:	2210      	movs	r2, #16
    f64c:	4621      	mov	r1, r4
    f64e:	4628      	mov	r0, r5
    f650:	f7ff fd72 	bl	f138 <rp_cu_tx>
		ctx->state = RP_CU_STATE_WAIT_RX_CONN_UPDATE_IND;
    f654:	230a      	movs	r3, #10
    f656:	8163      	strh	r3, [r4, #10]
}
    f658:	bd70      	pop	{r4, r5, r6, pc}
			llcp_pdu_decode_conn_update_ind(ctx, param);
    f65a:	4619      	mov	r1, r3
    f65c:	4620      	mov	r0, r4
    f65e:	f7ff fc2d 	bl	eebc <llcp_pdu_decode_conn_update_ind>
			if (is_instant_not_passed(ctx->data.cu.instant,
    f662:	4628      	mov	r0, r5
    f664:	8c26      	ldrh	r6, [r4, #32]
    f666:	f7fc fb89 	bl	bd7c <ull_conn_event_counter>
    f66a:	1a33      	subs	r3, r6, r0
    f66c:	b29b      	uxth	r3, r3
    f66e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    f672:	4293      	cmp	r3, r2
    f674:	d81b      	bhi.n	f6ae <__kernel_ram_size+0xde>
				ctx->state = RP_CU_STATE_WAIT_INSTANT;
    f676:	230b      	movs	r3, #11
    f678:	72a3      	strb	r3, [r4, #10]
				rp_cu_check_instant(conn, ctx, evt, param);
    f67a:	4621      	mov	r1, r4
    f67c:	4628      	mov	r0, r5
}
    f67e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				rp_cu_check_instant(conn, ctx, evt, param);
    f682:	f7ff bec7 	b.w	f414 <rp_cu_check_instant.isra.0>
		rp_cu_conn_param_req_ntf(conn, ctx);
    f686:	4621      	mov	r1, r4
    f688:	4628      	mov	r0, r5
    f68a:	f7ff fd05 	bl	f098 <rp_cu_conn_param_req_ntf>
		ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY;
    f68e:	2304      	movs	r3, #4
    f690:	72a3      	strb	r3, [r4, #10]
}
    f692:	bd70      	pop	{r4, r5, r6, pc}
		cu_ntf(conn, ctx);
    f694:	4621      	mov	r1, r4
    f696:	4628      	mov	r0, r5
    f698:	f7ff fcca 	bl	f030 <cu_ntf>
	llcp_rr_complete(conn);
    f69c:	4628      	mov	r0, r5
    f69e:	f000 fcdf 	bl	10060 <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
    f6a2:	7a23      	ldrb	r3, [r4, #8]
    f6a4:	2b09      	cmp	r3, #9
    f6a6:	d009      	beq.n	f6bc <__kernel_ram_size+0xec>
				ctx->state = RP_CU_STATE_IDLE;
    f6a8:	2300      	movs	r3, #0
    f6aa:	72a3      	strb	r3, [r4, #10]
}
    f6ac:	bd70      	pop	{r4, r5, r6, pc}
				conn->llcp_terminate.reason_final = BT_HCI_ERR_INSTANT_PASSED;
    f6ae:	2328      	movs	r3, #40	; 0x28
    f6b0:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
				llcp_rr_complete(conn);
    f6b4:	4628      	mov	r0, r5
    f6b6:	f000 fcd3 	bl	10060 <llcp_rr_complete>
    f6ba:	e7f5      	b.n	f6a8 <__kernel_ram_size+0xd8>
	if (conn == conn_upd_curr) {
    f6bc:	4b0c      	ldr	r3, [pc, #48]	; (f6f0 <__kernel_ram_size+0x120>)
    f6be:	681a      	ldr	r2, [r3, #0]
    f6c0:	4295      	cmp	r5, r2
    f6c2:	d1f1      	bne.n	f6a8 <__kernel_ram_size+0xd8>
		conn_upd_curr = NULL;
    f6c4:	2200      	movs	r2, #0
    f6c6:	601a      	str	r2, [r3, #0]
	ctx->state = RP_CU_STATE_IDLE;
    f6c8:	e7ee      	b.n	f6a8 <__kernel_ram_size+0xd8>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f6ca:	4621      	mov	r1, r4
    f6cc:	4628      	mov	r0, r5
    f6ce:	f7fd fded 	bl	d2ac <llcp_tx_alloc_peek>
    f6d2:	2800      	cmp	r0, #0
    f6d4:	f43f af7e 	beq.w	f5d4 <__kernel_ram_size+0x4>
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP);
    f6d8:	2207      	movs	r2, #7
    f6da:	4621      	mov	r1, r4
    f6dc:	4628      	mov	r0, r5
    f6de:	f7ff fd2b 	bl	f138 <rp_cu_tx>
    f6e2:	e7db      	b.n	f69c <__kernel_ram_size+0xcc>
    f6e4:	0001c15c 	.word	0x0001c15c
    f6e8:	0001b908 	.word	0x0001b908
    f6ec:	0001b844 	.word	0x0001b844
    f6f0:	20001c90 	.word	0x20001c90

0000f6f4 <lp_cu_execute_fsm>:
{
    f6f4:	b570      	push	{r4, r5, r6, lr}
    f6f6:	460c      	mov	r4, r1
	switch (ctx->state) {
    f6f8:	7a89      	ldrb	r1, [r1, #10]
{
    f6fa:	4606      	mov	r6, r0
    f6fc:	4615      	mov	r5, r2
	switch (ctx->state) {
    f6fe:	2907      	cmp	r1, #7
    f700:	d808      	bhi.n	f714 <lp_cu_execute_fsm+0x20>
    f702:	e8df f001 	tbb	[pc, r1]
    f706:	2815      	.short	0x2815
    f708:	30600707 	.word	0x30600707
    f70c:	0439      	.short	0x0439
	switch (evt) {
    f70e:	2d00      	cmp	r5, #0
    f710:	d06e      	beq.n	f7f0 <lp_cu_execute_fsm+0xfc>
}
    f712:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
    f714:	4a63      	ldr	r2, [pc, #396]	; (f8a4 <lp_cu_execute_fsm+0x1b0>)
    f716:	4964      	ldr	r1, [pc, #400]	; (f8a8 <lp_cu_execute_fsm+0x1b4>)
    f718:	4864      	ldr	r0, [pc, #400]	; (f8ac <lp_cu_execute_fsm+0x1b8>)
    f71a:	f240 2385 	movw	r3, #645	; 0x285
    f71e:	f007 fee0 	bl	174e2 <assert_print>
    f722:	4040      	eors	r0, r0
    f724:	f380 8811 	msr	BASEPRI, r0
    f728:	f04f 0003 	mov.w	r0, #3
    f72c:	df02      	svc	2
}
    f72e:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    f730:	2d00      	cmp	r5, #0
    f732:	d1ee      	bne.n	f712 <lp_cu_execute_fsm+0x1e>
		switch (ctx->proc) {
    f734:	7a23      	ldrb	r3, [r4, #8]
    f736:	2b09      	cmp	r3, #9
    f738:	d00f      	beq.n	f75a <lp_cu_execute_fsm+0x66>
			LL_ASSERT(0);
    f73a:	4a5a      	ldr	r2, [pc, #360]	; (f8a4 <lp_cu_execute_fsm+0x1b0>)
    f73c:	495a      	ldr	r1, [pc, #360]	; (f8a8 <lp_cu_execute_fsm+0x1b4>)
    f73e:	485b      	ldr	r0, [pc, #364]	; (f8ac <lp_cu_execute_fsm+0x1b8>)
    f740:	f240 13a7 	movw	r3, #423	; 0x1a7
    f744:	f007 fecd 	bl	174e2 <assert_print>
    f748:	4040      	eors	r0, r0
    f74a:	f380 8811 	msr	BASEPRI, r0
    f74e:	f04f 0003 	mov.w	r0, #3
    f752:	df02      	svc	2
}
    f754:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    f756:	2d00      	cmp	r5, #0
    f758:	d1db      	bne.n	f712 <lp_cu_execute_fsm+0x1e>
			lp_cu_send_conn_param_req(conn, ctx, evt, param);
    f75a:	4621      	mov	r1, r4
    f75c:	4630      	mov	r0, r6
}
    f75e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			lp_cu_send_conn_param_req(conn, ctx, evt, param);
    f762:	f7ff bd83 	b.w	f26c <lp_cu_send_conn_param_req.constprop.0>
	switch (evt) {
    f766:	2d00      	cmp	r5, #0
    f768:	d1d3      	bne.n	f712 <lp_cu_execute_fsm+0x1e>
	if (llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f76a:	f7ff f841 	bl	e7f0 <llcp_lr_ispaused>
    f76e:	2800      	cmp	r0, #0
    f770:	d057      	beq.n	f822 <lp_cu_execute_fsm+0x12e>
		ctx->state = LP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
    f772:	2305      	movs	r3, #5
    f774:	72a3      	strb	r3, [r4, #10]
}
    f776:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    f778:	2d00      	cmp	r5, #0
    f77a:	d1ca      	bne.n	f712 <lp_cu_execute_fsm+0x1e>
	uint16_t event_counter = ull_conn_event_counter(conn);
    f77c:	f7fc fafe 	bl	bd7c <ull_conn_event_counter>
	if (is_instant_reached_or_passed(ctx->data.cu.instant, event_counter)) {
    f780:	8c23      	ldrh	r3, [r4, #32]
    f782:	1ac0      	subs	r0, r0, r3
    f784:	0403      	lsls	r3, r0, #16
    f786:	d4c4      	bmi.n	f712 <lp_cu_execute_fsm+0x1e>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
    f788:	4629      	mov	r1, r5
    f78a:	4630      	mov	r0, r6
    f78c:	f000 fbd0 	bl	ff30 <llcp_rr_set_incompat>
		cu_update_conn_parameters(conn, ctx);
    f790:	4621      	mov	r1, r4
    f792:	4630      	mov	r0, r6
    f794:	f7ff fcaa 	bl	f0ec <cu_update_conn_parameters>
		if (ctx->proc == PROC_CONN_PARAM_REQ) {
    f798:	7a23      	ldrb	r3, [r4, #8]
    f79a:	2b09      	cmp	r3, #9
    f79c:	d063      	beq.n	f866 <lp_cu_execute_fsm+0x172>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
    f79e:	7fa3      	ldrb	r3, [r4, #30]
    f7a0:	b143      	cbz	r3, f7b4 <lp_cu_execute_fsm+0xc0>
			ctx->data.cu.error = BT_HCI_ERR_SUCCESS;
    f7a2:	2300      	movs	r3, #0
    f7a4:	7723      	strb	r3, [r4, #28]
	if (!llcp_ntf_alloc_is_available()) {
    f7a6:	f7fd fd95 	bl	d2d4 <llcp_ntf_alloc_is_available>
    f7aa:	b328      	cbz	r0, f7f8 <lp_cu_execute_fsm+0x104>
		cu_ntf(conn, ctx);
    f7ac:	4621      	mov	r1, r4
    f7ae:	4630      	mov	r0, r6
    f7b0:	f7ff fc3e 	bl	f030 <cu_ntf>
	llcp_lr_complete(conn);
    f7b4:	4630      	mov	r0, r6
    f7b6:	f7ff f8af 	bl	e918 <llcp_lr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
    f7ba:	7a23      	ldrb	r3, [r4, #8]
    f7bc:	2b09      	cmp	r3, #9
    f7be:	d025      	beq.n	f80c <lp_cu_execute_fsm+0x118>
	ctx->state = LP_CU_STATE_IDLE;
    f7c0:	2300      	movs	r3, #0
    f7c2:	72a3      	strb	r3, [r4, #10]
}
    f7c4:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    f7c6:	2d03      	cmp	r5, #3
    f7c8:	d019      	beq.n	f7fe <lp_cu_execute_fsm+0x10a>
    f7ca:	2d04      	cmp	r5, #4
    f7cc:	d008      	beq.n	f7e0 <lp_cu_execute_fsm+0xec>
    f7ce:	2d02      	cmp	r5, #2
    f7d0:	d19f      	bne.n	f712 <lp_cu_execute_fsm+0x1e>
		llcp_pdu_decode_conn_update_ind(ctx, param);
    f7d2:	4619      	mov	r1, r3
    f7d4:	4620      	mov	r0, r4
    f7d6:	f7ff fb71 	bl	eebc <llcp_pdu_decode_conn_update_ind>
		ctx->state = LP_CU_STATE_WAIT_INSTANT;
    f7da:	2306      	movs	r3, #6
    f7dc:	72a3      	strb	r3, [r4, #10]
}
    f7de:	bd70      	pop	{r4, r5, r6, pc}
    f7e0:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
		ctx->data.cu.error = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    f7e4:	221a      	movs	r2, #26
    f7e6:	f023 0302 	bic.w	r3, r3, #2
    f7ea:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    f7ee:	7722      	strb	r2, [r4, #28]
	if (!llcp_ntf_alloc_is_available()) {
    f7f0:	f7fd fd70 	bl	d2d4 <llcp_ntf_alloc_is_available>
    f7f4:	2800      	cmp	r0, #0
    f7f6:	d1d9      	bne.n	f7ac <lp_cu_execute_fsm+0xb8>
		ctx->state = LP_CU_STATE_WAIT_NTF;
    f7f8:	2307      	movs	r3, #7
    f7fa:	72a3      	strb	r3, [r4, #10]
}
    f7fc:	bd70      	pop	{r4, r5, r6, pc}
		ctx->data.cu.error = pdu->llctrl.reject_ext_ind.error_code;
    f7fe:	795b      	ldrb	r3, [r3, #5]
    f800:	7723      	strb	r3, [r4, #28]
	if (!llcp_ntf_alloc_is_available()) {
    f802:	f7fd fd67 	bl	d2d4 <llcp_ntf_alloc_is_available>
    f806:	2800      	cmp	r0, #0
    f808:	d0f6      	beq.n	f7f8 <lp_cu_execute_fsm+0x104>
    f80a:	e7cf      	b.n	f7ac <lp_cu_execute_fsm+0xb8>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
    f80c:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
    f810:	2b00      	cmp	r3, #0
    f812:	db32      	blt.n	f87a <lp_cu_execute_fsm+0x186>
	if (conn == conn_upd_curr) {
    f814:	4b26      	ldr	r3, [pc, #152]	; (f8b0 <lp_cu_execute_fsm+0x1bc>)
    f816:	681a      	ldr	r2, [r3, #0]
    f818:	4296      	cmp	r6, r2
    f81a:	d1d1      	bne.n	f7c0 <lp_cu_execute_fsm+0xcc>
		conn_upd_curr = NULL;
    f81c:	2200      	movs	r2, #0
    f81e:	601a      	str	r2, [r3, #0]
    f820:	e7ce      	b.n	f7c0 <lp_cu_execute_fsm+0xcc>
	if (llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f822:	4621      	mov	r1, r4
    f824:	4630      	mov	r0, r6
    f826:	f7fd fd41 	bl	d2ac <llcp_tx_alloc_peek>
    f82a:	2800      	cmp	r0, #0
    f82c:	d0a1      	beq.n	f772 <lp_cu_execute_fsm+0x7e>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
    f82e:	4629      	mov	r1, r5
    f830:	4630      	mov	r0, r6
    f832:	f000 fb7d 	bl	ff30 <llcp_rr_set_incompat>
	tx = llcp_tx_alloc(conn, ctx);
    f836:	4621      	mov	r1, r4
    f838:	4630      	mov	r0, r6
    f83a:	f7fd fd3f 	bl	d2bc <llcp_tx_alloc>
	LL_ASSERT(tx);
    f83e:	4605      	mov	r5, r0
    f840:	b308      	cbz	r0, f886 <lp_cu_execute_fsm+0x192>
		llcp_pdu_encode_reject_ext_ind(pdu, ctx->data.cu.rejected_opcode,
    f842:	7f22      	ldrb	r2, [r4, #28]
    f844:	7f61      	ldrb	r1, [r4, #29]
    f846:	1d28      	adds	r0, r5, #4
    f848:	f7ff fa46 	bl	ecd8 <llcp_pdu_encode_reject_ext_ind>
	ctx->tx_opcode = pdu->llctrl.opcode;
    f84c:	79eb      	ldrb	r3, [r5, #7]
    f84e:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
    f850:	4629      	mov	r1, r5
    f852:	4630      	mov	r0, r6
    f854:	f7fd fd50 	bl	d2f8 <llcp_tx_enqueue>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
    f858:	7a23      	ldrb	r3, [r4, #8]
    f85a:	2b09      	cmp	r3, #9
    f85c:	d1aa      	bne.n	f7b4 <lp_cu_execute_fsm+0xc0>
		llcp_lr_prt_restart(conn);
    f85e:	4630      	mov	r0, r6
    f860:	f7fe ffd6 	bl	e810 <llcp_lr_prt_restart>
	llcp_lr_complete(conn);
    f864:	e7a6      	b.n	f7b4 <lp_cu_execute_fsm+0xc0>
			llcp_lr_prt_stop(conn);
    f866:	4630      	mov	r0, r6
    f868:	f7fe ffdc 	bl	e824 <llcp_lr_prt_stop>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
    f86c:	7a23      	ldrb	r3, [r4, #8]
    f86e:	2b09      	cmp	r3, #9
    f870:	d195      	bne.n	f79e <lp_cu_execute_fsm+0xaa>
    f872:	7f23      	ldrb	r3, [r4, #28]
    f874:	2b00      	cmp	r3, #0
    f876:	d194      	bne.n	f7a2 <lp_cu_execute_fsm+0xae>
    f878:	e791      	b.n	f79e <lp_cu_execute_fsm+0xaa>
	    !(conn->lll.role && ull_cp_remote_cpr_pending(conn))) {
    f87a:	4630      	mov	r0, r6
    f87c:	f7fe f82a 	bl	d8d4 <ull_cp_remote_cpr_pending>
    f880:	2800      	cmp	r0, #0
    f882:	d0c7      	beq.n	f814 <lp_cu_execute_fsm+0x120>
    f884:	e79c      	b.n	f7c0 <lp_cu_execute_fsm+0xcc>
	LL_ASSERT(tx);
    f886:	4a07      	ldr	r2, [pc, #28]	; (f8a4 <lp_cu_execute_fsm+0x1b0>)
    f888:	490a      	ldr	r1, [pc, #40]	; (f8b4 <lp_cu_execute_fsm+0x1c0>)
    f88a:	4808      	ldr	r0, [pc, #32]	; (f8ac <lp_cu_execute_fsm+0x1b8>)
    f88c:	f240 1311 	movw	r3, #273	; 0x111
    f890:	f007 fe27 	bl	174e2 <assert_print>
    f894:	4040      	eors	r0, r0
    f896:	f380 8811 	msr	BASEPRI, r0
    f89a:	f04f 0003 	mov.w	r0, #3
    f89e:	df02      	svc	2
    f8a0:	e7cf      	b.n	f842 <lp_cu_execute_fsm+0x14e>
    f8a2:	bf00      	nop
    f8a4:	0001c15c 	.word	0x0001c15c
    f8a8:	0001b908 	.word	0x0001b908
    f8ac:	0001b844 	.word	0x0001b844
    f8b0:	20001c90 	.word	0x20001c90
    f8b4:	0001bee8 	.word	0x0001bee8

0000f8b8 <llcp_lp_cu_rx>:
{
    f8b8:	b510      	push	{r4, lr}
	switch (pdu->llctrl.opcode) {
    f8ba:	f892 c01f 	ldrb.w	ip, [r2, #31]
{
    f8be:	b082      	sub	sp, #8
    f8c0:	4604      	mov	r4, r0
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
    f8c2:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
    f8c6:	f1bc 0f11 	cmp.w	ip, #17
    f8ca:	d80a      	bhi.n	f8e2 <llcp_lp_cu_rx+0x2a>
    f8cc:	e8df f00c 	tbb	[pc, ip]
    f8d0:	0909092c 	.word	0x0909092c
    f8d4:	25090909 	.word	0x25090909
    f8d8:	09090909 	.word	0x09090909
    f8dc:	09090909 	.word	0x09090909
    f8e0:	171e      	.short	0x171e
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
    f8e2:	2324      	movs	r3, #36	; 0x24
    f8e4:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
    f8e8:	9101      	str	r1, [sp, #4]
	llcp_lr_complete(conn);
    f8ea:	f7ff f815 	bl	e918 <llcp_lr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
    f8ee:	9901      	ldr	r1, [sp, #4]
    f8f0:	7a0b      	ldrb	r3, [r1, #8]
    f8f2:	2b09      	cmp	r3, #9
    f8f4:	d01f      	beq.n	f936 <llcp_lp_cu_rx+0x7e>
	ctx->state = LP_CU_STATE_IDLE;
    f8f6:	2300      	movs	r3, #0
    f8f8:	728b      	strb	r3, [r1, #10]
}
    f8fa:	b002      	add	sp, #8
    f8fc:	bd10      	pop	{r4, pc}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
    f8fe:	2203      	movs	r2, #3
    f900:	4620      	mov	r0, r4
}
    f902:	b002      	add	sp, #8
    f904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
    f908:	f7ff bef4 	b.w	f6f4 <lp_cu_execute_fsm>
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_CONN_PARAM_RSP, pdu);
    f90c:	2201      	movs	r2, #1
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
    f90e:	4620      	mov	r0, r4
}
    f910:	b002      	add	sp, #8
    f912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
    f916:	f7ff beed 	b.w	f6f4 <lp_cu_execute_fsm>
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_UNKNOWN, pdu);
    f91a:	2204      	movs	r2, #4
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
    f91c:	4620      	mov	r0, r4
}
    f91e:	b002      	add	sp, #8
    f920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
    f924:	f7ff bee6 	b.w	f6f4 <lp_cu_execute_fsm>
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_CONN_UPDATE_IND, pdu);
    f928:	2202      	movs	r2, #2
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
    f92a:	4620      	mov	r0, r4
}
    f92c:	b002      	add	sp, #8
    f92e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
    f932:	f7ff bedf 	b.w	f6f4 <lp_cu_execute_fsm>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
    f936:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    f93a:	2b00      	cmp	r3, #0
    f93c:	db06      	blt.n	f94c <llcp_lp_cu_rx+0x94>
	if (conn == conn_upd_curr) {
    f93e:	4b07      	ldr	r3, [pc, #28]	; (f95c <llcp_lp_cu_rx+0xa4>)
    f940:	681a      	ldr	r2, [r3, #0]
    f942:	4294      	cmp	r4, r2
    f944:	d1d7      	bne.n	f8f6 <llcp_lp_cu_rx+0x3e>
		conn_upd_curr = NULL;
    f946:	2200      	movs	r2, #0
    f948:	601a      	str	r2, [r3, #0]
    f94a:	e7d4      	b.n	f8f6 <llcp_lp_cu_rx+0x3e>
	    !(conn->lll.role && ull_cp_remote_cpr_pending(conn))) {
    f94c:	4620      	mov	r0, r4
    f94e:	9101      	str	r1, [sp, #4]
    f950:	f7fd ffc0 	bl	d8d4 <ull_cp_remote_cpr_pending>
    f954:	9901      	ldr	r1, [sp, #4]
    f956:	2800      	cmp	r0, #0
    f958:	d0f1      	beq.n	f93e <llcp_lp_cu_rx+0x86>
    f95a:	e7cc      	b.n	f8f6 <llcp_lp_cu_rx+0x3e>
    f95c:	20001c90 	.word	0x20001c90

0000f960 <llcp_lp_cu_init_proc>:
	ctx->state = LP_CU_STATE_IDLE;
    f960:	2300      	movs	r3, #0
    f962:	7283      	strb	r3, [r0, #10]
}
    f964:	4770      	bx	lr
    f966:	bf00      	nop

0000f968 <llcp_lp_cu_run>:
{
    f968:	4613      	mov	r3, r2
	lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_RUN, param);
    f96a:	2200      	movs	r2, #0
    f96c:	f7ff bec2 	b.w	f6f4 <lp_cu_execute_fsm>

0000f970 <llcp_rp_cu_rx>:

void llcp_rp_cu_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
    f970:	b570      	push	{r4, r5, r6, lr}
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
    f972:	7fd5      	ldrb	r5, [r2, #31]
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
    f974:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
    f978:	b135      	cbz	r5, f988 <llcp_rp_cu_rx+0x18>
    f97a:	2d0f      	cmp	r5, #15
    f97c:	d109      	bne.n	f992 <llcp_rp_cu_rx+0x22>
		/* Invalid PDU received so terminate connection */
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
		rp_cu_complete(conn, ctx);
		break;
	}
}
    f97e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_PARAM_REQ, pdu);
    f982:	2201      	movs	r2, #1
    f984:	f7ff bd82 	b.w	f48c <rp_cu_execute_fsm>
}
    f988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_UPDATE_IND, pdu);
    f98c:	2202      	movs	r2, #2
    f98e:	f7ff bd7d 	b.w	f48c <rp_cu_execute_fsm>
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
    f992:	2324      	movs	r3, #36	; 0x24
    f994:	460e      	mov	r6, r1
    f996:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
		rp_cu_complete(conn, ctx);
    f99a:	4604      	mov	r4, r0
	llcp_rr_complete(conn);
    f99c:	f000 fb60 	bl	10060 <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
    f9a0:	7a33      	ldrb	r3, [r6, #8]
    f9a2:	2b09      	cmp	r3, #9
    f9a4:	d105      	bne.n	f9b2 <llcp_rp_cu_rx+0x42>
	if (conn == conn_upd_curr) {
    f9a6:	4b04      	ldr	r3, [pc, #16]	; (f9b8 <llcp_rp_cu_rx+0x48>)
    f9a8:	681a      	ldr	r2, [r3, #0]
    f9aa:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    f9ac:	bf04      	itt	eq
    f9ae:	2200      	moveq	r2, #0
    f9b0:	601a      	streq	r2, [r3, #0]
	ctx->state = RP_CU_STATE_IDLE;
    f9b2:	2300      	movs	r3, #0
    f9b4:	72b3      	strb	r3, [r6, #10]
}
    f9b6:	bd70      	pop	{r4, r5, r6, pc}
    f9b8:	20001c90 	.word	0x20001c90

0000f9bc <llcp_rp_cu_init_proc>:

void llcp_rp_cu_init_proc(struct proc_ctx *ctx)
    f9bc:	2300      	movs	r3, #0
    f9be:	7283      	strb	r3, [r0, #10]
    f9c0:	4770      	bx	lr
    f9c2:	bf00      	nop

0000f9c4 <llcp_rp_cu_run>:
{
	ctx->state = RP_CU_STATE_IDLE;
}

void llcp_rp_cu_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
    f9c4:	4613      	mov	r3, r2
	rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_RUN, param);
    f9c6:	2200      	movs	r2, #0
    f9c8:	f7ff bd60 	b.w	f48c <rp_cu_execute_fsm>

0000f9cc <llcp_rp_conn_param_req_reply>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
void llcp_rp_conn_param_req_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_PARAM_REQ_REPLY, NULL);
    f9cc:	2300      	movs	r3, #0
    f9ce:	2203      	movs	r2, #3
    f9d0:	f7ff bd5c 	b.w	f48c <rp_cu_execute_fsm>

0000f9d4 <llcp_rp_conn_param_req_neg_reply>:
}

void llcp_rp_conn_param_req_neg_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_PARAM_REQ_NEG_REPLY, NULL);
    f9d4:	2300      	movs	r3, #0
    f9d6:	2204      	movs	r2, #4
    f9d8:	f7ff bd58 	b.w	f48c <rp_cu_execute_fsm>

0000f9dc <llcp_rp_chmu_rx>:
		LL_ASSERT(0);
	}
}

void llcp_rp_chmu_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
    f9dc:	b570      	push	{r4, r5, r6, lr}
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
    f9de:	7fd3      	ldrb	r3, [r2, #31]
    f9e0:	2b01      	cmp	r3, #1
{
    f9e2:	4605      	mov	r5, r0
    f9e4:	460c      	mov	r4, r1
	switch (pdu->llctrl.opcode) {
    f9e6:	d007      	beq.n	f9f8 <llcp_rp_chmu_rx+0x1c>
		rp_chmu_execute_fsm(conn, ctx, RP_CHMU_EVT_RX_CHAN_MAP_IND, pdu);
		break;
	default:
		/* Invalid behaviour */
		/* Invalid PDU received so terminate connection */
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
    f9e8:	2324      	movs	r3, #36	; 0x24
    f9ea:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
		llcp_rr_complete(conn);
    f9ee:	f000 fb37 	bl	10060 <llcp_rr_complete>
		ctx->state = RP_CHMU_STATE_IDLE;
    f9f2:	2300      	movs	r3, #0
    f9f4:	72a3      	strb	r3, [r4, #10]
		break;
	}
}
    f9f6:	bd70      	pop	{r4, r5, r6, pc}
	switch (ctx->state) {
    f9f8:	7a8b      	ldrb	r3, [r1, #10]
    f9fa:	2b01      	cmp	r3, #1
    f9fc:	d010      	beq.n	fa20 <llcp_rp_chmu_rx+0x44>
    f9fe:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    fa02:	d0f8      	beq.n	f9f6 <llcp_rp_chmu_rx+0x1a>
		LL_ASSERT(0);
    fa04:	4a14      	ldr	r2, [pc, #80]	; (fa58 <llcp_rp_chmu_rx+0x7c>)
    fa06:	4915      	ldr	r1, [pc, #84]	; (fa5c <llcp_rp_chmu_rx+0x80>)
    fa08:	4815      	ldr	r0, [pc, #84]	; (fa60 <llcp_rp_chmu_rx+0x84>)
    fa0a:	f240 132b 	movw	r3, #299	; 0x12b
    fa0e:	f007 fd68 	bl	174e2 <assert_print>
    fa12:	4040      	eors	r0, r0
    fa14:	f380 8811 	msr	BASEPRI, r0
    fa18:	f04f 0003 	mov.w	r0, #3
    fa1c:	df02      	svc	2
}
    fa1e:	bd70      	pop	{r4, r5, r6, pc}
		llcp_pdu_decode_chan_map_update_ind(ctx, param);
    fa20:	f102 011c 	add.w	r1, r2, #28
    fa24:	4620      	mov	r0, r4
    fa26:	f7ff fa63 	bl	eef0 <llcp_pdu_decode_chan_map_update_ind>
		if (is_instant_not_passed(ctx->data.chmu.instant,
    fa2a:	4628      	mov	r0, r5
    fa2c:	8ba6      	ldrh	r6, [r4, #28]
    fa2e:	f7fc f9a5 	bl	bd7c <ull_conn_event_counter>
    fa32:	1a36      	subs	r6, r6, r0
    fa34:	b2b6      	uxth	r6, r6
    fa36:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    fa3a:	429e      	cmp	r6, r3
    fa3c:	d802      	bhi.n	fa44 <llcp_rp_chmu_rx+0x68>
			ctx->state = RP_CHMU_STATE_WAIT_INSTANT;
    fa3e:	2302      	movs	r3, #2
    fa40:	72a3      	strb	r3, [r4, #10]
}
    fa42:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_final = BT_HCI_ERR_INSTANT_PASSED;
    fa44:	2328      	movs	r3, #40	; 0x28
    fa46:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
			llcp_rr_complete(conn);
    fa4a:	4628      	mov	r0, r5
    fa4c:	f000 fb08 	bl	10060 <llcp_rr_complete>
			ctx->state = RP_CHMU_STATE_IDLE;
    fa50:	2300      	movs	r3, #0
    fa52:	72a3      	strb	r3, [r4, #10]
}
    fa54:	bd70      	pop	{r4, r5, r6, pc}
    fa56:	bf00      	nop
    fa58:	0001c1a8 	.word	0x0001c1a8
    fa5c:	0001b908 	.word	0x0001b908
    fa60:	0001b844 	.word	0x0001b844

0000fa64 <llcp_rp_chmu_init_proc>:

void llcp_rp_chmu_init_proc(struct proc_ctx *ctx)
{
	ctx->state = RP_CHMU_STATE_IDLE;
    fa64:	2300      	movs	r3, #0
    fa66:	7283      	strb	r3, [r0, #10]
}
    fa68:	4770      	bx	lr
    fa6a:	bf00      	nop

0000fa6c <llcp_rp_chmu_run>:

void llcp_rp_chmu_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
    fa6c:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->state) {
    fa6e:	7a8b      	ldrb	r3, [r1, #10]
    fa70:	2b01      	cmp	r3, #1
    fa72:	d010      	beq.n	fa96 <llcp_rp_chmu_run+0x2a>
    fa74:	2b02      	cmp	r3, #2
    fa76:	460c      	mov	r4, r1
    fa78:	d00e      	beq.n	fa98 <llcp_rp_chmu_run+0x2c>
    fa7a:	b1fb      	cbz	r3, fabc <llcp_rp_chmu_run+0x50>
		LL_ASSERT(0);
    fa7c:	4a11      	ldr	r2, [pc, #68]	; (fac4 <llcp_rp_chmu_run+0x58>)
    fa7e:	4912      	ldr	r1, [pc, #72]	; (fac8 <llcp_rp_chmu_run+0x5c>)
    fa80:	4812      	ldr	r0, [pc, #72]	; (facc <llcp_rp_chmu_run+0x60>)
    fa82:	f240 132b 	movw	r3, #299	; 0x12b
    fa86:	f007 fd2c 	bl	174e2 <assert_print>
    fa8a:	4040      	eors	r0, r0
    fa8c:	f380 8811 	msr	BASEPRI, r0
    fa90:	f04f 0003 	mov.w	r0, #3
    fa94:	df02      	svc	2
	rp_chmu_execute_fsm(conn, ctx, RP_CHMU_EVT_RUN, param);
}
    fa96:	bd38      	pop	{r3, r4, r5, pc}
	uint16_t event_counter = ull_conn_event_counter(conn);
    fa98:	4605      	mov	r5, r0
    fa9a:	f7fc f96f 	bl	bd7c <ull_conn_event_counter>
	if (((event_counter - ctx->data.chmu.instant) & 0xFFFF) <= 0x7FFF) {
    fa9e:	8ba3      	ldrh	r3, [r4, #28]
    faa0:	1ac0      	subs	r0, r0, r3
    faa2:	0403      	lsls	r3, r0, #16
    faa4:	d4f7      	bmi.n	fa96 <llcp_rp_chmu_run+0x2a>
	ull_conn_chan_map_set(conn, ctx->data.chmu.chm);
    faa6:	f104 011e 	add.w	r1, r4, #30
    faaa:	4628      	mov	r0, r5
    faac:	f7fc f974 	bl	bd98 <ull_conn_chan_map_set>
	llcp_rr_complete(conn);
    fab0:	4628      	mov	r0, r5
    fab2:	f000 fad5 	bl	10060 <llcp_rr_complete>
	ctx->state = RP_CHMU_STATE_IDLE;
    fab6:	2300      	movs	r3, #0
    fab8:	72a3      	strb	r3, [r4, #10]
}
    faba:	bd38      	pop	{r3, r4, r5, pc}
		ctx->state = RP_CHMU_STATE_WAIT_RX_CHAN_MAP_IND;
    fabc:	2301      	movs	r3, #1
    fabe:	728b      	strb	r3, [r1, #10]
}
    fac0:	bd38      	pop	{r3, r4, r5, pc}
    fac2:	bf00      	nop
    fac4:	0001c1a8 	.word	0x0001c1a8
    fac8:	0001b908 	.word	0x0001b908
    facc:	0001b844 	.word	0x0001b844

0000fad0 <rr_act_disconnect>:
{
	/* Empty on purpose */
}

static void rr_act_disconnect(struct ll_conn *conn)
{
    fad0:	b510      	push	{r4, lr}
    fad2:	4604      	mov	r4, r0
    fad4:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
    fad8:	b170      	cbz	r0, faf8 <rr_act_disconnect+0x28>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fada:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	return node->next;
    fade:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    fae0:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fae4:	4290      	cmp	r0, r2
	list->tail = node;
    fae6:	bf08      	it	eq
    fae8:	f8c4 30fc 	streq.w	r3, [r4, #252]	; 0xfc
	 * we may have been disconnected in the
	 * middle of a control procedure, in  which
	 * case we need to release all contexts
	 */
	while (ctx != NULL) {
		llcp_proc_ctx_release(ctx);
    faec:	f7fd fbbc 	bl	d268 <llcp_proc_ctx_release>
	return list->head;
    faf0:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
    faf4:	2800      	cmp	r0, #0
    faf6:	d1f0      	bne.n	fada <rr_act_disconnect+0xa>
		ctx = rr_dequeue(conn);
	}
}
    faf8:	bd10      	pop	{r4, pc}
    fafa:	bf00      	nop

0000fafc <llcp_rr_check_done.part.0>:
void llcp_rr_check_done(struct ll_conn *conn, struct proc_ctx *ctx)
    fafc:	b538      	push	{r3, r4, r5, lr}
		LL_ASSERT(ctx_header == ctx);
    fafe:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
    fb02:	428b      	cmp	r3, r1
void llcp_rr_check_done(struct ll_conn *conn, struct proc_ctx *ctx)
    fb04:	4604      	mov	r4, r0
    fb06:	460d      	mov	r5, r1
		LL_ASSERT(ctx_header == ctx);
    fb08:	d01c      	beq.n	fb44 <llcp_rr_check_done.part.0+0x48>
    fb0a:	4a0f      	ldr	r2, [pc, #60]	; (fb48 <llcp_rr_check_done.part.0+0x4c>)
    fb0c:	490f      	ldr	r1, [pc, #60]	; (fb4c <llcp_rr_check_done.part.0+0x50>)
    fb0e:	4810      	ldr	r0, [pc, #64]	; (fb50 <llcp_rr_check_done.part.0+0x54>)
    fb10:	2376      	movs	r3, #118	; 0x76
    fb12:	f007 fce6 	bl	174e2 <assert_print>
    fb16:	4040      	eors	r0, r0
    fb18:	f380 8811 	msr	BASEPRI, r0
    fb1c:	f04f 0003 	mov.w	r0, #3
    fb20:	df02      	svc	2
	return list->head;
    fb22:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
    fb26:	b143      	cbz	r3, fb3a <llcp_rr_check_done.part.0+0x3e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fb28:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
	return node->next;
    fb2c:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    fb2e:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fb32:	4299      	cmp	r1, r3
	list->tail = node;
    fb34:	bf08      	it	eq
    fb36:	f8c4 20fc 	streq.w	r2, [r4, #252]	; 0xfc
		llcp_proc_ctx_release(ctx);
    fb3a:	4628      	mov	r0, r5
}
    fb3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		llcp_proc_ctx_release(ctx);
    fb40:	f7fd bb92 	b.w	d268 <llcp_proc_ctx_release>
    fb44:	460b      	mov	r3, r1
    fb46:	e7ee      	b.n	fb26 <llcp_rr_check_done.part.0+0x2a>
    fb48:	0001c1f0 	.word	0x0001c1f0
    fb4c:	0001c148 	.word	0x0001c148
    fb50:	0001b844 	.word	0x0001b844

0000fb54 <rr_act_run>:
{
    fb54:	b538      	push	{r3, r4, r5, lr}
	return list->head;
    fb56:	f8d0 50f8 	ldr.w	r5, [r0, #248]	; 0xf8
	switch (ctx->proc) {
    fb5a:	7a2b      	ldrb	r3, [r5, #8]
    fb5c:	3b01      	subs	r3, #1
{
    fb5e:	4604      	mov	r4, r0
	switch (ctx->proc) {
    fb60:	2b0b      	cmp	r3, #11
    fb62:	d828      	bhi.n	fbb6 <rr_act_run+0x62>
    fb64:	e8df f003 	tbb	[pc, r3]
    fb68:	06060606 	.word	0x06060606
    fb6c:	131d1818 	.word	0x131d1818
    fb70:	06220613 	.word	0x06220613
		llcp_rp_comm_run(conn, ctx, NULL);
    fb74:	2200      	movs	r2, #0
    fb76:	4629      	mov	r1, r5
    fb78:	f7fe fc8e 	bl	e498 <llcp_rp_comm_run>
	if (ctx->done) {
    fb7c:	69ab      	ldr	r3, [r5, #24]
    fb7e:	b12b      	cbz	r3, fb8c <rr_act_run+0x38>
    fb80:	4629      	mov	r1, r5
    fb82:	4620      	mov	r0, r4
}
    fb84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fb88:	f7ff bfb8 	b.w	fafc <llcp_rr_check_done.part.0>
    fb8c:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_cu_run(conn, ctx, NULL);
    fb8e:	2200      	movs	r2, #0
    fb90:	4629      	mov	r1, r5
    fb92:	f7ff ff17 	bl	f9c4 <llcp_rp_cu_run>
		break;
    fb96:	e7f1      	b.n	fb7c <rr_act_run+0x28>
		llcp_rp_enc_run(conn, ctx, NULL);
    fb98:	2200      	movs	r2, #0
    fb9a:	4629      	mov	r1, r5
    fb9c:	f7fc fd60 	bl	c660 <llcp_rp_enc_run>
		break;
    fba0:	e7ec      	b.n	fb7c <rr_act_run+0x28>
		llcp_rp_pu_run(conn, ctx, NULL);
    fba2:	2200      	movs	r2, #0
    fba4:	4629      	mov	r1, r5
    fba6:	f7fd fa5d 	bl	d064 <llcp_rp_pu_run>
		break;
    fbaa:	e7e7      	b.n	fb7c <rr_act_run+0x28>
		llcp_rp_chmu_run(conn, ctx, NULL);
    fbac:	2200      	movs	r2, #0
    fbae:	4629      	mov	r1, r5
    fbb0:	f7ff ff5c 	bl	fa6c <llcp_rp_chmu_run>
		break;
    fbb4:	e7e2      	b.n	fb7c <rr_act_run+0x28>
		LL_ASSERT(0);
    fbb6:	4a07      	ldr	r2, [pc, #28]	; (fbd4 <rr_act_run+0x80>)
    fbb8:	4907      	ldr	r1, [pc, #28]	; (fbd8 <rr_act_run+0x84>)
    fbba:	4808      	ldr	r0, [pc, #32]	; (fbdc <rr_act_run+0x88>)
    fbbc:	f240 13a3 	movw	r3, #419	; 0x1a3
    fbc0:	f007 fc8f 	bl	174e2 <assert_print>
    fbc4:	4040      	eors	r0, r0
    fbc6:	f380 8811 	msr	BASEPRI, r0
    fbca:	f04f 0003 	mov.w	r0, #3
    fbce:	df02      	svc	2
		break;
    fbd0:	e7d4      	b.n	fb7c <rr_act_run+0x28>
    fbd2:	bf00      	nop
    fbd4:	0001c1f0 	.word	0x0001c1f0
    fbd8:	0001b908 	.word	0x0001b908
    fbdc:	0001b844 	.word	0x0001b844

0000fbe0 <rr_st_active.constprop.0>:
	rr_act_unsupported(conn);
}

static void rr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
{
	switch (evt) {
    fbe0:	2902      	cmp	r1, #2
static void rr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
    fbe2:	b538      	push	{r3, r4, r5, lr}
    fbe4:	4605      	mov	r5, r0
	switch (evt) {
    fbe6:	d012      	beq.n	fc0e <rr_st_active.constprop.0+0x2e>
    fbe8:	2904      	cmp	r1, #4
    fbea:	460c      	mov	r4, r1
    fbec:	d00a      	beq.n	fc04 <rr_st_active.constprop.0+0x24>
    fbee:	2901      	cmp	r1, #1
    fbf0:	d000      	beq.n	fbf4 <rr_st_active.constprop.0+0x14>
		break;
	default:
		/* Ignore other evts */
		break;
	}
}
    fbf2:	bd38      	pop	{r3, r4, r5, pc}
		if (llcp_rr_peek(conn)) {
    fbf4:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
    fbf8:	2b00      	cmp	r3, #0
    fbfa:	d0fa      	beq.n	fbf2 <rr_st_active.constprop.0+0x12>
}
    fbfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			rr_act_run(conn);
    fc00:	f7ff bfa8 	b.w	fb54 <rr_act_run>
		rr_act_disconnect(conn);
    fc04:	f7ff ff64 	bl	fad0 <rr_act_disconnect>
	conn->llcp.remote.state = state;
    fc08:	f885 4100 	strb.w	r4, [r5, #256]	; 0x100
}
    fc0c:	bd38      	pop	{r3, r4, r5, pc}
    fc0e:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
	conn->llcp.remote.collision = collision;
    fc12:	2300      	movs	r3, #0
    fc14:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
	LL_ASSERT(ctx != NULL);
    fc18:	b13c      	cbz	r4, fc2a <rr_st_active.constprop.0+0x4a>
	conn->llcp.remote.prt_expire = 0U;
    fc1a:	2300      	movs	r3, #0
	ctx->done = 1U;
    fc1c:	2201      	movs	r2, #1
	conn->llcp.remote.prt_expire = 0U;
    fc1e:	f8a5 3102 	strh.w	r3, [r5, #258]	; 0x102
	ctx->done = 1U;
    fc22:	61a2      	str	r2, [r4, #24]
	conn->llcp.remote.state = state;
    fc24:	f885 3100 	strb.w	r3, [r5, #256]	; 0x100
}
    fc28:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(ctx != NULL);
    fc2a:	4a07      	ldr	r2, [pc, #28]	; (fc48 <rr_st_active.constprop.0+0x68>)
    fc2c:	4907      	ldr	r1, [pc, #28]	; (fc4c <rr_st_active.constprop.0+0x6c>)
    fc2e:	4808      	ldr	r0, [pc, #32]	; (fc50 <rr_st_active.constprop.0+0x70>)
    fc30:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
    fc34:	f007 fc55 	bl	174e2 <assert_print>
    fc38:	4040      	eors	r0, r0
    fc3a:	f380 8811 	msr	BASEPRI, r0
    fc3e:	f04f 0003 	mov.w	r0, #3
    fc42:	df02      	svc	2
    fc44:	e7e9      	b.n	fc1a <rr_st_active.constprop.0+0x3a>
    fc46:	bf00      	nop
    fc48:	0001c1f0 	.word	0x0001c1f0
    fc4c:	0001c134 	.word	0x0001c134
    fc50:	0001b844 	.word	0x0001b844

0000fc54 <rr_act_unsupported>:
{
    fc54:	b570      	push	{r4, r5, r6, lr}
    fc56:	f8d0 50f8 	ldr.w	r5, [r0, #248]	; 0xf8
    fc5a:	4604      	mov	r4, r0
	LL_ASSERT(ctx != NULL);
    fc5c:	b31d      	cbz	r5, fca6 <rr_act_unsupported+0x52>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    fc5e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    fc62:	2b01      	cmp	r3, #1
    fc64:	d103      	bne.n	fc6e <rr_act_unsupported+0x1a>
}
    fc66:	2302      	movs	r3, #2
	conn->llcp.remote.state = state;
    fc68:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
    fc6c:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    fc6e:	4629      	mov	r1, r5
    fc70:	4620      	mov	r0, r4
    fc72:	f7fd fb1b 	bl	d2ac <llcp_tx_alloc_peek>
    fc76:	2800      	cmp	r0, #0
    fc78:	d0f5      	beq.n	fc66 <rr_act_unsupported+0x12>
	tx = llcp_tx_alloc(conn, ctx);
    fc7a:	4629      	mov	r1, r5
    fc7c:	4620      	mov	r0, r4
    fc7e:	f7fd fb1d 	bl	d2bc <llcp_tx_alloc>
	LL_ASSERT(tx);
    fc82:	4606      	mov	r6, r0
    fc84:	b1e8      	cbz	r0, fcc2 <rr_act_unsupported+0x6e>
		llcp_pdu_encode_unknown_rsp(ctx, pdu);
    fc86:	1d31      	adds	r1, r6, #4
    fc88:	4628      	mov	r0, r5
    fc8a:	f7fe febd 	bl	ea08 <llcp_pdu_encode_unknown_rsp>
	ctx->tx_opcode = pdu->llctrl.opcode;
    fc8e:	79f3      	ldrb	r3, [r6, #7]
    fc90:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
    fc92:	4631      	mov	r1, r6
    fc94:	4620      	mov	r0, r4
    fc96:	f7fd fb2f 	bl	d2f8 <llcp_tx_enqueue>
		ctx->done = 1U;
    fc9a:	2301      	movs	r3, #1
    fc9c:	61ab      	str	r3, [r5, #24]
}
    fc9e:	2300      	movs	r3, #0
	conn->llcp.remote.state = state;
    fca0:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
    fca4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(ctx != NULL);
    fca6:	4a0e      	ldr	r2, [pc, #56]	; (fce0 <rr_act_unsupported+0x8c>)
    fca8:	490e      	ldr	r1, [pc, #56]	; (fce4 <rr_act_unsupported+0x90>)
    fcaa:	480f      	ldr	r0, [pc, #60]	; (fce8 <rr_act_unsupported+0x94>)
    fcac:	f240 13eb 	movw	r3, #491	; 0x1eb
    fcb0:	f007 fc17 	bl	174e2 <assert_print>
    fcb4:	4040      	eors	r0, r0
    fcb6:	f380 8811 	msr	BASEPRI, r0
    fcba:	f04f 0003 	mov.w	r0, #3
    fcbe:	df02      	svc	2
    fcc0:	e7cd      	b.n	fc5e <rr_act_unsupported+0xa>
	LL_ASSERT(tx);
    fcc2:	4a07      	ldr	r2, [pc, #28]	; (fce0 <rr_act_unsupported+0x8c>)
    fcc4:	4909      	ldr	r1, [pc, #36]	; (fcec <rr_act_unsupported+0x98>)
    fcc6:	4808      	ldr	r0, [pc, #32]	; (fce8 <rr_act_unsupported+0x94>)
    fcc8:	f240 13b3 	movw	r3, #435	; 0x1b3
    fccc:	f007 fc09 	bl	174e2 <assert_print>
    fcd0:	4040      	eors	r0, r0
    fcd2:	f380 8811 	msr	BASEPRI, r0
    fcd6:	f04f 0003 	mov.w	r0, #3
    fcda:	df02      	svc	2
    fcdc:	e7d3      	b.n	fc86 <rr_act_unsupported+0x32>
    fcde:	bf00      	nop
    fce0:	0001c1f0 	.word	0x0001c1f0
    fce4:	0001c134 	.word	0x0001c134
    fce8:	0001b844 	.word	0x0001b844
    fcec:	0001bee8 	.word	0x0001bee8

0000fcf0 <rr_act_reject>:
{
    fcf0:	b570      	push	{r4, r5, r6, lr}
    fcf2:	f8d0 50f8 	ldr.w	r5, [r0, #248]	; 0xf8
    fcf6:	4604      	mov	r4, r0
	LL_ASSERT(ctx != NULL);
    fcf8:	b3ad      	cbz	r5, fd66 <rr_act_reject+0x76>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    fcfa:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    fcfe:	2b01      	cmp	r3, #1
    fd00:	d103      	bne.n	fd0a <rr_act_reject+0x1a>
}
    fd02:	2301      	movs	r3, #1
	conn->llcp.remote.state = state;
    fd04:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
    fd08:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    fd0a:	4629      	mov	r1, r5
    fd0c:	4620      	mov	r0, r4
    fd0e:	f7fd facd 	bl	d2ac <llcp_tx_alloc_peek>
    fd12:	2800      	cmp	r0, #0
    fd14:	d0f5      	beq.n	fd02 <rr_act_reject+0x12>
	tx = llcp_tx_alloc(conn, ctx);
    fd16:	4629      	mov	r1, r5
    fd18:	4620      	mov	r0, r4
    fd1a:	f7fd facf 	bl	d2bc <llcp_tx_alloc>
	LL_ASSERT(tx);
    fd1e:	4606      	mov	r6, r0
    fd20:	2800      	cmp	r0, #0
    fd22:	d03b      	beq.n	fd9c <rr_act_reject+0xac>
		ctx_local = llcp_lr_peek(conn);
    fd24:	4620      	mov	r0, r4
    fd26:	f7fe fc95 	bl	e654 <llcp_lr_peek>
		if (ctx_local->proc == ctx->proc ||
    fd2a:	7a2a      	ldrb	r2, [r5, #8]
    fd2c:	7a03      	ldrb	r3, [r0, #8]
    fd2e:	4293      	cmp	r3, r2
	pdu = (struct pdu_data *)tx->pdu;
    fd30:	f106 0004 	add.w	r0, r6, #4
		if (ctx_local->proc == ctx->proc ||
    fd34:	d025      	beq.n	fd82 <rr_act_reject+0x92>
    fd36:	2b08      	cmp	r3, #8
    fd38:	d025      	beq.n	fd86 <rr_act_reject+0x96>
			reject_code = BT_HCI_ERR_DIFF_TRANS_COLLISION;
    fd3a:	212a      	movs	r1, #42	; 0x2a
		if (conn->llcp.fex.valid && feature_ext_rej_ind(conn)) {
    fd3c:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    fd40:	b11b      	cbz	r3, fd4a <rr_act_reject+0x5a>
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_EXT_REJ_IND) != 0;
    fd42:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    fd46:	075b      	lsls	r3, r3, #29
    fd48:	d422      	bmi.n	fd90 <rr_act_reject+0xa0>
			llcp_pdu_encode_reject_ind(pdu, reject_code);
    fd4a:	f7fe ffb9 	bl	ecc0 <llcp_pdu_encode_reject_ind>
	ctx->tx_opcode = pdu->llctrl.opcode;
    fd4e:	79f3      	ldrb	r3, [r6, #7]
    fd50:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
    fd52:	4631      	mov	r1, r6
    fd54:	4620      	mov	r0, r4
    fd56:	f7fd facf 	bl	d2f8 <llcp_tx_enqueue>
		ctx->done = 1U;
    fd5a:	2301      	movs	r3, #1
    fd5c:	61ab      	str	r3, [r5, #24]
}
    fd5e:	2300      	movs	r3, #0
	conn->llcp.remote.state = state;
    fd60:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
    fd64:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(ctx != NULL);
    fd66:	4a14      	ldr	r2, [pc, #80]	; (fdb8 <rr_act_reject+0xc8>)
    fd68:	4914      	ldr	r1, [pc, #80]	; (fdbc <rr_act_reject+0xcc>)
    fd6a:	4815      	ldr	r0, [pc, #84]	; (fdc0 <rr_act_reject+0xd0>)
    fd6c:	f240 13db 	movw	r3, #475	; 0x1db
    fd70:	f007 fbb7 	bl	174e2 <assert_print>
    fd74:	4040      	eors	r0, r0
    fd76:	f380 8811 	msr	BASEPRI, r0
    fd7a:	f04f 0003 	mov.w	r0, #3
    fd7e:	df02      	svc	2
    fd80:	e7bb      	b.n	fcfa <rr_act_reject+0xa>
			reject_code = BT_HCI_ERR_LL_PROC_COLLISION;
    fd82:	2123      	movs	r1, #35	; 0x23
    fd84:	e7da      	b.n	fd3c <rr_act_reject+0x4c>
    fd86:	2a09      	cmp	r2, #9
    fd88:	bf14      	ite	ne
    fd8a:	212a      	movne	r1, #42	; 0x2a
    fd8c:	2123      	moveq	r1, #35	; 0x23
    fd8e:	e7d5      	b.n	fd3c <rr_act_reject+0x4c>
			llcp_pdu_encode_reject_ext_ind(pdu, conn->llcp.remote.reject_opcode,
    fd90:	460a      	mov	r2, r1
    fd92:	f894 1107 	ldrb.w	r1, [r4, #263]	; 0x107
    fd96:	f7fe ff9f 	bl	ecd8 <llcp_pdu_encode_reject_ext_ind>
    fd9a:	e7d8      	b.n	fd4e <rr_act_reject+0x5e>
	LL_ASSERT(tx);
    fd9c:	4a06      	ldr	r2, [pc, #24]	; (fdb8 <rr_act_reject+0xc8>)
    fd9e:	4909      	ldr	r1, [pc, #36]	; (fdc4 <rr_act_reject+0xd4>)
    fda0:	4807      	ldr	r0, [pc, #28]	; (fdc0 <rr_act_reject+0xd0>)
    fda2:	f240 13b3 	movw	r3, #435	; 0x1b3
    fda6:	f007 fb9c 	bl	174e2 <assert_print>
    fdaa:	4040      	eors	r0, r0
    fdac:	f380 8811 	msr	BASEPRI, r0
    fdb0:	f04f 0003 	mov.w	r0, #3
    fdb4:	df02      	svc	2
    fdb6:	e7b5      	b.n	fd24 <rr_act_reject+0x34>
    fdb8:	0001c1f0 	.word	0x0001c1f0
    fdbc:	0001c134 	.word	0x0001c134
    fdc0:	0001b844 	.word	0x0001b844
    fdc4:	0001bee8 	.word	0x0001bee8

0000fdc8 <rr_execute_fsm>:
		break;
	}
}

static void rr_execute_fsm(struct ll_conn *conn, uint8_t evt, void *param)
{
    fdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp.remote.state) {
    fdca:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
{
    fdce:	4604      	mov	r4, r0
    fdd0:	460e      	mov	r6, r1
    fdd2:	4615      	mov	r5, r2
	switch (conn->llcp.remote.state) {
    fdd4:	2b05      	cmp	r3, #5
    fdd6:	f200 8094 	bhi.w	ff02 <rr_execute_fsm+0x13a>
    fdda:	e8df f003 	tbb	[pc, r3]
    fdde:	160e      	.short	0x160e
    fde0:	030b0307 	.word	0x030b0307
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
    fde4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		rr_st_active(conn, evt, param);
    fde8:	f7ff befa 	b.w	fbe0 <rr_st_active.constprop.0>
}
    fdec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rr_act_unsupported(conn);
    fdf0:	f7ff bf30 	b.w	fc54 <rr_act_unsupported>
	switch (evt) {
    fdf4:	2903      	cmp	r1, #3
    fdf6:	d00c      	beq.n	fe12 <rr_execute_fsm+0x4a>
}
    fdf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (evt) {
    fdfa:	b171      	cbz	r1, fe1a <rr_execute_fsm+0x52>
    fdfc:	2904      	cmp	r1, #4
    fdfe:	d1fb      	bne.n	fdf8 <rr_execute_fsm+0x30>
		rr_act_disconnect(conn);
    fe00:	f7ff fe66 	bl	fad0 <rr_act_disconnect>
	conn->llcp.remote.state = state;
    fe04:	f884 6100 	strb.w	r6, [r4, #256]	; 0x100
}
    fe08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rr_act_reject(conn);
    fe0e:	f7ff bf6f 	b.w	fcf0 <rr_act_reject>
	conn->llcp.remote.state = state;
    fe12:	2300      	movs	r3, #0
    fe14:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
}
    fe18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe1a:	f8d0 70f8 	ldr.w	r7, [r0, #248]	; 0xf8
		if (ctx) {
    fe1e:	2f00      	cmp	r7, #0
    fe20:	d0ea      	beq.n	fdf8 <rr_execute_fsm+0x30>
	return conn->llcp.remote.incompat;
    fe22:	7a3b      	ldrb	r3, [r7, #8]
    fe24:	f890 c106 	ldrb.w	ip, [r0, #262]	; 0x106
			const bool periph = !!(conn->lll.role == BT_HCI_ROLE_PERIPHERAL);
    fe28:	f890 e039 	ldrb.w	lr, [r0, #57]	; 0x39
	switch (ctx->proc) {
    fe2c:	2b10      	cmp	r3, #16
    fe2e:	d811      	bhi.n	fe54 <rr_execute_fsm+0x8c>
    fe30:	4a3b      	ldr	r2, [pc, #236]	; (ff20 <rr_execute_fsm+0x158>)
    fe32:	2101      	movs	r1, #1
    fe34:	fa01 f003 	lsl.w	r0, r1, r3
    fe38:	4002      	ands	r2, r0
    fe3a:	b342      	cbz	r2, fe8e <rr_execute_fsm+0xc6>
			if (ctx->proc == PROC_TERMINATE) {
    fe3c:	2b0a      	cmp	r3, #10
    fe3e:	d01f      	beq.n	fe80 <rr_execute_fsm+0xb8>
			} else if (ctx->proc == PROC_UNKNOWN) {
    fe40:	b1b3      	cbz	r3, fe70 <rr_execute_fsm+0xa8>
	conn->llcp.remote.collision = collision;
    fe42:	f884 6105 	strb.w	r6, [r4, #261]	; 0x105
				rr_act_run(conn);
    fe46:	4620      	mov	r0, r4
    fe48:	f7ff fe84 	bl	fb54 <rr_act_run>
	conn->llcp.remote.state = state;
    fe4c:	2303      	movs	r3, #3
    fe4e:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
    fe52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LL_ASSERT(0);
    fe54:	4a33      	ldr	r2, [pc, #204]	; (ff24 <rr_execute_fsm+0x15c>)
    fe56:	4934      	ldr	r1, [pc, #208]	; (ff28 <rr_execute_fsm+0x160>)
    fe58:	4834      	ldr	r0, [pc, #208]	; (ff2c <rr_execute_fsm+0x164>)
    fe5a:	2369      	movs	r3, #105	; 0x69
    fe5c:	f007 fb41 	bl	174e2 <assert_print>
    fe60:	4040      	eors	r0, r0
    fe62:	f380 8811 	msr	BASEPRI, r0
    fe66:	f04f 0003 	mov.w	r0, #3
    fe6a:	df02      	svc	2
			if (ctx->proc == PROC_TERMINATE) {
    fe6c:	7a3b      	ldrb	r3, [r7, #8]
    fe6e:	e7e5      	b.n	fe3c <rr_execute_fsm+0x74>
				ctx->unknown_response.type = pdu->llctrl.opcode;
    fe70:	7feb      	ldrb	r3, [r5, #31]
    fe72:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				rr_act_unsupported(conn);
    fe76:	4620      	mov	r0, r4
}
    fe78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				rr_act_unsupported(conn);
    fe7c:	f7ff beea 	b.w	fc54 <rr_act_unsupported>
				rr_act_run(conn);
    fe80:	4620      	mov	r0, r4
    fe82:	f7ff fe67 	bl	fb54 <rr_act_run>
	conn->llcp.remote.state = state;
    fe86:	2305      	movs	r3, #5
    fe88:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
    fe8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (ctx->proc) {
    fe8e:	f410 6f38 	tst.w	r0, #2944	; 0xb80
    fe92:	d0df      	beq.n	fe54 <rr_execute_fsm+0x8c>
			if (ctx->proc == PROC_TERMINATE) {
    fe94:	2b0a      	cmp	r3, #10
    fe96:	d0f3      	beq.n	fe80 <rr_execute_fsm+0xb8>
			} else if (ctx->proc == PROC_UNKNOWN) {
    fe98:	2b00      	cmp	r3, #0
    fe9a:	d0e9      	beq.n	fe70 <rr_execute_fsm+0xa8>
			} else if (!with_instant || incompat == INCOMPAT_NO_COLLISION) {
    fe9c:	f1bc 0f00 	cmp.w	ip, #0
    fea0:	d101      	bne.n	fea6 <rr_execute_fsm+0xde>
    fea2:	460e      	mov	r6, r1
    fea4:	e7cd      	b.n	fe42 <rr_execute_fsm+0x7a>
			} else if (periph && incompat == INCOMPAT_RESOLVABLE) {
    fea6:	f01e 0f80 	tst.w	lr, #128	; 0x80
    feaa:	d112      	bne.n	fed2 <rr_execute_fsm+0x10a>
			} else if (central && incompat == INCOMPAT_RESOLVABLE) {
    feac:	f1bc 0f01 	cmp.w	ip, #1
    feb0:	d019      	beq.n	fee6 <rr_execute_fsm+0x11e>
			} else if (incompat == INCOMPAT_RESERVED) {
    feb2:	f1bc 0f02 	cmp.w	ip, #2
    feb6:	d19f      	bne.n	fdf8 <rr_execute_fsm+0x30>
				ctx_local = llcp_lr_peek(conn);
    feb8:	4620      	mov	r0, r4
    feba:	f7fe fbcb 	bl	e654 <llcp_lr_peek>
				if (ctx_local->proc == ctx->proc ||
    febe:	7a3b      	ldrb	r3, [r7, #8]
    fec0:	7a02      	ldrb	r2, [r0, #8]
    fec2:	429a      	cmp	r2, r3
    fec4:	d019      	beq.n	fefa <rr_execute_fsm+0x132>
    fec6:	2a08      	cmp	r2, #8
    fec8:	d015      	beq.n	fef6 <rr_execute_fsm+0x12e>
					conn->llcp_terminate.reason_final =
    feca:	232a      	movs	r3, #42	; 0x2a
    fecc:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
}
    fed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			} else if (periph && incompat == INCOMPAT_RESOLVABLE) {
    fed2:	f1bc 0f01 	cmp.w	ip, #1
    fed6:	d1ec      	bne.n	feb2 <rr_execute_fsm+0xea>
				rr_act_run(conn);
    fed8:	4620      	mov	r0, r4
    feda:	f7ff fe3b 	bl	fb54 <rr_act_run>
	conn->llcp.remote.state = state;
    fede:	2303      	movs	r3, #3
    fee0:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
    fee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				conn->llcp.remote.reject_opcode = pdu->llctrl.opcode;
    fee6:	7feb      	ldrb	r3, [r5, #31]
    fee8:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
				rr_act_reject(conn);
    feec:	4620      	mov	r0, r4
}
    feee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				rr_act_reject(conn);
    fef2:	f7ff befd 	b.w	fcf0 <rr_act_reject>
				    (ctx_local->proc == PROC_CONN_UPDATE &&
    fef6:	2b09      	cmp	r3, #9
    fef8:	d1e7      	bne.n	feca <rr_execute_fsm+0x102>
					conn->llcp_terminate.reason_final =
    fefa:	2323      	movs	r3, #35	; 0x23
    fefc:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
}
    ff00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LL_ASSERT(0);
    ff02:	4a08      	ldr	r2, [pc, #32]	; (ff24 <rr_execute_fsm+0x15c>)
    ff04:	4908      	ldr	r1, [pc, #32]	; (ff28 <rr_execute_fsm+0x160>)
    ff06:	4809      	ldr	r0, [pc, #36]	; (ff2c <rr_execute_fsm+0x164>)
    ff08:	f240 23da 	movw	r3, #730	; 0x2da
    ff0c:	f007 fae9 	bl	174e2 <assert_print>
    ff10:	4040      	eors	r0, r0
    ff12:	f380 8811 	msr	BASEPRI, r0
    ff16:	f04f 0003 	mov.w	r0, #3
    ff1a:	df02      	svc	2
}
    ff1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff1e:	bf00      	nop
    ff20:	0001f47f 	.word	0x0001f47f
    ff24:	0001c1f0 	.word	0x0001c1f0
    ff28:	0001b908 	.word	0x0001b908
    ff2c:	0001b844 	.word	0x0001b844

0000ff30 <llcp_rr_set_incompat>:
	conn->llcp.remote.incompat = incompat;
    ff30:	f880 1106 	strb.w	r1, [r0, #262]	; 0x106
}
    ff34:	4770      	bx	lr
    ff36:	bf00      	nop

0000ff38 <llcp_rr_set_paused_cmd>:
}
    ff38:	4770      	bx	lr
    ff3a:	bf00      	nop

0000ff3c <llcp_rr_get_paused_cmd>:
}
    ff3c:	2000      	movs	r0, #0
    ff3e:	4770      	bx	lr

0000ff40 <llcp_rr_get_collision>:
	return conn->llcp.remote.collision;
    ff40:	f890 0105 	ldrb.w	r0, [r0, #261]	; 0x105
}
    ff44:	3800      	subs	r0, #0
    ff46:	bf18      	it	ne
    ff48:	2001      	movne	r0, #1
    ff4a:	4770      	bx	lr

0000ff4c <llcp_rr_peek>:
}
    ff4c:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
    ff50:	4770      	bx	lr
    ff52:	bf00      	nop

0000ff54 <llcp_rr_ispaused>:
	return conn->llcp.remote.pause == 1U;
    ff54:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
}
    ff58:	f1a0 0001 	sub.w	r0, r0, #1
    ff5c:	fab0 f080 	clz	r0, r0
    ff60:	0940      	lsrs	r0, r0, #5
    ff62:	4770      	bx	lr

0000ff64 <llcp_rr_prt_restart>:
	conn->llcp.remote.prt_expire = conn->llcp.prt_reload;
    ff64:	f8b0 3108 	ldrh.w	r3, [r0, #264]	; 0x108
    ff68:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
}
    ff6c:	4770      	bx	lr
    ff6e:	bf00      	nop

0000ff70 <llcp_rr_prt_stop>:
	conn->llcp.remote.prt_expire = 0U;
    ff70:	2300      	movs	r3, #0
    ff72:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
}
    ff76:	4770      	bx	lr

0000ff78 <llcp_rr_rx>:
{
    ff78:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
    ff7a:	7a0b      	ldrb	r3, [r1, #8]
{
    ff7c:	460c      	mov	r4, r1
    ff7e:	4605      	mov	r5, r0
	switch (ctx->proc) {
    ff80:	2b0c      	cmp	r3, #12
    ff82:	d824      	bhi.n	ffce <llcp_rr_rx+0x56>
    ff84:	e8df f003 	tbb	[pc, r3]
    ff88:	0707070a 	.word	0x0707070a
    ff8c:	1b171707 	.word	0x1b171707
    ff90:	1f071313 	.word	0x1f071313
    ff94:	07          	.byte	0x07
    ff95:	00          	.byte	0x00
		llcp_rp_comm_rx(conn, ctx, rx);
    ff96:	4621      	mov	r1, r4
    ff98:	f7fe fa70 	bl	e47c <llcp_rp_comm_rx>
	if (ctx->done) {
    ff9c:	69a3      	ldr	r3, [r4, #24]
    ff9e:	b12b      	cbz	r3, ffac <llcp_rr_rx+0x34>
    ffa0:	4621      	mov	r1, r4
    ffa2:	4628      	mov	r0, r5
}
    ffa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ffa8:	f7ff bda8 	b.w	fafc <llcp_rr_check_done.part.0>
    ffac:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_cu_rx(conn, ctx, rx);
    ffae:	4621      	mov	r1, r4
    ffb0:	f7ff fcde 	bl	f970 <llcp_rp_cu_rx>
		break;
    ffb4:	e7f2      	b.n	ff9c <llcp_rr_rx+0x24>
		llcp_rp_enc_rx(conn, ctx, rx);
    ffb6:	4621      	mov	r1, r4
    ffb8:	f7fc fb02 	bl	c5c0 <llcp_rp_enc_rx>
		break;
    ffbc:	e7ee      	b.n	ff9c <llcp_rr_rx+0x24>
		llcp_rp_pu_rx(conn, ctx, rx);
    ffbe:	4621      	mov	r1, r4
    ffc0:	f7fd f82e 	bl	d020 <llcp_rp_pu_rx>
		break;
    ffc4:	e7ea      	b.n	ff9c <llcp_rr_rx+0x24>
		llcp_rp_chmu_rx(conn, ctx, rx);
    ffc6:	4621      	mov	r1, r4
    ffc8:	f7ff fd08 	bl	f9dc <llcp_rp_chmu_rx>
		break;
    ffcc:	e7e6      	b.n	ff9c <llcp_rr_rx+0x24>
		LL_ASSERT(0);
    ffce:	4a07      	ldr	r2, [pc, #28]	; (ffec <llcp_rr_rx+0x74>)
    ffd0:	4907      	ldr	r1, [pc, #28]	; (fff0 <llcp_rr_rx+0x78>)
    ffd2:	4808      	ldr	r0, [pc, #32]	; (fff4 <llcp_rr_rx+0x7c>)
    ffd4:	f44f 7390 	mov.w	r3, #288	; 0x120
    ffd8:	f007 fa83 	bl	174e2 <assert_print>
    ffdc:	4040      	eors	r0, r0
    ffde:	f380 8811 	msr	BASEPRI, r0
    ffe2:	f04f 0003 	mov.w	r0, #3
    ffe6:	df02      	svc	2
		break;
    ffe8:	e7d8      	b.n	ff9c <llcp_rr_rx+0x24>
    ffea:	bf00      	nop
    ffec:	0001c1f0 	.word	0x0001c1f0
    fff0:	0001b908 	.word	0x0001b908
    fff4:	0001b844 	.word	0x0001b844

0000fff8 <llcp_rr_tx_ack>:
{
    fff8:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
    fffa:	7a0b      	ldrb	r3, [r1, #8]
    fffc:	2b07      	cmp	r3, #7
{
    fffe:	460c      	mov	r4, r1
   10000:	4605      	mov	r5, r0
	switch (ctx->proc) {
   10002:	d00c      	beq.n	1001e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f>
   10004:	2b0c      	cmp	r3, #12
   10006:	d101      	bne.n	1000c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd>
		llcp_rp_comm_tx_ack(conn, ctx, tx);
   10008:	f7fe fa3e 	bl	e488 <llcp_rp_comm_tx_ack>
	if (ctx->done) {
   1000c:	69a3      	ldr	r3, [r4, #24]
   1000e:	b12b      	cbz	r3, 1001c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d>
   10010:	4621      	mov	r1, r4
   10012:	4628      	mov	r0, r5
}
   10014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10018:	f7ff bd70 	b.w	fafc <llcp_rr_check_done.part.0>
   1001c:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_pu_tx_ack(conn, ctx, tx);
   1001e:	f7fd f825 	bl	d06c <llcp_rp_pu_tx_ack>
		break;
   10022:	e7f3      	b.n	1000c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd>

00010024 <llcp_rr_tx_ntf>:
{
   10024:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   10026:	7a0b      	ldrb	r3, [r1, #8]
   10028:	2b07      	cmp	r3, #7
{
   1002a:	460c      	mov	r4, r1
   1002c:	4605      	mov	r5, r0
	switch (ctx->proc) {
   1002e:	d008      	beq.n	10042 <llcp_rr_tx_ntf+0x1e>
	if (ctx->done) {
   10030:	69a3      	ldr	r3, [r4, #24]
   10032:	b12b      	cbz	r3, 10040 <llcp_rr_tx_ntf+0x1c>
   10034:	4621      	mov	r1, r4
   10036:	4628      	mov	r0, r5
}
   10038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1003c:	f7ff bd5e 	b.w	fafc <llcp_rr_check_done.part.0>
   10040:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_pu_tx_ntf(conn, ctx);
   10042:	f7fd f817 	bl	d074 <llcp_rp_pu_tx_ntf>
		break;
   10046:	e7f3      	b.n	10030 <llcp_rr_tx_ntf+0xc>

00010048 <llcp_rr_init>:
	conn->llcp.remote.state = state;
   10048:	2204      	movs	r2, #4

void llcp_rr_init(struct ll_conn *conn)
{
	rr_set_state(conn, RR_STATE_DISCONNECT);
	conn->llcp.remote.prt_expire = 0U;
   1004a:	2300      	movs	r3, #0
	conn->llcp.remote.state = state;
   1004c:	f880 2100 	strb.w	r2, [r0, #256]	; 0x100
	conn->llcp.remote.prt_expire = 0U;
   10050:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
}
   10054:	4770      	bx	lr
   10056:	bf00      	nop

00010058 <llcp_rr_run>:
	rr_execute_fsm(conn, RR_EVT_PREPARE, rx);
}

void llcp_rr_run(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_RUN, NULL);
   10058:	2200      	movs	r2, #0
   1005a:	2101      	movs	r1, #1
   1005c:	f7ff beb4 	b.w	fdc8 <rr_execute_fsm>

00010060 <llcp_rr_complete>:
}

void llcp_rr_complete(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_COMPLETE, NULL);
   10060:	2200      	movs	r2, #0
   10062:	2102      	movs	r1, #2
   10064:	f7ff beb0 	b.w	fdc8 <rr_execute_fsm>

00010068 <llcp_rr_connect>:
}

void llcp_rr_connect(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_CONNECT, NULL);
   10068:	2200      	movs	r2, #0
   1006a:	2103      	movs	r1, #3
   1006c:	f7ff beac 	b.w	fdc8 <rr_execute_fsm>

00010070 <llcp_rr_disconnect>:
}

void llcp_rr_disconnect(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_DISCONNECT, NULL);
   10070:	2200      	movs	r2, #0
   10072:	2104      	movs	r1, #4
   10074:	f7ff bea8 	b.w	fdc8 <rr_execute_fsm>

00010078 <llcp_rr_new>:
	[PDU_DATA_LLCTRL_TYPE_CLOCK_ACCURACY_REQ] = { PROC_SCA_UPDATE, ACCEPT_ROLE_BOTH },
#endif /* CONFIG_BT_CTLR_SCA_UPDATE */
};

void llcp_rr_new(struct ll_conn *conn, struct node_rx_pdu *rx, bool valid_pdu)
{
   10078:	b570      	push	{r4, r5, r6, lr}
   1007a:	4604      	mov	r4, r0
   1007c:	460e      	mov	r6, r1
	uint8_t proc = PROC_UNKNOWN;

	pdu = (struct pdu_data *)rx->pdu;

	/* Is this a valid opcode */
	if (valid_pdu && pdu->llctrl.opcode < ARRAY_SIZE(new_proc_lut)) {
   1007e:	b112      	cbz	r2, 10086 <llcp_rr_new+0xe>
   10080:	7fcb      	ldrb	r3, [r1, #31]
   10082:	2b1b      	cmp	r3, #27
   10084:	d923      	bls.n	100ce <llcp_rr_new+0x56>
	uint8_t proc = PROC_UNKNOWN;
   10086:	2500      	movs	r5, #0

	if (proc == PROC_TERMINATE) {
		rr_abort(conn);
	}

	ctx = llcp_create_remote_procedure(proc);
   10088:	4628      	mov	r0, r5
   1008a:	f7fd f9a3 	bl	d3d4 <llcp_create_remote_procedure>
	if (!ctx) {
   1008e:	4605      	mov	r5, r0
   10090:	b1e0      	cbz	r0, 100cc <llcp_rr_new+0x54>
	parent->next = child;
   10092:	2300      	movs	r3, #0
   10094:	6003      	str	r3, [r0, #0]
	return list->tail;
   10096:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
Z_GENLIST_APPEND(slist, snode)
   1009a:	2b00      	cmp	r3, #0
   1009c:	d040      	beq.n	10120 <llcp_rr_new+0xa8>
	parent->next = child;
   1009e:	6018      	str	r0, [r3, #0]
	list->tail = node;
   100a0:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
	rr_execute_fsm(conn, RR_EVT_PREPARE, rx);
   100a4:	4632      	mov	r2, r6
   100a6:	2100      	movs	r1, #0
   100a8:	4620      	mov	r0, r4
   100aa:	f7ff fe8d 	bl	fdc8 <rr_execute_fsm>
	if (ctx->done) {
   100ae:	69ab      	ldr	r3, [r5, #24]
   100b0:	b11b      	cbz	r3, 100ba <llcp_rr_new+0x42>
   100b2:	4629      	mov	r1, r5
   100b4:	4620      	mov	r0, r4
   100b6:	f7ff fd21 	bl	fafc <llcp_rr_check_done.part.0>
	return list->head;
   100ba:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8

	llcp_rr_check_done(conn, ctx);

	/* Handle PDU */
	ctx = llcp_rr_peek(conn);
	if (ctx) {
   100be:	b129      	cbz	r1, 100cc <llcp_rr_new+0x54>
		llcp_rr_rx(conn, ctx, rx);
   100c0:	4632      	mov	r2, r6
   100c2:	4620      	mov	r0, r4
	}
}
   100c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_rr_rx(conn, ctx, rx);
   100c8:	f7ff bf56 	b.w	ff78 <llcp_rr_rx>
}
   100cc:	bd70      	pop	{r4, r5, r6, pc}
		struct proc_role pr = new_proc_lut[pdu->llctrl.opcode];
   100ce:	491b      	ldr	r1, [pc, #108]	; (1013c <llcp_rr_new+0xc4>)
   100d0:	b218      	sxth	r0, r3
   100d2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
		uint8_t role_mask  = (1 << conn->lll.role);
   100d6:	2501      	movs	r5, #1
		if (pr.accept & role_mask) {
   100d8:	785a      	ldrb	r2, [r3, #1]
		uint8_t role_mask  = (1 << conn->lll.role);
   100da:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   100de:	09db      	lsrs	r3, r3, #7
   100e0:	409d      	lsls	r5, r3
		if (pr.accept & role_mask) {
   100e2:	4015      	ands	r5, r2
   100e4:	d0d0      	beq.n	10088 <llcp_rr_new+0x10>
		struct proc_role pr = new_proc_lut[pdu->llctrl.opcode];
   100e6:	f811 5010 	ldrb.w	r5, [r1, r0, lsl #1]
	if (proc == PROC_TERMINATE) {
   100ea:	2d0a      	cmp	r5, #10
   100ec:	d1cc      	bne.n	10088 <llcp_rr_new+0x10>
   100ee:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   100f2:	b1d0      	cbz	r0, 1012a <llcp_rr_new+0xb2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   100f4:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	return node->next;
   100f8:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   100fa:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   100fe:	4290      	cmp	r0, r2
   10100:	d00b      	beq.n	1011a <llcp_rr_new+0xa2>
	struct proc_ctx *ctx;

	/* Flush all pending procedures */
	ctx = rr_dequeue(conn);
	while (ctx) {
		llcp_proc_ctx_release(ctx);
   10102:	f7fd f8b1 	bl	d268 <llcp_proc_ctx_release>
	return list->head;
   10106:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   1010a:	b170      	cbz	r0, 1012a <llcp_rr_new+0xb2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1010c:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	return node->next;
   10110:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   10112:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10116:	4290      	cmp	r0, r2
   10118:	d1f3      	bne.n	10102 <llcp_rr_new+0x8a>
	list->tail = node;
   1011a:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
}
   1011e:	e7f0      	b.n	10102 <llcp_rr_new+0x8a>
	list->head = node;
   10120:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
   10124:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
}
   10128:	e7bc      	b.n	100a4 <llcp_rr_new+0x2c>
	conn->llcp.remote.prt_expire = 0U;
   1012a:	2300      	movs	r3, #0
   1012c:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
	conn->llcp.remote.collision = collision;
   10130:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
	conn->llcp.remote.state = state;
   10134:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	}

	llcp_rr_prt_stop(conn);
	rr_set_collision(conn, 0U);
	rr_set_state(conn, RR_STATE_IDLE);
}
   10138:	e7a6      	b.n	10088 <llcp_rr_new+0x10>
   1013a:	bf00      	nop
   1013c:	0001c238 	.word	0x0001c238

00010140 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   10140:	b510      	push	{r4, lr}
   10142:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   10144:	b930      	cbnz	r0, 10154 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   10146:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
   1014a:	f36f 0300 	bfc	r3, #0, #1
   1014e:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
}
   10152:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   10154:	4a09      	ldr	r2, [pc, #36]	; (1017c <ticker_update_latency_cancel_op_cb+0x3c>)
   10156:	490a      	ldr	r1, [pc, #40]	; (10180 <ticker_update_latency_cancel_op_cb+0x40>)
   10158:	480a      	ldr	r0, [pc, #40]	; (10184 <ticker_update_latency_cancel_op_cb+0x44>)
   1015a:	f240 2385 	movw	r3, #645	; 0x285
   1015e:	f007 f9c0 	bl	174e2 <assert_print>
   10162:	4040      	eors	r0, r0
   10164:	f380 8811 	msr	BASEPRI, r0
   10168:	f04f 0003 	mov.w	r0, #3
   1016c:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   1016e:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
   10172:	f36f 0300 	bfc	r3, #0, #1
   10176:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
}
   1017a:	bd10      	pop	{r4, pc}
   1017c:	0001c270 	.word	0x0001c270
   10180:	0001c2b8 	.word	0x0001c2b8
   10184:	0001b844 	.word	0x0001b844

00010188 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10188:	b900      	cbnz	r0, 1018c <ticker_op_cb+0x4>
   1018a:	4770      	bx	lr
{
   1018c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1018e:	4a07      	ldr	r2, [pc, #28]	; (101ac <ticker_op_cb+0x24>)
   10190:	4907      	ldr	r1, [pc, #28]	; (101b0 <ticker_op_cb+0x28>)
   10192:	4808      	ldr	r0, [pc, #32]	; (101b4 <ticker_op_cb+0x2c>)
   10194:	f240 237d 	movw	r3, #637	; 0x27d
   10198:	f007 f9a3 	bl	174e2 <assert_print>
   1019c:	4040      	eors	r0, r0
   1019e:	f380 8811 	msr	BASEPRI, r0
   101a2:	f04f 0003 	mov.w	r0, #3
   101a6:	df02      	svc	2
}
   101a8:	bd08      	pop	{r3, pc}
   101aa:	bf00      	nop
   101ac:	0001c270 	.word	0x0001c270
   101b0:	0001bdb8 	.word	0x0001bdb8
   101b4:	0001b844 	.word	0x0001b844

000101b8 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   101b8:	2801      	cmp	r0, #1
   101ba:	d000      	beq.n	101be <ticker_op_stop_adv_cb+0x6>
   101bc:	4770      	bx	lr
{
   101be:	b510      	push	{r4, lr}
   101c0:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   101c2:	f7f8 fb59 	bl	8878 <ull_disable_mark_get>
   101c6:	4284      	cmp	r4, r0
   101c8:	d00c      	beq.n	101e4 <ticker_op_stop_adv_cb+0x2c>
   101ca:	4a07      	ldr	r2, [pc, #28]	; (101e8 <ticker_op_stop_adv_cb+0x30>)
   101cc:	4907      	ldr	r1, [pc, #28]	; (101ec <ticker_op_stop_adv_cb+0x34>)
   101ce:	4808      	ldr	r0, [pc, #32]	; (101f0 <ticker_op_stop_adv_cb+0x38>)
   101d0:	f240 2375 	movw	r3, #629	; 0x275
   101d4:	f007 f985 	bl	174e2 <assert_print>
   101d8:	4040      	eors	r0, r0
   101da:	f380 8811 	msr	BASEPRI, r0
   101de:	f04f 0003 	mov.w	r0, #3
   101e2:	df02      	svc	2
}
   101e4:	bd10      	pop	{r4, pc}
   101e6:	bf00      	nop
   101e8:	0001c270 	.word	0x0001c270
   101ec:	0001c2cc 	.word	0x0001c2cc
   101f0:	0001b844 	.word	0x0001b844

000101f4 <ull_periph_ticker_cb>:
{
   101f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   101f8:	9c07      	ldr	r4, [sp, #28]
   101fa:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   101fe:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   10200:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   10202:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10206:	4299      	cmp	r1, r3
   10208:	d026      	beq.n	10258 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1020a:	4606      	mov	r6, r0
   1020c:	4617      	mov	r7, r2
   1020e:	4601      	mov	r1, r0
   10210:	462a      	mov	r2, r5
   10212:	4620      	mov	r0, r4
   10214:	f7fb fb42 	bl	b89c <ull_conn_llcp>
		if (ret) {
   10218:	b9f0      	cbnz	r0, 10258 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   1021a:	7823      	ldrb	r3, [r4, #0]
   1021c:	3301      	adds	r3, #1
   1021e:	b2db      	uxtb	r3, r3
   10220:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   10222:	b34b      	cbz	r3, 10278 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   10224:	491b      	ldr	r1, [pc, #108]	; (10294 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   10226:	4b1c      	ldr	r3, [pc, #112]	; (10298 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   10228:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   1022a:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1022e:	2200      	movs	r2, #0
	p.param = &conn->lll;
   10230:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   10232:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   10236:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   1023a:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1023c:	2001      	movs	r0, #1
   1023e:	4611      	mov	r1, r2
   10240:	f7f6 fa48 	bl	66d4 <mayfly_enqueue>
	LL_ASSERT(!err);
   10244:	b950      	cbnz	r0, 1025c <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   10246:	20ff      	movs	r0, #255	; 0xff
   10248:	f7fb fb5a 	bl	b900 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1024c:	4620      	mov	r0, r4
   1024e:	21ff      	movs	r1, #255	; 0xff
}
   10250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   10254:	f7fb bc22 	b.w	ba9c <ull_conn_tx_lll_enqueue>
}
   10258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   1025c:	4a0f      	ldr	r2, [pc, #60]	; (1029c <ull_periph_ticker_cb+0xa8>)
   1025e:	4910      	ldr	r1, [pc, #64]	; (102a0 <ull_periph_ticker_cb+0xac>)
   10260:	4810      	ldr	r0, [pc, #64]	; (102a4 <ull_periph_ticker_cb+0xb0>)
   10262:	f240 232f 	movw	r3, #559	; 0x22f
   10266:	f007 f93c 	bl	174e2 <assert_print>
   1026a:	4040      	eors	r0, r0
   1026c:	f380 8811 	msr	BASEPRI, r0
   10270:	f04f 0003 	mov.w	r0, #3
   10274:	df02      	svc	2
   10276:	e7e6      	b.n	10246 <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   10278:	4a08      	ldr	r2, [pc, #32]	; (1029c <ull_periph_ticker_cb+0xa8>)
   1027a:	490b      	ldr	r1, [pc, #44]	; (102a8 <ull_periph_ticker_cb+0xb4>)
   1027c:	4809      	ldr	r0, [pc, #36]	; (102a4 <ull_periph_ticker_cb+0xb0>)
   1027e:	f240 2322 	movw	r3, #546	; 0x222
   10282:	f007 f92e 	bl	174e2 <assert_print>
   10286:	4040      	eors	r0, r0
   10288:	f380 8811 	msr	BASEPRI, r0
   1028c:	f04f 0003 	mov.w	r0, #3
   10290:	df02      	svc	2
   10292:	e7c7      	b.n	10224 <ull_periph_ticker_cb+0x30>
   10294:	20001f60 	.word	0x20001f60
   10298:	2000060c 	.word	0x2000060c
   1029c:	0001c270 	.word	0x0001c270
   102a0:	0001b8e8 	.word	0x0001b8e8
   102a4:	0001b844 	.word	0x0001b844
   102a8:	0001bce4 	.word	0x0001bce4

000102ac <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   102ac:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   102ae:	b123      	cbz	r3, 102ba <ull_periph_latency_cancel+0xe>
   102b0:	f890 216c 	ldrb.w	r2, [r0, #364]	; 0x16c
   102b4:	f012 0301 	ands.w	r3, r2, #1
   102b8:	d000      	beq.n	102bc <ull_periph_latency_cancel+0x10>
   102ba:	4770      	bx	lr
{
   102bc:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   102be:	f042 0201 	orr.w	r2, r2, #1
{
   102c2:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   102c4:	4c11      	ldr	r4, [pc, #68]	; (1030c <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   102c6:	f880 216c 	strb.w	r2, [r0, #364]	; 0x16c
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   102ca:	3103      	adds	r1, #3
   102cc:	2201      	movs	r2, #1
   102ce:	e9cd 3202 	strd	r3, r2, [sp, #8]
   102d2:	9006      	str	r0, [sp, #24]
   102d4:	b2ca      	uxtb	r2, r1
   102d6:	e9cd 3404 	strd	r3, r4, [sp, #16]
   102da:	e9cd 3300 	strd	r3, r3, [sp]
   102de:	2103      	movs	r1, #3
   102e0:	4618      	mov	r0, r3
   102e2:	f7f7 fc31 	bl	7b48 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   102e6:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   102ea:	d00c      	beq.n	10306 <ull_periph_latency_cancel+0x5a>
   102ec:	4a08      	ldr	r2, [pc, #32]	; (10310 <ull_periph_latency_cancel+0x64>)
   102ee:	4909      	ldr	r1, [pc, #36]	; (10314 <ull_periph_latency_cancel+0x68>)
   102f0:	4809      	ldr	r0, [pc, #36]	; (10318 <ull_periph_latency_cancel+0x6c>)
   102f2:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   102f6:	f007 f8f4 	bl	174e2 <assert_print>
   102fa:	4040      	eors	r0, r0
   102fc:	f380 8811 	msr	BASEPRI, r0
   10300:	f04f 0003 	mov.w	r0, #3
   10304:	df02      	svc	2
}
   10306:	b008      	add	sp, #32
   10308:	bd10      	pop	{r4, pc}
   1030a:	bf00      	nop
   1030c:	00010141 	.word	0x00010141
   10310:	0001c270 	.word	0x0001c270
   10314:	0001be24 	.word	0x0001be24
   10318:	0001b844 	.word	0x0001b844

0001031c <ll_start_enc_req_send>:
{
   1031c:	b538      	push	{r3, r4, r5, lr}
   1031e:	460c      	mov	r4, r1
   10320:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   10322:	f7fa ffe1 	bl	b2e8 <ll_connected_get>
	if (!conn) {
   10326:	b148      	cbz	r0, 1033c <ll_start_enc_req_send+0x20>
	if (error_code) {
   10328:	b11c      	cbz	r4, 10332 <ll_start_enc_req_send+0x16>
}
   1032a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return ull_cp_ltk_req_neq_reply(conn);
   1032e:	f7fd ba17 	b.w	d760 <ull_cp_ltk_req_neq_reply>
		return ull_cp_ltk_req_reply(conn, ltk);
   10332:	4629      	mov	r1, r5
}
   10334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return ull_cp_ltk_req_reply(conn, ltk);
   10338:	f7fd b9f2 	b.w	d720 <ull_cp_ltk_req_reply>
}
   1033c:	2002      	movs	r0, #2
   1033e:	bd38      	pop	{r3, r4, r5, pc}

00010340 <ll_set_min_used_chans>:

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
uint8_t ll_set_min_used_chans(uint16_t handle, uint8_t const phys,
			      uint8_t const min_used_chans)
{
   10340:	b538      	push	{r3, r4, r5, lr}
   10342:	460c      	mov	r4, r1
   10344:	4615      	mov	r5, r2
	struct ll_conn *conn;

	conn = ll_connected_get(handle);
   10346:	f7fa ffcf 	bl	b2e8 <ll_connected_get>
	if (!conn) {
   1034a:	b158      	cbz	r0, 10364 <ll_set_min_used_chans+0x24>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	if (!conn->lll.role) {
   1034c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   10350:	2b00      	cmp	r3, #0
   10352:	da05      	bge.n	10360 <ll_set_min_used_chans+0x20>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	return ull_cp_min_used_chans(conn, phys, min_used_chans);
   10354:	462a      	mov	r2, r5
   10356:	4621      	mov	r1, r4
}
   10358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return ull_cp_min_used_chans(conn, phys, min_used_chans);
   1035c:	f7fd b940 	b.w	d5e0 <ull_cp_min_used_chans>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10360:	200c      	movs	r0, #12
}
   10362:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10364:	2002      	movs	r0, #2
}
   10366:	bd38      	pop	{r3, r4, r5, pc}

00010368 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   10368:	b530      	push	{r4, r5, lr}
   1036a:	4604      	mov	r4, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1036c:	7800      	ldrb	r0, [r0, #0]
{
   1036e:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   10372:	fb02 1101 	mla	r1, r2, r1, r1
   10376:	4a1f      	ldr	r2, [pc, #124]	; (103f4 <lll_chan_sel_1+0x8c>)
   10378:	4401      	add	r1, r0
   1037a:	fb82 0201 	smull	r0, r2, r2, r1
   1037e:	440a      	add	r2, r1
   10380:	1152      	asrs	r2, r2, #5
   10382:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   10386:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1038a:	1a8a      	subs	r2, r1, r2
   1038c:	b2d0      	uxtb	r0, r2
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1038e:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   10390:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   10392:	5c59      	ldrb	r1, [r3, r1]
   10394:	f002 0207 	and.w	r2, r2, #7
   10398:	fa41 f202 	asr.w	r2, r1, r2
   1039c:	f012 0201 	ands.w	r2, r2, #1
   103a0:	d11f      	bne.n	103e2 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   103a2:	fbb0 f4f5 	udiv	r4, r0, r5
   103a6:	fb05 0414 	mls	r4, r5, r4, r0
   103aa:	b2e4      	uxtb	r4, r4
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   103ac:	1e5d      	subs	r5, r3, #1
	chan_next = 0U;
   103ae:	4610      	mov	r0, r2
   103b0:	3304      	adds	r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   103b2:	f100 0e08 	add.w	lr, r0, #8
   103b6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   103ba:	fa5f fe8e 	uxtb.w	lr, lr
		bite = *chan_map;
   103be:	4602      	mov	r2, r0
			if (bite & 0x01) {
   103c0:	f011 0f01 	tst.w	r1, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   103c4:	f102 0c01 	add.w	ip, r2, #1
			bite >>= 1;
   103c8:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   103cc:	d002      	beq.n	103d4 <lll_chan_sel_1+0x6c>
				if (chan_index == 0U) {
   103ce:	b14c      	cbz	r4, 103e4 <lll_chan_sel_1+0x7c>
				chan_index--;
   103d0:	3c01      	subs	r4, #1
   103d2:	b2e4      	uxtb	r4, r4
			chan_next++;
   103d4:	fa5f f28c 	uxtb.w	r2, ip
		while (bit_count--) {
   103d8:	4572      	cmp	r2, lr
   103da:	d1f1      	bne.n	103c0 <lll_chan_sel_1+0x58>
			chan_next++;
   103dc:	4610      	mov	r0, r2
	while (byte_count--) {
   103de:	429d      	cmp	r5, r3
   103e0:	d1e7      	bne.n	103b2 <lll_chan_sel_1+0x4a>
}
   103e2:	bd30      	pop	{r4, r5, pc}
		}

		if (bit_count < 8) {
   103e4:	1dc1      	adds	r1, r0, #7
   103e6:	1a89      	subs	r1, r1, r2
   103e8:	b2c9      	uxtb	r1, r1
   103ea:	2907      	cmp	r1, #7
   103ec:	4610      	mov	r0, r2
   103ee:	d8f6      	bhi.n	103de <lll_chan_sel_1+0x76>
}
   103f0:	bd30      	pop	{r4, r5, pc}
   103f2:	bf00      	nop
   103f4:	dd67c8a7 	.word	0xdd67c8a7

000103f8 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   103f8:	8842      	ldrh	r2, [r0, #2]
   103fa:	8800      	ldrh	r0, [r0, #0]
}
   103fc:	4050      	eors	r0, r2
   103fe:	4770      	bx	lr

00010400 <lll_chan_sel_2>:
{
   10400:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   10402:	4d34      	ldr	r5, [pc, #208]	; (104d4 <lll_chan_sel_2+0xd4>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   10404:	4c34      	ldr	r4, [pc, #208]	; (104d8 <lll_chan_sel_2+0xd8>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   10406:	4048      	eors	r0, r1
   10408:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1040c:	0a06      	lsrs	r6, r0, #8
   1040e:	fa5f fe80 	uxtb.w	lr, r0
   10412:	eb0e 2e8e 	add.w	lr, lr, lr, lsl #10
   10416:	eb06 2086 	add.w	r0, r6, r6, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1041a:	ea04 1740 	and.w	r7, r4, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1041e:	ea05 0640 	and.w	r6, r5, r0, lsl #1
   10422:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   10426:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1042a:	433e      	orrs	r6, r7
   1042c:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   10430:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   10434:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   10438:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   1043c:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   10440:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   10442:	f3c0 4007 	ubfx	r0, r0, #16, #8
   10446:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1044a:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   1044e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   10452:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   10454:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   10458:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   1045a:	d1d7      	bne.n	1040c <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   1045c:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   1045e:	481f      	ldr	r0, [pc, #124]	; (104dc <lll_chan_sel_2+0xdc>)
   10460:	fba0 4001 	umull	r4, r0, r0, r1
   10464:	1a0c      	subs	r4, r1, r0
   10466:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   1046a:	0940      	lsrs	r0, r0, #5
   1046c:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   10470:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   10474:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   10476:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   1047a:	f000 0507 	and.w	r5, r0, #7
   1047e:	5d14      	ldrb	r4, [r2, r4]
   10480:	412c      	asrs	r4, r5
   10482:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   10484:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   10486:	d41c      	bmi.n	104c2 <lll_chan_sel_2+0xc2>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   10488:	fb01 f303 	mul.w	r3, r1, r3
   1048c:	1e56      	subs	r6, r2, #1
   1048e:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   10492:	3204      	adds	r2, #4
	chan_next = 0U;
   10494:	4660      	mov	r0, ip
		bite = *chan_map;
   10496:	f100 0508 	add.w	r5, r0, #8
   1049a:	f816 cf01 	ldrb.w	ip, [r6, #1]!
		while (bit_count--) {
   1049e:	b2ed      	uxtb	r5, r5
		bite = *chan_map;
   104a0:	4601      	mov	r1, r0
			if (bite & 0x01) {
   104a2:	f01c 0f01 	tst.w	ip, #1
			chan_next++;
   104a6:	f101 0401 	add.w	r4, r1, #1
			bite >>= 1;
   104aa:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
			if (bite & 0x01) {
   104ae:	d002      	beq.n	104b6 <lll_chan_sel_2+0xb6>
				if (chan_index == 0U) {
   104b0:	b143      	cbz	r3, 104c4 <lll_chan_sel_2+0xc4>
				chan_index--;
   104b2:	3b01      	subs	r3, #1
   104b4:	b2db      	uxtb	r3, r3
			chan_next++;
   104b6:	b2e1      	uxtb	r1, r4
		while (bit_count--) {
   104b8:	42a9      	cmp	r1, r5
   104ba:	d1f2      	bne.n	104a2 <lll_chan_sel_2+0xa2>
			chan_next++;
   104bc:	4608      	mov	r0, r1
	while (byte_count--) {
   104be:	4296      	cmp	r6, r2
   104c0:	d1e9      	bne.n	10496 <lll_chan_sel_2+0x96>
}
   104c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bit_count < 8) {
   104c4:	3007      	adds	r0, #7
   104c6:	1a40      	subs	r0, r0, r1
   104c8:	b2c0      	uxtb	r0, r0
   104ca:	2807      	cmp	r0, #7
   104cc:	4608      	mov	r0, r1
   104ce:	d8f6      	bhi.n	104be <lll_chan_sel_2+0xbe>
}
   104d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104d2:	bf00      	nop
   104d4:	00022110 	.word	0x00022110
   104d8:	00088440 	.word	0x00088440
   104dc:	bacf914d 	.word	0xbacf914d

000104e0 <bt_rand>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_ctlr_crypto);

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   104e0:	f000 ba90 	b.w	10a04 <lll_csrand_get>

000104e4 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   104e4:	4668      	mov	r0, sp
   104e6:	f020 0107 	bic.w	r1, r0, #7
   104ea:	468d      	mov	sp, r1
   104ec:	b501      	push	{r0, lr}
	isr_radio();
   104ee:	f002 f85b 	bl	125a8 <isr_radio>
	ISR_DIRECT_PM();
   104f2:	f7f1 ff17 	bl	2324 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   104f6:	f7f2 f807 	bl	2508 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   104fa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   104fe:	4685      	mov	sp, r0
   10500:	4770      	bx	lr
   10502:	bf00      	nop

00010504 <rtc0_nrf5_isr>:
{
   10504:	b508      	push	{r3, lr}
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   10506:	4b09      	ldr	r3, [pc, #36]	; (1052c <rtc0_nrf5_isr+0x28>)
   10508:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1050c:	b93a      	cbnz	r2, 1051e <rtc0_nrf5_isr+0x1a>
	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1050e:	2001      	movs	r0, #1
   10510:	f7f6 f93e 	bl	6790 <mayfly_run>
}
   10514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   10518:	2002      	movs	r0, #2
   1051a:	f7f6 b939 	b.w	6790 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1051e:	2000      	movs	r0, #0
   10520:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   10524:	f7f7 fa32 	bl	798c <ticker_trigger>
   10528:	e7f1      	b.n	1050e <rtc0_nrf5_isr+0xa>
   1052a:	bf00      	nop
   1052c:	4000b000 	.word	0x4000b000

00010530 <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   10530:	2000      	movs	r0, #0
   10532:	f7f6 b92d 	b.w	6790 <mayfly_run>
   10536:	bf00      	nop

00010538 <ticker_start_op_cb>:

	preempt_req = preempt_ack;
}

static void ticker_start_op_cb(uint32_t status, void *param)
{
   10538:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1053a:	b9f8      	cbnz	r0, 1057c <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1053c:	4b1e      	ldr	r3, [pc, #120]	; (105b8 <ticker_start_op_cb+0x80>)
   1053e:	4d1f      	ldr	r5, [pc, #124]	; (105bc <ticker_start_op_cb+0x84>)
   10540:	781a      	ldrb	r2, [r3, #0]
   10542:	782b      	ldrb	r3, [r5, #0]
   10544:	429a      	cmp	r2, r3
   10546:	d027      	beq.n	10598 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   10548:	4a1d      	ldr	r2, [pc, #116]	; (105c0 <ticker_start_op_cb+0x88>)
   1054a:	4c1e      	ldr	r4, [pc, #120]	; (105c4 <ticker_start_op_cb+0x8c>)
   1054c:	7812      	ldrb	r2, [r2, #0]
   1054e:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   10550:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   10552:	4291      	cmp	r1, r2
	preempt_start_ack++;
   10554:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   10556:	b2d3      	uxtb	r3, r2
   10558:	d00d      	beq.n	10576 <ticker_start_op_cb+0x3e>
   1055a:	4a1b      	ldr	r2, [pc, #108]	; (105c8 <ticker_start_op_cb+0x90>)
   1055c:	491b      	ldr	r1, [pc, #108]	; (105cc <ticker_start_op_cb+0x94>)
   1055e:	481c      	ldr	r0, [pc, #112]	; (105d0 <ticker_start_op_cb+0x98>)
   10560:	f240 3345 	movw	r3, #837	; 0x345
   10564:	f006 ffbd 	bl	174e2 <assert_print>
   10568:	4040      	eors	r0, r0
   1056a:	f380 8811 	msr	BASEPRI, r0
   1056e:	f04f 0003 	mov.w	r0, #3
   10572:	df02      	svc	2
	preempt_req++;
   10574:	7823      	ldrb	r3, [r4, #0]
   10576:	3301      	adds	r3, #1
   10578:	7023      	strb	r3, [r4, #0]
}
   1057a:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1057c:	4a12      	ldr	r2, [pc, #72]	; (105c8 <ticker_start_op_cb+0x90>)
   1057e:	4915      	ldr	r1, [pc, #84]	; (105d4 <ticker_start_op_cb+0x9c>)
   10580:	4813      	ldr	r0, [pc, #76]	; (105d0 <ticker_start_op_cb+0x98>)
   10582:	f44f 7350 	mov.w	r3, #832	; 0x340
   10586:	f006 ffac 	bl	174e2 <assert_print>
   1058a:	4040      	eors	r0, r0
   1058c:	f380 8811 	msr	BASEPRI, r0
   10590:	f04f 0003 	mov.w	r0, #3
   10594:	df02      	svc	2
   10596:	e7d1      	b.n	1053c <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   10598:	4a0b      	ldr	r2, [pc, #44]	; (105c8 <ticker_start_op_cb+0x90>)
   1059a:	490f      	ldr	r1, [pc, #60]	; (105d8 <ticker_start_op_cb+0xa0>)
   1059c:	480c      	ldr	r0, [pc, #48]	; (105d0 <ticker_start_op_cb+0x98>)
   1059e:	f240 3342 	movw	r3, #834	; 0x342
   105a2:	f006 ff9e 	bl	174e2 <assert_print>
   105a6:	4040      	eors	r0, r0
   105a8:	f380 8811 	msr	BASEPRI, r0
   105ac:	f04f 0003 	mov.w	r0, #3
   105b0:	df02      	svc	2
	preempt_start_ack++;
   105b2:	782b      	ldrb	r3, [r5, #0]
   105b4:	e7c8      	b.n	10548 <ticker_start_op_cb+0x10>
   105b6:	bf00      	nop
   105b8:	20002639 	.word	0x20002639
   105bc:	20002638 	.word	0x20002638
   105c0:	20002634 	.word	0x20002634
   105c4:	20002635 	.word	0x20002635
   105c8:	0001c30c 	.word	0x0001c30c
   105cc:	0001c37c 	.word	0x0001c37c
   105d0:	0001b844 	.word	0x0001b844
   105d4:	0001bdb8 	.word	0x0001bdb8
   105d8:	0001c354 	.word	0x0001c354

000105dc <ticker_stop_op_cb>:
{
   105dc:	b510      	push	{r4, lr}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   105de:	4b0e      	ldr	r3, [pc, #56]	; (10618 <ticker_stop_op_cb+0x3c>)
   105e0:	4c0e      	ldr	r4, [pc, #56]	; (1061c <ticker_stop_op_cb+0x40>)
   105e2:	781a      	ldrb	r2, [r3, #0]
   105e4:	7823      	ldrb	r3, [r4, #0]
   105e6:	429a      	cmp	r2, r3
   105e8:	d006      	beq.n	105f8 <ticker_stop_op_cb+0x1c>
	preempt_req = preempt_ack;
   105ea:	490d      	ldr	r1, [pc, #52]	; (10620 <ticker_stop_op_cb+0x44>)
   105ec:	4a0d      	ldr	r2, [pc, #52]	; (10624 <ticker_stop_op_cb+0x48>)
   105ee:	7809      	ldrb	r1, [r1, #0]
   105f0:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   105f2:	3301      	adds	r3, #1
   105f4:	7023      	strb	r3, [r4, #0]
}
   105f6:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   105f8:	4a0b      	ldr	r2, [pc, #44]	; (10628 <ticker_stop_op_cb+0x4c>)
   105fa:	490c      	ldr	r1, [pc, #48]	; (1062c <ticker_stop_op_cb+0x50>)
   105fc:	480c      	ldr	r0, [pc, #48]	; (10630 <ticker_stop_op_cb+0x54>)
   105fe:	f240 3337 	movw	r3, #823	; 0x337
   10602:	f006 ff6e 	bl	174e2 <assert_print>
   10606:	4040      	eors	r0, r0
   10608:	f380 8811 	msr	BASEPRI, r0
   1060c:	f04f 0003 	mov.w	r0, #3
   10610:	df02      	svc	2
	preempt_stop_ack++;
   10612:	7823      	ldrb	r3, [r4, #0]
   10614:	e7e9      	b.n	105ea <ticker_stop_op_cb+0xe>
   10616:	bf00      	nop
   10618:	20002637 	.word	0x20002637
   1061c:	20002636 	.word	0x20002636
   10620:	20002634 	.word	0x20002634
   10624:	20002635 	.word	0x20002635
   10628:	0001c30c 	.word	0x0001c30c
   1062c:	0001c398 	.word	0x0001c398
   10630:	0001b844 	.word	0x0001b844

00010634 <isr_race>:
	radio_status_reset();
   10634:	f002 b8f2 	b.w	1281c <radio_status_reset>

00010638 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   10638:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1063a:	4a18      	ldr	r2, [pc, #96]	; (1069c <preempt_ticker_cb+0x64>)
   1063c:	4c18      	ldr	r4, [pc, #96]	; (106a0 <preempt_ticker_cb+0x68>)
   1063e:	7812      	ldrb	r2, [r2, #0]
   10640:	7823      	ldrb	r3, [r4, #0]
   10642:	429a      	cmp	r2, r3
   10644:	d01b      	beq.n	1067e <preempt_ticker_cb+0x46>
	preempt_ack++;
   10646:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   10648:	4b16      	ldr	r3, [pc, #88]	; (106a4 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   1064a:	3101      	adds	r1, #1
   1064c:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1064e:	2200      	movs	r2, #0
	preempt_ack++;
   10650:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   10652:	9903      	ldr	r1, [sp, #12]
   10654:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   10656:	2001      	movs	r0, #1
   10658:	4611      	mov	r1, r2
   1065a:	f7f6 f83b 	bl	66d4 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1065e:	b900      	cbnz	r0, 10662 <preempt_ticker_cb+0x2a>
}
   10660:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   10662:	4a11      	ldr	r2, [pc, #68]	; (106a8 <preempt_ticker_cb+0x70>)
   10664:	4911      	ldr	r1, [pc, #68]	; (106ac <preempt_ticker_cb+0x74>)
   10666:	4812      	ldr	r0, [pc, #72]	; (106b0 <preempt_ticker_cb+0x78>)
   10668:	f240 33c3 	movw	r3, #963	; 0x3c3
   1066c:	f006 ff39 	bl	174e2 <assert_print>
   10670:	4040      	eors	r0, r0
   10672:	f380 8811 	msr	BASEPRI, r0
   10676:	f04f 0003 	mov.w	r0, #3
   1067a:	df02      	svc	2
}
   1067c:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   1067e:	4a0a      	ldr	r2, [pc, #40]	; (106a8 <preempt_ticker_cb+0x70>)
   10680:	490c      	ldr	r1, [pc, #48]	; (106b4 <preempt_ticker_cb+0x7c>)
   10682:	480b      	ldr	r0, [pc, #44]	; (106b0 <preempt_ticker_cb+0x78>)
   10684:	f240 33bd 	movw	r3, #957	; 0x3bd
   10688:	f006 ff2b 	bl	174e2 <assert_print>
   1068c:	4040      	eors	r0, r0
   1068e:	f380 8811 	msr	BASEPRI, r0
   10692:	f04f 0003 	mov.w	r0, #3
   10696:	df02      	svc	2
   10698:	e7d5      	b.n	10646 <preempt_ticker_cb+0xe>
   1069a:	bf00      	nop
   1069c:	20002635 	.word	0x20002635
   106a0:	20002634 	.word	0x20002634
   106a4:	2000061c 	.word	0x2000061c
   106a8:	0001c30c 	.word	0x0001c30c
   106ac:	0001b9ec 	.word	0x0001b9ec
   106b0:	0001b844 	.word	0x0001b844
   106b4:	0001c3c0 	.word	0x0001c3c0

000106b8 <preempt_ticker_start>:
{
   106b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((preempt_start_req != preempt_start_ack) ||
   106bc:	f8df 8144 	ldr.w	r8, [pc, #324]	; 10804 <preempt_ticker_start+0x14c>
{
   106c0:	4615      	mov	r5, r2
	if ((preempt_start_req != preempt_start_ack) ||
   106c2:	4a51      	ldr	r2, [pc, #324]	; (10808 <preempt_ticker_start+0x150>)
   106c4:	f898 3000 	ldrb.w	r3, [r8]
   106c8:	7812      	ldrb	r2, [r2, #0]
   106ca:	429a      	cmp	r2, r3
{
   106cc:	b08a      	sub	sp, #40	; 0x28
   106ce:	460c      	mov	r4, r1
	if ((preempt_start_req != preempt_start_ack) ||
   106d0:	d04b      	beq.n	1076a <preempt_ticker_start+0xb2>
		if (!prev || prev->is_aborted ||
   106d2:	2c00      	cmp	r4, #0
   106d4:	d063      	beq.n	1079e <preempt_ticker_start+0xe6>
   106d6:	7f22      	ldrb	r2, [r4, #28]
   106d8:	f012 0202 	ands.w	r2, r2, #2
   106dc:	d15f      	bne.n	1079e <preempt_ticker_start+0xe6>
		ull = HDR_LLL2ULL(p->param);
   106de:	68eb      	ldr	r3, [r5, #12]
		preempt_anchor = p->ticks_at_expire;
   106e0:	f8d5 a000 	ldr.w	sl, [r5]
		ull = HDR_LLL2ULL(p->param);
   106e4:	681b      	ldr	r3, [r3, #0]
		diff = ticks_at_preempt_new - ticks_at_preempt;
   106e6:	f8df 9124 	ldr.w	r9, [pc, #292]	; 1080c <preempt_ticker_start+0x154>
		preempt_to = MAX(ull->ticks_active_to_start,
   106ea:	68df      	ldr	r7, [r3, #12]
   106ec:	e9d3 1001 	ldrd	r1, r0, [r3, #4]
   106f0:	4288      	cmp	r0, r1
   106f2:	bf2c      	ite	cs
   106f4:	ebc7 0700 	rsbcs	r7, r7, r0
   106f8:	ebc7 0701 	rsbcc	r7, r7, r1
		ticks_at_preempt_new = preempt_anchor + preempt_to;
   106fc:	eb0a 0607 	add.w	r6, sl, r7
		diff = ticks_at_preempt_new - ticks_at_preempt;
   10700:	f8d9 0000 	ldr.w	r0, [r9]
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
   10704:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		diff = ticks_at_preempt_new - ticks_at_preempt;
   10708:	1a30      	subs	r0, r6, r0
		if (!prev || prev->is_aborted ||
   1070a:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   1070e:	d047      	beq.n	107a0 <preempt_ticker_start+0xe8>
	if ((preempt_stop_req != preempt_stop_ack) ||
   10710:	493f      	ldr	r1, [pc, #252]	; (10810 <preempt_ticker_start+0x158>)
   10712:	4b40      	ldr	r3, [pc, #256]	; (10814 <preempt_ticker_start+0x15c>)
   10714:	7808      	ldrb	r0, [r1, #0]
   10716:	7819      	ldrb	r1, [r3, #0]
   10718:	4288      	cmp	r0, r1
   1071a:	d044      	beq.n	107a6 <preempt_ticker_start+0xee>
		prev->is_aborted = 1U;
   1071c:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1071e:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   10720:	f8c9 6000 	str.w	r6, [r9]
		prev->is_aborted = 1U;
   10724:	f043 0302 	orr.w	r3, r3, #2
   10728:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1072a:	4620      	mov	r0, r4
   1072c:	69a3      	ldr	r3, [r4, #24]
   1072e:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10730:	68eb      	ldr	r3, [r5, #12]
	ticks_at_preempt = ticks_at_preempt_new;
   10732:	f8c9 6000 	str.w	r6, [r9]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10736:	9306      	str	r3, [sp, #24]
   10738:	4b37      	ldr	r3, [pc, #220]	; (10818 <preempt_ticker_start+0x160>)
   1073a:	2200      	movs	r2, #0
   1073c:	e9cd 3207 	strd	r3, r2, [sp, #28]
   10740:	4b36      	ldr	r3, [pc, #216]	; (1081c <preempt_ticker_start+0x164>)
   10742:	e9cd 2202 	strd	r2, r2, [sp, #8]
   10746:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1074a:	e9cd 7200 	strd	r7, r2, [sp]
	preempt_start_req++;
   1074e:	f898 4000 	ldrb.w	r4, [r8]
   10752:	3401      	adds	r4, #1
   10754:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10756:	4653      	mov	r3, sl
   10758:	4611      	mov	r1, r2
   1075a:	4610      	mov	r0, r2
	preempt_start_req++;
   1075c:	f888 4000 	strb.w	r4, [r8]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10760:	f7f7 f97a 	bl	7a58 <ticker_start>
}
   10764:	b00a      	add	sp, #40	; 0x28
   10766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   1076a:	4b2d      	ldr	r3, [pc, #180]	; (10820 <preempt_ticker_start+0x168>)
   1076c:	4a2d      	ldr	r2, [pc, #180]	; (10824 <preempt_ticker_start+0x16c>)
   1076e:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   10770:	7812      	ldrb	r2, [r2, #0]
   10772:	429a      	cmp	r2, r3
   10774:	d1ad      	bne.n	106d2 <preempt_ticker_start+0x1a>
		ull = HDR_LLL2ULL(p->param);
   10776:	68c3      	ldr	r3, [r0, #12]
		preempt_anchor = p->ticks_at_expire;
   10778:	f8d0 a000 	ldr.w	sl, [r0]
		ull = HDR_LLL2ULL(p->param);
   1077c:	681a      	ldr	r2, [r3, #0]
		preempt_to = MAX(ull->ticks_active_to_start,
   1077e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1080c <preempt_ticker_start+0x154>
   10782:	68d7      	ldr	r7, [r2, #12]
   10784:	e9d2 1001 	ldrd	r1, r0, [r2, #4]
   10788:	4288      	cmp	r0, r1
   1078a:	bf2c      	ite	cs
   1078c:	ebc7 0700 	rsbcs	r7, r7, r0
   10790:	ebc7 0701 	rsbcc	r7, r7, r1
		ticks_at_preempt_new = preempt_anchor + preempt_to;
   10794:	eb0a 0607 	add.w	r6, sl, r7
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
   10798:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
   1079c:	e7c9      	b.n	10732 <preempt_ticker_start+0x7a>
			return TICKER_STATUS_SUCCESS;
   1079e:	2000      	movs	r0, #0
}
   107a0:	b00a      	add	sp, #40	; 0x28
   107a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req == preempt_ack)) {
   107a6:	491e      	ldr	r1, [pc, #120]	; (10820 <preempt_ticker_start+0x168>)
   107a8:	481e      	ldr	r0, [pc, #120]	; (10824 <preempt_ticker_start+0x16c>)
   107aa:	7809      	ldrb	r1, [r1, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   107ac:	7800      	ldrb	r0, [r0, #0]
   107ae:	4288      	cmp	r0, r1
   107b0:	d0b4      	beq.n	1071c <preempt_ticker_start+0x64>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   107b2:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   107b4:	7819      	ldrb	r1, [r3, #0]
   107b6:	3101      	adds	r1, #1
   107b8:	b2c9      	uxtb	r1, r1
   107ba:	7019      	strb	r1, [r3, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   107bc:	4610      	mov	r0, r2
   107be:	4b1a      	ldr	r3, [pc, #104]	; (10828 <preempt_ticker_start+0x170>)
   107c0:	4611      	mov	r1, r2
   107c2:	f7f7 f9db 	bl	7b7c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   107c6:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   107ca:	d0a7      	beq.n	1071c <preempt_ticker_start+0x64>
   107cc:	4a17      	ldr	r2, [pc, #92]	; (1082c <preempt_ticker_start+0x174>)
   107ce:	4918      	ldr	r1, [pc, #96]	; (10830 <preempt_ticker_start+0x178>)
   107d0:	4818      	ldr	r0, [pc, #96]	; (10834 <preempt_ticker_start+0x17c>)
   107d2:	f240 33af 	movw	r3, #943	; 0x3af
   107d6:	f006 fe84 	bl	174e2 <assert_print>
   107da:	4040      	eors	r0, r0
   107dc:	f380 8811 	msr	BASEPRI, r0
   107e0:	f04f 0003 	mov.w	r0, #3
   107e4:	df02      	svc	2
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   107e6:	4a11      	ldr	r2, [pc, #68]	; (1082c <preempt_ticker_start+0x174>)
   107e8:	4911      	ldr	r1, [pc, #68]	; (10830 <preempt_ticker_start+0x178>)
   107ea:	4812      	ldr	r0, [pc, #72]	; (10834 <preempt_ticker_start+0x17c>)
   107ec:	f240 336e 	movw	r3, #878	; 0x36e
   107f0:	f006 fe77 	bl	174e2 <assert_print>
   107f4:	4040      	eors	r0, r0
   107f6:	f380 8811 	msr	BASEPRI, r0
   107fa:	f04f 0003 	mov.w	r0, #3
   107fe:	df02      	svc	2
   10800:	e78c      	b.n	1071c <preempt_ticker_start+0x64>
   10802:	bf00      	nop
   10804:	20002639 	.word	0x20002639
   10808:	20002638 	.word	0x20002638
   1080c:	20001f78 	.word	0x20001f78
   10810:	20002636 	.word	0x20002636
   10814:	20002637 	.word	0x20002637
   10818:	00010539 	.word	0x00010539
   1081c:	00010639 	.word	0x00010639
   10820:	20002634 	.word	0x20002634
   10824:	20002635 	.word	0x20002635
   10828:	000105dd 	.word	0x000105dd
   1082c:	0001c30c 	.word	0x0001c30c
   10830:	0001bc20 	.word	0x0001bc20
   10834:	0001b844 	.word	0x0001b844

00010838 <preempt>:

static void preempt(void *param)
{
   10838:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1083a:	4e4c      	ldr	r6, [pc, #304]	; (1096c <preempt+0x134>)
   1083c:	68b3      	ldr	r3, [r6, #8]
{
   1083e:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   10840:	b15b      	cbz	r3, 1085a <preempt+0x22>
   10842:	6833      	ldr	r3, [r6, #0]
   10844:	b14b      	cbz	r3, 1085a <preempt+0x22>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   10846:	23ff      	movs	r3, #255	; 0xff
   10848:	4607      	mov	r7, r0
	next = ull_prepare_dequeue_iter(&idx);
   1084a:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   1084e:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   10852:	f7f8 f95d 	bl	8b10 <ull_prepare_dequeue_iter>
	if (!next) {
   10856:	4604      	mov	r4, r0
   10858:	b930      	cbnz	r0, 10868 <preempt+0x30>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   1085a:	b009      	add	sp, #36	; 0x24
   1085c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = ull_prepare_dequeue_iter(&idx);
   1085e:	f7f8 f957 	bl	8b10 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   10862:	4604      	mov	r4, r0
   10864:	2800      	cmp	r0, #0
   10866:	d0f8      	beq.n	1085a <preempt+0x22>
   10868:	7f21      	ldrb	r1, [r4, #28]
   1086a:	f011 0503 	ands.w	r5, r1, #3
		next = ull_prepare_dequeue_iter(&idx);
   1086e:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   10872:	d1f4      	bne.n	1085e <preempt+0x26>
	if (next->prepare_param.param != param) {
   10874:	68e3      	ldr	r3, [r4, #12]
   10876:	42bb      	cmp	r3, r7
   10878:	d126      	bne.n	108c8 <preempt+0x90>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   1087a:	4638      	mov	r0, r7
   1087c:	6873      	ldr	r3, [r6, #4]
   1087e:	6831      	ldr	r1, [r6, #0]
   10880:	aa03      	add	r2, sp, #12
   10882:	4798      	blx	r3
	if (!err) {
   10884:	4607      	mov	r7, r0
   10886:	b1b0      	cbz	r0, 108b6 <preempt+0x7e>
	event.curr.abort_cb(NULL, event.curr.param);
   10888:	68b3      	ldr	r3, [r6, #8]
   1088a:	6831      	ldr	r1, [r6, #0]
   1088c:	4628      	mov	r0, r5
   1088e:	4798      	blx	r3
	if (err == -EAGAIN) {
   10890:	f117 0f0b 	cmn.w	r7, #11
   10894:	d02e      	beq.n	108f4 <preempt+0xbc>
		LL_ASSERT(err == -ECANCELED);
   10896:	378c      	adds	r7, #140	; 0x8c
   10898:	d0df      	beq.n	1085a <preempt+0x22>
   1089a:	4a35      	ldr	r2, [pc, #212]	; (10970 <preempt+0x138>)
   1089c:	4935      	ldr	r1, [pc, #212]	; (10974 <preempt+0x13c>)
   1089e:	4836      	ldr	r0, [pc, #216]	; (10978 <preempt+0x140>)
   108a0:	f240 431d 	movw	r3, #1053	; 0x41d
   108a4:	f006 fe1d 	bl	174e2 <assert_print>
   108a8:	4040      	eors	r0, r0
   108aa:	f380 8811 	msr	BASEPRI, r0
   108ae:	f04f 0003 	mov.w	r0, #3
   108b2:	df02      	svc	2
   108b4:	e7d1      	b.n	1085a <preempt+0x22>
		next->is_aborted = 1;
   108b6:	7f23      	ldrb	r3, [r4, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   108b8:	69a2      	ldr	r2, [r4, #24]
   108ba:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   108bc:	f043 0302 	orr.w	r3, r3, #2
   108c0:	7723      	strb	r3, [r4, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   108c2:	4620      	mov	r0, r4
   108c4:	4790      	blx	r2
		return;
   108c6:	e7c8      	b.n	1085a <preempt+0x22>
		ret = preempt_ticker_start(next, NULL, next);
   108c8:	4622      	mov	r2, r4
   108ca:	4629      	mov	r1, r5
   108cc:	4620      	mov	r0, r4
   108ce:	f7ff fef3 	bl	106b8 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   108d2:	f030 0302 	bics.w	r3, r0, #2
   108d6:	d0c0      	beq.n	1085a <preempt+0x22>
   108d8:	4a25      	ldr	r2, [pc, #148]	; (10970 <preempt+0x138>)
   108da:	4928      	ldr	r1, [pc, #160]	; (1097c <preempt+0x144>)
   108dc:	4826      	ldr	r0, [pc, #152]	; (10978 <preempt+0x140>)
   108de:	f240 33e9 	movw	r3, #1001	; 0x3e9
   108e2:	f006 fdfe 	bl	174e2 <assert_print>
   108e6:	4040      	eors	r0, r0
   108e8:	f380 8811 	msr	BASEPRI, r0
   108ec:	f04f 0003 	mov.w	r0, #3
   108f0:	df02      	svc	2
   108f2:	e7b2      	b.n	1085a <preempt+0x22>
		iter_idx = UINT8_MAX;
   108f4:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   108f6:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   108fa:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   108fe:	f7f8 f907 	bl	8b10 <ull_prepare_dequeue_iter>
		while (iter) {
   10902:	b928      	cbnz	r0, 10910 <preempt+0xd8>
   10904:	e013      	b.n	1092e <preempt+0xf6>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   10906:	f10d 000b 	add.w	r0, sp, #11
   1090a:	f7f8 f901 	bl	8b10 <ull_prepare_dequeue_iter>
		while (iter) {
   1090e:	b170      	cbz	r0, 1092e <preempt+0xf6>
			if (!iter->is_aborted &&
   10910:	7f03      	ldrb	r3, [r0, #28]
   10912:	079a      	lsls	r2, r3, #30
   10914:	d4f7      	bmi.n	10906 <preempt+0xce>
			    event.curr.param == iter->prepare_param.param) {
   10916:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   10918:	6831      	ldr	r1, [r6, #0]
   1091a:	4291      	cmp	r1, r2
   1091c:	d1f3      	bne.n	10906 <preempt+0xce>
				iter->is_aborted = 1;
   1091e:	f043 0302 	orr.w	r3, r3, #2
   10922:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   10924:	6983      	ldr	r3, [r0, #24]
   10926:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   10928:	f88d 400b 	strb.w	r4, [sp, #11]
   1092c:	e7eb      	b.n	10906 <preempt+0xce>
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1092e:	2301      	movs	r3, #1
	prepare_param.param = event.curr.param;
   10930:	6830      	ldr	r0, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   10932:	9300      	str	r3, [sp, #0]
	struct lll_prepare_param prepare_param = {0};
   10934:	2100      	movs	r1, #0
   10936:	e9cd 1104 	strd	r1, r1, [sp, #16]
   1093a:	9106      	str	r1, [sp, #24]
	prepare_param.param = event.curr.param;
   1093c:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   1093e:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   10940:	9b03      	ldr	r3, [sp, #12]
   10942:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   10946:	aa04      	add	r2, sp, #16
   10948:	f7f8 f8a2 	bl	8a90 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   1094c:	2800      	cmp	r0, #0
   1094e:	d184      	bne.n	1085a <preempt+0x22>
   10950:	4a07      	ldr	r2, [pc, #28]	; (10970 <preempt+0x138>)
   10952:	490b      	ldr	r1, [pc, #44]	; (10980 <preempt+0x148>)
   10954:	4808      	ldr	r0, [pc, #32]	; (10978 <preempt+0x140>)
   10956:	f240 431b 	movw	r3, #1051	; 0x41b
   1095a:	f006 fdc2 	bl	174e2 <assert_print>
   1095e:	4040      	eors	r0, r0
   10960:	f380 8811 	msr	BASEPRI, r0
   10964:	f04f 0003 	mov.w	r0, #3
   10968:	df02      	svc	2
   1096a:	e776      	b.n	1085a <preempt+0x22>
   1096c:	20001f7c 	.word	0x20001f7c
   10970:	0001c30c 	.word	0x0001c30c
   10974:	0001c3e4 	.word	0x0001c3e4
   10978:	0001b844 	.word	0x0001b844
   1097c:	0001bc20 	.word	0x0001bc20
   10980:	0001c3dc 	.word	0x0001c3dc

00010984 <lll_init>:
{
   10984:	b510      	push	{r4, lr}
   10986:	4815      	ldr	r0, [pc, #84]	; (109dc <lll_init+0x58>)
   10988:	f009 fd1e 	bl	1a3c8 <z_device_is_ready>
	if (!device_is_ready(dev_entropy)) {
   1098c:	b310      	cbz	r0, 109d4 <lll_init+0x50>
	event.curr.abort_cb = NULL;
   1098e:	4b14      	ldr	r3, [pc, #80]	; (109e0 <lll_init+0x5c>)
   10990:	2400      	movs	r4, #0
   10992:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   10994:	f000 fae8 	bl	10f68 <lll_clock_init>
	if (err < 0) {
   10998:	2800      	cmp	r0, #0
   1099a:	db1a      	blt.n	109d2 <lll_init+0x4e>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1099c:	4621      	mov	r1, r4
   1099e:	2001      	movs	r0, #1
   109a0:	4622      	mov	r2, r4
   109a2:	f7f1 fca7 	bl	22f4 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   109a6:	4622      	mov	r2, r4
   109a8:	200b      	movs	r0, #11
   109aa:	2101      	movs	r1, #1
   109ac:	f7f1 fca2 	bl	22f4 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   109b0:	4622      	mov	r2, r4
   109b2:	4621      	mov	r1, r4
   109b4:	2018      	movs	r0, #24
   109b6:	f7f1 fc9d 	bl	22f4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   109ba:	2001      	movs	r0, #1
   109bc:	f7f1 fc6a 	bl	2294 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   109c0:	200b      	movs	r0, #11
   109c2:	f7f1 fc67 	bl	2294 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   109c6:	2018      	movs	r0, #24
   109c8:	f7f1 fc64 	bl	2294 <arch_irq_enable>
	radio_setup();
   109cc:	f001 fe1c 	bl	12608 <radio_setup>
	return 0;
   109d0:	4620      	mov	r0, r4
}
   109d2:	bd10      	pop	{r4, pc}
		return -ENODEV;
   109d4:	f06f 0012 	mvn.w	r0, #18
}
   109d8:	bd10      	pop	{r4, pc}
   109da:	bf00      	nop
   109dc:	0001af94 	.word	0x0001af94
   109e0:	20001f7c 	.word	0x20001f7c

000109e4 <lll_deinit>:
{
   109e4:	b508      	push	{r3, lr}
	err = lll_clock_deinit();
   109e6:	f000 facf 	bl	10f88 <lll_clock_deinit>
	if (err < 0) {
   109ea:	2800      	cmp	r0, #0
   109ec:	db09      	blt.n	10a02 <lll_deinit+0x1e>
	irq_disable(RADIO_IRQn);
   109ee:	2001      	movs	r0, #1
   109f0:	f7f1 fc5e 	bl	22b0 <arch_irq_disable>
	irq_disable(RTC0_IRQn);
   109f4:	200b      	movs	r0, #11
   109f6:	f7f1 fc5b 	bl	22b0 <arch_irq_disable>
	irq_disable(HAL_SWI_RADIO_IRQ);
   109fa:	2018      	movs	r0, #24
   109fc:	f7f1 fc58 	bl	22b0 <arch_irq_disable>
	return 0;
   10a00:	2000      	movs	r0, #0
}
   10a02:	bd08      	pop	{r3, pc}

00010a04 <lll_csrand_get>:
{
   10a04:	4603      	mov	r3, r0
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   10a06:	4803      	ldr	r0, [pc, #12]	; (10a14 <lll_csrand_get+0x10>)
   10a08:	b28a      	uxth	r2, r1
   10a0a:	4619      	mov	r1, r3
   10a0c:	6883      	ldr	r3, [r0, #8]
   10a0e:	681b      	ldr	r3, [r3, #0]
   10a10:	4718      	bx	r3
   10a12:	bf00      	nop
   10a14:	0001af94 	.word	0x0001af94

00010a18 <lll_csrand_isr_get>:
{
   10a18:	b430      	push	{r4, r5}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   10a1a:	4d07      	ldr	r5, [pc, #28]	; (10a38 <lll_csrand_isr_get+0x20>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   10a1c:	68ab      	ldr	r3, [r5, #8]
   10a1e:	685c      	ldr	r4, [r3, #4]
   10a20:	b134      	cbz	r4, 10a30 <lll_csrand_isr_get+0x18>
   10a22:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   10a24:	46a4      	mov	ip, r4
   10a26:	4601      	mov	r1, r0
   10a28:	2300      	movs	r3, #0
   10a2a:	4628      	mov	r0, r5
}
   10a2c:	bc30      	pop	{r4, r5}
   10a2e:	4760      	bx	ip
   10a30:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10a34:	bc30      	pop	{r4, r5}
   10a36:	4770      	bx	lr
   10a38:	0001af94 	.word	0x0001af94

00010a3c <lll_rand_isr_get>:
int lll_rand_isr_get(void *buf, size_t len)
   10a3c:	b430      	push	{r4, r5}
   10a3e:	4d07      	ldr	r5, [pc, #28]	; (10a5c <lll_rand_isr_get+0x20>)
   10a40:	68ab      	ldr	r3, [r5, #8]
   10a42:	685c      	ldr	r4, [r3, #4]
   10a44:	b134      	cbz	r4, 10a54 <lll_rand_isr_get+0x18>
   10a46:	b28a      	uxth	r2, r1
   10a48:	46a4      	mov	ip, r4
   10a4a:	4601      	mov	r1, r0
   10a4c:	2300      	movs	r3, #0
   10a4e:	4628      	mov	r0, r5
   10a50:	bc30      	pop	{r4, r5}
   10a52:	4760      	bx	ip
   10a54:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10a58:	bc30      	pop	{r4, r5}
   10a5a:	4770      	bx	lr
   10a5c:	0001af94 	.word	0x0001af94

00010a60 <lll_reset>:
}
   10a60:	2000      	movs	r0, #0
   10a62:	4770      	bx	lr

00010a64 <lll_disable>:
{
   10a64:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   10a66:	4604      	mov	r4, r0
{
   10a68:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   10a6a:	b378      	cbz	r0, 10acc <lll_disable+0x68>
   10a6c:	4b23      	ldr	r3, [pc, #140]	; (10afc <lll_disable+0x98>)
   10a6e:	681a      	ldr	r2, [r3, #0]
   10a70:	4282      	cmp	r2, r0
   10a72:	d025      	beq.n	10ac0 <lll_disable+0x5c>
		idx = UINT8_MAX;
   10a74:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   10a76:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   10a7a:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   10a7e:	f7f8 f847 	bl	8b10 <ull_prepare_dequeue_iter>
		while (next) {
   10a82:	b938      	cbnz	r0, 10a94 <lll_disable+0x30>
   10a84:	e01a      	b.n	10abc <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   10a86:	42a1      	cmp	r1, r4
   10a88:	d00a      	beq.n	10aa0 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   10a8a:	f10d 0007 	add.w	r0, sp, #7
   10a8e:	f7f8 f83f 	bl	8b10 <ull_prepare_dequeue_iter>
		while (next) {
   10a92:	b198      	cbz	r0, 10abc <lll_disable+0x58>
			if (!next->is_aborted &&
   10a94:	7f03      	ldrb	r3, [r0, #28]
   10a96:	079b      	lsls	r3, r3, #30
   10a98:	d4f7      	bmi.n	10a8a <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   10a9a:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   10a9c:	2c00      	cmp	r4, #0
   10a9e:	d1f2      	bne.n	10a86 <lll_disable+0x22>
				next->is_aborted = 1;
   10aa0:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   10aa2:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   10aa4:	f043 0302 	orr.w	r3, r3, #2
   10aa8:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   10aaa:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   10aac:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   10ab0:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   10ab4:	f7f8 f82c 	bl	8b10 <ull_prepare_dequeue_iter>
		while (next) {
   10ab8:	2800      	cmp	r0, #0
   10aba:	d1eb      	bne.n	10a94 <lll_disable+0x30>
}
   10abc:	b003      	add	sp, #12
   10abe:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   10ac0:	689b      	ldr	r3, [r3, #8]
   10ac2:	b16b      	cbz	r3, 10ae0 <lll_disable+0x7c>
   10ac4:	4601      	mov	r1, r0
			event.curr.abort_cb(NULL, event.curr.param);
   10ac6:	2000      	movs	r0, #0
   10ac8:	4798      	blx	r3
   10aca:	e7d3      	b.n	10a74 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   10acc:	4a0b      	ldr	r2, [pc, #44]	; (10afc <lll_disable+0x98>)
   10ace:	6893      	ldr	r3, [r2, #8]
   10ad0:	2b00      	cmp	r3, #0
   10ad2:	d0cf      	beq.n	10a74 <lll_disable+0x10>
   10ad4:	6811      	ldr	r1, [r2, #0]
   10ad6:	2900      	cmp	r1, #0
   10ad8:	d0cc      	beq.n	10a74 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   10ada:	2000      	movs	r0, #0
   10adc:	4798      	blx	r3
   10ade:	e7c9      	b.n	10a74 <lll_disable+0x10>
			LL_ASSERT(!param);
   10ae0:	4a07      	ldr	r2, [pc, #28]	; (10b00 <lll_disable+0x9c>)
   10ae2:	4908      	ldr	r1, [pc, #32]	; (10b04 <lll_disable+0xa0>)
   10ae4:	4808      	ldr	r0, [pc, #32]	; (10b08 <lll_disable+0xa4>)
   10ae6:	f240 1311 	movw	r3, #273	; 0x111
   10aea:	f006 fcfa 	bl	174e2 <assert_print>
   10aee:	4040      	eors	r0, r0
   10af0:	f380 8811 	msr	BASEPRI, r0
   10af4:	f04f 0003 	mov.w	r0, #3
   10af8:	df02      	svc	2
   10afa:	e7bb      	b.n	10a74 <lll_disable+0x10>
   10afc:	20001f7c 	.word	0x20001f7c
   10b00:	0001c30c 	.word	0x0001c30c
   10b04:	0001c3f0 	.word	0x0001c3f0
   10b08:	0001b844 	.word	0x0001b844

00010b0c <lll_prepare_done>:
}
   10b0c:	2000      	movs	r0, #0
   10b0e:	4770      	bx	lr

00010b10 <lll_done>:
{
   10b10:	b538      	push	{r3, r4, r5, lr}
   10b12:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   10b14:	f7f7 ffee 	bl	8af4 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   10b18:	b154      	cbz	r4, 10b30 <lll_done+0x20>
   10b1a:	b310      	cbz	r0, 10b62 <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   10b1c:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   10b1e:	2000      	movs	r0, #0
   10b20:	f7f8 f816 	bl	8b50 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   10b24:	4620      	mov	r0, r4
   10b26:	f7f8 f89d 	bl	8c64 <ull_event_done>
	LL_ASSERT(evdone);
   10b2a:	b158      	cbz	r0, 10b44 <lll_done+0x34>
}
   10b2c:	2000      	movs	r0, #0
   10b2e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   10b30:	4d1a      	ldr	r5, [pc, #104]	; (10b9c <lll_done+0x8c>)
   10b32:	68ab      	ldr	r3, [r5, #8]
   10b34:	b31b      	cbz	r3, 10b7e <lll_done+0x6e>
		param = event.curr.param;
   10b36:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   10b38:	2300      	movs	r3, #0
   10b3a:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   10b3c:	602b      	str	r3, [r5, #0]
		if (param) {
   10b3e:	2c00      	cmp	r4, #0
   10b40:	d1ec      	bne.n	10b1c <lll_done+0xc>
   10b42:	e7ec      	b.n	10b1e <lll_done+0xe>
	LL_ASSERT(evdone);
   10b44:	4a16      	ldr	r2, [pc, #88]	; (10ba0 <lll_done+0x90>)
   10b46:	4917      	ldr	r1, [pc, #92]	; (10ba4 <lll_done+0x94>)
   10b48:	4817      	ldr	r0, [pc, #92]	; (10ba8 <lll_done+0x98>)
   10b4a:	f44f 73c1 	mov.w	r3, #386	; 0x182
   10b4e:	f006 fcc8 	bl	174e2 <assert_print>
   10b52:	4040      	eors	r0, r0
   10b54:	f380 8811 	msr	BASEPRI, r0
   10b58:	f04f 0003 	mov.w	r0, #3
   10b5c:	df02      	svc	2
}
   10b5e:	2000      	movs	r0, #0
   10b60:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   10b62:	4a0f      	ldr	r2, [pc, #60]	; (10ba0 <lll_done+0x90>)
   10b64:	4911      	ldr	r1, [pc, #68]	; (10bac <lll_done+0x9c>)
   10b66:	4810      	ldr	r0, [pc, #64]	; (10ba8 <lll_done+0x98>)
   10b68:	f240 134b 	movw	r3, #331	; 0x14b
   10b6c:	f006 fcb9 	bl	174e2 <assert_print>
   10b70:	4040      	eors	r0, r0
   10b72:	f380 8811 	msr	BASEPRI, r0
   10b76:	f04f 0003 	mov.w	r0, #3
   10b7a:	df02      	svc	2
		ull = HDR_LLL2ULL(param);
   10b7c:	e7ce      	b.n	10b1c <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   10b7e:	4a08      	ldr	r2, [pc, #32]	; (10ba0 <lll_done+0x90>)
   10b80:	490b      	ldr	r1, [pc, #44]	; (10bb0 <lll_done+0xa0>)
   10b82:	4809      	ldr	r0, [pc, #36]	; (10ba8 <lll_done+0x98>)
   10b84:	f44f 73a8 	mov.w	r3, #336	; 0x150
   10b88:	f006 fcab 	bl	174e2 <assert_print>
   10b8c:	4040      	eors	r0, r0
   10b8e:	f380 8811 	msr	BASEPRI, r0
   10b92:	f04f 0003 	mov.w	r0, #3
   10b96:	df02      	svc	2
   10b98:	e7cd      	b.n	10b36 <lll_done+0x26>
   10b9a:	bf00      	nop
   10b9c:	20001f7c 	.word	0x20001f7c
   10ba0:	0001c30c 	.word	0x0001c30c
   10ba4:	0001c41c 	.word	0x0001c41c
   10ba8:	0001b844 	.word	0x0001b844
   10bac:	0001c3f8 	.word	0x0001c3f8
   10bb0:	0001c408 	.word	0x0001c408

00010bb4 <lll_is_abort_cb>:
}
   10bb4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   10bb8:	4770      	bx	lr
   10bba:	bf00      	nop

00010bbc <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   10bbc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   10bc0:	2a00      	cmp	r2, #0
   10bc2:	db04      	blt.n	10bce <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   10bc4:	429a      	cmp	r2, r3
   10bc6:	bf38      	it	cc
   10bc8:	461a      	movcc	r2, r3
   10bca:	4610      	mov	r0, r2
}
   10bcc:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   10bce:	68c0      	ldr	r0, [r0, #12]
   10bd0:	4298      	cmp	r0, r3
   10bd2:	bf38      	it	cc
   10bd4:	4618      	movcc	r0, r3
   10bd6:	4770      	bx	lr

00010bd8 <lll_chan_set>:
	switch (chan) {
   10bd8:	2826      	cmp	r0, #38	; 0x26
{
   10bda:	b510      	push	{r4, lr}
   10bdc:	4604      	mov	r4, r0
	switch (chan) {
   10bde:	d01c      	beq.n	10c1a <lll_chan_set+0x42>
   10be0:	2827      	cmp	r0, #39	; 0x27
   10be2:	d012      	beq.n	10c0a <lll_chan_set+0x32>
   10be4:	2825      	cmp	r0, #37	; 0x25
   10be6:	d008      	beq.n	10bfa <lll_chan_set+0x22>
		if (chan < 11) {
   10be8:	280a      	cmp	r0, #10
   10bea:	d91e      	bls.n	10c2a <lll_chan_set+0x52>
		} else if (chan < 40) {
   10bec:	2827      	cmp	r0, #39	; 0x27
   10bee:	d821      	bhi.n	10c34 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   10bf0:	3003      	adds	r0, #3
   10bf2:	0040      	lsls	r0, r0, #1
   10bf4:	f001 fd86 	bl	12704 <radio_freq_chan_set>
   10bf8:	e002      	b.n	10c00 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   10bfa:	2002      	movs	r0, #2
   10bfc:	f001 fd82 	bl	12704 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   10c00:	4620      	mov	r0, r4
}
   10c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   10c06:	f001 bd83 	b.w	12710 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   10c0a:	2050      	movs	r0, #80	; 0x50
   10c0c:	f001 fd7a 	bl	12704 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   10c10:	4620      	mov	r0, r4
}
   10c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   10c16:	f001 bd7b 	b.w	12710 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   10c1a:	201a      	movs	r0, #26
   10c1c:	f001 fd72 	bl	12704 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   10c20:	4620      	mov	r0, r4
}
   10c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   10c26:	f001 bd73 	b.w	12710 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   10c2a:	3002      	adds	r0, #2
   10c2c:	0040      	lsls	r0, r0, #1
   10c2e:	f001 fd69 	bl	12704 <radio_freq_chan_set>
   10c32:	e7e5      	b.n	10c00 <lll_chan_set+0x28>
			LL_ASSERT(0);
   10c34:	4a06      	ldr	r2, [pc, #24]	; (10c50 <lll_chan_set+0x78>)
   10c36:	4907      	ldr	r1, [pc, #28]	; (10c54 <lll_chan_set+0x7c>)
   10c38:	4807      	ldr	r0, [pc, #28]	; (10c58 <lll_chan_set+0x80>)
   10c3a:	f240 13f7 	movw	r3, #503	; 0x1f7
   10c3e:	f006 fc50 	bl	174e2 <assert_print>
   10c42:	4040      	eors	r0, r0
   10c44:	f380 8811 	msr	BASEPRI, r0
   10c48:	f04f 0003 	mov.w	r0, #3
   10c4c:	df02      	svc	2
   10c4e:	e7d7      	b.n	10c00 <lll_chan_set+0x28>
   10c50:	0001c30c 	.word	0x0001c30c
   10c54:	0001b908 	.word	0x0001b908
   10c58:	0001b844 	.word	0x0001b844

00010c5c <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   10c5c:	f001 bdb4 	b.w	127c8 <radio_tx_ready_delay_get>

00010c60 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   10c60:	f001 bdba 	b.w	127d8 <radio_rx_ready_delay_get>

00010c64 <lll_isr_tx_status_reset>:
{
   10c64:	b508      	push	{r3, lr}
	radio_status_reset();
   10c66:	f001 fdd9 	bl	1281c <radio_status_reset>
}
   10c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   10c6e:	f001 bf0b 	b.w	12a88 <radio_tmr_status_reset>
   10c72:	bf00      	nop

00010c74 <lll_isr_rx_status_reset>:
{
   10c74:	b508      	push	{r3, lr}
	radio_status_reset();
   10c76:	f001 fdd1 	bl	1281c <radio_status_reset>
	radio_tmr_status_reset();
   10c7a:	f001 ff05 	bl	12a88 <radio_tmr_status_reset>
}
   10c7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   10c82:	f001 becd 	b.w	12a20 <radio_rssi_status_reset>
   10c86:	bf00      	nop

00010c88 <lll_isr_status_reset>:
{
   10c88:	b508      	push	{r3, lr}
	radio_status_reset();
   10c8a:	f001 fdc7 	bl	1281c <radio_status_reset>
	radio_tmr_status_reset();
   10c8e:	f001 fefb 	bl	12a88 <radio_tmr_status_reset>
	radio_filter_status_reset();
   10c92:	f001 fee1 	bl	12a58 <radio_filter_status_reset>
}
   10c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   10c9a:	f001 bec1 	b.w	12a20 <radio_rssi_status_reset>
   10c9e:	bf00      	nop

00010ca0 <lll_isr_cleanup>:
{
   10ca0:	b508      	push	{r3, lr}
   10ca2:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   10ca4:	4817      	ldr	r0, [pc, #92]	; (10d04 <lll_isr_cleanup+0x64>)
   10ca6:	f001 fc8f 	bl	125c8 <radio_isr_set>
	if (!radio_is_idle()) {
   10caa:	f001 fdd7 	bl	1285c <radio_is_idle>
   10cae:	b160      	cbz	r0, 10cca <lll_isr_cleanup+0x2a>
	radio_tmr_stop();
   10cb0:	f001 ff8e 	bl	12bd0 <radio_tmr_stop>
	radio_stop();
   10cb4:	f001 fd10 	bl	126d8 <radio_stop>
	err = lll_hfclock_off();
   10cb8:	f000 f9a2 	bl	11000 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   10cbc:	2800      	cmp	r0, #0
   10cbe:	db0e      	blt.n	10cde <lll_isr_cleanup+0x3e>
}
   10cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   10cc4:	2000      	movs	r0, #0
   10cc6:	f7ff bf23 	b.w	10b10 <lll_done>
		radio_disable();
   10cca:	f001 fd93 	bl	127f4 <radio_disable>
	radio_tmr_stop();
   10cce:	f001 ff7f 	bl	12bd0 <radio_tmr_stop>
	radio_stop();
   10cd2:	f001 fd01 	bl	126d8 <radio_stop>
	err = lll_hfclock_off();
   10cd6:	f000 f993 	bl	11000 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   10cda:	2800      	cmp	r0, #0
   10cdc:	daf0      	bge.n	10cc0 <lll_isr_cleanup+0x20>
   10cde:	4a0a      	ldr	r2, [pc, #40]	; (10d08 <lll_isr_cleanup+0x68>)
   10ce0:	490a      	ldr	r1, [pc, #40]	; (10d0c <lll_isr_cleanup+0x6c>)
   10ce2:	480b      	ldr	r0, [pc, #44]	; (10d10 <lll_isr_cleanup+0x70>)
   10ce4:	f240 2373 	movw	r3, #627	; 0x273
   10ce8:	f006 fbfb 	bl	174e2 <assert_print>
   10cec:	4040      	eors	r0, r0
   10cee:	f380 8811 	msr	BASEPRI, r0
   10cf2:	f04f 0003 	mov.w	r0, #3
   10cf6:	df02      	svc	2
	lll_done(NULL);
   10cf8:	2000      	movs	r0, #0
}
   10cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   10cfe:	f7ff bf07 	b.w	10b10 <lll_done>
   10d02:	bf00      	nop
   10d04:	00010635 	.word	0x00010635
   10d08:	0001c30c 	.word	0x0001c30c
   10d0c:	0001c424 	.word	0x0001c424
   10d10:	0001b844 	.word	0x0001b844

00010d14 <lll_isr_abort>:
{
   10d14:	b510      	push	{r4, lr}
   10d16:	4604      	mov	r4, r0
	radio_status_reset();
   10d18:	f001 fd80 	bl	1281c <radio_status_reset>
	radio_tmr_status_reset();
   10d1c:	f001 feb4 	bl	12a88 <radio_tmr_status_reset>
	radio_filter_status_reset();
   10d20:	f001 fe9a 	bl	12a58 <radio_filter_status_reset>
	radio_rssi_status_reset();
   10d24:	f001 fe7c 	bl	12a20 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   10d28:	4620      	mov	r0, r4
}
   10d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   10d2e:	f7ff bfb7 	b.w	10ca0 <lll_isr_cleanup>
   10d32:	bf00      	nop

00010d34 <lll_isr_early_abort>:
{
   10d34:	b508      	push	{r3, lr}
   10d36:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   10d38:	4813      	ldr	r0, [pc, #76]	; (10d88 <lll_isr_early_abort+0x54>)
   10d3a:	f001 fc45 	bl	125c8 <radio_isr_set>
	if (!radio_is_idle()) {
   10d3e:	f001 fd8d 	bl	1285c <radio_is_idle>
   10d42:	b140      	cbz	r0, 10d56 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   10d44:	f000 f95c 	bl	11000 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   10d48:	2800      	cmp	r0, #0
   10d4a:	db0a      	blt.n	10d62 <lll_isr_early_abort+0x2e>
}
   10d4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   10d50:	2000      	movs	r0, #0
   10d52:	f7ff bedd 	b.w	10b10 <lll_done>
		radio_disable();
   10d56:	f001 fd4d 	bl	127f4 <radio_disable>
	err = lll_hfclock_off();
   10d5a:	f000 f951 	bl	11000 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   10d5e:	2800      	cmp	r0, #0
   10d60:	daf4      	bge.n	10d4c <lll_isr_early_abort+0x18>
   10d62:	4a0a      	ldr	r2, [pc, #40]	; (10d8c <lll_isr_early_abort+0x58>)
   10d64:	490a      	ldr	r1, [pc, #40]	; (10d90 <lll_isr_early_abort+0x5c>)
   10d66:	480b      	ldr	r0, [pc, #44]	; (10d94 <lll_isr_early_abort+0x60>)
   10d68:	f240 2382 	movw	r3, #642	; 0x282
   10d6c:	f006 fbb9 	bl	174e2 <assert_print>
   10d70:	4040      	eors	r0, r0
   10d72:	f380 8811 	msr	BASEPRI, r0
   10d76:	f04f 0003 	mov.w	r0, #3
   10d7a:	df02      	svc	2
	lll_done(NULL);
   10d7c:	2000      	movs	r0, #0
}
   10d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   10d82:	f7ff bec5 	b.w	10b10 <lll_done>
   10d86:	bf00      	nop
   10d88:	00010635 	.word	0x00010635
   10d8c:	0001c30c 	.word	0x0001c30c
   10d90:	0001c424 	.word	0x0001c424
   10d94:	0001b844 	.word	0x0001b844

00010d98 <lll_prepare_resolve>:
{
   10d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10d9c:	b084      	sub	sp, #16
   10d9e:	4606      	mov	r6, r0
   10da0:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   10da2:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   10da6:	23ff      	movs	r3, #255	; 0xff
{
   10da8:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   10dac:	f88d 300f 	strb.w	r3, [sp, #15]
{
   10db0:	460f      	mov	r7, r1
   10db2:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   10db4:	f7f7 feac 	bl	8b10 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   10db8:	4604      	mov	r4, r0
   10dba:	b928      	cbnz	r0, 10dc8 <lll_prepare_resolve+0x30>
   10dbc:	e03b      	b.n	10e36 <lll_prepare_resolve+0x9e>
		p = ull_prepare_dequeue_iter(&idx);
   10dbe:	f7f7 fea7 	bl	8b10 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   10dc2:	4604      	mov	r4, r0
   10dc4:	2800      	cmp	r0, #0
   10dc6:	d036      	beq.n	10e36 <lll_prepare_resolve+0x9e>
   10dc8:	f894 c01c 	ldrb.w	ip, [r4, #28]
   10dcc:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   10dd0:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   10dd4:	d1f3      	bne.n	10dbe <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   10dd6:	f8df a11c 	ldr.w	sl, [pc, #284]	; 10ef4 <lll_prepare_resolve+0x15c>
	if ((!is_dequeue && !is_done_sync()) ||
   10dda:	f8da 3008 	ldr.w	r3, [sl, #8]
   10dde:	2b00      	cmp	r3, #0
   10de0:	d130      	bne.n	10e44 <lll_prepare_resolve+0xac>
	    (p && is_resume)) {
   10de2:	f1b9 0f00 	cmp.w	r9, #0
   10de6:	d16b      	bne.n	10ec0 <lll_prepare_resolve+0x128>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   10de8:	42ac      	cmp	r4, r5
   10dea:	d00c      	beq.n	10e06 <lll_prepare_resolve+0x6e>
   10dec:	4a42      	ldr	r2, [pc, #264]	; (10ef8 <lll_prepare_resolve+0x160>)
   10dee:	4943      	ldr	r1, [pc, #268]	; (10efc <lll_prepare_resolve+0x164>)
   10df0:	4843      	ldr	r0, [pc, #268]	; (10f00 <lll_prepare_resolve+0x168>)
   10df2:	f240 23f1 	movw	r3, #753	; 0x2f1
   10df6:	f006 fb74 	bl	174e2 <assert_print>
   10dfa:	4040      	eors	r0, r0
   10dfc:	f380 8811 	msr	BASEPRI, r0
   10e00:	f04f 0003 	mov.w	r0, #3
   10e04:	df02      	svc	2
	event.curr.param = prepare_param->param;
   10e06:	68eb      	ldr	r3, [r5, #12]
   10e08:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   10e0c:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   10e10:	4628      	mov	r0, r5
   10e12:	47c0      	blx	r8
   10e14:	4604      	mov	r4, r0
   10e16:	e003      	b.n	10e20 <lll_prepare_resolve+0x88>
	} while (p->is_aborted || p->is_resume);
   10e18:	7f01      	ldrb	r1, [r0, #28]
   10e1a:	f011 0103 	ands.w	r1, r1, #3
   10e1e:	d039      	beq.n	10e94 <lll_prepare_resolve+0xfc>
		p = ull_prepare_dequeue_iter(&idx);
   10e20:	f10d 000f 	add.w	r0, sp, #15
   10e24:	f7f7 fe74 	bl	8b10 <ull_prepare_dequeue_iter>
   10e28:	4602      	mov	r2, r0
		if (!p) {
   10e2a:	2800      	cmp	r0, #0
   10e2c:	d1f4      	bne.n	10e18 <lll_prepare_resolve+0x80>
}
   10e2e:	4620      	mov	r0, r4
   10e30:	b004      	add	sp, #16
   10e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   10e36:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 10ef4 <lll_prepare_resolve+0x15c>
	if ((!is_dequeue && !is_done_sync()) ||
   10e3a:	f8da 3008 	ldr.w	r3, [sl, #8]
   10e3e:	2b00      	cmp	r3, #0
   10e40:	d0e1      	beq.n	10e06 <lll_prepare_resolve+0x6e>
{
   10e42:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   10e44:	462a      	mov	r2, r5
   10e46:	f8cd 9000 	str.w	r9, [sp]
   10e4a:	4643      	mov	r3, r8
   10e4c:	4639      	mov	r1, r7
   10e4e:	4630      	mov	r0, r6
   10e50:	f7f7 fe1e 	bl	8a90 <ull_prepare_enqueue>
		LL_ASSERT(next);
   10e54:	4602      	mov	r2, r0
   10e56:	2800      	cmp	r0, #0
   10e58:	d03c      	beq.n	10ed4 <lll_prepare_resolve+0x13c>
		if (is_resume) {
   10e5a:	f1b9 0f00 	cmp.w	r9, #0
   10e5e:	d116      	bne.n	10e8e <lll_prepare_resolve+0xf6>
		ret  = preempt_ticker_start(first, p, next);
   10e60:	2c00      	cmp	r4, #0
   10e62:	bf14      	ite	ne
   10e64:	4620      	movne	r0, r4
   10e66:	4610      	moveq	r0, r2
   10e68:	4621      	mov	r1, r4
   10e6a:	f7ff fc25 	bl	106b8 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10e6e:	f030 0302 	bics.w	r3, r0, #2
   10e72:	d00c      	beq.n	10e8e <lll_prepare_resolve+0xf6>
   10e74:	4a20      	ldr	r2, [pc, #128]	; (10ef8 <lll_prepare_resolve+0x160>)
   10e76:	4923      	ldr	r1, [pc, #140]	; (10f04 <lll_prepare_resolve+0x16c>)
   10e78:	4821      	ldr	r0, [pc, #132]	; (10f00 <lll_prepare_resolve+0x168>)
   10e7a:	f240 23cb 	movw	r3, #715	; 0x2cb
   10e7e:	f006 fb30 	bl	174e2 <assert_print>
   10e82:	4040      	eors	r0, r0
   10e84:	f380 8811 	msr	BASEPRI, r0
   10e88:	f04f 0003 	mov.w	r0, #3
   10e8c:	df02      	svc	2
			return -EINPROGRESS;
   10e8e:	f06f 0476 	mvn.w	r4, #118	; 0x76
   10e92:	e7cc      	b.n	10e2e <lll_prepare_resolve+0x96>
	ret = preempt_ticker_start(p, NULL, p);
   10e94:	f7ff fc10 	bl	106b8 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10e98:	f030 0302 	bics.w	r3, r0, #2
   10e9c:	d0c7      	beq.n	10e2e <lll_prepare_resolve+0x96>
   10e9e:	4a16      	ldr	r2, [pc, #88]	; (10ef8 <lll_prepare_resolve+0x160>)
   10ea0:	4918      	ldr	r1, [pc, #96]	; (10f04 <lll_prepare_resolve+0x16c>)
   10ea2:	4817      	ldr	r0, [pc, #92]	; (10f00 <lll_prepare_resolve+0x168>)
   10ea4:	f240 330e 	movw	r3, #782	; 0x30e
   10ea8:	f006 fb1b 	bl	174e2 <assert_print>
   10eac:	4040      	eors	r0, r0
   10eae:	f380 8811 	msr	BASEPRI, r0
   10eb2:	f04f 0003 	mov.w	r0, #3
   10eb6:	df02      	svc	2
}
   10eb8:	4620      	mov	r0, r4
   10eba:	b004      	add	sp, #16
   10ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   10ec0:	f8cd 9000 	str.w	r9, [sp]
   10ec4:	4643      	mov	r3, r8
   10ec6:	462a      	mov	r2, r5
   10ec8:	4639      	mov	r1, r7
   10eca:	4630      	mov	r0, r6
   10ecc:	f7f7 fde0 	bl	8a90 <ull_prepare_enqueue>
		LL_ASSERT(next);
   10ed0:	2800      	cmp	r0, #0
   10ed2:	d1dc      	bne.n	10e8e <lll_prepare_resolve+0xf6>
   10ed4:	4a08      	ldr	r2, [pc, #32]	; (10ef8 <lll_prepare_resolve+0x160>)
   10ed6:	490c      	ldr	r1, [pc, #48]	; (10f08 <lll_prepare_resolve+0x170>)
   10ed8:	4809      	ldr	r0, [pc, #36]	; (10f00 <lll_prepare_resolve+0x168>)
   10eda:	f240 23be 	movw	r3, #702	; 0x2be
   10ede:	f006 fb00 	bl	174e2 <assert_print>
   10ee2:	4040      	eors	r0, r0
   10ee4:	f380 8811 	msr	BASEPRI, r0
   10ee8:	f04f 0003 	mov.w	r0, #3
   10eec:	df02      	svc	2
   10eee:	2200      	movs	r2, #0
   10ef0:	e7b3      	b.n	10e5a <lll_prepare_resolve+0xc2>
   10ef2:	bf00      	nop
   10ef4:	20001f7c 	.word	0x20001f7c
   10ef8:	0001c30c 	.word	0x0001c30c
   10efc:	0001c464 	.word	0x0001c464
   10f00:	0001b844 	.word	0x0001b844
   10f04:	0001bc20 	.word	0x0001bc20
   10f08:	0001c45c 	.word	0x0001c45c

00010f0c <clock_ready>:
	z_impl_k_sem_give(sem);
   10f0c:	f101 0010 	add.w	r0, r1, #16
   10f10:	f004 bf9e 	b.w	15e50 <z_impl_k_sem_give>

00010f14 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   10f14:	b570      	push	{r4, r5, r6, lr}
   10f16:	4605      	mov	r5, r0
   10f18:	b08a      	sub	sp, #40	; 0x28
   10f1a:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   10f1c:	2201      	movs	r2, #1
   10f1e:	2100      	movs	r1, #0
   10f20:	a804      	add	r0, sp, #16
   10f22:	f009 fc10 	bl	1a746 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   10f26:	4b0f      	ldr	r3, [pc, #60]	; (10f64 <blocking_on+0x50>)
   10f28:	9301      	str	r3, [sp, #4]
   10f2a:	2600      	movs	r6, #0
   10f2c:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   10f2e:	4669      	mov	r1, sp
   10f30:	4628      	mov	r0, r5
   10f32:	9603      	str	r6, [sp, #12]
   10f34:	9302      	str	r3, [sp, #8]
   10f36:	f006 f9cd 	bl	172d4 <onoff_request>
	if (err < 0) {
   10f3a:	2800      	cmp	r0, #0
   10f3c:	db10      	blt.n	10f60 <blocking_on+0x4c>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   10f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   10f42:	4631      	mov	r1, r6
   10f44:	f240 30e7 	movw	r0, #999	; 0x3e7
   10f48:	fbe4 0103 	umlal	r0, r1, r4, r3
   10f4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10f50:	2300      	movs	r3, #0
   10f52:	f7ef f8c5 	bl	e0 <__aeabi_uldivmod>
   10f56:	4602      	mov	r2, r0
   10f58:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   10f5a:	a804      	add	r0, sp, #16
   10f5c:	f004 ff9e 	bl	15e9c <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   10f60:	b00a      	add	sp, #40	; 0x28
   10f62:	bd70      	pop	{r4, r5, r6, pc}
   10f64:	00010f0d 	.word	0x00010f0d

00010f68 <lll_clock_init>:

int lll_clock_init(void)
{
   10f68:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   10f6a:	2001      	movs	r0, #1
   10f6c:	f002 fb00 	bl	13570 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   10f70:	4904      	ldr	r1, [pc, #16]	; (10f84 <lll_clock_init+0x1c>)
   10f72:	2300      	movs	r3, #0
   10f74:	2401      	movs	r4, #1
   10f76:	604b      	str	r3, [r1, #4]
   10f78:	608c      	str	r4, [r1, #8]
   10f7a:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   10f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return onoff_request(mgr, &lf_cli);
   10f80:	f006 b9a8 	b.w	172d4 <onoff_request>
   10f84:	20001f8c 	.word	0x20001f8c

00010f88 <lll_clock_deinit>:

int lll_clock_deinit(void)
{
   10f88:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   10f8a:	2001      	movs	r0, #1
   10f8c:	f002 faf0 	bl	13570 <z_nrf_clock_control_get_onoff>

	return onoff_release(mgr);
}
   10f90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_release(mgr);
   10f94:	f006 b9f6 	b.w	17384 <onoff_release>

00010f98 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   10f98:	4b0c      	ldr	r3, [pc, #48]	; (10fcc <lll_clock_wait+0x34>)
   10f9a:	781a      	ldrb	r2, [r3, #0]
   10f9c:	b10a      	cbz	r2, 10fa2 <lll_clock_wait+0xa>
		return 0;
   10f9e:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   10fa0:	4770      	bx	lr
{
   10fa2:	b510      	push	{r4, lr}
	done = true;
   10fa4:	2001      	movs	r0, #1
   10fa6:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   10fa8:	f002 fae2 	bl	13570 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   10fac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   10fb0:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   10fb2:	f7ff ffaf 	bl	10f14 <blocking_on>
	if (err) {
   10fb6:	b938      	cbnz	r0, 10fc8 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   10fb8:	4620      	mov	r0, r4
   10fba:	f006 f9e3 	bl	17384 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   10fbe:	2802      	cmp	r0, #2
		return 0;
   10fc0:	bf0c      	ite	eq
   10fc2:	2000      	moveq	r0, #0
		return -EIO;
   10fc4:	f06f 0004 	mvnne.w	r0, #4
}
   10fc8:	bd10      	pop	{r4, pc}
   10fca:	bf00      	nop
   10fcc:	2000263a 	.word	0x2000263a

00010fd0 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   10fd0:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10fd2:	4b0a      	ldr	r3, [pc, #40]	; (10ffc <lll_hfclock_on+0x2c>)
   10fd4:	f3bf 8f5b 	dmb	ish
   10fd8:	e853 2f00 	ldrex	r2, [r3]
   10fdc:	1c51      	adds	r1, r2, #1
   10fde:	e843 1000 	strex	r0, r1, [r3]
   10fe2:	2800      	cmp	r0, #0
   10fe4:	d1f8      	bne.n	10fd8 <lll_hfclock_on+0x8>
   10fe6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   10fea:	2a00      	cmp	r2, #0
   10fec:	dd01      	ble.n	10ff2 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   10fee:	2000      	movs	r0, #0
   10ff0:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   10ff2:	f002 fac5 	bl	13580 <z_nrf_clock_bt_ctlr_hf_request>
}
   10ff6:	2000      	movs	r0, #0
   10ff8:	bd08      	pop	{r3, pc}
   10ffa:	bf00      	nop
   10ffc:	20001f88 	.word	0x20001f88

00011000 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   11000:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   11002:	4b0c      	ldr	r3, [pc, #48]	; (11034 <lll_hfclock_off+0x34>)
   11004:	681a      	ldr	r2, [r3, #0]
   11006:	2a00      	cmp	r2, #0
   11008:	dd11      	ble.n	1102e <lll_hfclock_off+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1100a:	f3bf 8f5b 	dmb	ish
   1100e:	e853 2f00 	ldrex	r2, [r3]
   11012:	1e51      	subs	r1, r2, #1
   11014:	e843 1000 	strex	r0, r1, [r3]
   11018:	2800      	cmp	r0, #0
   1101a:	d1f8      	bne.n	1100e <lll_hfclock_off+0xe>
   1101c:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   11020:	2a01      	cmp	r2, #1
   11022:	dd01      	ble.n	11028 <lll_hfclock_off+0x28>
		return 0;
   11024:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   11026:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   11028:	f002 fac0 	bl	135ac <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1102c:	e7fa      	b.n	11024 <lll_hfclock_off+0x24>
		return -EALREADY;
   1102e:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   11032:	bd08      	pop	{r3, pc}
   11034:	20001f88 	.word	0x20001f88

00011038 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   11038:	2032      	movs	r0, #50	; 0x32
   1103a:	4770      	bx	lr

0001103c <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   1103c:	4b01      	ldr	r3, [pc, #4]	; (11044 <lll_clock_ppm_get+0x8>)
}
   1103e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   11042:	4770      	bx	lr
   11044:	0001c4a4 	.word	0x0001c4a4

00011048 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   11048:	b510      	push	{r4, lr}
   1104a:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1104c:	f7ff fe1c 	bl	10c88 <lll_isr_status_reset>

	/* Disable any filter that was setup */
	radio_filter_disable();
   11050:	f001 fcf8 	bl	12a44 <radio_filter_disable>

	/* Current LLL radio event is done*/
	lll_isr_cleanup(param);
   11054:	4620      	mov	r0, r4
}
   11056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1105a:	f7ff be21 	b.w	10ca0 <lll_isr_cleanup>
   1105e:	bf00      	nop

00011060 <isr_tx>:
{
   11060:	b538      	push	{r3, r4, r5, lr}
   11062:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   11064:	f7ff fdfe 	bl	10c64 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   11068:	2096      	movs	r0, #150	; 0x96
   1106a:	f001 fd1d 	bl	12aa8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   1106e:	2300      	movs	r3, #0
   11070:	4618      	mov	r0, r3
   11072:	461a      	mov	r2, r3
   11074:	4619      	mov	r1, r3
   11076:	f001 fc65 	bl	12944 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1107a:	2001      	movs	r0, #1
   1107c:	f7f7 fca0 	bl	89c0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11080:	4604      	mov	r4, r0
   11082:	b368      	cbz	r0, 110e0 <isr_tx+0x80>
	radio_pkt_rx_set(node_rx->pdu);
   11084:	f104 001c 	add.w	r0, r4, #28
   11088:	f001 fb92 	bl	127b0 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1108c:	f001 fbd2 	bl	12834 <radio_is_ready>
   11090:	b9c0      	cbnz	r0, 110c4 <isr_tx+0x64>
	radio_isr_set(isr_rx, param);
   11092:	4629      	mov	r1, r5
   11094:	4819      	ldr	r0, [pc, #100]	; (110fc <isr_tx+0x9c>)
   11096:	f001 fa97 	bl	125c8 <radio_isr_set>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1109a:	f001 fded 	bl	12c78 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1109e:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   110a0:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   110a2:	4608      	mov	r0, r1
   110a4:	f001 fb9a 	bl	127dc <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   110a8:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   110aa:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   110ac:	4608      	mov	r0, r1
   110ae:	f001 fb91 	bl	127d4 <radio_tx_chain_delay_get>
   110b2:	442c      	add	r4, r5
   110b4:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   110b6:	1a20      	subs	r0, r4, r0
   110b8:	f001 fd96 	bl	12be8 <radio_tmr_hcto_configure>
}
   110bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   110c0:	f001 bdcc 	b.w	12c5c <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   110c4:	4a0e      	ldr	r2, [pc, #56]	; (11100 <isr_tx+0xa0>)
   110c6:	490f      	ldr	r1, [pc, #60]	; (11104 <isr_tx+0xa4>)
   110c8:	480f      	ldr	r0, [pc, #60]	; (11108 <isr_tx+0xa8>)
   110ca:	f240 4395 	movw	r3, #1173	; 0x495
   110ce:	f006 fa08 	bl	174e2 <assert_print>
   110d2:	4040      	eors	r0, r0
   110d4:	f380 8811 	msr	BASEPRI, r0
   110d8:	f04f 0003 	mov.w	r0, #3
   110dc:	df02      	svc	2
   110de:	e7d8      	b.n	11092 <isr_tx+0x32>
	LL_ASSERT(node_rx);
   110e0:	4a07      	ldr	r2, [pc, #28]	; (11100 <isr_tx+0xa0>)
   110e2:	490a      	ldr	r1, [pc, #40]	; (1110c <isr_tx+0xac>)
   110e4:	4808      	ldr	r0, [pc, #32]	; (11108 <isr_tx+0xa8>)
   110e6:	f240 4391 	movw	r3, #1169	; 0x491
   110ea:	f006 f9fa 	bl	174e2 <assert_print>
   110ee:	4040      	eors	r0, r0
   110f0:	f380 8811 	msr	BASEPRI, r0
   110f4:	f04f 0003 	mov.w	r0, #3
   110f8:	df02      	svc	2
   110fa:	e7c3      	b.n	11084 <isr_tx+0x24>
   110fc:	000117b1 	.word	0x000117b1
   11100:	0001c4b4 	.word	0x0001c4b4
   11104:	0001c508 	.word	0x0001c508
   11108:	0001b844 	.word	0x0001b844
   1110c:	0001c500 	.word	0x0001c500

00011110 <is_abort_cb>:
	if (next != curr) {
   11110:	4281      	cmp	r1, r0
{
   11112:	b508      	push	{r3, lr}
	if (next != curr) {
   11114:	d00e      	beq.n	11134 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   11116:	7a0b      	ldrb	r3, [r1, #8]
   11118:	07db      	lsls	r3, r3, #31
   1111a:	d402      	bmi.n	11122 <is_abort_cb+0x12>
			return -ECANCELED;
   1111c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   11120:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   11122:	4b12      	ldr	r3, [pc, #72]	; (1116c <is_abort_cb+0x5c>)
   11124:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   11126:	f7ff ff53 	bl	10fd0 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1112a:	2800      	cmp	r0, #0
   1112c:	db0f      	blt.n	1114e <is_abort_cb+0x3e>
{
   1112e:	f06f 000a 	mvn.w	r0, #10
}
   11132:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   11134:	7b0b      	ldrb	r3, [r1, #12]
   11136:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1113a:	690b      	ldr	r3, [r1, #16]
   1113c:	781b      	ldrb	r3, [r3, #0]
   1113e:	f003 030f 	and.w	r3, r3, #15
		return 0;
   11142:	2b01      	cmp	r3, #1
   11144:	bf14      	ite	ne
   11146:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   1114a:	2000      	moveq	r0, #0
}
   1114c:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1114e:	4a08      	ldr	r2, [pc, #32]	; (11170 <is_abort_cb+0x60>)
   11150:	4908      	ldr	r1, [pc, #32]	; (11174 <is_abort_cb+0x64>)
   11152:	4809      	ldr	r0, [pc, #36]	; (11178 <is_abort_cb+0x68>)
   11154:	f240 434a 	movw	r3, #1098	; 0x44a
   11158:	f006 f9c3 	bl	174e2 <assert_print>
   1115c:	4040      	eors	r0, r0
   1115e:	f380 8811 	msr	BASEPRI, r0
   11162:	f04f 0003 	mov.w	r0, #3
   11166:	df02      	svc	2
   11168:	e7e1      	b.n	1112e <is_abort_cb+0x1e>
   1116a:	bf00      	nop
   1116c:	0001169d 	.word	0x0001169d
   11170:	0001c4b4 	.word	0x0001c4b4
   11174:	0001c424 	.word	0x0001c424
   11178:	0001b844 	.word	0x0001b844

0001117c <isr_abort_all>:

#if defined(CONFIG_BT_PERIPHERAL)
static void isr_abort_all(void *param)
{
   1117c:	b510      	push	{r4, lr}
   1117e:	4604      	mov	r4, r0
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, lll_disable};
	uint32_t ret;

	/* Clear radio status and events */
	lll_isr_status_reset();
   11180:	f7ff fd82 	bl	10c88 <lll_isr_status_reset>

	/* Disable any filter that was setup */
	radio_filter_disable();
   11184:	f001 fc5e 	bl	12a44 <radio_filter_disable>

	/* Current LLL radio event is done*/
	lll_isr_cleanup(param);
   11188:	4620      	mov	r0, r4
   1118a:	f7ff fd89 	bl	10ca0 <lll_isr_cleanup>

	/* Abort any LLL prepare/resume enqueued in pipeline */
	mfy.param = param;
   1118e:	4b0b      	ldr	r3, [pc, #44]	; (111bc <isr_abort_all+0x40>)
	ret = mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_LLL, 1U, &mfy);
   11190:	2100      	movs	r1, #0
   11192:	2201      	movs	r2, #1
   11194:	4608      	mov	r0, r1
	mfy.param = param;
   11196:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_LLL, 1U, &mfy);
   11198:	f7f5 fa9c 	bl	66d4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1119c:	b900      	cbnz	r0, 111a0 <isr_abort_all+0x24>
}
   1119e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   111a0:	4a07      	ldr	r2, [pc, #28]	; (111c0 <isr_abort_all+0x44>)
   111a2:	4908      	ldr	r1, [pc, #32]	; (111c4 <isr_abort_all+0x48>)
   111a4:	4808      	ldr	r0, [pc, #32]	; (111c8 <isr_abort_all+0x4c>)
   111a6:	f240 539e 	movw	r3, #1438	; 0x59e
   111aa:	f006 f99a 	bl	174e2 <assert_print>
   111ae:	4040      	eors	r0, r0
   111b0:	f380 8811 	msr	BASEPRI, r0
   111b4:	f04f 0003 	mov.w	r0, #3
   111b8:	df02      	svc	2
}
   111ba:	bd10      	pop	{r4, pc}
   111bc:	2000062c 	.word	0x2000062c
   111c0:	0001c4b4 	.word	0x0001c4b4
   111c4:	0001b9ec 	.word	0x0001b9ec
   111c8:	0001b844 	.word	0x0001b844

000111cc <abort_cb>:
{
   111cc:	b510      	push	{r4, lr}
	if (!prepare_param) {
   111ce:	b1d8      	cbz	r0, 11208 <abort_cb+0x3c>
	err = lll_hfclock_off();
   111d0:	460c      	mov	r4, r1
   111d2:	f7ff ff15 	bl	11000 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   111d6:	2800      	cmp	r0, #0
   111d8:	db04      	blt.n	111e4 <abort_cb+0x18>
	lll_done(param);
   111da:	4620      	mov	r0, r4
}
   111dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   111e0:	f7ff bc96 	b.w	10b10 <lll_done>
	LL_ASSERT(err >= 0);
   111e4:	4a0c      	ldr	r2, [pc, #48]	; (11218 <abort_cb+0x4c>)
   111e6:	490d      	ldr	r1, [pc, #52]	; (1121c <abort_cb+0x50>)
   111e8:	480d      	ldr	r0, [pc, #52]	; (11220 <abort_cb+0x54>)
   111ea:	f44f 638e 	mov.w	r3, #1136	; 0x470
   111ee:	f006 f978 	bl	174e2 <assert_print>
   111f2:	4040      	eors	r0, r0
   111f4:	f380 8811 	msr	BASEPRI, r0
   111f8:	f04f 0003 	mov.w	r0, #3
   111fc:	df02      	svc	2
	lll_done(param);
   111fe:	4620      	mov	r0, r4
}
   11200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   11204:	f7ff bc84 	b.w	10b10 <lll_done>
		radio_isr_set(isr_abort, param);
   11208:	4806      	ldr	r0, [pc, #24]	; (11224 <abort_cb+0x58>)
   1120a:	f001 f9dd 	bl	125c8 <radio_isr_set>
}
   1120e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   11212:	f001 baef 	b.w	127f4 <radio_disable>
   11216:	bf00      	nop
   11218:	0001c4b4 	.word	0x0001c4b4
   1121c:	0001c424 	.word	0x0001c424
   11220:	0001b844 	.word	0x0001b844
   11224:	00011049 	.word	0x00011049

00011228 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   11228:	4b08      	ldr	r3, [pc, #32]	; (1124c <lll_adv_init+0x24>)
   1122a:	2204      	movs	r2, #4
{
   1122c:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1122e:	1898      	adds	r0, r3, r2
   11230:	2128      	movs	r1, #40	; 0x28
   11232:	f7f5 f943 	bl	64bc <mem_init>
	MFIFO_INIT(pdu_free);
   11236:	4b06      	ldr	r3, [pc, #24]	; (11250 <lll_adv_init+0x28>)
   11238:	2400      	movs	r4, #0
   1123a:	809c      	strh	r4, [r3, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1123c:	2202      	movs	r2, #2
   1123e:	4621      	mov	r1, r4
   11240:	4804      	ldr	r0, [pc, #16]	; (11254 <lll_adv_init+0x2c>)
   11242:	f009 fa80 	bl	1a746 <z_impl_k_sem_init>
}
   11246:	4620      	mov	r0, r4
   11248:	bd10      	pop	{r4, pc}
   1124a:	bf00      	nop
   1124c:	20001fbc 	.word	0x20001fbc
   11250:	2000063c 	.word	0x2000063c
   11254:	20001fa4 	.word	0x20001fa4

00011258 <lll_adv_reset>:
int lll_adv_reset(void)
   11258:	4b08      	ldr	r3, [pc, #32]	; (1127c <lll_adv_reset+0x24>)
   1125a:	2204      	movs	r2, #4
   1125c:	b510      	push	{r4, lr}
   1125e:	1898      	adds	r0, r3, r2
   11260:	2128      	movs	r1, #40	; 0x28
   11262:	f7f5 f92b 	bl	64bc <mem_init>
   11266:	4b06      	ldr	r3, [pc, #24]	; (11280 <lll_adv_reset+0x28>)
   11268:	2400      	movs	r4, #0
   1126a:	809c      	strh	r4, [r3, #4]
   1126c:	2202      	movs	r2, #2
   1126e:	4621      	mov	r1, r4
   11270:	4804      	ldr	r0, [pc, #16]	; (11284 <lll_adv_reset+0x2c>)
   11272:	f009 fa68 	bl	1a746 <z_impl_k_sem_init>
   11276:	4620      	mov	r0, r4
   11278:	bd10      	pop	{r4, pc}
   1127a:	bf00      	nop
   1127c:	20001fbc 	.word	0x20001fbc
   11280:	2000063c 	.word	0x2000063c
   11284:	20001fa4 	.word	0x20001fa4

00011288 <lll_adv_data_init>:
{
   11288:	b510      	push	{r4, lr}
   1128a:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1128c:	4805      	ldr	r0, [pc, #20]	; (112a4 <lll_adv_data_init+0x1c>)
   1128e:	f7f5 f945 	bl	651c <mem_acquire>
	if (!p) {
   11292:	b120      	cbz	r0, 1129e <lll_adv_data_init+0x16>
   11294:	4603      	mov	r3, r0
	p->len = 0U;
   11296:	2000      	movs	r0, #0
   11298:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   1129a:	6063      	str	r3, [r4, #4]
}
   1129c:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1129e:	f06f 000b 	mvn.w	r0, #11
}
   112a2:	bd10      	pop	{r4, pc}
   112a4:	20001fbc 	.word	0x20001fbc

000112a8 <lll_adv_data_reset>:
{
   112a8:	4603      	mov	r3, r0
	pdu->first = 0U;
   112aa:	2000      	movs	r0, #0
   112ac:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   112ae:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   112b0:	6098      	str	r0, [r3, #8]
}
   112b2:	4770      	bx	lr

000112b4 <lll_adv_pdu_alloc_pdu_adv>:
{
   112b4:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   112b6:	4c2d      	ldr	r4, [pc, #180]	; (1136c <lll_adv_pdu_alloc_pdu_adv+0xb8>)
   112b8:	7923      	ldrb	r3, [r4, #4]
	if (first == last) {
   112ba:	7962      	ldrb	r2, [r4, #5]
   112bc:	7821      	ldrb	r1, [r4, #0]
   112be:	429a      	cmp	r2, r3
   112c0:	d003      	beq.n	112ca <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   112c2:	fb01 4303 	mla	r3, r1, r3, r4
   112c6:	689d      	ldr	r5, [r3, #8]
	if (p) {
   112c8:	b935      	cbnz	r5, 112d8 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   112ca:	4829      	ldr	r0, [pc, #164]	; (11370 <lll_adv_pdu_alloc_pdu_adv+0xbc>)
   112cc:	f7f5 f926 	bl	651c <mem_acquire>
	if (p) {
   112d0:	4605      	mov	r5, r0
   112d2:	b188      	cbz	r0, 112f8 <lll_adv_pdu_alloc_pdu_adv+0x44>
}
   112d4:	4628      	mov	r0, r5
   112d6:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_reset(sem);
   112d8:	4826      	ldr	r0, [pc, #152]	; (11374 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   112da:	f004 fe07 	bl	15eec <z_impl_k_sem_reset>
	uint8_t _first = *first; /* Copy read-index */
   112de:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   112e0:	7962      	ldrb	r2, [r4, #5]
		MFIFO_DEQUEUE(pdu_free);
   112e2:	78a1      	ldrb	r1, [r4, #2]
   112e4:	429a      	cmp	r2, r3
   112e6:	d0f5      	beq.n	112d4 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   112e8:	3301      	adds	r3, #1
   112ea:	b2db      	uxtb	r3, r3
		_first = 0U;
   112ec:	4299      	cmp	r1, r3
   112ee:	bf08      	it	eq
   112f0:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   112f2:	7123      	strb	r3, [r4, #4]
}
   112f4:	4628      	mov	r0, r5
   112f6:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   112f8:	481e      	ldr	r0, [pc, #120]	; (11374 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   112fa:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   112fe:	2300      	movs	r3, #0
   11300:	f004 fdcc 	bl	15e9c <z_impl_k_sem_take>
	LL_ASSERT(!err);
   11304:	b9b0      	cbnz	r0, 11334 <lll_adv_pdu_alloc_pdu_adv+0x80>
	z_impl_k_sem_reset(sem);
   11306:	481b      	ldr	r0, [pc, #108]	; (11374 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   11308:	f004 fdf0 	bl	15eec <z_impl_k_sem_reset>
	uint8_t _first = *first; /* Copy read-index */
   1130c:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   1130e:	7961      	ldrb	r1, [r4, #5]
	p = MFIFO_DEQUEUE(pdu_free);
   11310:	7822      	ldrb	r2, [r4, #0]
   11312:	78a0      	ldrb	r0, [r4, #2]
   11314:	4299      	cmp	r1, r3
   11316:	d01b      	beq.n	11350 <lll_adv_pdu_alloc_pdu_adv+0x9c>
	mem = *((void **)(fifo + _first * size));
   11318:	fb13 f202 	smulbb	r2, r3, r2
   1131c:	4916      	ldr	r1, [pc, #88]	; (11378 <lll_adv_pdu_alloc_pdu_adv+0xc4>)
	_first += 1U;
   1131e:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   11320:	588a      	ldr	r2, [r1, r2]
	_first += 1U;
   11322:	b2db      	uxtb	r3, r3
		_first = 0U;
   11324:	4298      	cmp	r0, r3
   11326:	bf08      	it	eq
   11328:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1132a:	7123      	strb	r3, [r4, #4]
	LL_ASSERT(p);
   1132c:	b182      	cbz	r2, 11350 <lll_adv_pdu_alloc_pdu_adv+0x9c>
   1132e:	4615      	mov	r5, r2
}
   11330:	4628      	mov	r0, r5
   11332:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!err);
   11334:	4a11      	ldr	r2, [pc, #68]	; (1137c <lll_adv_pdu_alloc_pdu_adv+0xc8>)
   11336:	4912      	ldr	r1, [pc, #72]	; (11380 <lll_adv_pdu_alloc_pdu_adv+0xcc>)
   11338:	4812      	ldr	r0, [pc, #72]	; (11384 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   1133a:	f240 13b3 	movw	r3, #435	; 0x1b3
   1133e:	f006 f8d0 	bl	174e2 <assert_print>
   11342:	4040      	eors	r0, r0
   11344:	f380 8811 	msr	BASEPRI, r0
   11348:	f04f 0003 	mov.w	r0, #3
   1134c:	df02      	svc	2
   1134e:	e7da      	b.n	11306 <lll_adv_pdu_alloc_pdu_adv+0x52>
	LL_ASSERT(p);
   11350:	4a0a      	ldr	r2, [pc, #40]	; (1137c <lll_adv_pdu_alloc_pdu_adv+0xc8>)
   11352:	490d      	ldr	r1, [pc, #52]	; (11388 <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   11354:	480b      	ldr	r0, [pc, #44]	; (11384 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   11356:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1135a:	f006 f8c2 	bl	174e2 <assert_print>
   1135e:	4040      	eors	r0, r0
   11360:	f380 8811 	msr	BASEPRI, r0
   11364:	f04f 0003 	mov.w	r0, #3
   11368:	df02      	svc	2
   1136a:	e7b3      	b.n	112d4 <lll_adv_pdu_alloc_pdu_adv+0x20>
   1136c:	2000063c 	.word	0x2000063c
   11370:	20001fbc 	.word	0x20001fbc
   11374:	20001fa4 	.word	0x20001fa4
   11378:	20000644 	.word	0x20000644
   1137c:	0001c4b4 	.word	0x0001c4b4
   11380:	0001b8e8 	.word	0x0001b8e8
   11384:	0001b844 	.word	0x0001b844
   11388:	0001c51c 	.word	0x0001c51c

0001138c <lll_adv_pdu_alloc>:
{
   1138c:	b510      	push	{r4, lr}
	first = pdu->first;
   1138e:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   11390:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   11392:	429a      	cmp	r2, r3
   11394:	d014      	beq.n	113c0 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   11396:	b2d4      	uxtb	r4, r2
   11398:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   1139a:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   1139c:	4294      	cmp	r4, r2
   1139e:	d004      	beq.n	113aa <lll_adv_pdu_alloc+0x1e>
			last++;
   113a0:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   113a2:	7043      	strb	r3, [r0, #1]
			last++;
   113a4:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   113a6:	2b02      	cmp	r3, #2
   113a8:	d00e      	beq.n	113c8 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   113aa:	461a      	mov	r2, r3
	*idx = last;
   113ac:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   113b0:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   113b2:	6860      	ldr	r0, [r4, #4]
	if (p) {
   113b4:	b100      	cbz	r0, 113b8 <lll_adv_pdu_alloc+0x2c>
}
   113b6:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   113b8:	f7ff ff7c 	bl	112b4 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   113bc:	6060      	str	r0, [r4, #4]
}
   113be:	bd10      	pop	{r4, pc}
		last++;
   113c0:	3301      	adds	r3, #1
   113c2:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   113c4:	2b02      	cmp	r3, #2
   113c6:	d1f0      	bne.n	113aa <lll_adv_pdu_alloc+0x1e>
{
   113c8:	2200      	movs	r2, #0
			last = 0U;
   113ca:	4613      	mov	r3, r2
   113cc:	e7ee      	b.n	113ac <lll_adv_pdu_alloc+0x20>
   113ce:	bf00      	nop

000113d0 <lll_adv_pdu_latest_get>:
{
   113d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   113d2:	7802      	ldrb	r2, [r0, #0]
	if (first != pdu->last) {
   113d4:	7843      	ldrb	r3, [r0, #1]
   113d6:	4293      	cmp	r3, r2
{
   113d8:	4604      	mov	r4, r0
	if (first != pdu->last) {
   113da:	d02c      	beq.n	11436 <lll_adv_pdu_latest_get+0x66>
		pdu_idx = first;
   113dc:	b2d5      	uxtb	r5, r2
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   113de:	4a18      	ldr	r2, [pc, #96]	; (11440 <lll_adv_pdu_latest_get+0x70>)
   113e0:	f892 e005 	ldrb.w	lr, [r2, #5]
   113e4:	eb00 0785 	add.w	r7, r0, r5, lsl #2
	last = last + 1;
   113e8:	f10e 0301 	add.w	r3, lr, #1
	if (last == count) {
   113ec:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   113ee:	b2db      	uxtb	r3, r3
		last = 0U;
   113f0:	4298      	cmp	r0, r3
   113f2:	bf08      	it	eq
   113f4:	2300      	moveq	r3, #0
   113f6:	7910      	ldrb	r0, [r2, #4]
	if (last == first) {
   113f8:	4298      	cmp	r0, r3
   113fa:	460e      	mov	r6, r1
		p = pdu->pdu[pdu_idx];
   113fc:	6879      	ldr	r1, [r7, #4]
   113fe:	d00b      	beq.n	11418 <lll_adv_pdu_latest_get+0x48>
			MFIFO_BY_IDX_ENQUEUE(pdu_free, free_idx, p);
   11400:	4694      	mov	ip, r2
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11402:	f81c 0b08 	ldrb.w	r0, [ip], #8
   11406:	fb10 f00e 	smulbb	r0, r0, lr
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1140a:	f84c 1000 	str.w	r1, [ip, r0]
	*last = idx; /* Commit: Update write index */
   1140e:	7153      	strb	r3, [r2, #5]
	z_impl_k_sem_give(sem);
   11410:	480c      	ldr	r0, [pc, #48]	; (11444 <lll_adv_pdu_latest_get+0x74>)
   11412:	f004 fd1d 	bl	15e50 <z_impl_k_sem_give>
			p = next;
   11416:	2100      	movs	r1, #0
		first += 1U;
   11418:	1c6b      	adds	r3, r5, #1
   1141a:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1141c:	2b02      	cmp	r3, #2
   1141e:	bf0a      	itet	eq
   11420:	2200      	moveq	r2, #0
	return (void *)pdu->pdu[first];
   11422:	461a      	movne	r2, r3
			first = 0U;
   11424:	4613      	moveq	r3, r2
		pdu->pdu[pdu_idx] = p;
   11426:	6079      	str	r1, [r7, #4]
		pdu->first = first;
   11428:	7023      	strb	r3, [r4, #0]
		*is_modified = 1U;
   1142a:	2101      	movs	r1, #1
	return (void *)pdu->pdu[first];
   1142c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
		*is_modified = 1U;
   11430:	7031      	strb	r1, [r6, #0]
}
   11432:	6860      	ldr	r0, [r4, #4]
   11434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = pdu->pdu[pdu_idx];
   11436:	461a      	mov	r2, r3
	return (void *)pdu->pdu[first];
   11438:	eb04 0482 	add.w	r4, r4, r2, lsl #2
}
   1143c:	6860      	ldr	r0, [r4, #4]
   1143e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11440:	2000063c 	.word	0x2000063c
   11444:	20001fa4 	.word	0x20001fa4

00011448 <chan_prepare.isra.0>:
#endif /* CONFIG_BT_PERIPHERAL */

static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   11448:	b530      	push	{r4, r5, lr}
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1144a:	7a03      	ldrb	r3, [r0, #8]
   1144c:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   11450:	4604      	mov	r4, r0
   11452:	2b00      	cmp	r3, #0
   11454:	fa93 f0a3 	rbit	r0, r3
   11458:	fab0 f080 	clz	r0, r0
   1145c:	bf08      	it	eq
   1145e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   11462:	b083      	sub	sp, #12
   11464:	f100 0501 	add.w	r5, r0, #1
	LL_ASSERT(chan);
   11468:	d03b      	beq.n	114e2 <chan_prepare.isra.0+0x9a>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1146a:	7a21      	ldrb	r1, [r4, #8]
   1146c:	1e5a      	subs	r2, r3, #1
   1146e:	4013      	ands	r3, r2
   11470:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   11474:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   11478:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   1147a:	f7ff fbad 	bl	10bd8 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1147e:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   11480:	f10d 0107 	add.w	r1, sp, #7
   11484:	f104 000c 	add.w	r0, r4, #12
   11488:	f88d 3007 	strb.w	r3, [sp, #7]
   1148c:	f7ff ffa0 	bl	113d0 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   11490:	4605      	mov	r5, r0
   11492:	2800      	cmp	r0, #0
   11494:	d036      	beq.n	11504 <chan_prepare.isra.0+0xbc>

	radio_pkt_tx_set(pdu);
   11496:	4628      	mov	r0, r5
   11498:	f001 f990 	bl	127bc <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1149c:	782b      	ldrb	r3, [r5, #0]
   1149e:	f003 030f 	and.w	r3, r3, #15
   114a2:	2b02      	cmp	r3, #2
   114a4:	d014      	beq.n	114d0 <chan_prepare.isra.0+0x88>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   114a6:	f10d 0107 	add.w	r1, sp, #7
   114aa:	f104 0018 	add.w	r0, r4, #24
   114ae:	f7ff ff8f 	bl	113d0 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   114b2:	2800      	cmp	r0, #0
   114b4:	d034      	beq.n	11520 <chan_prepare.isra.0+0xd8>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   114b6:	4621      	mov	r1, r4
   114b8:	4820      	ldr	r0, [pc, #128]	; (1153c <chan_prepare.isra.0+0xf4>)
   114ba:	f001 f885 	bl	125c8 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   114be:	2096      	movs	r0, #150	; 0x96
   114c0:	f001 faf2 	bl	12aa8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   114c4:	2000      	movs	r0, #0
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   114c6:	b003      	add	sp, #12
   114c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		radio_switch_complete_and_rx(0);
   114cc:	f001 b9f2 	b.w	128b4 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
   114d0:	481b      	ldr	r0, [pc, #108]	; (11540 <chan_prepare.isra.0+0xf8>)
   114d2:	4621      	mov	r1, r4
   114d4:	f001 f878 	bl	125c8 <radio_isr_set>
}
   114d8:	b003      	add	sp, #12
   114da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		radio_switch_complete_and_disable();
   114de:	f001 ba91 	b.w	12a04 <radio_switch_complete_and_disable>
	LL_ASSERT(chan);
   114e2:	4a18      	ldr	r2, [pc, #96]	; (11544 <chan_prepare.isra.0+0xfc>)
   114e4:	4918      	ldr	r1, [pc, #96]	; (11548 <chan_prepare.isra.0+0x100>)
   114e6:	4819      	ldr	r0, [pc, #100]	; (1154c <chan_prepare.isra.0+0x104>)
   114e8:	f240 53a9 	movw	r3, #1449	; 0x5a9
   114ec:	f005 fff9 	bl	174e2 <assert_print>
   114f0:	4040      	eors	r0, r0
   114f2:	f380 8811 	msr	BASEPRI, r0
   114f6:	f04f 0003 	mov.w	r0, #3
   114fa:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   114fc:	7a23      	ldrb	r3, [r4, #8]
   114fe:	f3c3 1302 	ubfx	r3, r3, #4, #3
   11502:	e7b2      	b.n	1146a <chan_prepare.isra.0+0x22>
	LL_ASSERT(pdu);
   11504:	4a0f      	ldr	r2, [pc, #60]	; (11544 <chan_prepare.isra.0+0xfc>)
   11506:	4912      	ldr	r1, [pc, #72]	; (11550 <chan_prepare.isra.0+0x108>)
   11508:	4810      	ldr	r0, [pc, #64]	; (1154c <chan_prepare.isra.0+0x104>)
   1150a:	f240 53b2 	movw	r3, #1458	; 0x5b2
   1150e:	f005 ffe8 	bl	174e2 <assert_print>
   11512:	4040      	eors	r0, r0
   11514:	f380 8811 	msr	BASEPRI, r0
   11518:	f04f 0003 	mov.w	r0, #3
   1151c:	df02      	svc	2
   1151e:	e7ba      	b.n	11496 <chan_prepare.isra.0+0x4e>
		LL_ASSERT(scan_pdu);
   11520:	4a08      	ldr	r2, [pc, #32]	; (11544 <chan_prepare.isra.0+0xfc>)
   11522:	490c      	ldr	r1, [pc, #48]	; (11554 <chan_prepare.isra.0+0x10c>)
   11524:	4809      	ldr	r0, [pc, #36]	; (1154c <chan_prepare.isra.0+0x104>)
   11526:	f240 53bc 	movw	r3, #1468	; 0x5bc
   1152a:	f005 ffda 	bl	174e2 <assert_print>
   1152e:	4040      	eors	r0, r0
   11530:	f380 8811 	msr	BASEPRI, r0
   11534:	f04f 0003 	mov.w	r0, #3
   11538:	df02      	svc	2
   1153a:	e7bc      	b.n	114b6 <chan_prepare.isra.0+0x6e>
   1153c:	00011061 	.word	0x00011061
   11540:	00011559 	.word	0x00011559
   11544:	0001c4b4 	.word	0x0001c4b4
   11548:	0001c520 	.word	0x0001c520
   1154c:	0001b844 	.word	0x0001b844
   11550:	0001c528 	.word	0x0001c528
   11554:	0001c52c 	.word	0x0001c52c

00011558 <isr_done>:
{
   11558:	b510      	push	{r4, lr}
   1155a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1155c:	f7ff fb94 	bl	10c88 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   11560:	7a23      	ldrb	r3, [r4, #8]
   11562:	f003 0271 	and.w	r2, r3, #113	; 0x71
   11566:	2a01      	cmp	r2, #1
   11568:	d105      	bne.n	11576 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1156a:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1156e:	f362 1306 	bfi	r3, r2, #4, #3
   11572:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   11574:	b2db      	uxtb	r3, r3
   11576:	f013 0f70 	tst.w	r3, #112	; 0x70
   1157a:	d005      	beq.n	11588 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   1157c:	6863      	ldr	r3, [r4, #4]
   1157e:	b153      	cbz	r3, 11596 <isr_done+0x3e>
   11580:	f893 3020 	ldrb.w	r3, [r3, #32]
   11584:	079b      	lsls	r3, r3, #30
   11586:	d506      	bpl.n	11596 <isr_done+0x3e>
	radio_filter_disable();
   11588:	f001 fa5c 	bl	12a44 <radio_filter_disable>
	lll_isr_cleanup(param);
   1158c:	4620      	mov	r0, r4
}
   1158e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   11592:	f7ff bb85 	b.w	10ca0 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   11596:	4620      	mov	r0, r4
   11598:	f7ff ff56 	bl	11448 <chan_prepare.isra.0>
		radio_tx_enable();
   1159c:	f001 f924 	bl	127e8 <radio_tx_enable>
}
   115a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   115a4:	f001 bb5a 	b.w	12c5c <radio_tmr_end_capture>

000115a8 <prepare_cb>:
{
   115a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   115aa:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   115ac:	6863      	ldr	r3, [r4, #4]
{
   115ae:	b083      	sub	sp, #12
   115b0:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   115b2:	2b00      	cmp	r3, #0
   115b4:	d158      	bne.n	11668 <prepare_cb+0xc0>
	radio_reset();
   115b6:	f001 f849 	bl	1264c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   115ba:	2000      	movs	r0, #0
   115bc:	f001 f89c 	bl	126f8 <radio_tx_power_set>
	radio_phy_set(0, 0);
   115c0:	2100      	movs	r1, #0
   115c2:	4608      	mov	r0, r1
   115c4:	f001 f88a 	bl	126dc <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   115c8:	2200      	movs	r2, #0
   115ca:	2125      	movs	r1, #37	; 0x25
   115cc:	2008      	movs	r0, #8
   115ce:	f001 f8c9 	bl	12764 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   115d2:	4b2b      	ldr	r3, [pc, #172]	; (11680 <prepare_cb+0xd8>)
   115d4:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   115d6:	a801      	add	r0, sp, #4
   115d8:	f001 f8ac 	bl	12734 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   115dc:	4929      	ldr	r1, [pc, #164]	; (11684 <prepare_cb+0xdc>)
   115de:	f240 605b 	movw	r0, #1627	; 0x65b
   115e2:	f001 f945 	bl	12870 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   115e6:	7a23      	ldrb	r3, [r4, #8]
   115e8:	f3c3 0242 	ubfx	r2, r3, #1, #3
   115ec:	f362 1306 	bfi	r3, r2, #4, #3
   115f0:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   115f2:	4620      	mov	r0, r4
   115f4:	f7ff ff28 	bl	11448 <chan_prepare.isra.0>
	ull = HDR_LLL2ULL(lll);
   115f8:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   115fa:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   115fc:	4638      	mov	r0, r7
   115fe:	f7ff fadd 	bl	10bbc <lll_event_offset_get>
   11602:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   11604:	686a      	ldr	r2, [r5, #4]
   11606:	f106 0109 	add.w	r1, r6, #9
   1160a:	2001      	movs	r0, #1
   1160c:	f001 fa58 	bl	12ac0 <radio_tmr_start>
	radio_tmr_end_capture();
   11610:	f001 fb24 	bl	12c5c <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   11614:	4620      	mov	r0, r4
   11616:	f7f9 fb7b 	bl	ad10 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   1161a:	1c81      	adds	r1, r0, #2
   1161c:	4632      	mov	r2, r6
   1161e:	b2c9      	uxtb	r1, r1
   11620:	4638      	mov	r0, r7
   11622:	f7ef fe81 	bl	1328 <lll_preempt_calc>
   11626:	b930      	cbnz	r0, 11636 <prepare_cb+0x8e>
		ret = lll_prepare_done(lll);
   11628:	4620      	mov	r0, r4
   1162a:	f7ff fa6f 	bl	10b0c <lll_prepare_done>
		LL_ASSERT(!ret);
   1162e:	b958      	cbnz	r0, 11648 <prepare_cb+0xa0>
}
   11630:	2000      	movs	r0, #0
   11632:	b003      	add	sp, #12
   11634:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   11636:	4814      	ldr	r0, [pc, #80]	; (11688 <prepare_cb+0xe0>)
   11638:	4621      	mov	r1, r4
   1163a:	f000 ffc5 	bl	125c8 <radio_isr_set>
		radio_disable();
   1163e:	f001 f8d9 	bl	127f4 <radio_disable>
}
   11642:	2000      	movs	r0, #0
   11644:	b003      	add	sp, #12
   11646:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(!ret);
   11648:	4a10      	ldr	r2, [pc, #64]	; (1168c <prepare_cb+0xe4>)
   1164a:	4911      	ldr	r1, [pc, #68]	; (11690 <prepare_cb+0xe8>)
   1164c:	4811      	ldr	r0, [pc, #68]	; (11694 <prepare_cb+0xec>)
   1164e:	f240 4321 	movw	r3, #1057	; 0x421
   11652:	f005 ff46 	bl	174e2 <assert_print>
   11656:	4040      	eors	r0, r0
   11658:	f380 8811 	msr	BASEPRI, r0
   1165c:	f04f 0003 	mov.w	r0, #3
   11660:	df02      	svc	2
}
   11662:	2000      	movs	r0, #0
   11664:	b003      	add	sp, #12
   11666:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   11668:	f893 3020 	ldrb.w	r3, [r3, #32]
   1166c:	079b      	lsls	r3, r3, #30
   1166e:	d0a2      	beq.n	115b6 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   11670:	4809      	ldr	r0, [pc, #36]	; (11698 <prepare_cb+0xf0>)
   11672:	4621      	mov	r1, r4
   11674:	f000 ffa8 	bl	125c8 <radio_isr_set>
		radio_disable();
   11678:	f001 f8bc 	bl	127f4 <radio_disable>
		return 0;
   1167c:	e7d8      	b.n	11630 <prepare_cb+0x88>
   1167e:	bf00      	nop
   11680:	8e89bed6 	.word	0x8e89bed6
   11684:	00555555 	.word	0x00555555
   11688:	00011049 	.word	0x00011049
   1168c:	0001c4b4 	.word	0x0001c4b4
   11690:	0001b9ec 	.word	0x0001b9ec
   11694:	0001b844 	.word	0x0001b844
   11698:	00010d35 	.word	0x00010d35

0001169c <resume_prepare_cb>:
{
   1169c:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   1169e:	68c3      	ldr	r3, [r0, #12]
{
   116a0:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   116a2:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   116a4:	f7f6 fae8 	bl	7c78 <ticker_ticks_now_get>
   116a8:	4605      	mov	r5, r0
   116aa:	4630      	mov	r0, r6
   116ac:	f7ff fa86 	bl	10bbc <lll_event_offset_get>
	p->remainder = 0;
   116b0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   116b2:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   116b4:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   116b8:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   116ba:	4620      	mov	r0, r4
}
   116bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   116c0:	f7ff bf72 	b.w	115a8 <prepare_cb>

000116c4 <lll_adv_prepare>:
{
   116c4:	b510      	push	{r4, lr}
   116c6:	b082      	sub	sp, #8
   116c8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   116ca:	f7ff fc81 	bl	10fd0 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   116ce:	2800      	cmp	r0, #0
   116d0:	db1a      	blt.n	11708 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   116d2:	4a14      	ldr	r2, [pc, #80]	; (11724 <lll_adv_prepare+0x60>)
   116d4:	4914      	ldr	r1, [pc, #80]	; (11728 <lll_adv_prepare+0x64>)
   116d6:	4815      	ldr	r0, [pc, #84]	; (1172c <lll_adv_prepare+0x68>)
   116d8:	9400      	str	r4, [sp, #0]
   116da:	2300      	movs	r3, #0
   116dc:	f7f7 fcd6 	bl	908c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   116e0:	b108      	cbz	r0, 116e6 <lll_adv_prepare+0x22>
   116e2:	3077      	adds	r0, #119	; 0x77
   116e4:	d101      	bne.n	116ea <lll_adv_prepare+0x26>
}
   116e6:	b002      	add	sp, #8
   116e8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   116ea:	4a11      	ldr	r2, [pc, #68]	; (11730 <lll_adv_prepare+0x6c>)
   116ec:	4911      	ldr	r1, [pc, #68]	; (11734 <lll_adv_prepare+0x70>)
   116ee:	4812      	ldr	r0, [pc, #72]	; (11738 <lll_adv_prepare+0x74>)
   116f0:	f44f 732b 	mov.w	r3, #684	; 0x2ac
   116f4:	f005 fef5 	bl	174e2 <assert_print>
   116f8:	4040      	eors	r0, r0
   116fa:	f380 8811 	msr	BASEPRI, r0
   116fe:	f04f 0003 	mov.w	r0, #3
   11702:	df02      	svc	2
}
   11704:	b002      	add	sp, #8
   11706:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   11708:	4a09      	ldr	r2, [pc, #36]	; (11730 <lll_adv_prepare+0x6c>)
   1170a:	490c      	ldr	r1, [pc, #48]	; (1173c <lll_adv_prepare+0x78>)
   1170c:	480a      	ldr	r0, [pc, #40]	; (11738 <lll_adv_prepare+0x74>)
   1170e:	f240 23a9 	movw	r3, #681	; 0x2a9
   11712:	f005 fee6 	bl	174e2 <assert_print>
   11716:	4040      	eors	r0, r0
   11718:	f380 8811 	msr	BASEPRI, r0
   1171c:	f04f 0003 	mov.w	r0, #3
   11720:	df02      	svc	2
   11722:	e7d6      	b.n	116d2 <lll_adv_prepare+0xe>
   11724:	000115a9 	.word	0x000115a9
   11728:	000111cd 	.word	0x000111cd
   1172c:	00011111 	.word	0x00011111
   11730:	0001c4b4 	.word	0x0001c4b4
   11734:	0001c538 	.word	0x0001c538
   11738:	0001b844 	.word	0x0001b844
   1173c:	0001c424 	.word	0x0001c424

00011740 <lll_adv_connect_ind_check>:
{
   11740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11742:	9e07      	ldr	r6, [sp, #28]
   11744:	f89d 7018 	ldrb.w	r7, [sp, #24]
   11748:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1174c:	460d      	mov	r5, r1
	if (tgt_addr) {
   1174e:	b95e      	cbnz	r6, 11768 <lll_adv_connect_ind_check+0x28>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   11750:	7a41      	ldrb	r1, [r0, #9]
		(devmatch_ok)) &&
   11752:	f001 0103 	and.w	r1, r1, #3
   11756:	2901      	cmp	r1, #1
   11758:	d900      	bls.n	1175c <lll_adv_connect_ind_check+0x1c>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   1175a:	b11c      	cbz	r4, 11764 <lll_adv_connect_ind_check+0x24>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1175c:	7829      	ldrb	r1, [r5, #0]
   1175e:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   11762:	d01b      	beq.n	1179c <lll_adv_connect_ind_check+0x5c>
   11764:	2000      	movs	r0, #0
}
   11766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (tx_addr == sr->rx_addr) &&
   11768:	7809      	ldrb	r1, [r1, #0]
   1176a:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   1176e:	d1f9      	bne.n	11764 <lll_adv_connect_ind_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   11770:	2206      	movs	r2, #6
   11772:	4618      	mov	r0, r3
   11774:	f105 0108 	add.w	r1, r5, #8
   11778:	f006 f930 	bl	179dc <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1177c:	2800      	cmp	r0, #0
   1177e:	d1f1      	bne.n	11764 <lll_adv_connect_ind_check+0x24>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
		return rl_idx == lll->rl_idx;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (rx_addr == ci->tx_addr) &&
   11780:	782b      	ldrb	r3, [r5, #0]
   11782:	f3c3 1380 	ubfx	r3, r3, #6, #1
   11786:	42bb      	cmp	r3, r7
   11788:	d1ec      	bne.n	11764 <lll_adv_connect_ind_check+0x24>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1178a:	2206      	movs	r2, #6
   1178c:	1ca9      	adds	r1, r5, #2
   1178e:	4630      	mov	r0, r6
   11790:	f006 f924 	bl	179dc <memcmp>
	return (rx_addr == ci->tx_addr) &&
   11794:	fab0 f080 	clz	r0, r0
   11798:	0940      	lsrs	r0, r0, #5
}
   1179a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1179c:	2206      	movs	r2, #6
   1179e:	f105 0108 	add.w	r1, r5, #8
   117a2:	4618      	mov	r0, r3
   117a4:	f006 f91a 	bl	179dc <memcmp>
	return (tx_addr == sr->rx_addr) &&
   117a8:	fab0 f080 	clz	r0, r0
   117ac:	0940      	lsrs	r0, r0, #5
}
   117ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000117b0 <isr_rx>:
{
   117b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   117b4:	b088      	sub	sp, #32
   117b6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   117b8:	f001 f846 	bl	12848 <radio_is_done>
	if (trx_done) {
   117bc:	b2c0      	uxtb	r0, r0
   117be:	b950      	cbnz	r0, 117d6 <isr_rx+0x26>
	lll_isr_status_reset();
   117c0:	f7ff fa62 	bl	10c88 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   117c4:	4873      	ldr	r0, [pc, #460]	; (11994 <isr_rx+0x1e4>)
   117c6:	4621      	mov	r1, r4
   117c8:	f000 fefe 	bl	125c8 <radio_isr_set>
}
   117cc:	b008      	add	sp, #32
   117ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	radio_disable();
   117d2:	f001 b80f 	b.w	127f4 <radio_disable>
		crc_ok = radio_crc_is_valid();
   117d6:	f001 f857 	bl	12888 <radio_crc_is_valid>
   117da:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   117dc:	f001 f944 	bl	12a68 <radio_filter_has_match>
	if (crc_ok) {
   117e0:	b2ed      	uxtb	r5, r5
		devmatch_ok = radio_filter_has_match();
   117e2:	4606      	mov	r6, r0
		devmatch_id = radio_filter_match_get();
   117e4:	f001 f94a 	bl	12a7c <radio_filter_match_get>
		rssi_ready = radio_rssi_is_ready();
   117e8:	f001 f922 	bl	12a30 <radio_rssi_is_ready>
	lll_isr_status_reset();
   117ec:	f7ff fa4c 	bl	10c88 <lll_isr_status_reset>
	if (crc_ok) {
   117f0:	2d00      	cmp	r5, #0
   117f2:	d0e7      	beq.n	117c4 <isr_rx+0x14>
	uint8_t rl_idx = FILTER_IDX_NONE;
   117f4:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   117f6:	2001      	movs	r0, #1
	uint8_t rl_idx = FILTER_IDX_NONE;
   117f8:	f88d 301f 	strb.w	r3, [sp, #31]
	node_rx = ull_pdu_rx_alloc_peek(1);
   117fc:	f7f7 f8e0 	bl	89c0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11800:	4605      	mov	r5, r0
   11802:	2800      	cmp	r0, #0
   11804:	f000 8097 	beq.w	11936 <isr_rx+0x186>
   11808:	7b23      	ldrb	r3, [r4, #12]
   1180a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   1180e:	f105 091c 	add.w	r9, r5, #28
   11812:	6919      	ldr	r1, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   11814:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   11816:	b2f6      	uxtb	r6, r6
	tx_addr = pdu_adv->tx_addr;
   11818:	f813 2b02 	ldrb.w	r2, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1181c:	f002 000f 	and.w	r0, r2, #15
   11820:	2801      	cmp	r0, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   11822:	bf08      	it	eq
   11824:	f101 0808 	addeq.w	r8, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   11828:	7f29      	ldrb	r1, [r5, #28]
	tx_addr = pdu_adv->tx_addr;
   1182a:	f3c2 1a80 	ubfx	sl, r2, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1182e:	ea4f 17d2 	mov.w	r7, r2, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   11832:	f001 020f 	and.w	r2, r1, #15
		tgt_addr = NULL;
   11836:	bf18      	it	ne
   11838:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1183c:	2a03      	cmp	r2, #3
   1183e:	d04d      	beq.n	118dc <isr_rx+0x12c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   11840:	2a05      	cmp	r2, #5
   11842:	d1bf      	bne.n	117c4 <isr_rx+0x14>
   11844:	7f6a      	ldrb	r2, [r5, #29]
   11846:	2a22      	cmp	r2, #34	; 0x22
   11848:	d1bc      	bne.n	117c4 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   1184a:	6862      	ldr	r2, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1184c:	2a00      	cmp	r2, #0
   1184e:	d0b9      	beq.n	117c4 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   11850:	f892 2020 	ldrb.w	r2, [r2, #32]
   11854:	0792      	lsls	r2, r2, #30
   11856:	d4b5      	bmi.n	117c4 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   11858:	f10d 051f 	add.w	r5, sp, #31
   1185c:	e9cd 8601 	strd	r8, r6, [sp, #4]
   11860:	9700      	str	r7, [sp, #0]
   11862:	4652      	mov	r2, sl
   11864:	4649      	mov	r1, r9
   11866:	4620      	mov	r0, r4
   11868:	9503      	str	r5, [sp, #12]
   1186a:	f7ff ff69 	bl	11740 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   1186e:	2800      	cmp	r0, #0
   11870:	d0a8      	beq.n	117c4 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   11872:	2004      	movs	r0, #4
   11874:	f7f7 f8a4 	bl	89c0 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   11878:	2800      	cmp	r0, #0
   1187a:	d0a3      	beq.n	117c4 <isr_rx+0x14>
		radio_isr_set(isr_abort_all, lll);
   1187c:	4846      	ldr	r0, [pc, #280]	; (11998 <isr_rx+0x1e8>)
   1187e:	4621      	mov	r1, r4
   11880:	f000 fea2 	bl	125c8 <radio_isr_set>
		radio_disable();
   11884:	f000 ffb6 	bl	127f4 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   11888:	f000 ffd4 	bl	12834 <radio_is_ready>
   1188c:	2800      	cmp	r0, #0
   1188e:	d144      	bne.n	1191a <isr_rx+0x16a>
		lll->conn->periph.initiated = 1;
   11890:	6862      	ldr	r2, [r4, #4]
   11892:	f892 3020 	ldrb.w	r3, [r2, #32]
   11896:	f043 0301 	orr.w	r3, r3, #1
   1189a:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   1189e:	f7f7 f8b1 	bl	8a04 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   118a2:	2217      	movs	r2, #23
		rx->hdr.handle = 0xffff;
   118a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   118a8:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   118aa:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   118ac:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   118ae:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   118b0:	f001 f988 	bl	12bc4 <radio_tmr_start_get>
   118b4:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   118b6:	f001 f9d9 	bl	12c6c <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   118ba:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   118bc:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   118be:	4608      	mov	r0, r1
   118c0:	f000 ff8c 	bl	127dc <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   118c4:	1a24      	subs	r4, r4, r0
   118c6:	616c      	str	r4, [r5, #20]
			ftr->extra = ull_pdu_rx_alloc();
   118c8:	f7f7 f89c 	bl	8a04 <ull_pdu_rx_alloc>
   118cc:	60e8      	str	r0, [r5, #12]
		ull_rx_put_sched(rx->hdr.link, rx);
   118ce:	6828      	ldr	r0, [r5, #0]
   118d0:	4629      	mov	r1, r5
}
   118d2:	b008      	add	sp, #32
   118d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		ull_rx_put_sched(rx->hdr.link, rx);
   118d8:	f7f7 b8c2 	b.w	8a60 <ull_rx_put_sched>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   118dc:	7f6a      	ldrb	r2, [r5, #29]
   118de:	2a0c      	cmp	r2, #12
   118e0:	f47f af70 	bne.w	117c4 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   118e4:	f1b8 0f00 	cmp.w	r8, #0
   118e8:	f47f af6c 	bne.w	117c4 <isr_rx+0x14>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   118ec:	7a62      	ldrb	r2, [r4, #9]
		 devmatch_ok) &&
   118ee:	07d0      	lsls	r0, r2, #31
   118f0:	d502      	bpl.n	118f8 <isr_rx+0x148>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   118f2:	2e00      	cmp	r6, #0
   118f4:	f43f af66 	beq.w	117c4 <isr_rx+0x14>
	return (tx_addr == sr->rx_addr) &&
   118f8:	ebba 1fd1 	cmp.w	sl, r1, lsr #7
   118fc:	f47f af62 	bne.w	117c4 <isr_rx+0x14>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   11900:	2206      	movs	r2, #6
   11902:	f105 0124 	add.w	r1, r5, #36	; 0x24
   11906:	4618      	mov	r0, r3
   11908:	9305      	str	r3, [sp, #20]
   1190a:	f006 f867 	bl	179dc <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1190e:	b300      	cbz	r0, 11952 <isr_rx+0x1a2>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   11910:	7f2a      	ldrb	r2, [r5, #28]
   11912:	9b05      	ldr	r3, [sp, #20]
   11914:	f002 020f 	and.w	r2, r2, #15
   11918:	e792      	b.n	11840 <isr_rx+0x90>
		LL_ASSERT(!radio_is_ready());
   1191a:	4a20      	ldr	r2, [pc, #128]	; (1199c <isr_rx+0x1ec>)
   1191c:	4920      	ldr	r1, [pc, #128]	; (119a0 <isr_rx+0x1f0>)
   1191e:	4821      	ldr	r0, [pc, #132]	; (119a4 <isr_rx+0x1f4>)
   11920:	f240 634c 	movw	r3, #1612	; 0x64c
   11924:	f005 fddd 	bl	174e2 <assert_print>
   11928:	4040      	eors	r0, r0
   1192a:	f380 8811 	msr	BASEPRI, r0
   1192e:	f04f 0003 	mov.w	r0, #3
   11932:	df02      	svc	2
   11934:	e7ac      	b.n	11890 <isr_rx+0xe0>
	LL_ASSERT(node_rx);
   11936:	4a19      	ldr	r2, [pc, #100]	; (1199c <isr_rx+0x1ec>)
   11938:	491b      	ldr	r1, [pc, #108]	; (119a8 <isr_rx+0x1f8>)
   1193a:	481a      	ldr	r0, [pc, #104]	; (119a4 <isr_rx+0x1f4>)
   1193c:	f240 53ec 	movw	r3, #1516	; 0x5ec
   11940:	f005 fdcf 	bl	174e2 <assert_print>
   11944:	4040      	eors	r0, r0
   11946:	f380 8811 	msr	BASEPRI, r0
   1194a:	f04f 0003 	mov.w	r0, #3
   1194e:	df02      	svc	2
   11950:	e75a      	b.n	11808 <isr_rx+0x58>
		radio_isr_set(isr_done, lll);
   11952:	4810      	ldr	r0, [pc, #64]	; (11994 <isr_rx+0x1e4>)
   11954:	4621      	mov	r1, r4
   11956:	f000 fe37 	bl	125c8 <radio_isr_set>
		radio_switch_complete_and_disable();
   1195a:	f001 f853 	bl	12a04 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1195e:	7e23      	ldrb	r3, [r4, #24]
   11960:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   11964:	69d8      	ldr	r0, [r3, #28]
   11966:	f000 ff29 	bl	127bc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1196a:	f000 ff63 	bl	12834 <radio_is_ready>
   1196e:	b910      	cbnz	r0, 11976 <isr_rx+0x1c6>
}
   11970:	b008      	add	sp, #32
   11972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LL_ASSERT(!radio_is_ready());
   11976:	4a09      	ldr	r2, [pc, #36]	; (1199c <isr_rx+0x1ec>)
   11978:	4909      	ldr	r1, [pc, #36]	; (119a0 <isr_rx+0x1f0>)
   1197a:	480a      	ldr	r0, [pc, #40]	; (119a4 <isr_rx+0x1f4>)
   1197c:	f240 6305 	movw	r3, #1541	; 0x605
   11980:	f005 fdaf 	bl	174e2 <assert_print>
   11984:	4040      	eors	r0, r0
   11986:	f380 8811 	msr	BASEPRI, r0
   1198a:	f04f 0003 	mov.w	r0, #3
   1198e:	df02      	svc	2
		if (!err) {
   11990:	e7ee      	b.n	11970 <isr_rx+0x1c0>
   11992:	bf00      	nop
   11994:	00011559 	.word	0x00011559
   11998:	0001117d 	.word	0x0001117d
   1199c:	0001c4b4 	.word	0x0001c4b4
   119a0:	0001c508 	.word	0x0001c508
   119a4:	0001b844 	.word	0x0001b844
   119a8:	0001c500 	.word	0x0001c500

000119ac <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   119ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119ae:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   119b0:	f7ff f96a 	bl	10c88 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   119b4:	f7f7 f946 	bl	8c44 <ull_event_done_extra_get>
	LL_ASSERT(e);
   119b8:	4604      	mov	r4, r0
   119ba:	2800      	cmp	r0, #0
   119bc:	d036      	beq.n	11a2c <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   119be:	4922      	ldr	r1, [pc, #136]	; (11a48 <isr_done+0x9c>)
   119c0:	79a2      	ldrb	r2, [r4, #6]
   119c2:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   119c4:	4b21      	ldr	r3, [pc, #132]	; (11a4c <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   119c6:	f360 0200 	bfi	r2, r0, #0, #1
   119ca:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   119cc:	4a20      	ldr	r2, [pc, #128]	; (11a50 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   119ce:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   119d0:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   119d2:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   119d4:	2101      	movs	r1, #1
   119d6:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   119d8:	7222      	strb	r2, [r4, #8]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   119da:	b11b      	cbz	r3, 119e4 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   119dc:	f995 301d 	ldrsb.w	r3, [r5, #29]
   119e0:	2b00      	cmp	r3, #0
   119e2:	db04      	blt.n	119ee <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   119e4:	4628      	mov	r0, r5
}
   119e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   119ea:	f7ff b959 	b.w	10ca0 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   119ee:	f895 305b 	ldrb.w	r3, [r5, #91]	; 0x5b
   119f2:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   119f6:	2b02      	cmp	r3, #2
   119f8:	d016      	beq.n	11a28 <isr_done+0x7c>
	default:
	case BIT(0):
		return 40;
   119fa:	2b04      	cmp	r3, #4
   119fc:	bf0c      	ite	eq
   119fe:	f44f 77bc 	moveq.w	r7, #376	; 0x178
   11a02:	2728      	movne	r7, #40	; 0x28
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   11a04:	f001 f91e 	bl	12c44 <radio_tmr_aa_restore>
   11a08:	4606      	mov	r6, r0
   11a0a:	f001 f921 	bl	12c50 <radio_tmr_ready_get>
   11a0e:	1a36      	subs	r6, r6, r0
			e->drift.start_to_address_actual_us =
   11a10:	60e6      	str	r6, [r4, #12]
				lll->periph.window_widening_event_us;
   11a12:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   11a14:	e9c4 2704 	strd	r2, r7, [r4, #16]
			lll->periph.window_widening_event_us = 0;
   11a18:	2300      	movs	r3, #0
   11a1a:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   11a1c:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   11a1e:	4628      	mov	r0, r5
}
   11a20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   11a24:	f7ff b93c 	b.w	10ca0 <lll_isr_cleanup>
	switch (phy) {
   11a28:	2718      	movs	r7, #24
   11a2a:	e7eb      	b.n	11a04 <isr_done+0x58>
	LL_ASSERT(e);
   11a2c:	4a09      	ldr	r2, [pc, #36]	; (11a54 <isr_done+0xa8>)
   11a2e:	490a      	ldr	r1, [pc, #40]	; (11a58 <isr_done+0xac>)
   11a30:	480a      	ldr	r0, [pc, #40]	; (11a5c <isr_done+0xb0>)
   11a32:	f44f 7352 	mov.w	r3, #840	; 0x348
   11a36:	f005 fd54 	bl	174e2 <assert_print>
   11a3a:	4040      	eors	r0, r0
   11a3c:	f380 8811 	msr	BASEPRI, r0
   11a40:	f04f 0003 	mov.w	r0, #3
   11a44:	df02      	svc	2
   11a46:	e7ba      	b.n	119be <isr_done+0x12>
   11a48:	2000263c 	.word	0x2000263c
   11a4c:	20002622 	.word	0x20002622
   11a50:	2000263b 	.word	0x2000263b
   11a54:	0001c54c 	.word	0x0001c54c
   11a58:	0001bc4c 	.word	0x0001bc4c
   11a5c:	0001b844 	.word	0x0001b844

00011a60 <lll_conn_init>:
{
   11a60:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   11a62:	f000 ff1b 	bl	1289c <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11a66:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   11a68:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11a6a:	2101      	movs	r1, #1
   11a6c:	f361 0201 	bfi	r2, r1, #0, #2
   11a70:	701a      	strb	r2, [r3, #0]
}
   11a72:	2000      	movs	r0, #0
   11a74:	bd08      	pop	{r3, pc}
   11a76:	bf00      	nop

00011a78 <lll_conn_reset>:
}
   11a78:	2000      	movs	r0, #0
   11a7a:	4770      	bx	lr

00011a7c <lll_conn_flush>:
}
   11a7c:	4770      	bx	lr
   11a7e:	bf00      	nop

00011a80 <lll_conn_prepare_reset>:
{
   11a80:	b410      	push	{r4}
	crc_valid = 0U;
   11a82:	4805      	ldr	r0, [pc, #20]	; (11a98 <lll_conn_prepare_reset+0x18>)
	trx_cnt = 0U;
   11a84:	4c05      	ldr	r4, [pc, #20]	; (11a9c <lll_conn_prepare_reset+0x1c>)
	crc_expire = 0U;
   11a86:	4906      	ldr	r1, [pc, #24]	; (11aa0 <lll_conn_prepare_reset+0x20>)
	mic_state = LLL_CONN_MIC_NONE;
   11a88:	4a06      	ldr	r2, [pc, #24]	; (11aa4 <lll_conn_prepare_reset+0x24>)
	trx_cnt = 0U;
   11a8a:	2300      	movs	r3, #0
   11a8c:	8023      	strh	r3, [r4, #0]
	crc_valid = 0U;
   11a8e:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   11a90:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   11a92:	7013      	strb	r3, [r2, #0]
}
   11a94:	bc10      	pop	{r4}
   11a96:	4770      	bx	lr
   11a98:	2000263c 	.word	0x2000263c
   11a9c:	20002622 	.word	0x20002622
   11aa0:	2000263d 	.word	0x2000263d
   11aa4:	2000263b 	.word	0x2000263b

00011aa8 <lll_conn_abort_cb>:
{
   11aa8:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   11aaa:	b350      	cbz	r0, 11b02 <lll_conn_abort_cb+0x5a>
	err = lll_hfclock_off();
   11aac:	460d      	mov	r5, r1
   11aae:	4604      	mov	r4, r0
   11ab0:	f7ff faa6 	bl	11000 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   11ab4:	2800      	cmp	r0, #0
   11ab6:	db17      	blt.n	11ae8 <lll_conn_abort_cb+0x40>
	lll = prepare_param->param;
   11ab8:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   11aba:	8923      	ldrh	r3, [r4, #8]
   11abc:	8a51      	ldrh	r1, [r2, #18]
   11abe:	3301      	adds	r3, #1
   11ac0:	440b      	add	r3, r1
   11ac2:	8253      	strh	r3, [r2, #18]
	e = ull_event_done_extra_get();
   11ac4:	f7f7 f8be 	bl	8c44 <ull_event_done_extra_get>
	LL_ASSERT(e);
   11ac8:	4604      	mov	r4, r0
   11aca:	b308      	cbz	r0, 11b10 <lll_conn_abort_cb+0x68>
	e->crc_valid = 0U;
   11acc:	79a2      	ldrb	r2, [r4, #6]
	e->trx_cnt = 0U;
   11ace:	2300      	movs	r3, #0
	e->crc_valid = 0U;
   11ad0:	f363 0200 	bfi	r2, r3, #0, #1
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   11ad4:	2101      	movs	r1, #1
   11ad6:	7021      	strb	r1, [r4, #0]
	e->trx_cnt = 0U;
   11ad8:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = 0U;
   11ada:	71a2      	strb	r2, [r4, #6]
	e->mic_state = LLL_CONN_MIC_NONE;
   11adc:	7223      	strb	r3, [r4, #8]
	lll_done(param);
   11ade:	4628      	mov	r0, r5
}
   11ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   11ae4:	f7ff b814 	b.w	10b10 <lll_done>
	LL_ASSERT(err >= 0);
   11ae8:	4a10      	ldr	r2, [pc, #64]	; (11b2c <lll_conn_abort_cb+0x84>)
   11aea:	4911      	ldr	r1, [pc, #68]	; (11b30 <lll_conn_abort_cb+0x88>)
   11aec:	4811      	ldr	r0, [pc, #68]	; (11b34 <lll_conn_abort_cb+0x8c>)
   11aee:	23ac      	movs	r3, #172	; 0xac
   11af0:	f005 fcf7 	bl	174e2 <assert_print>
   11af4:	4040      	eors	r0, r0
   11af6:	f380 8811 	msr	BASEPRI, r0
   11afa:	f04f 0003 	mov.w	r0, #3
   11afe:	df02      	svc	2
   11b00:	e7da      	b.n	11ab8 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   11b02:	480d      	ldr	r0, [pc, #52]	; (11b38 <lll_conn_abort_cb+0x90>)
   11b04:	f000 fd60 	bl	125c8 <radio_isr_set>
}
   11b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   11b0c:	f000 be72 	b.w	127f4 <radio_disable>
	LL_ASSERT(e);
   11b10:	4a06      	ldr	r2, [pc, #24]	; (11b2c <lll_conn_abort_cb+0x84>)
   11b12:	490a      	ldr	r1, [pc, #40]	; (11b3c <lll_conn_abort_cb+0x94>)
   11b14:	4807      	ldr	r0, [pc, #28]	; (11b34 <lll_conn_abort_cb+0x8c>)
   11b16:	23b4      	movs	r3, #180	; 0xb4
   11b18:	f005 fce3 	bl	174e2 <assert_print>
   11b1c:	4040      	eors	r0, r0
   11b1e:	f380 8811 	msr	BASEPRI, r0
   11b22:	f04f 0003 	mov.w	r0, #3
   11b26:	df02      	svc	2
   11b28:	e7d0      	b.n	11acc <lll_conn_abort_cb+0x24>
   11b2a:	bf00      	nop
   11b2c:	0001c54c 	.word	0x0001c54c
   11b30:	0001c424 	.word	0x0001c424
   11b34:	0001b844 	.word	0x0001b844
   11b38:	000119ad 	.word	0x000119ad
   11b3c:	0001bc4c 	.word	0x0001bc4c

00011b40 <lll_conn_rx_pkt_set>:
{
   11b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b42:	4604      	mov	r4, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   11b44:	2001      	movs	r0, #1
   11b46:	f7f6 ff3b 	bl	89c0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11b4a:	4607      	mov	r7, r0
   11b4c:	b358      	cbz	r0, 11ba6 <lll_conn_rx_pkt_set+0x66>
	phy = lll->phy_rx;
   11b4e:	f894 505b 	ldrb.w	r5, [r4, #91]	; 0x5b
	max_rx_octets = lll->dle.eff.max_rx_octets;
   11b52:	f8b4 604e 	ldrh.w	r6, [r4, #78]	; 0x4e
	phy = lll->phy_rx;
   11b56:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   11b5a:	2100      	movs	r1, #0
   11b5c:	4628      	mov	r0, r5
   11b5e:	f000 fdbd 	bl	126dc <radio_phy_set>
	} else if (lll->enc_rx) {
   11b62:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   11b66:	006a      	lsls	r2, r5, #1
	} else if (lll->enc_rx) {
   11b68:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   11b6a:	b2f1      	uxtb	r1, r6
   11b6c:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_rx) {
   11b70:	d510      	bpl.n	11b94 <lll_conn_rx_pkt_set+0x54>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   11b72:	3104      	adds	r1, #4
   11b74:	b2c9      	uxtb	r1, r1
   11b76:	2008      	movs	r0, #8
   11b78:	f000 fdf4 	bl	12764 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   11b7c:	f000 fe96 	bl	128ac <radio_pkt_decrypt_get>
   11b80:	4629      	mov	r1, r5
   11b82:	4602      	mov	r2, r0
   11b84:	f104 0073 	add.w	r0, r4, #115	; 0x73
   11b88:	f001 f87c 	bl	12c84 <radio_ccm_rx_pkt_set>
}
   11b8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   11b90:	f000 be0e 	b.w	127b0 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   11b94:	2008      	movs	r0, #8
   11b96:	f000 fde5 	bl	12764 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   11b9a:	f107 001c 	add.w	r0, r7, #28
}
   11b9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   11ba2:	f000 be05 	b.w	127b0 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   11ba6:	4a07      	ldr	r2, [pc, #28]	; (11bc4 <lll_conn_rx_pkt_set+0x84>)
   11ba8:	4907      	ldr	r1, [pc, #28]	; (11bc8 <lll_conn_rx_pkt_set+0x88>)
   11baa:	4808      	ldr	r0, [pc, #32]	; (11bcc <lll_conn_rx_pkt_set+0x8c>)
   11bac:	f44f 7321 	mov.w	r3, #644	; 0x284
   11bb0:	f005 fc97 	bl	174e2 <assert_print>
   11bb4:	4040      	eors	r0, r0
   11bb6:	f380 8811 	msr	BASEPRI, r0
   11bba:	f04f 0003 	mov.w	r0, #3
   11bbe:	df02      	svc	2
   11bc0:	e7c5      	b.n	11b4e <lll_conn_rx_pkt_set+0xe>
   11bc2:	bf00      	nop
   11bc4:	0001c54c 	.word	0x0001c54c
   11bc8:	0001c500 	.word	0x0001c500
   11bcc:	0001b844 	.word	0x0001b844

00011bd0 <lll_conn_isr_tx>:
{
   11bd0:	b538      	push	{r3, r4, r5, lr}
   11bd2:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   11bd4:	f7ff f846 	bl	10c64 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   11bd8:	2096      	movs	r0, #150	; 0x96
   11bda:	f000 ff65 	bl	12aa8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   11bde:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
   11be2:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   11be6:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   11bea:	f000 0007 	and.w	r0, r0, #7
   11bee:	f002 0207 	and.w	r2, r2, #7
   11bf2:	2100      	movs	r1, #0
   11bf4:	f000 fea6 	bl	12944 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   11bf8:	4620      	mov	r0, r4
   11bfa:	f7ff ffa1 	bl	11b40 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   11bfe:	f000 fe19 	bl	12834 <radio_is_ready>
   11c02:	bb58      	cbnz	r0, 11c5c <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   11c04:	f001 f838 	bl	12c78 <radio_tmr_tifs_base_get>
   11c08:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   11c0a:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   11c0e:	2101      	movs	r1, #1
   11c10:	f000 0007 	and.w	r0, r0, #7
   11c14:	f000 fde2 	bl	127dc <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   11c18:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
   11c1c:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   11c20:	4405      	add	r5, r0
   11c22:	2b02      	cmp	r3, #2
   11c24:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   11c28:	d016      	beq.n	11c58 <lll_conn_isr_tx+0x88>
		return 40;
   11c2a:	2b04      	cmp	r3, #4
   11c2c:	bf0c      	ite	eq
   11c2e:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   11c32:	2328      	movne	r3, #40	; 0x28
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   11c34:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
   11c38:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   11c3c:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   11c40:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   11c42:	f000 fdc7 	bl	127d4 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   11c46:	1a28      	subs	r0, r5, r0
   11c48:	f000 ffce 	bl	12be8 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   11c4c:	4621      	mov	r1, r4
   11c4e:	480a      	ldr	r0, [pc, #40]	; (11c78 <lll_conn_isr_tx+0xa8>)
}
   11c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   11c54:	f000 bcb8 	b.w	125c8 <radio_isr_set>
	switch (phy) {
   11c58:	2318      	movs	r3, #24
   11c5a:	e7eb      	b.n	11c34 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   11c5c:	4a07      	ldr	r2, [pc, #28]	; (11c7c <lll_conn_isr_tx+0xac>)
   11c5e:	4908      	ldr	r1, [pc, #32]	; (11c80 <lll_conn_isr_tx+0xb0>)
   11c60:	4808      	ldr	r0, [pc, #32]	; (11c84 <lll_conn_isr_tx+0xb4>)
   11c62:	f240 2339 	movw	r3, #569	; 0x239
   11c66:	f005 fc3c 	bl	174e2 <assert_print>
   11c6a:	4040      	eors	r0, r0
   11c6c:	f380 8811 	msr	BASEPRI, r0
   11c70:	f04f 0003 	mov.w	r0, #3
   11c74:	df02      	svc	2
   11c76:	e7c5      	b.n	11c04 <lll_conn_isr_tx+0x34>
   11c78:	00011d9d 	.word	0x00011d9d
   11c7c:	0001c54c 	.word	0x0001c54c
   11c80:	0001c508 	.word	0x0001c508
   11c84:	0001b844 	.word	0x0001b844

00011c88 <lll_conn_tx_pkt_set>:
{
   11c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c8a:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   11c8c:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
	max_tx_octets = lll->dle.eff.max_tx_octets;
   11c90:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
	phy = lll->phy_tx;
   11c94:	f001 0407 	and.w	r4, r1, #7
{
   11c98:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   11c9a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   11c9e:	4620      	mov	r0, r4
   11ca0:	f000 fd1c 	bl	126dc <radio_phy_set>
	} else if (lll->enc_tx) {
   11ca4:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   11ca8:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   11caa:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   11cac:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   11cb0:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   11cb2:	d50d      	bpl.n	11cd0 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   11cb4:	3104      	adds	r1, #4
   11cb6:	b2c9      	uxtb	r1, r1
   11cb8:	2008      	movs	r0, #8
   11cba:	f000 fd53 	bl	12764 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   11cbe:	4639      	mov	r1, r7
   11cc0:	f105 0094 	add.w	r0, r5, #148	; 0x94
   11cc4:	f001 f81e 	bl	12d04 <radio_ccm_tx_pkt_set>
}
   11cc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   11ccc:	f000 bd76 	b.w	127bc <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   11cd0:	2008      	movs	r0, #8
   11cd2:	f000 fd47 	bl	12764 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   11cd6:	4638      	mov	r0, r7
}
   11cd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   11cdc:	f000 bd6e 	b.w	127bc <radio_pkt_tx_set>

00011ce0 <lll_conn_pdu_tx_prep>:
{
   11ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ce2:	4605      	mov	r5, r0
   11ce4:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   11ce6:	aa01      	add	r2, sp, #4
   11ce8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
{
   11cea:	460f      	mov	r7, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   11cec:	6e29      	ldr	r1, [r5, #96]	; 0x60
   11cee:	f7f4 fc85 	bl	65fc <memq_peek>
	if (lll->empty || !link) {
   11cf2:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
   11cf6:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   11cf8:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   11cfa:	d438      	bmi.n	11d6e <lll_conn_pdu_tx_prep+0x8e>
   11cfc:	b348      	cbz	r0, 11d52 <lll_conn_pdu_tx_prep+0x72>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   11cfe:	9c01      	ldr	r4, [sp, #4]
   11d00:	f895 3071 	ldrb.w	r3, [r5, #113]	; 0x71
		if (!lll->packet_tx_head_len) {
   11d04:	f895 2070 	ldrb.w	r2, [r5, #112]	; 0x70
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   11d08:	3404      	adds	r4, #4
   11d0a:	441c      	add	r4, r3
		if (!lll->packet_tx_head_len) {
   11d0c:	b912      	cbnz	r2, 11d14 <lll_conn_pdu_tx_prep+0x34>
			lll->packet_tx_head_len = p->len;
   11d0e:	7862      	ldrb	r2, [r4, #1]
   11d10:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
		if (lll->packet_tx_head_offset) {
   11d14:	b133      	cbz	r3, 11d24 <lll_conn_pdu_tx_prep+0x44>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11d16:	7823      	ldrb	r3, [r4, #0]
   11d18:	2201      	movs	r2, #1
   11d1a:	f362 0301 	bfi	r3, r2, #0, #2
   11d1e:	7023      	strb	r3, [r4, #0]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   11d20:	f895 3071 	ldrb.w	r3, [r5, #113]	; 0x71
   11d24:	f895 2070 	ldrb.w	r2, [r5, #112]	; 0x70
   11d28:	1ad3      	subs	r3, r2, r3
   11d2a:	7063      	strb	r3, [r4, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   11d2c:	4628      	mov	r0, r5
   11d2e:	f7f9 fff9 	bl	bd24 <ull_conn_lll_max_tx_octets_get>
		if (((PDU_DC_CTRL_TX_SIZE_MAX <= PDU_DC_PAYLOAD_SIZE_MIN) ||
   11d32:	7863      	ldrb	r3, [r4, #1]
   11d34:	4283      	cmp	r3, r0
   11d36:	d92a      	bls.n	11d8e <lll_conn_pdu_tx_prep+0xae>
			p->len = max_tx_octets;
   11d38:	7060      	strb	r0, [r4, #1]
{
   11d3a:	2101      	movs	r1, #1
			p->md = 1U;
   11d3c:	7823      	ldrb	r3, [r4, #0]
   11d3e:	f003 030f 	and.w	r3, r3, #15
			p->octet3.resv[0] = 0U;
   11d42:	2200      	movs	r2, #0
			p->md = 1U;
   11d44:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
   11d48:	7023      	strb	r3, [r4, #0]
			p->octet3.resv[0] = 0U;
   11d4a:	70a2      	strb	r2, [r4, #2]
	*pdu_data_tx = p;
   11d4c:	603c      	str	r4, [r7, #0]
}
   11d4e:	b003      	add	sp, #12
   11d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lll->empty = 1U;
   11d52:	f043 0304 	orr.w	r3, r3, #4
   11d56:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
		p = (void *)radio_pkt_empty_get();
   11d5a:	f000 fd9f 	bl	1289c <radio_pkt_empty_get>
   11d5e:	4604      	mov	r4, r0
			p->md = 0U;
   11d60:	7823      	ldrb	r3, [r4, #0]
   11d62:	f36f 1304 	bfc	r3, #4, #1
   11d66:	7023      	strb	r3, [r4, #0]
	*pdu_data_tx = p;
   11d68:	603c      	str	r4, [r7, #0]
}
   11d6a:	b003      	add	sp, #12
   11d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lll->empty = 1U;
   11d6e:	f043 0304 	orr.w	r3, r3, #4
   11d72:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
		p = (void *)radio_pkt_empty_get();
   11d76:	f000 fd91 	bl	1289c <radio_pkt_empty_get>
   11d7a:	4604      	mov	r4, r0
		if (link || FORCE_MD_CNT_GET()) {
   11d7c:	2e00      	cmp	r6, #0
   11d7e:	d0ef      	beq.n	11d60 <lll_conn_pdu_tx_prep+0x80>
			p->md = 1U;
   11d80:	7803      	ldrb	r3, [r0, #0]
   11d82:	f043 0310 	orr.w	r3, r3, #16
   11d86:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   11d88:	603c      	str	r4, [r7, #0]
}
   11d8a:	b003      	add	sp, #12
   11d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   11d8e:	6832      	ldr	r2, [r6, #0]
   11d90:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   11d92:	429a      	cmp	r2, r3
   11d94:	d1d1      	bne.n	11d3a <lll_conn_pdu_tx_prep+0x5a>
   11d96:	2100      	movs	r1, #0
   11d98:	e7d0      	b.n	11d3c <lll_conn_pdu_tx_prep+0x5c>
   11d9a:	bf00      	nop

00011d9c <lll_conn_isr_rx>:
{
   11d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11da0:	b082      	sub	sp, #8
   11da2:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   11da4:	f000 fd50 	bl	12848 <radio_is_done>
	if (trx_done) {
   11da8:	b2c0      	uxtb	r0, r0
   11daa:	b950      	cbnz	r0, 11dc2 <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   11dac:	f7fe ff62 	bl	10c74 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   11db0:	48ba      	ldr	r0, [pc, #744]	; (1209c <lll_conn_isr_rx+0x300>)
   11db2:	4621      	mov	r1, r4
   11db4:	f000 fc08 	bl	125c8 <radio_isr_set>
}
   11db8:	b002      	add	sp, #8
   11dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_disable();
   11dbe:	f000 bd19 	b.w	127f4 <radio_disable>
		crc_ok = radio_crc_is_valid();
   11dc2:	f000 fd61 	bl	12888 <radio_crc_is_valid>
   11dc6:	fa5f f880 	uxtb.w	r8, r0
		rssi_ready = radio_rssi_is_ready();
   11dca:	f000 fe31 	bl	12a30 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   11dce:	f7fe ff51 	bl	10c74 <lll_isr_rx_status_reset>
	trx_cnt++;
   11dd2:	4ab3      	ldr	r2, [pc, #716]	; (120a0 <lll_conn_isr_rx+0x304>)
   11dd4:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   11dd6:	2001      	movs	r0, #1
	trx_cnt++;
   11dd8:	4403      	add	r3, r0
   11dda:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   11ddc:	f7f6 fdf0 	bl	89c0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11de0:	4605      	mov	r5, r0
   11de2:	2800      	cmp	r0, #0
   11de4:	f000 80e1 	beq.w	11faa <lll_conn_isr_rx+0x20e>
	if (crc_ok) {
   11de8:	f1b8 0f00 	cmp.w	r8, #0
   11dec:	d158      	bne.n	11ea0 <lll_conn_isr_rx+0x104>
		if (crc_expire == 0U) {
   11dee:	4bad      	ldr	r3, [pc, #692]	; (120a4 <lll_conn_isr_rx+0x308>)
   11df0:	781e      	ldrb	r6, [r3, #0]
   11df2:	2e00      	cmp	r6, #0
   11df4:	f040 80b9 	bne.w	11f6a <lll_conn_isr_rx+0x1ce>
		crc_expire--;
   11df8:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   11dfa:	a901      	add	r1, sp, #4
   11dfc:	4620      	mov	r0, r4
		crc_expire--;
   11dfe:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   11e00:	f7ff ff6e 	bl	11ce0 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   11e04:	2600      	movs	r6, #0
   11e06:	9f01      	ldr	r7, [sp, #4]
   11e08:	46b0      	mov	r8, r6
		radio_tmr_tifs_set(EVENT_IFS_US);
   11e0a:	2096      	movs	r0, #150	; 0x96
   11e0c:	f000 fe4c 	bl	12aa8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   11e10:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   11e14:	f000 0007 	and.w	r0, r0, #7
   11e18:	f000 fd4c 	bl	128b4 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   11e1c:	48a2      	ldr	r0, [pc, #648]	; (120a8 <lll_conn_isr_rx+0x30c>)
   11e1e:	4621      	mov	r1, r4
   11e20:	f000 fbd2 	bl	125c8 <radio_isr_set>
		radio_tmr_end_capture();
   11e24:	f000 ff1a 	bl	12c5c <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   11e28:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
   11e2c:	783b      	ldrb	r3, [r7, #0]
   11e2e:	f362 03c3 	bfi	r3, r2, #3, #1
   11e32:	703b      	strb	r3, [r7, #0]
	pdu_data_tx->nesn = lll->nesn;
   11e34:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   11e38:	783a      	ldrb	r2, [r7, #0]
   11e3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   11e3e:	f363 0282 	bfi	r2, r3, #2, #1
   11e42:	703a      	strb	r2, [r7, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   11e44:	4639      	mov	r1, r7
   11e46:	4620      	mov	r0, r4
   11e48:	f7ff ff1e 	bl	11c88 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   11e4c:	f000 fcf2 	bl	12834 <radio_is_ready>
   11e50:	2800      	cmp	r0, #0
   11e52:	f040 809c 	bne.w	11f8e <lll_conn_isr_rx+0x1f2>
	if (!radio_tmr_aa_restore()) {
   11e56:	f000 fef5 	bl	12c44 <radio_tmr_aa_restore>
   11e5a:	2800      	cmp	r0, #0
   11e5c:	d079      	beq.n	11f52 <lll_conn_isr_rx+0x1b6>
	if (tx_release) {
   11e5e:	f1b8 0f00 	cmp.w	r8, #0
   11e62:	d07d      	beq.n	11f60 <lll_conn_isr_rx+0x1c4>
		LL_ASSERT(lll->handle != 0xFFFF);
   11e64:	89a0      	ldrh	r0, [r4, #12]
   11e66:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11e6a:	4298      	cmp	r0, r3
   11e6c:	f000 80e2 	beq.w	12034 <lll_conn_isr_rx+0x298>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   11e70:	4641      	mov	r1, r8
   11e72:	f7f9 febd 	bl	bbf0 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   11e76:	b176      	cbz	r6, 11e96 <lll_conn_isr_rx+0xfa>
		if (lll->enc_rx) {
   11e78:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   11e7c:	071b      	lsls	r3, r3, #28
   11e7e:	f100 80cf 	bmi.w	12020 <lll_conn_isr_rx+0x284>
		ull_pdu_rx_alloc();
   11e82:	f7f6 fdbf 	bl	8a04 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   11e86:	2303      	movs	r3, #3
   11e88:	712b      	strb	r3, [r5, #4]
		node_rx->hdr.handle = lll->handle;
   11e8a:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   11e8c:	6828      	ldr	r0, [r5, #0]
		node_rx->hdr.handle = lll->handle;
   11e8e:	80eb      	strh	r3, [r5, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   11e90:	4629      	mov	r1, r5
   11e92:	f7f6 fdcd 	bl	8a30 <ull_rx_put>
}
   11e96:	b002      	add	sp, #8
   11e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ull_rx_sched();
   11e9c:	f7f6 bdd8 	b.w	8a50 <ull_rx_sched>
	if (lll->enc_rx) {
   11ea0:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   11ea4:	0719      	lsls	r1, r3, #28
	pdu_data_rx = (void *)node_rx->pdu;
   11ea6:	f105 061c 	add.w	r6, r5, #28
	if (lll->enc_rx) {
   11eaa:	f100 80af 	bmi.w	1200c <lll_conn_isr_rx+0x270>
	if (pdu_data_rx->nesn != lll->sn) {
   11eae:	7f2a      	ldrb	r2, [r5, #28]
   11eb0:	f003 0101 	and.w	r1, r3, #1
   11eb4:	f3c2 0080 	ubfx	r0, r2, #2, #1
   11eb8:	4288      	cmp	r0, r1
   11eba:	f000 8087 	beq.w	11fcc <lll_conn_isr_rx+0x230>
		if (lll->role) {
   11ebe:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   11ec2:	f081 0101 	eor.w	r1, r1, #1
   11ec6:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   11eca:	2a00      	cmp	r2, #0
		lll->sn++;
   11ecc:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
		if (lll->role) {
   11ed0:	da05      	bge.n	11ede <lll_conn_isr_rx+0x142>
			lll->periph.latency_enabled = 1;
   11ed2:	f894 3020 	ldrb.w	r3, [r4, #32]
   11ed6:	f043 0304 	orr.w	r3, r3, #4
   11eda:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   11ede:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   11ee2:	075a      	lsls	r2, r3, #29
   11ee4:	f100 80b7 	bmi.w	12056 <lll_conn_isr_rx+0x2ba>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   11ee8:	e9d4 0117 	ldrd	r0, r1, [r4, #92]	; 0x5c
   11eec:	aa01      	add	r2, sp, #4
   11eee:	f7f4 fb85 	bl	65fc <memq_peek>
		if (link) {
   11ef2:	4607      	mov	r7, r0
   11ef4:	2800      	cmp	r0, #0
   11ef6:	f000 80b4 	beq.w	12062 <lll_conn_isr_rx+0x2c6>
					       lll->packet_tx_head_offset);
   11efa:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
			pdu_data_tx_len = pdu_data_tx->len;
   11efe:	9b01      	ldr	r3, [sp, #4]
   11f00:	4413      	add	r3, r2
   11f02:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   11f04:	b171      	cbz	r1, 11f24 <lll_conn_isr_rx+0x188>
				if (lll->enc_tx) {
   11f06:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   11f0a:	06db      	lsls	r3, r3, #27
   11f0c:	d50a      	bpl.n	11f24 <lll_conn_isr_rx+0x188>
					lll->ccm_tx.counter++;
   11f0e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   11f12:	3301      	adds	r3, #1
   11f14:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   11f18:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   11f1c:	f143 0300 	adc.w	r3, r3, #0
   11f20:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
			if (offset < lll->packet_tx_head_len) {
   11f24:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   11f28:	440a      	add	r2, r1
   11f2a:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   11f2c:	429a      	cmp	r2, r3
   11f2e:	f0c0 809e 	bcc.w	1206e <lll_conn_isr_rx+0x2d2>
			} else if (offset == lll->packet_tx_head_len) {
   11f32:	f000 80c9 	beq.w	120c8 <lll_conn_isr_rx+0x32c>
				LL_ASSERT(0);
   11f36:	4a5d      	ldr	r2, [pc, #372]	; (120ac <lll_conn_isr_rx+0x310>)
   11f38:	495d      	ldr	r1, [pc, #372]	; (120b0 <lll_conn_isr_rx+0x314>)
   11f3a:	485e      	ldr	r0, [pc, #376]	; (120b4 <lll_conn_isr_rx+0x318>)
   11f3c:	f44f 7375 	mov.w	r3, #980	; 0x3d4
   11f40:	f005 facf 	bl	174e2 <assert_print>
   11f44:	4040      	eors	r0, r0
   11f46:	f380 8811 	msr	BASEPRI, r0
   11f4a:	f04f 0003 	mov.w	r0, #3
   11f4e:	df02      	svc	2
   11f50:	e087      	b.n	12062 <lll_conn_isr_rx+0x2c6>
		radio_tmr_aa_save(radio_tmr_aa_get());
   11f52:	f000 fe6b 	bl	12c2c <radio_tmr_aa_get>
   11f56:	f000 fe6f 	bl	12c38 <radio_tmr_aa_save>
	if (tx_release) {
   11f5a:	f1b8 0f00 	cmp.w	r8, #0
   11f5e:	d181      	bne.n	11e64 <lll_conn_isr_rx+0xc8>
	if (is_rx_enqueue) {
   11f60:	2e00      	cmp	r6, #0
   11f62:	d189      	bne.n	11e78 <lll_conn_isr_rx+0xdc>
}
   11f64:	b002      	add	sp, #8
   11f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_expire--;
   11f6a:	3e01      	subs	r6, #1
   11f6c:	b2f6      	uxtb	r6, r6
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   11f6e:	a901      	add	r1, sp, #4
   11f70:	4620      	mov	r0, r4
		crc_expire--;
   11f72:	701e      	strb	r6, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   11f74:	f7ff feb4 	bl	11ce0 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   11f78:	2e00      	cmp	r6, #0
   11f7a:	f47f af43 	bne.w	11e04 <lll_conn_isr_rx+0x68>
	pdu_data_tx->sn = lll->sn;
   11f7e:	9f01      	ldr	r7, [sp, #4]
		radio_isr_set(isr_done, param);
   11f80:	4846      	ldr	r0, [pc, #280]	; (1209c <lll_conn_isr_rx+0x300>)
   11f82:	4621      	mov	r1, r4
   11f84:	f000 fb20 	bl	125c8 <radio_isr_set>
			radio_switch_complete_and_disable();
   11f88:	f000 fd3c 	bl	12a04 <radio_switch_complete_and_disable>
   11f8c:	e74c      	b.n	11e28 <lll_conn_isr_rx+0x8c>
	LL_ASSERT(!radio_is_ready());
   11f8e:	4a47      	ldr	r2, [pc, #284]	; (120ac <lll_conn_isr_rx+0x310>)
   11f90:	4949      	ldr	r1, [pc, #292]	; (120b8 <lll_conn_isr_rx+0x31c>)
   11f92:	4848      	ldr	r0, [pc, #288]	; (120b4 <lll_conn_isr_rx+0x318>)
   11f94:	f240 138f 	movw	r3, #399	; 0x18f
   11f98:	f005 faa3 	bl	174e2 <assert_print>
   11f9c:	4040      	eors	r0, r0
   11f9e:	f380 8811 	msr	BASEPRI, r0
   11fa2:	f04f 0003 	mov.w	r0, #3
   11fa6:	df02      	svc	2
   11fa8:	e755      	b.n	11e56 <lll_conn_isr_rx+0xba>
	LL_ASSERT(node_rx);
   11faa:	4a40      	ldr	r2, [pc, #256]	; (120ac <lll_conn_isr_rx+0x310>)
   11fac:	4943      	ldr	r1, [pc, #268]	; (120bc <lll_conn_isr_rx+0x320>)
   11fae:	4841      	ldr	r0, [pc, #260]	; (120b4 <lll_conn_isr_rx+0x318>)
   11fb0:	23ff      	movs	r3, #255	; 0xff
   11fb2:	f005 fa96 	bl	174e2 <assert_print>
   11fb6:	4040      	eors	r0, r0
   11fb8:	f380 8811 	msr	BASEPRI, r0
   11fbc:	f04f 0003 	mov.w	r0, #3
   11fc0:	df02      	svc	2
	if (crc_ok) {
   11fc2:	f1b8 0f00 	cmp.w	r8, #0
   11fc6:	f43f af12 	beq.w	11dee <lll_conn_isr_rx+0x52>
   11fca:	e769      	b.n	11ea0 <lll_conn_isr_rx+0x104>
	tx_release = NULL;
   11fcc:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   11fd0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   11fd4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   11fd8:	429a      	cmp	r2, r3
   11fda:	d04b      	beq.n	12074 <lll_conn_isr_rx+0x2d8>
	is_rx_enqueue = 0U;
   11fdc:	2600      	movs	r6, #0
		crc_expire = 0U;
   11fde:	4a31      	ldr	r2, [pc, #196]	; (120a4 <lll_conn_isr_rx+0x308>)
		crc_valid = 1U;
   11fe0:	4b37      	ldr	r3, [pc, #220]	; (120c0 <lll_conn_isr_rx+0x324>)
		crc_expire = 0U;
   11fe2:	2100      	movs	r1, #0
   11fe4:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   11fe6:	4620      	mov	r0, r4
		crc_valid = 1U;
   11fe8:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   11fea:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   11fec:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   11fee:	f7ff fe77 	bl	11ce0 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   11ff2:	7f2b      	ldrb	r3, [r5, #28]
   11ff4:	06d9      	lsls	r1, r3, #27
   11ff6:	d42c      	bmi.n	12052 <lll_conn_isr_rx+0x2b6>
			      (pdu_data_tx->md == 0) &&
   11ff8:	9f01      	ldr	r7, [sp, #4]
   11ffa:	783b      	ldrb	r3, [r7, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   11ffc:	06da      	lsls	r2, r3, #27
   11ffe:	f53f af04 	bmi.w	11e0a <lll_conn_isr_rx+0x6e>
			      (pdu_data_tx->md == 0) &&
   12002:	787b      	ldrb	r3, [r7, #1]
   12004:	2b00      	cmp	r3, #0
   12006:	f47f af00 	bne.w	11e0a <lll_conn_isr_rx+0x6e>
   1200a:	e7b9      	b.n	11f80 <lll_conn_isr_rx+0x1e4>
		pkt_decrypt = radio_pkt_decrypt_get();
   1200c:	f000 fc4e 	bl	128ac <radio_pkt_decrypt_get>
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   12010:	2203      	movs	r2, #3
		pkt_decrypt = radio_pkt_decrypt_get();
   12012:	4601      	mov	r1, r0
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   12014:	4630      	mov	r0, r6
   12016:	f005 fcf1 	bl	179fc <memcpy>
   1201a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1201e:	e746      	b.n	11eae <lll_conn_isr_rx+0x112>
			pkt_decrypt_data = (uint8_t *)radio_pkt_decrypt_get() +
   12020:	f000 fc44 	bl	128ac <radio_pkt_decrypt_get>
			memcpy((void *)pdu_data_rx->lldata,
   12024:	7f6a      	ldrb	r2, [r5, #29]
   12026:	1cc1      	adds	r1, r0, #3
   12028:	f105 001f 	add.w	r0, r5, #31
   1202c:	f005 fce6 	bl	179fc <memcpy>
   12030:	e727      	b.n	11e82 <lll_conn_isr_rx+0xe6>
	pdu_data_tx->sn = lll->sn;
   12032:	2600      	movs	r6, #0
		LL_ASSERT(lll->handle != 0xFFFF);
   12034:	4a1d      	ldr	r2, [pc, #116]	; (120ac <lll_conn_isr_rx+0x310>)
   12036:	4923      	ldr	r1, [pc, #140]	; (120c4 <lll_conn_isr_rx+0x328>)
   12038:	481e      	ldr	r0, [pc, #120]	; (120b4 <lll_conn_isr_rx+0x318>)
   1203a:	f44f 73cf 	mov.w	r3, #414	; 0x19e
   1203e:	f005 fa50 	bl	174e2 <assert_print>
   12042:	4040      	eors	r0, r0
   12044:	f380 8811 	msr	BASEPRI, r0
   12048:	f04f 0003 	mov.w	r0, #3
   1204c:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1204e:	89a0      	ldrh	r0, [r4, #12]
   12050:	e70e      	b.n	11e70 <lll_conn_isr_rx+0xd4>
			      (pdu_data_tx->md == 0) &&
   12052:	9f01      	ldr	r7, [sp, #4]
   12054:	e6d9      	b.n	11e0a <lll_conn_isr_rx+0x6e>
			lll->empty = 0;
   12056:	f36f 0382 	bfc	r3, #2, #1
   1205a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1205e:	f000 fc1d 	bl	1289c <radio_pkt_empty_get>
		if (link) {
   12062:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   12066:	7f2a      	ldrb	r2, [r5, #28]
	tx_release = NULL;
   12068:	f04f 0800 	mov.w	r8, #0
   1206c:	e7b0      	b.n	11fd0 <lll_conn_isr_rx+0x234>
				lll->packet_tx_head_offset = offset;
   1206e:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
   12072:	e7f6      	b.n	12062 <lll_conn_isr_rx+0x2c6>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   12074:	2003      	movs	r0, #3
   12076:	f7f6 fca3 	bl	89c0 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1207a:	2800      	cmp	r0, #0
   1207c:	d0ae      	beq.n	11fdc <lll_conn_isr_rx+0x240>
		lll->nesn++;
   1207e:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   12082:	f083 0302 	eor.w	r3, r3, #2
   12086:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
		if (pdu_data_rx->len != 0) {
   1208a:	7f6b      	ldrb	r3, [r5, #29]
   1208c:	2b00      	cmp	r3, #0
   1208e:	d0a5      	beq.n	11fdc <lll_conn_isr_rx+0x240>
			if (lll->enc_rx) {
   12090:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   12094:	0718      	lsls	r0, r3, #28
   12096:	d42a      	bmi.n	120ee <lll_conn_isr_rx+0x352>
			*is_rx_enqueue = 1U;
   12098:	2601      	movs	r6, #1
   1209a:	e7a0      	b.n	11fde <lll_conn_isr_rx+0x242>
   1209c:	000119ad 	.word	0x000119ad
   120a0:	20002622 	.word	0x20002622
   120a4:	2000263d 	.word	0x2000263d
   120a8:	00011bd1 	.word	0x00011bd1
   120ac:	0001c54c 	.word	0x0001c54c
   120b0:	0001b908 	.word	0x0001b908
   120b4:	0001b844 	.word	0x0001b844
   120b8:	0001c508 	.word	0x0001c508
   120bc:	0001c500 	.word	0x0001c500
   120c0:	2000263c 	.word	0x2000263c
   120c4:	0001c5a0 	.word	0x0001c5a0
				lll->packet_tx_head_len = 0;
   120c8:	2200      	movs	r2, #0
   120ca:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
				memq_dequeue(lll->memq_tx.tail,
   120ce:	6e20      	ldr	r0, [r4, #96]	; 0x60
   120d0:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   120d4:	f7f4 fa9a 	bl	660c <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   120d8:	9b01      	ldr	r3, [sp, #4]
   120da:	681b      	ldr	r3, [r3, #0]
   120dc:	603b      	str	r3, [r7, #0]
				tx->next = link;
   120de:	9b01      	ldr	r3, [sp, #4]
   120e0:	601f      	str	r7, [r3, #0]
				*tx_release = tx;
   120e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
				FORCE_MD_CNT_SET();
   120e6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   120ea:	7f2a      	ldrb	r2, [r5, #28]
   120ec:	e770      	b.n	11fd0 <lll_conn_isr_rx+0x234>
				done = radio_ccm_is_done();
   120ee:	f000 fe33 	bl	12d58 <radio_ccm_is_done>
				LL_ASSERT(done);
   120f2:	2800      	cmp	r0, #0
   120f4:	d067      	beq.n	121c6 <lll_conn_isr_rx+0x42a>
				bool mic_failure = !radio_ccm_mic_is_valid();
   120f6:	f000 fe59 	bl	12dac <radio_ccm_mic_is_valid>
				if (mic_failure &&
   120fa:	2800      	cmp	r0, #0
   120fc:	d153      	bne.n	121a6 <lll_conn_isr_rx+0x40a>
				    lll->ccm_rx.counter == 0 &&
   120fe:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   12102:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
				if (mic_failure &&
   12106:	4313      	orrs	r3, r2
   12108:	d104      	bne.n	12114 <lll_conn_isr_rx+0x378>
				    (pdu_data_rx->ll_id ==
   1210a:	7f2b      	ldrb	r3, [r5, #28]
				    lll->ccm_rx.counter == 0 &&
   1210c:	f003 0303 	and.w	r3, r3, #3
   12110:	2b03      	cmp	r3, #3
   12112:	d032      	beq.n	1217a <lll_conn_isr_rx+0x3de>
					mic_state = LLL_CONN_MIC_FAIL;
   12114:	4b33      	ldr	r3, [pc, #204]	; (121e4 <lll_conn_isr_rx+0x448>)
			radio_isr_set(isr_done, param);
   12116:	4834      	ldr	r0, [pc, #208]	; (121e8 <lll_conn_isr_rx+0x44c>)
					mic_state = LLL_CONN_MIC_FAIL;
   12118:	2202      	movs	r2, #2
			radio_isr_set(isr_done, param);
   1211a:	4621      	mov	r1, r4
					mic_state = LLL_CONN_MIC_FAIL;
   1211c:	701a      	strb	r2, [r3, #0]
			radio_isr_set(isr_done, param);
   1211e:	f000 fa53 	bl	125c8 <radio_isr_set>
			radio_disable();
   12122:	f000 fb67 	bl	127f4 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   12126:	f000 fb85 	bl	12834 <radio_is_ready>
   1212a:	b980      	cbnz	r0, 1214e <lll_conn_isr_rx+0x3b2>
	if (!radio_tmr_aa_restore()) {
   1212c:	f000 fd8a 	bl	12c44 <radio_tmr_aa_restore>
   12130:	b1d8      	cbz	r0, 1216a <lll_conn_isr_rx+0x3ce>
	if (tx_release) {
   12132:	f1b8 0f00 	cmp.w	r8, #0
   12136:	f43f af15 	beq.w	11f64 <lll_conn_isr_rx+0x1c8>
		LL_ASSERT(lll->handle != 0xFFFF);
   1213a:	89a0      	ldrh	r0, [r4, #12]
   1213c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12140:	4298      	cmp	r0, r3
   12142:	f43f af76 	beq.w	12032 <lll_conn_isr_rx+0x296>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   12146:	4641      	mov	r1, r8
   12148:	f7f9 fd52 	bl	bbf0 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1214c:	e6a3      	b.n	11e96 <lll_conn_isr_rx+0xfa>
			LL_ASSERT(!radio_is_ready());
   1214e:	4a27      	ldr	r2, [pc, #156]	; (121ec <lll_conn_isr_rx+0x450>)
   12150:	4927      	ldr	r1, [pc, #156]	; (121f0 <lll_conn_isr_rx+0x454>)
   12152:	4828      	ldr	r0, [pc, #160]	; (121f4 <lll_conn_isr_rx+0x458>)
   12154:	f44f 7388 	mov.w	r3, #272	; 0x110
   12158:	f005 f9c3 	bl	174e2 <assert_print>
   1215c:	4040      	eors	r0, r0
   1215e:	f380 8811 	msr	BASEPRI, r0
   12162:	f04f 0003 	mov.w	r0, #3
   12166:	df02      	svc	2
   12168:	e7e0      	b.n	1212c <lll_conn_isr_rx+0x390>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1216a:	f000 fd5f 	bl	12c2c <radio_tmr_aa_get>
   1216e:	f000 fd63 	bl	12c38 <radio_tmr_aa_save>
	if (tx_release) {
   12172:	f1b8 0f00 	cmp.w	r8, #0
   12176:	d1e0      	bne.n	1213a <lll_conn_isr_rx+0x39e>
   12178:	e6f4      	b.n	11f64 <lll_conn_isr_rx+0x1c8>
						radio_pkt_scratch_get();
   1217a:	f000 fb93 	bl	128a4 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1217e:	7843      	ldrb	r3, [r0, #1]
   12180:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   12182:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   12184:	d8c6      	bhi.n	12114 <lll_conn_isr_rx+0x378>
						memcpy(pdu_data_rx,
   12186:	3303      	adds	r3, #3
   12188:	b2da      	uxtb	r2, r3
   1218a:	4630      	mov	r0, r6
   1218c:	f005 fc36 	bl	179fc <memcpy>
						lll->ccm_rx.counter--;
   12190:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   12194:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
   12198:	3b01      	subs	r3, #1
   1219a:	f8c4 3083 	str.w	r3, [r4, #131]	; 0x83
   1219e:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   121a2:	f8c4 3087 	str.w	r3, [r4, #135]	; 0x87
				lll->ccm_rx.counter++;
   121a6:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
				mic_state = LLL_CONN_MIC_PASS;
   121aa:	4a0e      	ldr	r2, [pc, #56]	; (121e4 <lll_conn_isr_rx+0x448>)
				lll->ccm_rx.counter++;
   121ac:	3301      	adds	r3, #1
   121ae:	f8c4 3083 	str.w	r3, [r4, #131]	; 0x83
   121b2:	f8d4 3087 	ldr.w	r3, [r4, #135]	; 0x87
						lll->ccm_rx.counter--;
   121b6:	f104 0183 	add.w	r1, r4, #131	; 0x83
				lll->ccm_rx.counter++;
   121ba:	f143 0300 	adc.w	r3, r3, #0
   121be:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   121c0:	2301      	movs	r3, #1
   121c2:	7013      	strb	r3, [r2, #0]
		if (err) {
   121c4:	e768      	b.n	12098 <lll_conn_isr_rx+0x2fc>
				LL_ASSERT(done);
   121c6:	4a09      	ldr	r2, [pc, #36]	; (121ec <lll_conn_isr_rx+0x450>)
   121c8:	490b      	ldr	r1, [pc, #44]	; (121f8 <lll_conn_isr_rx+0x45c>)
   121ca:	480a      	ldr	r0, [pc, #40]	; (121f4 <lll_conn_isr_rx+0x458>)
   121cc:	f240 33ef 	movw	r3, #1007	; 0x3ef
   121d0:	f005 f987 	bl	174e2 <assert_print>
   121d4:	4040      	eors	r0, r0
   121d6:	f380 8811 	msr	BASEPRI, r0
   121da:	f04f 0003 	mov.w	r0, #3
   121de:	df02      	svc	2
   121e0:	e789      	b.n	120f6 <lll_conn_isr_rx+0x35a>
   121e2:	bf00      	nop
   121e4:	2000263b 	.word	0x2000263b
   121e8:	000119ad 	.word	0x000119ad
   121ec:	0001c54c 	.word	0x0001c54c
   121f0:	0001c508 	.word	0x0001c508
   121f4:	0001b844 	.word	0x0001b844
   121f8:	0001c598 	.word	0x0001c598

000121fc <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   121fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   12200:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   12202:	89a2      	ldrh	r2, [r4, #12]
   12204:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12208:	429a      	cmp	r2, r3
{
   1220a:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   1220c:	f000 80d2 	beq.w	123b4 <prepare_cb+0x1b8>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   12210:	4605      	mov	r5, r0
   12212:	f7ff fc35 	bl	11a80 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   12216:	892b      	ldrh	r3, [r5, #8]
   12218:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1221a:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1221c:	441a      	add	r2, r3
   1221e:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   12220:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   12222:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   12224:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   12226:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   12228:	1c41      	adds	r1, r0, #1
   1222a:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   1222c:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   1222e:	f04f 0100 	mov.w	r1, #0
   12232:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   12234:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   12238:	f100 808e 	bmi.w	12358 <prepare_cb+0x15c>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1223c:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   12240:	460b      	mov	r3, r1
   12242:	7fa1      	ldrb	r1, [r4, #30]
   12244:	9000      	str	r0, [sp, #0]
   12246:	f104 001f 	add.w	r0, r4, #31
   1224a:	f7fe f88d 	bl	10368 <lll_chan_sel_1>
   1224e:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   12250:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   12254:	4413      	add	r3, r2
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   12256:	e9d4 020d 	ldrd	r0, r2, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   1225a:	2100      	movs	r1, #0
	lll->periph.window_size_event_us +=
   1225c:	4402      	add	r2, r0
	lll->periph.window_widening_prepare_us = 0;
   1225e:	62e1      	str	r1, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   12260:	6361      	str	r1, [r4, #52]	; 0x34
   12262:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	lll->periph.window_size_event_us +=
   12264:	63a2      	str	r2, [r4, #56]	; 0x38
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   12266:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
   1226a:	428b      	cmp	r3, r1
   1226c:	bf28      	it	cs
   1226e:	460b      	movcs	r3, r1
   12270:	f012 0204 	ands.w	r2, r2, #4
   12274:	6323      	str	r3, [r4, #48]	; 0x30
   12276:	f000 808f 	beq.w	12398 <prepare_cb+0x19c>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   1227a:	f000 f9e7 	bl	1264c <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1227e:	2000      	movs	r0, #0
   12280:	f000 fa3a 	bl	126f8 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	radio_aa_set(lll->access_addr);
   12284:	1d20      	adds	r0, r4, #4
   12286:	f000 fa55 	bl	12734 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   1228a:	8923      	ldrh	r3, [r4, #8]
   1228c:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1228e:	f240 605b 	movw	r0, #1627	; 0x65b
   12292:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   12296:	f000 faeb 	bl	12870 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   1229a:	4630      	mov	r0, r6
   1229c:	f7fe fc9c 	bl	10bd8 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   122a0:	4621      	mov	r1, r4
   122a2:	4849      	ldr	r0, [pc, #292]	; (123c8 <prepare_cb+0x1cc>)
   122a4:	f000 f990 	bl	125c8 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   122a8:	2096      	movs	r0, #150	; 0x96
   122aa:	f000 fbfd 	bl	12aa8 <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   122ae:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
   122b2:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   122b6:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   122ba:	2100      	movs	r1, #0
   122bc:	f002 0207 	and.w	r2, r2, #7
   122c0:	f000 0007 	and.w	r0, r0, #7
   122c4:	f000 fb3e 	bl	12944 <radio_switch_complete_and_tx>
	}

	/* The call can use Radio interface that alternates NRF_RADIO->SHORTS. The register is
	 * set by radio_switch_complete_XXX functions, hence any changes done before are cleared.
	 */
	lll_conn_rx_pkt_set(lll);
   122c8:	4620      	mov	r0, r4
   122ca:	f7ff fc39 	bl	11b40 <lll_conn_rx_pkt_set>

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   122ce:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   122d0:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   122d2:	4638      	mov	r0, r7
   122d4:	f7fe fc72 	bl	10bbc <lll_event_offset_get>
   122d8:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   122da:	686a      	ldr	r2, [r5, #4]
   122dc:	f106 0109 	add.w	r1, r6, #9
   122e0:	2000      	movs	r0, #0
   122e2:	f000 fbed 	bl	12ac0 <radio_tmr_start>
   122e6:	4680      	mov	r8, r0

	radio_tmr_aa_capture();
   122e8:	f000 fc8c 	bl	12c04 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   122ec:	2000      	movs	r0, #0
   122ee:	f000 fca3 	bl	12c38 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   122f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   122f4:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   122f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
	hcto = remainder_us +
   122fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   122fe:	f000 0007 	and.w	r0, r0, #7
   12302:	2101      	movs	r1, #1
	hcto = remainder_us +
   12304:	eb03 0542 	add.w	r5, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   12308:	f000 fa66 	bl	127d8 <radio_rx_ready_delay_get>
	hcto = remainder_us +
   1230c:	4445      	add	r5, r8
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1230e:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   12310:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   12314:	f000 0007 	and.w	r0, r0, #7
   12318:	2802      	cmp	r0, #2
   1231a:	d03b      	beq.n	12394 <prepare_cb+0x198>
		return 40;
   1231c:	2804      	cmp	r0, #4
   1231e:	bf0c      	ite	eq
   12320:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   12324:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   12326:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   12328:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1232a:	f000 fa57 	bl	127dc <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1232e:	4428      	add	r0, r5
   12330:	f000 fc5a 	bl	12be8 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   12334:	89a1      	ldrh	r1, [r4, #12]
   12336:	3103      	adds	r1, #3
   12338:	4632      	mov	r2, r6
   1233a:	b2c9      	uxtb	r1, r1
   1233c:	4638      	mov	r0, r7
   1233e:	f7ee fff3 	bl	1328 <lll_preempt_calc>
   12342:	b188      	cbz	r0, 12368 <prepare_cb+0x16c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   12344:	4821      	ldr	r0, [pc, #132]	; (123cc <prepare_cb+0x1d0>)
   12346:	4621      	mov	r1, r4
   12348:	f000 f93e 	bl	125c8 <radio_isr_set>
		radio_disable();
   1234c:	f000 fa52 	bl	127f4 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   12350:	2000      	movs	r0, #0
   12352:	b002      	add	sp, #8
   12354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   12358:	460a      	mov	r2, r1
   1235a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1235e:	8be1      	ldrh	r1, [r4, #30]
   12360:	f7fe f84e 	bl	10400 <lll_chan_sel_2>
   12364:	4606      	mov	r6, r0
   12366:	e773      	b.n	12250 <prepare_cb+0x54>
		ret = lll_prepare_done(lll);
   12368:	4620      	mov	r0, r4
   1236a:	f7fe fbcf 	bl	10b0c <lll_prepare_done>
		LL_ASSERT(!ret);
   1236e:	2800      	cmp	r0, #0
   12370:	d0ee      	beq.n	12350 <prepare_cb+0x154>
   12372:	4a17      	ldr	r2, [pc, #92]	; (123d0 <prepare_cb+0x1d4>)
   12374:	4917      	ldr	r1, [pc, #92]	; (123d4 <prepare_cb+0x1d8>)
   12376:	4818      	ldr	r0, [pc, #96]	; (123d8 <prepare_cb+0x1dc>)
   12378:	f44f 73a8 	mov.w	r3, #336	; 0x150
   1237c:	f005 f8b1 	bl	174e2 <assert_print>
   12380:	4040      	eors	r0, r0
   12382:	f380 8811 	msr	BASEPRI, r0
   12386:	f04f 0003 	mov.w	r0, #3
   1238a:	df02      	svc	2
}
   1238c:	2000      	movs	r0, #0
   1238e:	b002      	add	sp, #8
   12390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   12394:	2318      	movs	r3, #24
   12396:	e7c6      	b.n	12326 <prepare_cb+0x12a>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   12398:	e9d4 0117 	ldrd	r0, r1, [r4, #92]	; 0x5c
   1239c:	f7f4 f92e 	bl	65fc <memq_peek>
		if (!link) {
   123a0:	2800      	cmp	r0, #0
   123a2:	f47f af6a 	bne.w	1227a <prepare_cb+0x7e>
			lll->empty = 1U;
   123a6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   123aa:	f043 0304 	orr.w	r3, r3, #4
   123ae:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
   123b2:	e762      	b.n	1227a <prepare_cb+0x7e>
		radio_isr_set(lll_isr_early_abort, lll);
   123b4:	4809      	ldr	r0, [pc, #36]	; (123dc <prepare_cb+0x1e0>)
   123b6:	4621      	mov	r1, r4
   123b8:	f000 f906 	bl	125c8 <radio_isr_set>
		radio_disable();
   123bc:	f000 fa1a 	bl	127f4 <radio_disable>
}
   123c0:	2000      	movs	r0, #0
   123c2:	b002      	add	sp, #8
   123c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123c8:	00011d9d 	.word	0x00011d9d
   123cc:	00010d15 	.word	0x00010d15
   123d0:	0001c5b8 	.word	0x0001c5b8
   123d4:	0001b9ec 	.word	0x0001b9ec
   123d8:	0001b844 	.word	0x0001b844
   123dc:	00010d35 	.word	0x00010d35

000123e0 <lll_periph_prepare>:
{
   123e0:	b510      	push	{r4, lr}
   123e2:	b082      	sub	sp, #8
   123e4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   123e6:	f7fe fdf3 	bl	10fd0 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   123ea:	2800      	cmp	r0, #0
   123ec:	db25      	blt.n	1243a <lll_periph_prepare+0x5a>
	lll = p->param;
   123ee:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   123f0:	8920      	ldrh	r0, [r4, #8]
   123f2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   123f4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   123f6:	fb00 3303 	mla	r3, r0, r3, r3
   123fa:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   123fc:	4413      	add	r3, r2
   123fe:	4283      	cmp	r3, r0
   12400:	bf28      	it	cs
   12402:	4603      	movcs	r3, r0
   12404:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   12406:	4a13      	ldr	r2, [pc, #76]	; (12454 <lll_periph_prepare+0x74>)
   12408:	4913      	ldr	r1, [pc, #76]	; (12458 <lll_periph_prepare+0x78>)
   1240a:	4814      	ldr	r0, [pc, #80]	; (1245c <lll_periph_prepare+0x7c>)
   1240c:	9400      	str	r4, [sp, #0]
   1240e:	2300      	movs	r3, #0
   12410:	f7f6 fe3c 	bl	908c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   12414:	b108      	cbz	r0, 1241a <lll_periph_prepare+0x3a>
   12416:	3077      	adds	r0, #119	; 0x77
   12418:	d101      	bne.n	1241e <lll_periph_prepare+0x3e>
}
   1241a:	b002      	add	sp, #8
   1241c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1241e:	4a10      	ldr	r2, [pc, #64]	; (12460 <lll_periph_prepare+0x80>)
   12420:	4910      	ldr	r1, [pc, #64]	; (12464 <lll_periph_prepare+0x84>)
   12422:	4811      	ldr	r0, [pc, #68]	; (12468 <lll_periph_prepare+0x88>)
   12424:	235d      	movs	r3, #93	; 0x5d
   12426:	f005 f85c 	bl	174e2 <assert_print>
   1242a:	4040      	eors	r0, r0
   1242c:	f380 8811 	msr	BASEPRI, r0
   12430:	f04f 0003 	mov.w	r0, #3
   12434:	df02      	svc	2
}
   12436:	b002      	add	sp, #8
   12438:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1243a:	4a09      	ldr	r2, [pc, #36]	; (12460 <lll_periph_prepare+0x80>)
   1243c:	490b      	ldr	r1, [pc, #44]	; (1246c <lll_periph_prepare+0x8c>)
   1243e:	480a      	ldr	r0, [pc, #40]	; (12468 <lll_periph_prepare+0x88>)
   12440:	234c      	movs	r3, #76	; 0x4c
   12442:	f005 f84e 	bl	174e2 <assert_print>
   12446:	4040      	eors	r0, r0
   12448:	f380 8811 	msr	BASEPRI, r0
   1244c:	f04f 0003 	mov.w	r0, #3
   12450:	df02      	svc	2
   12452:	e7cc      	b.n	123ee <lll_periph_prepare+0xe>
   12454:	000121fd 	.word	0x000121fd
   12458:	00011aa9 	.word	0x00011aa9
   1245c:	00010bb5 	.word	0x00010bb5
   12460:	0001c5b8 	.word	0x0001c5b8
   12464:	0001c538 	.word	0x0001c538
   12468:	0001b844 	.word	0x0001b844
   1246c:	0001c424 	.word	0x0001c424

00012470 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   12470:	4b05      	ldr	r3, [pc, #20]	; (12488 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   12472:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12476:	2100      	movs	r1, #0
   12478:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1247c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   12480:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   12484:	4770      	bx	lr
   12486:	bf00      	nop
   12488:	4000b000 	.word	0x4000b000

0001248c <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1248c:	4b05      	ldr	r3, [pc, #20]	; (124a4 <cntr_start+0x18>)
   1248e:	7818      	ldrb	r0, [r3, #0]
   12490:	1c42      	adds	r2, r0, #1
   12492:	701a      	strb	r2, [r3, #0]
   12494:	b918      	cbnz	r0, 1249e <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   12496:	4b04      	ldr	r3, [pc, #16]	; (124a8 <cntr_start+0x1c>)
   12498:	2201      	movs	r2, #1
   1249a:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1249c:	4770      	bx	lr
		return 1;
   1249e:	2001      	movs	r0, #1
}
   124a0:	4770      	bx	lr
   124a2:	bf00      	nop
   124a4:	2000263e 	.word	0x2000263e
   124a8:	4000b000 	.word	0x4000b000

000124ac <cntr_stop>:

uint32_t cntr_stop(void)
{
   124ac:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   124ae:	4c0d      	ldr	r4, [pc, #52]	; (124e4 <cntr_stop+0x38>)
   124b0:	7820      	ldrb	r0, [r4, #0]
   124b2:	b148      	cbz	r0, 124c8 <cntr_stop+0x1c>

	if (--_refcount) {
   124b4:	3801      	subs	r0, #1
   124b6:	b2c0      	uxtb	r0, r0
   124b8:	7020      	strb	r0, [r4, #0]
   124ba:	b918      	cbnz	r0, 124c4 <cntr_stop+0x18>
   124bc:	4b0a      	ldr	r3, [pc, #40]	; (124e8 <cntr_stop+0x3c>)
   124be:	2201      	movs	r2, #1
   124c0:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   124c2:	bd10      	pop	{r4, pc}
		return 1;
   124c4:	2001      	movs	r0, #1
}
   124c6:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   124c8:	4a08      	ldr	r2, [pc, #32]	; (124ec <cntr_stop+0x40>)
   124ca:	4909      	ldr	r1, [pc, #36]	; (124f0 <cntr_stop+0x44>)
   124cc:	4809      	ldr	r0, [pc, #36]	; (124f4 <cntr_stop+0x48>)
   124ce:	232a      	movs	r3, #42	; 0x2a
   124d0:	f005 f807 	bl	174e2 <assert_print>
   124d4:	4040      	eors	r0, r0
   124d6:	f380 8811 	msr	BASEPRI, r0
   124da:	f04f 0003 	mov.w	r0, #3
   124de:	df02      	svc	2
	if (--_refcount) {
   124e0:	7820      	ldrb	r0, [r4, #0]
   124e2:	e7e7      	b.n	124b4 <cntr_stop+0x8>
   124e4:	2000263e 	.word	0x2000263e
   124e8:	4000b000 	.word	0x4000b000
   124ec:	0001c60c 	.word	0x0001c60c
   124f0:	0001c658 	.word	0x0001c658
   124f4:	0001b844 	.word	0x0001b844

000124f8 <cntr_cnt_get>:
     return p_reg->COUNTER;
   124f8:	4b01      	ldr	r3, [pc, #4]	; (12500 <cntr_cnt_get+0x8>)
   124fa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   124fe:	4770      	bx	lr
   12500:	4000b000 	.word	0x4000b000

00012504 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   12504:	4b02      	ldr	r3, [pc, #8]	; (12510 <cntr_cmp_set+0xc>)
   12506:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1250a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1250e:	4770      	bx	lr
   12510:	4000b000 	.word	0x4000b000

00012514 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12514:	4b12      	ldr	r3, [pc, #72]	; (12560 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   12516:	b430      	push	{r4, r5}
   12518:	2101      	movs	r1, #1
   1251a:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1251c:	2000      	movs	r0, #0
   1251e:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   12520:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   12524:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   12528:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1252c:	6019      	str	r1, [r3, #0]
}
   1252e:	e005      	b.n	1253c <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12530:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12534:	b932      	cbnz	r2, 12544 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   12536:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1253a:	b11a      	cbz	r2, 12544 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1253c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12540:	2a00      	cmp	r2, #0
   12542:	d0f5      	beq.n	12530 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12544:	6059      	str	r1, [r3, #4]
			 *        code.
			 */
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   12546:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1254a:	2a00      	cmp	r2, #0
   1254c:	d1e7      	bne.n	1251e <do_ecb+0xa>
   1254e:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   12552:	2d00      	cmp	r5, #0
   12554:	d0e3      	beq.n	1251e <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   12556:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1255a:	bc30      	pop	{r4, r5}
   1255c:	4770      	bx	lr
   1255e:	bf00      	nop
   12560:	4000e000 	.word	0x4000e000

00012564 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   12564:	b570      	push	{r4, r5, r6, lr}
   12566:	b08c      	sub	sp, #48	; 0x30
   12568:	460e      	mov	r6, r1
   1256a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1256c:	4601      	mov	r1, r0
   1256e:	2210      	movs	r2, #16
   12570:	4668      	mov	r0, sp
{
   12572:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12574:	f7f4 f810 	bl	6598 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   12578:	2210      	movs	r2, #16
   1257a:	eb0d 0002 	add.w	r0, sp, r2
   1257e:	4631      	mov	r1, r6
   12580:	f7f4 f80a 	bl	6598 <mem_rcopy>

	do_ecb(&ecb);
   12584:	4668      	mov	r0, sp
   12586:	f7ff ffc5 	bl	12514 <do_ecb>

	if (cipher_text_le) {
   1258a:	b125      	cbz	r5, 12596 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1258c:	2210      	movs	r2, #16
   1258e:	a908      	add	r1, sp, #32
   12590:	4628      	mov	r0, r5
   12592:	f7f4 f801 	bl	6598 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   12596:	b124      	cbz	r4, 125a2 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   12598:	2210      	movs	r2, #16
   1259a:	a908      	add	r1, sp, #32
   1259c:	4620      	mov	r0, r4
   1259e:	f005 fa2d 	bl	179fc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   125a2:	b00c      	add	sp, #48	; 0x30
   125a4:	bd70      	pop	{r4, r5, r6, pc}
   125a6:	bf00      	nop

000125a8 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   125a8:	4b04      	ldr	r3, [pc, #16]	; (125bc <isr_radio+0x14>)
   125aa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   125ae:	b123      	cbz	r3, 125ba <isr_radio+0x12>
		isr_cb(isr_cb_param);
   125b0:	4a03      	ldr	r2, [pc, #12]	; (125c0 <isr_radio+0x18>)
   125b2:	4b04      	ldr	r3, [pc, #16]	; (125c4 <isr_radio+0x1c>)
   125b4:	6810      	ldr	r0, [r2, #0]
   125b6:	681b      	ldr	r3, [r3, #0]
   125b8:	4718      	bx	r3
}
   125ba:	4770      	bx	lr
   125bc:	40001000 	.word	0x40001000
   125c0:	2000237c 	.word	0x2000237c
   125c4:	20002380 	.word	0x20002380

000125c8 <radio_isr_set>:
{
   125c8:	b538      	push	{r3, r4, r5, lr}
   125ca:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   125cc:	2001      	movs	r0, #1
{
   125ce:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   125d0:	f7ef fe6e 	bl	22b0 <arch_irq_disable>
	isr_cb = cb;
   125d4:	4b08      	ldr	r3, [pc, #32]	; (125f8 <radio_isr_set+0x30>)
	isr_cb_param = param;
   125d6:	4a09      	ldr	r2, [pc, #36]	; (125fc <radio_isr_set+0x34>)
	isr_cb = cb;
   125d8:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   125da:	4909      	ldr	r1, [pc, #36]	; (12600 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   125dc:	4b09      	ldr	r3, [pc, #36]	; (12604 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   125de:	6015      	str	r5, [r2, #0]
   125e0:	2010      	movs	r0, #16
   125e2:	2202      	movs	r2, #2
   125e4:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   125e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   125ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   125f0:	2001      	movs	r0, #1
   125f2:	f7ef be4f 	b.w	2294 <arch_irq_enable>
   125f6:	bf00      	nop
   125f8:	20002380 	.word	0x20002380
   125fc:	2000237c 	.word	0x2000237c
   12600:	40001000 	.word	0x40001000
   12604:	e000e100 	.word	0xe000e100

00012608 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1260c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   12610:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12612:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   12616:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1261a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1261e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   12622:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   12626:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1262a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1262e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   12632:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   12636:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1263a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1263e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   12642:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   12646:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1264a:	4770      	bx	lr

0001264c <radio_reset>:
{
   1264c:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1264e:	2001      	movs	r0, #1
   12650:	f7ef fe2e 	bl	22b0 <arch_irq_disable>
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   12654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	NRF_RADIO->PCNF1 = HAL_RADIO_RESET_VALUE_PCNF1;
   12658:	491b      	ldr	r1, [pc, #108]	; (126c8 <radio_reset+0x7c>)
   1265a:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1265e:	2000      	movs	r0, #0
   12660:	f8c1 0518 	str.w	r0, [r1, #1304]	; 0x518
   12664:	1c59      	adds	r1, r3, #1
   12666:	d01f      	beq.n	126a8 <radio_reset+0x5c>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   12668:	2b06      	cmp	r3, #6
   1266a:	d009      	beq.n	12680 <radio_reset+0x34>
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1266c:	4b17      	ldr	r3, [pc, #92]	; (126cc <radio_reset+0x80>)
   1266e:	f44f 5190 	mov.w	r1, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   12672:	f44f 5210 	mov.w	r2, #9216	; 0x2400
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   12676:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1267a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   1267e:	bd08      	pop	{r3, pc}
                var2 = *(uint32_t *)0x10000134ul;
   12680:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
            {
                switch(var2)
   12684:	3b03      	subs	r3, #3
   12686:	2b04      	cmp	r3, #4
   12688:	d8f0      	bhi.n	1266c <radio_reset+0x20>
	if (nrf52_errata_102() || nrf52_errata_106() || nrf52_errata_107()) {
   1268a:	4a11      	ldr	r2, [pc, #68]	; (126d0 <radio_reset+0x84>)
   1268c:	5cd2      	ldrb	r2, [r2, r3]
   1268e:	b1b2      	cbz	r2, 126be <radio_reset+0x72>
			((*(volatile uint32_t *)0x40001774) & 0xfffffffe)
   12690:	4a0d      	ldr	r2, [pc, #52]	; (126c8 <radio_reset+0x7c>)
   12692:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
			| 0x01000000;
   12696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1269a:	f023 0301 	bic.w	r3, r3, #1
   1269e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
		*(volatile uint32_t *)0x40001774 =
   126a2:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
   126a6:	e7e1      	b.n	1266c <radio_reset+0x20>
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   126a8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   126ac:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            if (var1 == 0x06)
   126b0:	2a06      	cmp	r2, #6
   126b2:	d1db      	bne.n	1266c <radio_reset+0x20>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   126b4:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   126b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   126bc:	e7e2      	b.n	12684 <radio_reset+0x38>
	if (nrf52_errata_102() || nrf52_errata_106() || nrf52_errata_107()) {
   126be:	4a05      	ldr	r2, [pc, #20]	; (126d4 <radio_reset+0x88>)
   126c0:	5cd3      	ldrb	r3, [r2, r3]
   126c2:	2b00      	cmp	r3, #0
   126c4:	d0d2      	beq.n	1266c <radio_reset+0x20>
   126c6:	e7e3      	b.n	12690 <radio_reset+0x44>
   126c8:	40001000 	.word	0x40001000
   126cc:	4001f000 	.word	0x4001f000
   126d0:	0001c66c 	.word	0x0001c66c
   126d4:	0001c664 	.word	0x0001c664

000126d8 <radio_stop>:
}
   126d8:	4770      	bx	lr
   126da:	bf00      	nop

000126dc <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   126dc:	4b05      	ldr	r3, [pc, #20]	; (126f4 <radio_phy_set+0x18>)
	uint32_t mode;

	switch (phy) {
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   126de:	2802      	cmp	r0, #2
   126e0:	bf0c      	ite	eq
   126e2:	2104      	moveq	r1, #4
   126e4:	2103      	movne	r1, #3
	NRF_RADIO->MODECNF0 = ((RADIO_MODECNF0_DTX_Center <<
   126e6:	f240 2201 	movw	r2, #513	; 0x201
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   126ea:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 = ((RADIO_MODECNF0_DTX_Center <<
   126ee:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   126f2:	4770      	bx	lr
   126f4:	40001000 	.word	0x40001000

000126f8 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   126f8:	4b01      	ldr	r3, [pc, #4]	; (12700 <radio_tx_power_set+0x8>)
   126fa:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   126fe:	4770      	bx	lr
   12700:	40001000 	.word	0x40001000

00012704 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   12704:	4b01      	ldr	r3, [pc, #4]	; (1270c <radio_freq_chan_set+0x8>)
   12706:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1270a:	4770      	bx	lr
   1270c:	40001000 	.word	0x40001000

00012710 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   12710:	4b07      	ldr	r3, [pc, #28]	; (12730 <radio_whiten_iv_set+0x20>)
   12712:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   12716:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1271a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1271e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   12722:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12726:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1272a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1272e:	4770      	bx	lr
   12730:	40001000 	.word	0x40001000

00012734 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   12734:	4a0a      	ldr	r2, [pc, #40]	; (12760 <radio_aa_set+0x2c>)
   12736:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   12738:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1273a:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1273e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   12742:	78c3      	ldrb	r3, [r0, #3]
   12744:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   12748:	7843      	ldrb	r3, [r0, #1]
   1274a:	f890 c002 	ldrb.w	ip, [r0, #2]
   1274e:	7801      	ldrb	r1, [r0, #0]
   12750:	041b      	lsls	r3, r3, #16
   12752:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   12756:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1275a:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1275e:	4770      	bx	lr
   12760:	40001000 	.word	0x40001000

00012764 <radio_pkt_configure>:
	switch (phy) {
   12764:	f3c2 0342 	ubfx	r3, r2, #1, #3
   12768:	f1a3 0302 	sub.w	r3, r3, #2
   1276c:	fab3 f383 	clz	r3, r3
   12770:	095b      	lsrs	r3, r3, #5
   12772:	061b      	lsls	r3, r3, #24
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   12774:	07d2      	lsls	r2, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   12776:	bf48      	it	mi
   12778:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   1277c:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   12780:	4a09      	ldr	r2, [pc, #36]	; (127a8 <radio_pkt_configure+0x44>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   12782:	4318      	orrs	r0, r3
   12784:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   12788:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1278c:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   12790:	4b06      	ldr	r3, [pc, #24]	; (127ac <radio_pkt_configure+0x48>)
   12792:	4003      	ands	r3, r0
   12794:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   12798:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1279c:	4319      	orrs	r1, r3
   1279e:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   127a2:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   127a6:	4770      	bx	lr
   127a8:	40001000 	.word	0x40001000
   127ac:	fef80000 	.word	0xfef80000

000127b0 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   127b0:	4b01      	ldr	r3, [pc, #4]	; (127b8 <radio_pkt_rx_set+0x8>)
   127b2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   127b6:	4770      	bx	lr
   127b8:	40001000 	.word	0x40001000

000127bc <radio_pkt_tx_set>:
void radio_pkt_tx_set(void *tx_packet)
   127bc:	4b01      	ldr	r3, [pc, #4]	; (127c4 <radio_pkt_tx_set+0x8>)
   127be:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   127c2:	4770      	bx	lr
   127c4:	40001000 	.word	0x40001000

000127c8 <radio_tx_ready_delay_get>:
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_US;
   127c8:	2802      	cmp	r0, #2
}
   127ca:	bf0c      	ite	eq
   127cc:	2028      	moveq	r0, #40	; 0x28
   127ce:	2029      	movne	r0, #41	; 0x29
   127d0:	4770      	bx	lr
   127d2:	bf00      	nop

000127d4 <radio_tx_chain_delay_get>:
}
   127d4:	2001      	movs	r0, #1
   127d6:	4770      	bx	lr

000127d8 <radio_rx_ready_delay_get>:
}
   127d8:	2029      	movs	r0, #41	; 0x29
   127da:	4770      	bx	lr

000127dc <radio_rx_chain_delay_get>:
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_US;
   127dc:	2802      	cmp	r0, #2
}
   127de:	bf0c      	ite	eq
   127e0:	2006      	moveq	r0, #6
   127e2:	200a      	movne	r0, #10
   127e4:	4770      	bx	lr
   127e6:	bf00      	nop

000127e8 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   127e8:	4b01      	ldr	r3, [pc, #4]	; (127f0 <radio_tx_enable+0x8>)
   127ea:	2201      	movs	r2, #1
   127ec:	601a      	str	r2, [r3, #0]
}
   127ee:	4770      	bx	lr
   127f0:	40001000 	.word	0x40001000

000127f4 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   127f4:	4a07      	ldr	r2, [pc, #28]	; (12814 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   127f6:	4908      	ldr	r1, [pc, #32]	; (12818 <radio_disable+0x24>)
{
   127f8:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   127fa:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   127fc:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   12800:	2000      	movs	r0, #0
   12802:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   12806:	6053      	str	r3, [r2, #4]
   12808:	60d3      	str	r3, [r2, #12]
   1280a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1280e:	610b      	str	r3, [r1, #16]
}
   12810:	bc10      	pop	{r4}
   12812:	4770      	bx	lr
   12814:	4001f000 	.word	0x4001f000
   12818:	40001000 	.word	0x40001000

0001281c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1281c:	4b04      	ldr	r3, [pc, #16]	; (12830 <radio_status_reset+0x14>)
   1281e:	2200      	movs	r2, #0
   12820:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   12824:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   12828:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1282c:	4770      	bx	lr
   1282e:	bf00      	nop
   12830:	40001000 	.word	0x40001000

00012834 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   12834:	4b03      	ldr	r3, [pc, #12]	; (12844 <radio_is_ready+0x10>)
   12836:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1283a:	3800      	subs	r0, #0
   1283c:	bf18      	it	ne
   1283e:	2001      	movne	r0, #1
   12840:	4770      	bx	lr
   12842:	bf00      	nop
   12844:	40001000 	.word	0x40001000

00012848 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   12848:	4b03      	ldr	r3, [pc, #12]	; (12858 <radio_is_done+0x10>)
   1284a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1284e:	3800      	subs	r0, #0
   12850:	bf18      	it	ne
   12852:	2001      	movne	r0, #1
   12854:	4770      	bx	lr
   12856:	bf00      	nop
   12858:	40001000 	.word	0x40001000

0001285c <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1285c:	4b03      	ldr	r3, [pc, #12]	; (1286c <radio_is_idle+0x10>)
   1285e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   12862:	fab0 f080 	clz	r0, r0
   12866:	0940      	lsrs	r0, r0, #5
   12868:	4770      	bx	lr
   1286a:	bf00      	nop
   1286c:	40001000 	.word	0x40001000

00012870 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   12870:	4b04      	ldr	r3, [pc, #16]	; (12884 <radio_crc_configure+0x14>)
   12872:	f240 1203 	movw	r2, #259	; 0x103
   12876:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1287a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1287e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   12882:	4770      	bx	lr
   12884:	40001000 	.word	0x40001000

00012888 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   12888:	4b03      	ldr	r3, [pc, #12]	; (12898 <radio_crc_is_valid+0x10>)
   1288a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1288e:	3800      	subs	r0, #0
   12890:	bf18      	it	ne
   12892:	2001      	movne	r0, #1
   12894:	4770      	bx	lr
   12896:	bf00      	nop
   12898:	40001000 	.word	0x40001000

0001289c <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   1289c:	4800      	ldr	r0, [pc, #0]	; (128a0 <radio_pkt_empty_get+0x4>)
   1289e:	4770      	bx	lr
   128a0:	20002378 	.word	0x20002378

000128a4 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   128a4:	4800      	ldr	r0, [pc, #0]	; (128a8 <radio_pkt_scratch_get+0x4>)
   128a6:	4770      	bx	lr
   128a8:	20002274 	.word	0x20002274

000128ac <radio_pkt_decrypt_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_decrypt_get(void)
{
	return _pkt_decrypt;
}
   128ac:	4800      	ldr	r0, [pc, #0]	; (128b0 <radio_pkt_decrypt_get+0x4>)
   128ae:	4770      	bx	lr
   128b0:	20002170 	.word	0x20002170

000128b4 <radio_switch_complete_and_rx>:
	sw_tifs_toggle &= 1U;
}
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(uint8_t phy_rx)
{
   128b4:	b4f0      	push	{r4, r5, r6, r7}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   128b6:	4b1d      	ldr	r3, [pc, #116]	; (1292c <radio_switch_complete_and_rx+0x78>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   128b8:	4d1d      	ldr	r5, [pc, #116]	; (12930 <radio_switch_complete_and_rx+0x7c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   128ba:	4e1e      	ldr	r6, [pc, #120]	; (12934 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   128bc:	4c1e      	ldr	r4, [pc, #120]	; (12938 <radio_switch_complete_and_rx+0x84>)
   128be:	4f1f      	ldr	r7, [pc, #124]	; (1293c <radio_switch_complete_and_rx+0x88>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   128c0:	2203      	movs	r2, #3
   128c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   128c6:	782a      	ldrb	r2, [r5, #0]
   128c8:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   128cc:	f102 030c 	add.w	r3, r2, #12
   128d0:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   128d2:	00d0      	lsls	r0, r2, #3
   128d4:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   128d6:	0091      	lsls	r1, r2, #2
   128d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   128dc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   128e0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   128e4:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   128e8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   128ec:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   128f0:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   128f4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   128f8:	4811      	ldr	r0, [pc, #68]	; (12940 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   128fa:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   128fe:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   12902:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   12906:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   12908:	bf8a      	itet	hi
   1290a:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1290e:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   12910:	3b2d      	subhi	r3, #45	; 0x2d
   12912:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   12916:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   12918:	4b06      	ldr	r3, [pc, #24]	; (12934 <radio_switch_complete_and_rx+0x80>)
   1291a:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   1291e:	f002 0201 	and.w	r2, r2, #1
   12922:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   12926:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   12928:	bcf0      	pop	{r4, r5, r6, r7}
   1292a:	4770      	bx	lr
   1292c:	40001000 	.word	0x40001000
   12930:	2000263f 	.word	0x2000263f
   12934:	4001f000 	.word	0x4001f000
   12938:	40009140 	.word	0x40009140
   1293c:	4000110c 	.word	0x4000110c
   12940:	40001004 	.word	0x40001004

00012944 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   12944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   12948:	4e28      	ldr	r6, [pc, #160]	; (129ec <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1294a:	4c29      	ldr	r4, [pc, #164]	; (129f0 <radio_switch_complete_and_tx+0xac>)
   1294c:	4f29      	ldr	r7, [pc, #164]	; (129f4 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1294e:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 129f8 <radio_switch_complete_and_tx+0xb4>
   12952:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 129fc <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   12956:	2303      	movs	r3, #3
   12958:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1295c:	7821      	ldrb	r1, [r4, #0]
   1295e:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   12962:	f101 030c 	add.w	r3, r1, #12
   12966:	b2db      	uxtb	r3, r3
   12968:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1296a:	00cd      	lsls	r5, r1, #3
   1296c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12970:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   12974:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   12978:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1297c:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12980:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   12984:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12988:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   1298c:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12990:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   12994:	f24a 234e 	movw	r3, #41550	; 0xa24e
   12998:	2a02      	cmp	r2, #2
   1299a:	bf18      	it	ne
   1299c:	461d      	movne	r5, r3

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   1299e:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   129a2:	f242 42b8 	movw	r2, #9400	; 0x24b8
   129a6:	f241 534a 	movw	r3, #5450	; 0x154a
   129aa:	2802      	cmp	r0, #2
   129ac:	bf18      	it	ne
   129ae:	4613      	movne	r3, r2
   129b0:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   129b4:	4a12      	ldr	r2, [pc, #72]	; (12a00 <radio_switch_complete_and_tx+0xbc>)
   129b6:	442b      	add	r3, r5
   129b8:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   129bc:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   129c0:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   129c4:	bf85      	ittet	hi
   129c6:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   129c8:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   129cc:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   129ce:	1a1b      	subhi	r3, r3, r0
   129d0:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   129d4:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   129d6:	4b08      	ldr	r3, [pc, #32]	; (129f8 <radio_switch_complete_and_tx+0xb4>)
   129d8:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   129dc:	f001 0101 	and.w	r1, r1, #1
   129e0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   129e4:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   129e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   129ea:	bf00      	nop
   129ec:	40001000 	.word	0x40001000
   129f0:	2000263f 	.word	0x2000263f
   129f4:	40009140 	.word	0x40009140
   129f8:	4001f000 	.word	0x4001f000
   129fc:	4000110c 	.word	0x4000110c
   12a00:	10624dd3 	.word	0x10624dd3

00012a04 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   12a04:	4904      	ldr	r1, [pc, #16]	; (12a18 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   12a06:	4b05      	ldr	r3, [pc, #20]	; (12a1c <radio_switch_complete_and_disable+0x18>)
   12a08:	2003      	movs	r0, #3
   12a0a:	f44f 6210 	mov.w	r2, #2304	; 0x900
   12a0e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   12a12:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   12a16:	4770      	bx	lr
   12a18:	40001000 	.word	0x40001000
   12a1c:	4001f000 	.word	0x4001f000

00012a20 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   12a20:	4b02      	ldr	r3, [pc, #8]	; (12a2c <radio_rssi_status_reset+0xc>)
   12a22:	2200      	movs	r2, #0
   12a24:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   12a28:	4770      	bx	lr
   12a2a:	bf00      	nop
   12a2c:	40001000 	.word	0x40001000

00012a30 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   12a30:	4b03      	ldr	r3, [pc, #12]	; (12a40 <radio_rssi_is_ready+0x10>)
   12a32:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   12a36:	3800      	subs	r0, #0
   12a38:	bf18      	it	ne
   12a3a:	2001      	movne	r0, #1
   12a3c:	4770      	bx	lr
   12a3e:	bf00      	nop
   12a40:	40001000 	.word	0x40001000

00012a44 <radio_filter_disable>:
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   12a44:	4a03      	ldr	r2, [pc, #12]	; (12a54 <radio_filter_disable+0x10>)
   12a46:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   12a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12a4e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   12a52:	4770      	bx	lr
   12a54:	40001000 	.word	0x40001000

00012a58 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   12a58:	4b02      	ldr	r3, [pc, #8]	; (12a64 <radio_filter_status_reset+0xc>)
   12a5a:	2200      	movs	r2, #0
   12a5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   12a60:	4770      	bx	lr
   12a62:	bf00      	nop
   12a64:	40001000 	.word	0x40001000

00012a68 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   12a68:	4b03      	ldr	r3, [pc, #12]	; (12a78 <radio_filter_has_match+0x10>)
   12a6a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   12a6e:	3800      	subs	r0, #0
   12a70:	bf18      	it	ne
   12a72:	2001      	movne	r0, #1
   12a74:	4770      	bx	lr
   12a76:	bf00      	nop
   12a78:	40001000 	.word	0x40001000

00012a7c <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   12a7c:	4b01      	ldr	r3, [pc, #4]	; (12a84 <radio_filter_match_get+0x8>)
   12a7e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   12a82:	4770      	bx	lr
   12a84:	40001000 	.word	0x40001000

00012a88 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   12a88:	4904      	ldr	r1, [pc, #16]	; (12a9c <radio_tmr_status_reset+0x14>)
   12a8a:	4b05      	ldr	r3, [pc, #20]	; (12aa0 <radio_tmr_status_reset+0x18>)
   12a8c:	4a05      	ldr	r2, [pc, #20]	; (12aa4 <radio_tmr_status_reset+0x1c>)
   12a8e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   12a92:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   12a96:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
#if defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX)
			BIT(HAL_TRIGGER_CRYPT_DELAY_PPI) |
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   12a9a:	4770      	bx	lr
   12a9c:	4000b000 	.word	0x4000b000
   12aa0:	4001f000 	.word	0x4001f000
   12aa4:	0e7000c0 	.word	0x0e7000c0

00012aa8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   12aa8:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <radio_tmr_tifs_set+0x10>)
   12aaa:	4a04      	ldr	r2, [pc, #16]	; (12abc <radio_tmr_tifs_set+0x14>)
   12aac:	781b      	ldrb	r3, [r3, #0]
   12aae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   12ab2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   12ab6:	4770      	bx	lr
   12ab8:	2000263f 	.word	0x2000263f
   12abc:	40009000 	.word	0x40009000

00012ac0 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   12ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/* Remove ticks and return positive remainder value in microseconds */
static inline void hal_ticker_remove_jitter(uint32_t *ticks,
					    uint32_t *remainder)
{
	/* Is remainder less than 1 us */
	if ((*remainder & BIT(31)) || !(*remainder / 1000000UL)) {
   12ac4:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   12ac8:	4d31      	ldr	r5, [pc, #196]	; (12b90 <radio_tmr_start+0xd0>)
   12aca:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   12ace:	42ab      	cmp	r3, r5
   12ad0:	4604      	mov	r4, r0
   12ad2:	d906      	bls.n	12ae2 <radio_tmr_start+0x22>
		*ticks -= 1U;
		*remainder += HAL_TICKER_CNTR_CLK_UNIT_FS / 1000UL;
   12ad4:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   12ad8:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		*ticks -= 1U;
   12adc:	3901      	subs	r1, #1
		*remainder += HAL_TICKER_CNTR_CLK_UNIT_FS / 1000UL;
   12ade:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12ae2:	4b2c      	ldr	r3, [pc, #176]	; (12b94 <radio_tmr_start+0xd4>)
	}

	/* pico seconds to micro seconds unit */
	*remainder /= 1000000UL;
   12ae4:	482c      	ldr	r0, [pc, #176]	; (12b98 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   12ae6:	4d2d      	ldr	r5, [pc, #180]	; (12b9c <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12ae8:	4e2d      	ldr	r6, [pc, #180]	; (12ba0 <radio_tmr_start+0xe0>)
   12aea:	2701      	movs	r7, #1
   12aec:	60df      	str	r7, [r3, #12]
	hal_ticker_remove_jitter(&ticks_start, &remainder);

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   12aee:	2700      	movs	r7, #0
   12af0:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
   12af4:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   12af8:	2704      	movs	r7, #4
   12afa:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
   12afe:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   12b00:	2702      	movs	r7, #2
   12b02:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   12b06:	4a27      	ldr	r2, [pc, #156]	; (12ba4 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   12b08:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   12b0c:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   12b10:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   12b14:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   12b18:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12b1a:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12b1e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   12b22:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   12b26:	b364      	cbz	r4, 12b82 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   12b28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   12b2c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   12b30:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   12b34:	4b1b      	ldr	r3, [pc, #108]	; (12ba4 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12b36:	4a1c      	ldr	r2, [pc, #112]	; (12ba8 <radio_tmr_start+0xe8>)
   12b38:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   12b3c:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   12b3e:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12b40:	f8df 8068 	ldr.w	r8, [pc, #104]	; 12bac <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12b44:	f8df e068 	ldr.w	lr, [pc, #104]	; 12bb0 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12b48:	f8df c068 	ldr.w	ip, [pc, #104]	; 12bb4 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12b4c:	4f1a      	ldr	r7, [pc, #104]	; (12bb8 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12b4e:	4e1b      	ldr	r6, [pc, #108]	; (12bbc <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12b50:	4d1b      	ldr	r5, [pc, #108]	; (12bc0 <radio_tmr_start+0x100>)
   12b52:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   12b54:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   12b58:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   12b5c:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   12b60:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   12b64:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12b66:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12b6a:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12b6e:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12b72:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12b76:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12b7a:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   12b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   12b82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   12b86:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   12b8a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   12b8e:	e7d1      	b.n	12b34 <radio_tmr_start+0x74>
   12b90:	7ff0bdbf 	.word	0x7ff0bdbf
   12b94:	40008000 	.word	0x40008000
   12b98:	431bde83 	.word	0x431bde83
   12b9c:	4000b000 	.word	0x4000b000
   12ba0:	4000b148 	.word	0x4000b148
   12ba4:	4001f000 	.word	0x4001f000
   12ba8:	40009000 	.word	0x40009000
   12bac:	4000110c 	.word	0x4000110c
   12bb0:	4000900c 	.word	0x4000900c
   12bb4:	40009140 	.word	0x40009140
   12bb8:	4001f004 	.word	0x4001f004
   12bbc:	40009144 	.word	0x40009144
   12bc0:	4001f00c 	.word	0x4001f00c

00012bc4 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   12bc4:	4b01      	ldr	r3, [pc, #4]	; (12bcc <radio_tmr_start_get+0x8>)
   12bc6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   12bca:	4770      	bx	lr
   12bcc:	4000b000 	.word	0x4000b000

00012bd0 <radio_tmr_stop>:
   12bd0:	4903      	ldr	r1, [pc, #12]	; (12be0 <radio_tmr_stop+0x10>)
   12bd2:	4a04      	ldr	r2, [pc, #16]	; (12be4 <radio_tmr_stop+0x14>)
   12bd4:	2301      	movs	r3, #1
   12bd6:	604b      	str	r3, [r1, #4]
   12bd8:	610b      	str	r3, [r1, #16]
   12bda:	6053      	str	r3, [r2, #4]
   12bdc:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   12bde:	4770      	bx	lr
   12be0:	40008000 	.word	0x40008000
   12be4:	40009000 	.word	0x40009000

00012be8 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   12be8:	4904      	ldr	r1, [pc, #16]	; (12bfc <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   12bea:	4b05      	ldr	r3, [pc, #20]	; (12c00 <radio_tmr_hcto_configure+0x18>)
   12bec:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   12bf0:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   12bf4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   12bf8:	4770      	bx	lr
   12bfa:	bf00      	nop
   12bfc:	40008000 	.word	0x40008000
   12c00:	4001f000 	.word	0x4001f000

00012c04 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12c04:	4b05      	ldr	r3, [pc, #20]	; (12c1c <radio_tmr_aa_capture+0x18>)
   12c06:	4806      	ldr	r0, [pc, #24]	; (12c20 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12c08:	4906      	ldr	r1, [pc, #24]	; (12c24 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   12c0a:	4a07      	ldr	r2, [pc, #28]	; (12c28 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12c0c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12c10:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   12c14:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   12c18:	4770      	bx	lr
   12c1a:	bf00      	nop
   12c1c:	4001f000 	.word	0x4001f000
   12c20:	40001100 	.word	0x40001100
   12c24:	40008040 	.word	0x40008040
   12c28:	04000080 	.word	0x04000080

00012c2c <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   12c2c:	4b01      	ldr	r3, [pc, #4]	; (12c34 <radio_tmr_aa_get+0x8>)
   12c2e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   12c32:	4770      	bx	lr
   12c34:	40008000 	.word	0x40008000

00012c38 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   12c38:	4b01      	ldr	r3, [pc, #4]	; (12c40 <radio_tmr_aa_save+0x8>)
   12c3a:	6018      	str	r0, [r3, #0]
}
   12c3c:	4770      	bx	lr
   12c3e:	bf00      	nop
   12c40:	2000216c 	.word	0x2000216c

00012c44 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   12c44:	4b01      	ldr	r3, [pc, #4]	; (12c4c <radio_tmr_aa_restore+0x8>)
}
   12c46:	6818      	ldr	r0, [r3, #0]
   12c48:	4770      	bx	lr
   12c4a:	bf00      	nop
   12c4c:	2000216c 	.word	0x2000216c

00012c50 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   12c50:	4b01      	ldr	r3, [pc, #4]	; (12c58 <radio_tmr_ready_get+0x8>)
   12c52:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   12c56:	4770      	bx	lr
   12c58:	40008000 	.word	0x40008000

00012c5c <radio_tmr_end_capture>:
   12c5c:	4b02      	ldr	r3, [pc, #8]	; (12c68 <radio_tmr_end_capture+0xc>)
   12c5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   12c62:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   12c66:	4770      	bx	lr
   12c68:	4001f000 	.word	0x4001f000

00012c6c <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   12c6c:	4b01      	ldr	r3, [pc, #4]	; (12c74 <radio_tmr_end_get+0x8>)
   12c6e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   12c72:	4770      	bx	lr
   12c74:	40008000 	.word	0x40008000

00012c78 <radio_tmr_tifs_base_get>:

uint32_t radio_tmr_tifs_base_get(void)
   12c78:	4b01      	ldr	r3, [pc, #4]	; (12c80 <radio_tmr_tifs_base_get+0x8>)
   12c7a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   12c7e:	4770      	bx	lr
   12c80:	40008000 	.word	0x40008000

00012c84 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12c84:	4b19      	ldr	r3, [pc, #100]	; (12cec <radio_ccm_rx_pkt_set+0x68>)
{
   12c86:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12c88:	2400      	movs	r4, #0
   12c8a:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   12c8e:	2902      	cmp	r1, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12c90:	f04f 0402 	mov.w	r4, #2
   12c94:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
{
   12c98:	4604      	mov	r4, r0
	switch (phy) {
   12c9a:	d020      	beq.n	12cde <radio_ccm_rx_pkt_set+0x5a>
   12c9c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   12ca0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
	default:
	case PHY_1M:
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   12ca4:	4912      	ldr	r1, [pc, #72]	; (12cf0 <radio_ccm_rx_pkt_set+0x6c>)
   12ca6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504

	/* MAXPACKETSIZE value 0x001B (27) - 0x00FB (251) bytes */
	NRF_CCM->MAXPACKETSIZE = max_len - 4U;
#endif

	NRF_CCM->MODE = mode;
   12caa:	4b10      	ldr	r3, [pc, #64]	; (12cec <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   12cac:	4811      	ldr	r0, [pc, #68]	; (12cf4 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->MODE = mode;
   12cae:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   12cb2:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
	NRF_CCM->SHORTS = 0;
   12cb6:	2100      	movs	r1, #0
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   12cb8:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   12cbc:	4c0e      	ldr	r4, [pc, #56]	; (12cf8 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   12cbe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12cc2:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   12cc4:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   12cc8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   12ccc:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12cd0:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12cd4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   12cd8:	601a      	str	r2, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   12cda:	bc10      	pop	{r4}
   12cdc:	4770      	bx	lr
   12cde:	4b07      	ldr	r3, [pc, #28]	; (12cfc <radio_ccm_rx_pkt_set+0x78>)
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   12ce0:	4907      	ldr	r1, [pc, #28]	; (12d00 <radio_ccm_rx_pkt_set+0x7c>)
   12ce2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   12ce6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   12cea:	e7de      	b.n	12caa <radio_ccm_rx_pkt_set+0x26>
   12cec:	4000f000 	.word	0x4000f000
   12cf0:	01000001 	.word	0x01000001
   12cf4:	20002274 	.word	0x20002274
   12cf8:	20002060 	.word	0x20002060
   12cfc:	4001f000 	.word	0x4001f000
   12d00:	01010001 	.word	0x01010001

00012d04 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12d04:	4b10      	ldr	r3, [pc, #64]	; (12d48 <radio_ccm_tx_pkt_set+0x44>)
{
   12d06:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12d08:	2200      	movs	r2, #0
{
   12d0a:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12d0c:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12d0e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12d12:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500

	/* MAXPACKETSIZE value 0x001B (27) - 0x00FB (251) bytes */
	NRF_CCM->MAXPACKETSIZE = max_len - 4U;
#endif

	NRF_CCM->MODE = mode;
   12d16:	480d      	ldr	r0, [pc, #52]	; (12d4c <radio_ccm_tx_pkt_set+0x48>)
   12d18:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   12d1c:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   12d20:	480b      	ldr	r0, [pc, #44]	; (12d50 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   12d22:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   12d26:	4c0b      	ldr	r4, [pc, #44]	; (12d54 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   12d28:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   12d2c:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   12d2e:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   12d32:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   12d36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12d3a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12d3e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   12d42:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   12d44:	bc10      	pop	{r4}
   12d46:	4770      	bx	lr
   12d48:	4000f000 	.word	0x4000f000
   12d4c:	01010000 	.word	0x01010000
   12d50:	20002274 	.word	0x20002274
   12d54:	20002060 	.word	0x20002060

00012d58 <radio_ccm_is_done>:

uint32_t radio_ccm_is_done(void)
{
   12d58:	b510      	push	{r4, lr}
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   12d5a:	4c12      	ldr	r4, [pc, #72]	; (12da4 <radio_ccm_is_done+0x4c>)
   12d5c:	2302      	movs	r3, #2
   12d5e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   12d62:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   12d66:	b96b      	cbnz	r3, 12d84 <radio_ccm_is_done+0x2c>
	__asm__ volatile(
   12d68:	f04f 0320 	mov.w	r3, #32
   12d6c:	f3ef 8011 	mrs	r0, BASEPRI
   12d70:	f383 8812 	msr	BASEPRI_MAX, r3
   12d74:	f3bf 8f6f 	isb	sy
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   12d78:	f7ef fa80 	bl	227c <arch_cpu_atomic_idle>
   12d7c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   12d80:	2b00      	cmp	r3, #0
   12d82:	d0f1      	beq.n	12d68 <radio_ccm_is_done+0x10>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   12d84:	4b07      	ldr	r3, [pc, #28]	; (12da4 <radio_ccm_is_done+0x4c>)
   12d86:	4a08      	ldr	r2, [pc, #32]	; (12da8 <radio_ccm_is_done+0x50>)
   12d88:	2002      	movs	r0, #2
   12d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12d8e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   12d92:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
		cpu_sleep();
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   12d96:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   12d9a:	fab0 f080 	clz	r0, r0
   12d9e:	0940      	lsrs	r0, r0, #5
   12da0:	bd10      	pop	{r4, pc}
   12da2:	bf00      	nop
   12da4:	4000f000 	.word	0x4000f000
   12da8:	e000e100 	.word	0xe000e100

00012dac <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   12dac:	4b03      	ldr	r3, [pc, #12]	; (12dbc <radio_ccm_mic_is_valid+0x10>)
   12dae:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12db2:	3800      	subs	r0, #0
   12db4:	bf18      	it	ne
   12db6:	2001      	movne	r0, #1
   12db8:	4770      	bx	lr
   12dba:	bf00      	nop
   12dbc:	4000f000 	.word	0x4000f000

00012dc0 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	switch (callee_id) {
   12dc0:	3901      	subs	r1, #1
   12dc2:	2901      	cmp	r1, #1
   12dc4:	d805      	bhi.n	12dd2 <mayfly_enable_cb+0x12>
	case MAYFLY_CALL_ID_WORKER:
		if (enable) {
			irq_enable(HAL_SWI_WORKER_IRQ);
   12dc6:	200b      	movs	r0, #11
		if (enable) {
   12dc8:	b10a      	cbz	r2, 12dce <mayfly_enable_cb+0xe>
			irq_enable(HAL_SWI_WORKER_IRQ);
   12dca:	f7ef ba63 	b.w	2294 <arch_irq_enable>
		} else {
			irq_disable(HAL_SWI_WORKER_IRQ);
   12dce:	f7ef ba6f 	b.w	22b0 <arch_irq_disable>
{
   12dd2:	b508      	push	{r3, lr}
			irq_disable(HAL_SWI_JOB_IRQ);
		}
		break;

	default:
		LL_ASSERT(0);
   12dd4:	4a06      	ldr	r2, [pc, #24]	; (12df0 <mayfly_enable_cb+0x30>)
   12dd6:	4907      	ldr	r1, [pc, #28]	; (12df4 <mayfly_enable_cb+0x34>)
   12dd8:	4807      	ldr	r0, [pc, #28]	; (12df8 <mayfly_enable_cb+0x38>)
   12dda:	232d      	movs	r3, #45	; 0x2d
   12ddc:	f004 fb81 	bl	174e2 <assert_print>
   12de0:	4040      	eors	r0, r0
   12de2:	f380 8811 	msr	BASEPRI, r0
   12de6:	f04f 0003 	mov.w	r0, #3
   12dea:	df02      	svc	2
		break;
	}
}
   12dec:	bd08      	pop	{r3, pc}
   12dee:	bf00      	nop
   12df0:	0001c674 	.word	0x0001c674
   12df4:	0001b908 	.word	0x0001b908
   12df8:	0001b844 	.word	0x0001b844

00012dfc <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   12dfc:	b129      	cbz	r1, 12e0a <mayfly_is_enabled+0xe>
   12dfe:	3901      	subs	r1, #1
   12e00:	2901      	cmp	r1, #1
   12e02:	d805      	bhi.n	12e10 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   12e04:	200b      	movs	r0, #11
   12e06:	f7ef ba67 	b.w	22d8 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   12e0a:	2018      	movs	r0, #24
   12e0c:	f7ef ba64 	b.w	22d8 <arch_irq_is_enabled>
{
   12e10:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   12e12:	4a07      	ldr	r2, [pc, #28]	; (12e30 <mayfly_is_enabled+0x34>)
   12e14:	4907      	ldr	r1, [pc, #28]	; (12e34 <mayfly_is_enabled+0x38>)
   12e16:	4808      	ldr	r0, [pc, #32]	; (12e38 <mayfly_is_enabled+0x3c>)
   12e18:	2341      	movs	r3, #65	; 0x41
   12e1a:	f004 fb62 	bl	174e2 <assert_print>
   12e1e:	4040      	eors	r0, r0
   12e20:	f380 8811 	msr	BASEPRI, r0
   12e24:	f04f 0003 	mov.w	r0, #3
   12e28:	df02      	svc	2
		break;
	}

	return 0;
}
   12e2a:	2000      	movs	r0, #0
   12e2c:	bd08      	pop	{r3, pc}
   12e2e:	bf00      	nop
   12e30:	0001c674 	.word	0x0001c674
   12e34:	0001b908 	.word	0x0001b908
   12e38:	0001b844 	.word	0x0001b844

00012e3c <mayfly_prio_is_equal>:
#endif /* !CONFIG_BT_CTLR_ZLI */
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   12e3c:	4288      	cmp	r0, r1
   12e3e:	d00f      	beq.n	12e60 <mayfly_prio_is_equal+0x24>
		(caller_id == callee_id) ||
   12e40:	2801      	cmp	r0, #1
   12e42:	d007      	beq.n	12e54 <mayfly_prio_is_equal+0x18>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   12e44:	2802      	cmp	r0, #2
   12e46:	d10d      	bne.n	12e64 <mayfly_prio_is_equal+0x28>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   12e48:	f1a1 0001 	sub.w	r0, r1, #1
   12e4c:	fab0 f080 	clz	r0, r0
   12e50:	0940      	lsrs	r0, r0, #5
   12e52:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   12e54:	f1a1 0002 	sub.w	r0, r1, #2
   12e58:	fab0 f080 	clz	r0, r0
   12e5c:	0940      	lsrs	r0, r0, #5
   12e5e:	4770      	bx	lr
   12e60:	2001      	movs	r0, #1
   12e62:	4770      	bx	lr
   12e64:	2000      	movs	r0, #0
#endif
	       0;
}
   12e66:	4770      	bx	lr

00012e68 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   12e68:	2901      	cmp	r1, #1
{
   12e6a:	b508      	push	{r3, lr}
	switch (callee_id) {
   12e6c:	d00f      	beq.n	12e8e <mayfly_pend+0x26>
   12e6e:	2902      	cmp	r1, #2
   12e70:	d00d      	beq.n	12e8e <mayfly_pend+0x26>
   12e72:	b191      	cbz	r1, 12e9a <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   12e74:	4a0c      	ldr	r2, [pc, #48]	; (12ea8 <mayfly_pend+0x40>)
   12e76:	490d      	ldr	r1, [pc, #52]	; (12eac <mayfly_pend+0x44>)
   12e78:	480d      	ldr	r0, [pc, #52]	; (12eb0 <mayfly_pend+0x48>)
   12e7a:	237b      	movs	r3, #123	; 0x7b
   12e7c:	f004 fb31 	bl	174e2 <assert_print>
   12e80:	4040      	eors	r0, r0
   12e82:	f380 8811 	msr	BASEPRI, r0
   12e86:	f04f 0003 	mov.w	r0, #3
   12e8a:	df02      	svc	2
		break;
	}
}
   12e8c:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12e8e:	4b09      	ldr	r3, [pc, #36]	; (12eb4 <mayfly_pend+0x4c>)
   12e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12e94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   12e98:	bd08      	pop	{r3, pc}
   12e9a:	4b06      	ldr	r3, [pc, #24]	; (12eb4 <mayfly_pend+0x4c>)
   12e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   12ea0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   12ea4:	bd08      	pop	{r3, pc}
   12ea6:	bf00      	nop
   12ea8:	0001c674 	.word	0x0001c674
   12eac:	0001b908 	.word	0x0001b908
   12eb0:	0001b844 	.word	0x0001b844
   12eb4:	e000e100 	.word	0xe000e100

00012eb8 <mayfly_is_running>:

uint32_t mayfly_is_running(void)
{
   12eb8:	b508      	push	{r3, lr}
	return k_is_in_isr();
   12eba:	f007 fb6c 	bl	1a596 <k_is_in_isr>
}
   12ebe:	bd08      	pop	{r3, pc}

00012ec0 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12ec0:	2803      	cmp	r0, #3
{
   12ec2:	b510      	push	{r4, lr}
   12ec4:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12ec6:	d804      	bhi.n	12ed2 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   12ec8:	4b11      	ldr	r3, [pc, #68]	; (12f10 <hal_ticker_instance0_caller_id_get+0x50>)
   12eca:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12ecc:	b18c      	cbz	r4, 12ef2 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   12ece:	4620      	mov	r0, r4
   12ed0:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12ed2:	4a10      	ldr	r2, [pc, #64]	; (12f14 <hal_ticker_instance0_caller_id_get+0x54>)
   12ed4:	4910      	ldr	r1, [pc, #64]	; (12f18 <hal_ticker_instance0_caller_id_get+0x58>)
   12ed6:	4811      	ldr	r0, [pc, #68]	; (12f1c <hal_ticker_instance0_caller_id_get+0x5c>)
   12ed8:	2328      	movs	r3, #40	; 0x28
   12eda:	f004 fb02 	bl	174e2 <assert_print>
   12ede:	4040      	eors	r0, r0
   12ee0:	f380 8811 	msr	BASEPRI, r0
   12ee4:	f04f 0003 	mov.w	r0, #3
   12ee8:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   12eea:	4b09      	ldr	r3, [pc, #36]	; (12f10 <hal_ticker_instance0_caller_id_get+0x50>)
   12eec:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12eee:	2c00      	cmp	r4, #0
   12ef0:	d1ed      	bne.n	12ece <hal_ticker_instance0_caller_id_get+0xe>
   12ef2:	4a08      	ldr	r2, [pc, #32]	; (12f14 <hal_ticker_instance0_caller_id_get+0x54>)
   12ef4:	490a      	ldr	r1, [pc, #40]	; (12f20 <hal_ticker_instance0_caller_id_get+0x60>)
   12ef6:	4809      	ldr	r0, [pc, #36]	; (12f1c <hal_ticker_instance0_caller_id_get+0x5c>)
   12ef8:	232b      	movs	r3, #43	; 0x2b
   12efa:	f004 faf2 	bl	174e2 <assert_print>
   12efe:	4040      	eors	r0, r0
   12f00:	f380 8811 	msr	BASEPRI, r0
   12f04:	f04f 0003 	mov.w	r0, #3
   12f08:	df02      	svc	2
}
   12f0a:	4620      	mov	r0, r4
   12f0c:	bd10      	pop	{r4, pc}
   12f0e:	bf00      	nop
   12f10:	0001c744 	.word	0x0001c744
   12f14:	0001c6c4 	.word	0x0001c6c4
   12f18:	0001c714 	.word	0x0001c714
   12f1c:	0001b844 	.word	0x0001b844
   12f20:	0001c734 	.word	0x0001c734

00012f24 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   12f24:	3801      	subs	r0, #1
{
   12f26:	b510      	push	{r4, lr}
   12f28:	461c      	mov	r4, r3
	switch (caller_id) {
   12f2a:	2804      	cmp	r0, #4
   12f2c:	f200 8082 	bhi.w	13034 <hal_ticker_instance0_sched+0x110>
   12f30:	e8df f000 	tbb	[pc, r0]
   12f34:	3f302112 	.word	0x3f302112
   12f38:	03          	.byte	0x03
   12f39:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   12f3a:	2904      	cmp	r1, #4
   12f3c:	d04a      	beq.n	12fd4 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   12f3e:	4a44      	ldr	r2, [pc, #272]	; (13050 <hal_ticker_instance0_sched+0x12c>)
   12f40:	4944      	ldr	r1, [pc, #272]	; (13054 <hal_ticker_instance0_sched+0x130>)
   12f42:	4845      	ldr	r0, [pc, #276]	; (13058 <hal_ticker_instance0_sched+0x134>)
   12f44:	23b7      	movs	r3, #183	; 0xb7
   12f46:	f004 facc 	bl	174e2 <assert_print>
   12f4a:	4040      	eors	r0, r0
   12f4c:	f380 8811 	msr	BASEPRI, r0
   12f50:	f04f 0003 	mov.w	r0, #3
   12f54:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   12f56:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   12f58:	2904      	cmp	r1, #4
   12f5a:	d043      	beq.n	12fe4 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   12f5c:	4a3c      	ldr	r2, [pc, #240]	; (13050 <hal_ticker_instance0_sched+0x12c>)
   12f5e:	493d      	ldr	r1, [pc, #244]	; (13054 <hal_ticker_instance0_sched+0x130>)
   12f60:	483d      	ldr	r0, [pc, #244]	; (13058 <hal_ticker_instance0_sched+0x134>)
   12f62:	234b      	movs	r3, #75	; 0x4b
   12f64:	f004 fabd 	bl	174e2 <assert_print>
   12f68:	4040      	eors	r0, r0
   12f6a:	f380 8811 	msr	BASEPRI, r0
   12f6e:	f04f 0003 	mov.w	r0, #3
   12f72:	df02      	svc	2
}
   12f74:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   12f76:	2903      	cmp	r1, #3
   12f78:	d03c      	beq.n	12ff4 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   12f7a:	4a35      	ldr	r2, [pc, #212]	; (13050 <hal_ticker_instance0_sched+0x12c>)
   12f7c:	4935      	ldr	r1, [pc, #212]	; (13054 <hal_ticker_instance0_sched+0x130>)
   12f7e:	4836      	ldr	r0, [pc, #216]	; (13058 <hal_ticker_instance0_sched+0x134>)
   12f80:	2362      	movs	r3, #98	; 0x62
   12f82:	f004 faae 	bl	174e2 <assert_print>
   12f86:	4040      	eors	r0, r0
   12f88:	f380 8811 	msr	BASEPRI, r0
   12f8c:	f04f 0003 	mov.w	r0, #3
   12f90:	df02      	svc	2
}
   12f92:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   12f94:	2904      	cmp	r1, #4
   12f96:	d035      	beq.n	13004 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   12f98:	4a2d      	ldr	r2, [pc, #180]	; (13050 <hal_ticker_instance0_sched+0x12c>)
   12f9a:	492e      	ldr	r1, [pc, #184]	; (13054 <hal_ticker_instance0_sched+0x130>)
   12f9c:	482e      	ldr	r0, [pc, #184]	; (13058 <hal_ticker_instance0_sched+0x134>)
   12f9e:	2379      	movs	r3, #121	; 0x79
   12fa0:	f004 fa9f 	bl	174e2 <assert_print>
   12fa4:	4040      	eors	r0, r0
   12fa6:	f380 8811 	msr	BASEPRI, r0
   12faa:	f04f 0003 	mov.w	r0, #3
   12fae:	df02      	svc	2
}
   12fb0:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   12fb2:	2903      	cmp	r1, #3
   12fb4:	d036      	beq.n	13024 <hal_ticker_instance0_sched+0x100>
   12fb6:	2904      	cmp	r1, #4
   12fb8:	d02c      	beq.n	13014 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   12fba:	4a25      	ldr	r2, [pc, #148]	; (13050 <hal_ticker_instance0_sched+0x12c>)
   12fbc:	4925      	ldr	r1, [pc, #148]	; (13054 <hal_ticker_instance0_sched+0x130>)
   12fbe:	4826      	ldr	r0, [pc, #152]	; (13058 <hal_ticker_instance0_sched+0x134>)
   12fc0:	239f      	movs	r3, #159	; 0x9f
   12fc2:	f004 fa8e 	bl	174e2 <assert_print>
   12fc6:	4040      	eors	r0, r0
   12fc8:	f380 8811 	msr	BASEPRI, r0
   12fcc:	f04f 0003 	mov.w	r0, #3
   12fd0:	df02      	svc	2
}
   12fd2:	bd10      	pop	{r4, pc}
			m.param = instance;
   12fd4:	4b21      	ldr	r3, [pc, #132]	; (1305c <hal_ticker_instance0_sched+0x138>)
   12fd6:	609c      	str	r4, [r3, #8]
}
   12fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12fdc:	2102      	movs	r1, #2
   12fde:	2003      	movs	r0, #3
   12fe0:	f7f3 bb78 	b.w	66d4 <mayfly_enqueue>
			m.param = instance;
   12fe4:	4b1e      	ldr	r3, [pc, #120]	; (13060 <hal_ticker_instance0_sched+0x13c>)
   12fe6:	609c      	str	r4, [r3, #8]
}
   12fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   12fec:	2102      	movs	r1, #2
   12fee:	2000      	movs	r0, #0
   12ff0:	f7f3 bb70 	b.w	66d4 <mayfly_enqueue>
			m.param = instance;
   12ff4:	4b1b      	ldr	r3, [pc, #108]	; (13064 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   12ff6:	2101      	movs	r1, #1
			m.param = instance;
   12ff8:	609c      	str	r4, [r3, #8]
}
   12ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   12ffe:	4608      	mov	r0, r1
   13000:	f7f3 bb68 	b.w	66d4 <mayfly_enqueue>
			m.param = instance;
   13004:	4b18      	ldr	r3, [pc, #96]	; (13068 <hal_ticker_instance0_sched+0x144>)
   13006:	609c      	str	r4, [r3, #8]
}
   13008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1300c:	2102      	movs	r1, #2
   1300e:	2001      	movs	r0, #1
   13010:	f7f3 bb60 	b.w	66d4 <mayfly_enqueue>
			m.param = instance;
   13014:	4b15      	ldr	r3, [pc, #84]	; (1306c <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13016:	2102      	movs	r1, #2
			m.param = instance;
   13018:	609c      	str	r4, [r3, #8]
}
   1301a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1301e:	4608      	mov	r0, r1
   13020:	f7f3 bb58 	b.w	66d4 <mayfly_enqueue>
			m.param = instance;
   13024:	4b12      	ldr	r3, [pc, #72]	; (13070 <hal_ticker_instance0_sched+0x14c>)
   13026:	609c      	str	r4, [r3, #8]
}
   13028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1302c:	2101      	movs	r1, #1
   1302e:	2002      	movs	r0, #2
   13030:	f7f3 bb50 	b.w	66d4 <mayfly_enqueue>
		LL_ASSERT(0);
   13034:	4a06      	ldr	r2, [pc, #24]	; (13050 <hal_ticker_instance0_sched+0x12c>)
   13036:	4907      	ldr	r1, [pc, #28]	; (13054 <hal_ticker_instance0_sched+0x130>)
   13038:	4807      	ldr	r0, [pc, #28]	; (13058 <hal_ticker_instance0_sched+0x134>)
   1303a:	23bd      	movs	r3, #189	; 0xbd
   1303c:	f004 fa51 	bl	174e2 <assert_print>
   13040:	4040      	eors	r0, r0
   13042:	f380 8811 	msr	BASEPRI, r0
   13046:	f04f 0003 	mov.w	r0, #3
   1304a:	df02      	svc	2
}
   1304c:	bd10      	pop	{r4, pc}
   1304e:	bf00      	nop
   13050:	0001c6c4 	.word	0x0001c6c4
   13054:	0001b908 	.word	0x0001b908
   13058:	0001b844 	.word	0x0001b844
   1305c:	20000650 	.word	0x20000650
   13060:	200006a0 	.word	0x200006a0
   13064:	20000690 	.word	0x20000690
   13068:	20000680 	.word	0x20000680
   1306c:	20000660 	.word	0x20000660
   13070:	20000670 	.word	0x20000670

00013074 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   13074:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   13076:	2000      	movs	r0, #0
   13078:	f7ff ba44 	b.w	12504 <cntr_cmp_set>

0001307c <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   1307c:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1307e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   13082:	4684      	mov	ip, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   13084:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   13088:	3201      	adds	r2, #1
   1308a:	d03e      	beq.n	1310a <hci_vendor_read_static_addr+0x8e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1308c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13090:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   13094:	f010 0001 	ands.w	r0, r0, #1
   13098:	d100      	bne.n	1309c <hci_vendor_read_static_addr+0x20>

		return 1;
	}

	return 0;
}
   1309a:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1309c:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   130a0:	f8cc 3000 	str.w	r3, [ip]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   130a4:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   130a8:	f88c 3004 	strb.w	r3, [ip, #4]
	dst[1] = val >> 8;
   130ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   130b0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   130b4:	f88c 3005 	strb.w	r3, [ip, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   130b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   130bc:	3301      	adds	r3, #1
   130be:	d01c      	beq.n	130fa <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   130c0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   130c4:	3301      	adds	r3, #1
   130c6:	d018      	beq.n	130fa <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   130c8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   130cc:	3301      	adds	r3, #1
   130ce:	d014      	beq.n	130fa <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   130d0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   130d4:	3301      	adds	r3, #1
   130d6:	d010      	beq.n	130fa <hci_vendor_read_static_addr+0x7e>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   130d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   130dc:	f8cc 3006 	str.w	r3, [ip, #6]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   130e0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   130e4:	f8cc 300a 	str.w	r3, [ip, #10]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   130e8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   130ec:	f8cc 300e 	str.w	r3, [ip, #14]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   130f0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   130f4:	f8cc 3012 	str.w	r3, [ip, #18]
}
   130f8:	e005      	b.n	13106 <hci_vendor_read_static_addr+0x8a>
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   130fa:	2210      	movs	r2, #16
   130fc:	2100      	movs	r1, #0
   130fe:	f10c 0006 	add.w	r0, ip, #6
   13102:	f004 fc86 	bl	17a12 <memset>
		return 1;
   13106:	2001      	movs	r0, #1
}
   13108:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1310a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1310e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13112:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   13114:	4293      	cmp	r3, r2
   13116:	d1b9      	bne.n	1308c <hci_vendor_read_static_addr+0x10>
	return 0;
   13118:	2000      	movs	r0, #0
}
   1311a:	bd08      	pop	{r3, pc}

0001311c <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1311c:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1311e:	2210      	movs	r2, #16
{
   13120:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   13122:	2100      	movs	r1, #0
   13124:	f004 fc75 	bl	17a12 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   13128:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1312c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   13130:	3201      	adds	r2, #1
   13132:	d018      	beq.n	13166 <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   13134:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   13138:	3201      	adds	r2, #1
   1313a:	d014      	beq.n	13166 <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1313c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   13140:	3201      	adds	r2, #1
   13142:	d010      	beq.n	13166 <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   13144:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   13148:	3201      	adds	r2, #1
   1314a:	d00c      	beq.n	13166 <hci_vendor_read_key_hierarchy_roots+0x4a>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1314c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   13150:	6022      	str	r2, [r4, #0]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   13152:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   13156:	6062      	str	r2, [r4, #4]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   13158:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1315c:	60a2      	str	r2, [r4, #8]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1315e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   13162:	60e3      	str	r3, [r4, #12]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   13164:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   13166:	4620      	mov	r0, r4
   13168:	2210      	movs	r2, #16
}
   1316a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1316e:	2100      	movs	r1, #0
   13170:	f004 bc4f 	b.w	17a12 <memset>

00013174 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   13174:	4b02      	ldr	r3, [pc, #8]	; (13180 <net_buf_pool_get+0xc>)
   13176:	222c      	movs	r2, #44	; 0x2c
   13178:	fb02 3000 	mla	r0, r2, r0, r3
   1317c:	4770      	bx	lr
   1317e:	bf00      	nop
   13180:	20000928 	.word	0x20000928

00013184 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13184:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   13186:	4b06      	ldr	r3, [pc, #24]	; (131a0 <net_buf_id+0x1c>)
   13188:	212c      	movs	r1, #44	; 0x2c
   1318a:	fb01 3302 	mla	r3, r1, r2, r3
   1318e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   13190:	7f1b      	ldrb	r3, [r3, #28]
   13192:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   13194:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   13196:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1319a:	fbb0 f0f3 	udiv	r0, r0, r3
   1319e:	4770      	bx	lr
   131a0:	20000928 	.word	0x20000928

000131a4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   131a4:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   131a6:	4b0a      	ldr	r3, [pc, #40]	; (131d0 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   131a8:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   131aa:	242c      	movs	r4, #44	; 0x2c
   131ac:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   131b0:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   131b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   131b4:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   131b6:	681a      	ldr	r2, [r3, #0]
   131b8:	4294      	cmp	r4, r2
   131ba:	bf94      	ite	ls
   131bc:	600c      	strls	r4, [r1, #0]
   131be:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   131c0:	e9d3 5400 	ldrd	r5, r4, [r3]
   131c4:	f7ff ffde 	bl	13184 <net_buf_id>
}
   131c8:	fb05 4000 	mla	r0, r5, r0, r4
   131cc:	bd38      	pop	{r3, r4, r5, pc}
   131ce:	bf00      	nop
   131d0:	20000928 	.word	0x20000928

000131d4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   131d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131d8:	4605      	mov	r5, r0
   131da:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   131dc:	4610      	mov	r0, r2
   131de:	4619      	mov	r1, r3
{
   131e0:	4691      	mov	r9, r2
   131e2:	4698      	mov	r8, r3
   131e4:	4617      	mov	r7, r2
   131e6:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   131e8:	f007 fceb 	bl	1abc2 <sys_clock_timeout_end_calc>
   131ec:	4682      	mov	sl, r0
   131ee:	468b      	mov	fp, r1
   131f0:	f04f 0320 	mov.w	r3, #32
   131f4:	f3ef 8111 	mrs	r1, BASEPRI
   131f8:	f383 8812 	msr	BASEPRI_MAX, r3
   131fc:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   13200:	8b6b      	ldrh	r3, [r5, #26]
   13202:	2b00      	cmp	r3, #0
   13204:	d058      	beq.n	132b8 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   13206:	8b2a      	ldrh	r2, [r5, #24]
   13208:	429a      	cmp	r2, r3
   1320a:	d93c      	bls.n	13286 <net_buf_alloc_len+0xb2>
   1320c:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1320e:	2200      	movs	r2, #0
   13210:	2300      	movs	r3, #0
   13212:	4628      	mov	r0, r5
   13214:	f002 fde8 	bl	15de8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   13218:	9900      	ldr	r1, [sp, #0]
   1321a:	4604      	mov	r4, r0
   1321c:	2800      	cmp	r0, #0
   1321e:	d032      	beq.n	13286 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   13220:	f381 8811 	msr	BASEPRI, r1
   13224:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   13228:	9b01      	ldr	r3, [sp, #4]
   1322a:	2b00      	cmp	r3, #0
   1322c:	d055      	beq.n	132da <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1322e:	ea58 0309 	orrs.w	r3, r8, r9
   13232:	d00f      	beq.n	13254 <net_buf_alloc_len+0x80>
   13234:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   13238:	bf08      	it	eq
   1323a:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   1323e:	d009      	beq.n	13254 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   13240:	f003 fd0e 	bl	16c60 <sys_clock_tick_get>
   13244:	ebba 0700 	subs.w	r7, sl, r0
   13248:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   1324c:	2e00      	cmp	r6, #0
   1324e:	bfbc      	itt	lt
   13250:	2700      	movlt	r7, #0
   13252:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13254:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   13256:	4d26      	ldr	r5, [pc, #152]	; (132f0 <net_buf_alloc_len+0x11c>)
   13258:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1325c:	fb08 5303 	mla	r3, r8, r3, r5
   13260:	463a      	mov	r2, r7
   13262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13264:	681b      	ldr	r3, [r3, #0]
   13266:	a901      	add	r1, sp, #4
   13268:	f8d3 9000 	ldr.w	r9, [r3]
   1326c:	4620      	mov	r0, r4
   1326e:	4633      	mov	r3, r6
   13270:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   13272:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   13274:	2800      	cmp	r0, #0
   13276:	d131      	bne.n	132dc <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   13278:	7aa0      	ldrb	r0, [r4, #10]
   1327a:	4621      	mov	r1, r4
   1327c:	fb00 5008 	mla	r0, r0, r8, r5
   13280:	f007 fa53 	bl	1a72a <k_queue_prepend>
}
   13284:	e024      	b.n	132d0 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   13286:	8b68      	ldrh	r0, [r5, #26]
   13288:	1e43      	subs	r3, r0, #1
   1328a:	836b      	strh	r3, [r5, #26]
   1328c:	f381 8811 	msr	BASEPRI, r1
   13290:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   13294:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   13296:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   13298:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1329a:	331b      	adds	r3, #27
   1329c:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   132a0:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   132a2:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   132a6:	4b12      	ldr	r3, [pc, #72]	; (132f0 <net_buf_alloc_len+0x11c>)
   132a8:	4a12      	ldr	r2, [pc, #72]	; (132f4 <net_buf_alloc_len+0x120>)
   132aa:	1aeb      	subs	r3, r5, r3
   132ac:	109b      	asrs	r3, r3, #2
   132ae:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   132b0:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   132b2:	7f2b      	ldrb	r3, [r5, #28]
   132b4:	72e3      	strb	r3, [r4, #11]
		goto success;
   132b6:	e7b7      	b.n	13228 <net_buf_alloc_len+0x54>
   132b8:	f381 8811 	msr	BASEPRI, r1
   132bc:	f3bf 8f6f 	isb	sy
   132c0:	464a      	mov	r2, r9
   132c2:	4643      	mov	r3, r8
   132c4:	4628      	mov	r0, r5
   132c6:	f002 fd8f 	bl	15de8 <z_impl_k_queue_get>
	if (!buf) {
   132ca:	4604      	mov	r4, r0
   132cc:	2800      	cmp	r0, #0
   132ce:	d1ab      	bne.n	13228 <net_buf_alloc_len+0x54>
		return NULL;
   132d0:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   132d2:	4620      	mov	r0, r4
   132d4:	b003      	add	sp, #12
   132d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   132da:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   132dc:	2300      	movs	r3, #0
	buf->ref   = 1U;
   132de:	2201      	movs	r2, #1
	buf->frags = NULL;
   132e0:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   132e2:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   132e4:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   132e6:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   132e8:	6963      	ldr	r3, [r4, #20]
   132ea:	8262      	strh	r2, [r4, #18]
   132ec:	60e3      	str	r3, [r4, #12]
	return buf;
   132ee:	e7f0      	b.n	132d2 <net_buf_alloc_len+0xfe>
   132f0:	20000928 	.word	0x20000928
   132f4:	ba2e8ba3 	.word	0xba2e8ba3

000132f8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   132f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   132fc:	4d16      	ldr	r5, [pc, #88]	; (13358 <net_buf_unref+0x60>)
   132fe:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   13300:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   13302:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   13304:	b90c      	cbnz	r4, 1330a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   13306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1330a:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1330c:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   13310:	3b01      	subs	r3, #1
   13312:	b2db      	uxtb	r3, r3
   13314:	7223      	strb	r3, [r4, #8]
   13316:	2b00      	cmp	r3, #0
   13318:	d1f5      	bne.n	13306 <net_buf_unref+0xe>
		if (buf->__buf) {
   1331a:	6961      	ldr	r1, [r4, #20]
   1331c:	b159      	cbz	r1, 13336 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1331e:	7a63      	ldrb	r3, [r4, #9]
   13320:	07db      	lsls	r3, r3, #31
   13322:	d407      	bmi.n	13334 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13324:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   13326:	fb07 5303 	mla	r3, r7, r3, r5
   1332a:	4620      	mov	r0, r4
   1332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1332e:	681b      	ldr	r3, [r3, #0]
   13330:	689b      	ldr	r3, [r3, #8]
   13332:	4798      	blx	r3
			buf->__buf = NULL;
   13334:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   13336:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   13338:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   1333a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1333e:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   13340:	6a1b      	ldr	r3, [r3, #32]
   13342:	b11b      	cbz	r3, 1334c <net_buf_unref+0x54>
			pool->destroy(buf);
   13344:	4620      	mov	r0, r4
   13346:	4798      	blx	r3
{
   13348:	4644      	mov	r4, r8
   1334a:	e7db      	b.n	13304 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1334c:	4621      	mov	r1, r4
   1334e:	fb00 5007 	mla	r0, r0, r7, r5
   13352:	f007 f9ea 	bl	1a72a <k_queue_prepend>
}
   13356:	e7f7      	b.n	13348 <net_buf_unref+0x50>
   13358:	20000928 	.word	0x20000928

0001335c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1335c:	4b08      	ldr	r3, [pc, #32]	; (13380 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1335e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   13360:	1ac3      	subs	r3, r0, r3
{
   13362:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13364:	4907      	ldr	r1, [pc, #28]	; (13384 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   13366:	109b      	asrs	r3, r3, #2
{
   13368:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1336a:	4359      	muls	r1, r3
   1336c:	4806      	ldr	r0, [pc, #24]	; (13388 <onoff_stop+0x2c>)
   1336e:	2240      	movs	r2, #64	; 0x40
   13370:	f006 fb0e 	bl	19990 <stop>
	notify(mgr, res);
   13374:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13376:	4601      	mov	r1, r0
	notify(mgr, res);
   13378:	4620      	mov	r0, r4
}
   1337a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1337e:	4718      	bx	r3
   13380:	200023c8 	.word	0x200023c8
   13384:	b6db6db7 	.word	0xb6db6db7
   13388:	0001af64 	.word	0x0001af64

0001338c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1338c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1338e:	4c0c      	ldr	r4, [pc, #48]	; (133c0 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13390:	4a0c      	ldr	r2, [pc, #48]	; (133c4 <onoff_start+0x38>)
   13392:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   13394:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13396:	9300      	str	r3, [sp, #0]
{
   13398:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1339a:	460b      	mov	r3, r1
   1339c:	490a      	ldr	r1, [pc, #40]	; (133c8 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1339e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   133a0:	4361      	muls	r1, r4
{
   133a2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   133a4:	4809      	ldr	r0, [pc, #36]	; (133cc <onoff_start+0x40>)
   133a6:	f006 fb20 	bl	199ea <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   133aa:	1e01      	subs	r1, r0, #0
   133ac:	da05      	bge.n	133ba <onoff_start+0x2e>
		notify(mgr, err);
   133ae:	4630      	mov	r0, r6
   133b0:	462b      	mov	r3, r5
	}
}
   133b2:	b002      	add	sp, #8
   133b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   133b8:	4718      	bx	r3
}
   133ba:	b002      	add	sp, #8
   133bc:	bd70      	pop	{r4, r5, r6, pc}
   133be:	bf00      	nop
   133c0:	200023c8 	.word	0x200023c8
   133c4:	00019a57 	.word	0x00019a57
   133c8:	b6db6db7 	.word	0xb6db6db7
   133cc:	0001af64 	.word	0x0001af64

000133d0 <generic_hfclk_stop>:
{
   133d0:	b510      	push	{r4, lr}
	__asm__ volatile(
   133d2:	f04f 0320 	mov.w	r3, #32
   133d6:	f3ef 8411 	mrs	r4, BASEPRI
   133da:	f383 8812 	msr	BASEPRI_MAX, r3
   133de:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   133e2:	4a07      	ldr	r2, [pc, #28]	; (13400 <generic_hfclk_stop+0x30>)
   133e4:	6813      	ldr	r3, [r2, #0]
   133e6:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   133ea:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   133ec:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   133ee:	d402      	bmi.n	133f6 <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   133f0:	2001      	movs	r0, #1
   133f2:	f006 ffa1 	bl	1a338 <nrfx_clock_stop>
	__asm__ volatile(
   133f6:	f384 8811 	msr	BASEPRI, r4
   133fa:	f3bf 8f6f 	isb	sy
}
   133fe:	bd10      	pop	{r4, pc}
   13400:	20002418 	.word	0x20002418

00013404 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13404:	2200      	movs	r2, #0
{
   13406:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13408:	2101      	movs	r1, #1
{
   1340a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1340c:	4610      	mov	r0, r2
   1340e:	f7ee ff71 	bl	22f4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   13412:	480f      	ldr	r0, [pc, #60]	; (13450 <clk_init+0x4c>)
   13414:	f001 fafa 	bl	14a0c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   13418:	4b0e      	ldr	r3, [pc, #56]	; (13454 <clk_init+0x50>)
   1341a:	4298      	cmp	r0, r3
   1341c:	d115      	bne.n	1344a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1341e:	f006 ff7e 	bl	1a31e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   13422:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   13424:	490c      	ldr	r1, [pc, #48]	; (13458 <clk_init+0x54>)
   13426:	4630      	mov	r0, r6
   13428:	f003 ff41 	bl	172ae <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1342c:	2800      	cmp	r0, #0
   1342e:	db0b      	blt.n	13448 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13430:	2501      	movs	r5, #1
   13432:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   13434:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13436:	4908      	ldr	r1, [pc, #32]	; (13458 <clk_init+0x54>)
   13438:	f104 001c 	add.w	r0, r4, #28
   1343c:	f003 ff37 	bl	172ae <onoff_manager_init>
		if (err < 0) {
   13440:	2800      	cmp	r0, #0
   13442:	db01      	blt.n	13448 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13444:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   13446:	2000      	movs	r0, #0
}
   13448:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1344a:	f06f 0004 	mvn.w	r0, #4
   1344e:	e7fb      	b.n	13448 <clk_init+0x44>
   13450:	00013491 	.word	0x00013491
   13454:	0bad0000 	.word	0x0bad0000
   13458:	0001c754 	.word	0x0001c754

0001345c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1345c:	b570      	push	{r4, r5, r6, lr}
   1345e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   13460:	230c      	movs	r3, #12
   13462:	4809      	ldr	r0, [pc, #36]	; (13488 <clkstarted_handle.constprop.0+0x2c>)
   13464:	434b      	muls	r3, r1
   13466:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   13468:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1346c:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1346e:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   13470:	4418      	add	r0, r3
	sub_data->cb = NULL;
   13472:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   13474:	f006 fa79 	bl	1996a <set_on_state>
	if (callback) {
   13478:	b12d      	cbz	r5, 13486 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1347a:	4632      	mov	r2, r6
   1347c:	462b      	mov	r3, r5
   1347e:	4803      	ldr	r0, [pc, #12]	; (1348c <clkstarted_handle.constprop.0+0x30>)
}
   13480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   13484:	4718      	bx	r3
}
   13486:	bd70      	pop	{r4, r5, r6, pc}
   13488:	200023c8 	.word	0x200023c8
   1348c:	0001af64 	.word	0x0001af64

00013490 <clock_event_handler>:
	switch (event) {
   13490:	b110      	cbz	r0, 13498 <clock_event_handler+0x8>
   13492:	2801      	cmp	r0, #1
   13494:	d004      	beq.n	134a0 <clock_event_handler+0x10>
   13496:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   13498:	4b03      	ldr	r3, [pc, #12]	; (134a8 <clock_event_handler+0x18>)
   1349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1349c:	075b      	lsls	r3, r3, #29
   1349e:	d101      	bne.n	134a4 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   134a0:	f7ff bfdc 	b.w	1345c <clkstarted_handle.constprop.0>
}
   134a4:	4770      	bx	lr
   134a6:	bf00      	nop
   134a8:	200023c8 	.word	0x200023c8

000134ac <generic_hfclk_start>:
{
   134ac:	b508      	push	{r3, lr}
	__asm__ volatile(
   134ae:	f04f 0320 	mov.w	r3, #32
   134b2:	f3ef 8111 	mrs	r1, BASEPRI
   134b6:	f383 8812 	msr	BASEPRI_MAX, r3
   134ba:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   134be:	4a12      	ldr	r2, [pc, #72]	; (13508 <generic_hfclk_start+0x5c>)
   134c0:	6813      	ldr	r3, [r2, #0]
   134c2:	f043 0002 	orr.w	r0, r3, #2
   134c6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   134c8:	07da      	lsls	r2, r3, #31
   134ca:	d408      	bmi.n	134de <generic_hfclk_start+0x32>
	__asm__ volatile(
   134cc:	f381 8811 	msr	BASEPRI, r1
   134d0:	f3bf 8f6f 	isb	sy
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   134d4:	2001      	movs	r0, #1
}
   134d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   134da:	f001 baa7 	b.w	14a2c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   134de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   134e2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   134e6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   134ea:	07d3      	lsls	r3, r2, #31
   134ec:	d5ee      	bpl.n	134cc <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   134ee:	4807      	ldr	r0, [pc, #28]	; (1350c <generic_hfclk_start+0x60>)
   134f0:	f006 fa3b 	bl	1996a <set_on_state>
   134f4:	f381 8811 	msr	BASEPRI, r1
   134f8:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   134fc:	2000      	movs	r0, #0
}
   134fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   13502:	f7ff bfab 	b.w	1345c <clkstarted_handle.constprop.0>
   13506:	bf00      	nop
   13508:	20002418 	.word	0x20002418
   1350c:	20002408 	.word	0x20002408

00013510 <api_blocking_start>:
{
   13510:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13512:	2200      	movs	r2, #0
   13514:	2301      	movs	r3, #1
   13516:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1351a:	ab04      	add	r3, sp, #16
   1351c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13520:	4a09      	ldr	r2, [pc, #36]	; (13548 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13522:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13526:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13528:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1352c:	f006 fa8c 	bl	19a48 <api_start>
	if (err < 0) {
   13530:	2800      	cmp	r0, #0
   13532:	db05      	blt.n	13540 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   13534:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13538:	2300      	movs	r3, #0
   1353a:	4668      	mov	r0, sp
   1353c:	f002 fcae 	bl	15e9c <z_impl_k_sem_take>
}
   13540:	b007      	add	sp, #28
   13542:	f85d fb04 	ldr.w	pc, [sp], #4
   13546:	bf00      	nop
   13548:	00019a6f 	.word	0x00019a6f

0001354c <lfclk_start>:
{
   1354c:	b510      	push	{r4, lr}
	if (!once) {
   1354e:	4c07      	ldr	r4, [pc, #28]	; (1356c <lfclk_start+0x20>)
   13550:	7823      	ldrb	r3, [r4, #0]
   13552:	b92b      	cbnz	r3, 13560 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   13554:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   13558:	f007 fb2f 	bl	1abba <z_impl_k_busy_wait>
		once = true;
   1355c:	2301      	movs	r3, #1
   1355e:	7023      	strb	r3, [r4, #0]
}
   13560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   13564:	2000      	movs	r0, #0
   13566:	f001 ba61 	b.w	14a2c <nrfx_clock_start>
   1356a:	bf00      	nop
   1356c:	20002640 	.word	0x20002640

00013570 <z_nrf_clock_control_get_onoff>:
}
   13570:	4a02      	ldr	r2, [pc, #8]	; (1357c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   13572:	b2c3      	uxtb	r3, r0
}
   13574:	201c      	movs	r0, #28
   13576:	fb03 2000 	mla	r0, r3, r0, r2
   1357a:	4770      	bx	lr
   1357c:	200023c8 	.word	0x200023c8

00013580 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13580:	4b09      	ldr	r3, [pc, #36]	; (135a8 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   13582:	f3bf 8f5b 	dmb	ish
   13586:	e853 2f00 	ldrex	r2, [r3]
   1358a:	f042 0101 	orr.w	r1, r2, #1
   1358e:	e843 1000 	strex	r0, r1, [r3]
   13592:	2800      	cmp	r0, #0
   13594:	d1f7      	bne.n	13586 <z_nrf_clock_bt_ctlr_hf_request+0x6>
   13596:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   1359a:	0793      	lsls	r3, r2, #30
   1359c:	d402      	bmi.n	135a4 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1359e:	2001      	movs	r0, #1
   135a0:	f001 ba44 	b.w	14a2c <nrfx_clock_start>
}
   135a4:	4770      	bx	lr
   135a6:	bf00      	nop
   135a8:	20002418 	.word	0x20002418

000135ac <z_nrf_clock_bt_ctlr_hf_release>:
{
   135ac:	b510      	push	{r4, lr}
	__asm__ volatile(
   135ae:	f04f 0320 	mov.w	r3, #32
   135b2:	f3ef 8411 	mrs	r4, BASEPRI
   135b6:	f383 8812 	msr	BASEPRI_MAX, r3
   135ba:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_BT;
   135be:	4a07      	ldr	r2, [pc, #28]	; (135dc <z_nrf_clock_bt_ctlr_hf_release+0x30>)
   135c0:	6813      	ldr	r3, [r2, #0]
   135c2:	f023 0101 	bic.w	r1, r3, #1
	if (!(hfclk_users & HF_USER_GENERIC)) {
   135c6:	079b      	lsls	r3, r3, #30
	hfclk_users &= ~HF_USER_BT;
   135c8:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_GENERIC)) {
   135ca:	d402      	bmi.n	135d2 <z_nrf_clock_bt_ctlr_hf_release+0x26>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   135cc:	2001      	movs	r0, #1
   135ce:	f006 feb3 	bl	1a338 <nrfx_clock_stop>
	__asm__ volatile(
   135d2:	f384 8811 	msr	BASEPRI, r4
   135d6:	f3bf 8f6f 	isb	sy
}
   135da:	bd10      	pop	{r4, pc}
   135dc:	20002418 	.word	0x20002418

000135e0 <z_nrf_clock_control_lf_on>:
{
   135e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   135e4:	4938      	ldr	r1, [pc, #224]	; (136c8 <z_nrf_clock_control_lf_on+0xe8>)
   135e6:	f3bf 8f5b 	dmb	ish
   135ea:	4607      	mov	r7, r0
   135ec:	2201      	movs	r2, #1
   135ee:	e851 3f00 	ldrex	r3, [r1]
   135f2:	e841 2000 	strex	r0, r2, [r1]
   135f6:	2800      	cmp	r0, #0
   135f8:	d1f9      	bne.n	135ee <z_nrf_clock_control_lf_on+0xe>
   135fa:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   135fe:	b933      	cbnz	r3, 1360e <z_nrf_clock_control_lf_on+0x2e>
   13600:	4932      	ldr	r1, [pc, #200]	; (136cc <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   13602:	4833      	ldr	r0, [pc, #204]	; (136d0 <z_nrf_clock_control_lf_on+0xf0>)
   13604:	604b      	str	r3, [r1, #4]
   13606:	60cb      	str	r3, [r1, #12]
   13608:	608a      	str	r2, [r1, #8]
   1360a:	f003 fe63 	bl	172d4 <onoff_request>
	switch (start_mode) {
   1360e:	1e7b      	subs	r3, r7, #1
   13610:	2b01      	cmp	r3, #1
   13612:	d82b      	bhi.n	1366c <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   13614:	2f01      	cmp	r7, #1
   13616:	d107      	bne.n	13628 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   13618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1361c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   13620:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   13624:	2b01      	cmp	r3, #1
   13626:	d021      	beq.n	1366c <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13628:	f006 ffb5 	bl	1a596 <k_is_in_isr>
   1362c:	4605      	mov	r5, r0
   1362e:	b9f8      	cbnz	r0, 13670 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   13630:	4b28      	ldr	r3, [pc, #160]	; (136d4 <z_nrf_clock_control_lf_on+0xf4>)
   13632:	781b      	ldrb	r3, [r3, #0]
   13634:	b1e3      	cbz	r3, 13670 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   13636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1363a:	2202      	movs	r2, #2
   1363c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   13640:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13642:	f8df 8094 	ldr.w	r8, [pc, #148]	; 136d8 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13646:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1364a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1364e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   13652:	03d2      	lsls	r2, r2, #15
   13654:	d516      	bpl.n	13684 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   13656:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1365a:	2b01      	cmp	r3, #1
   1365c:	d001      	beq.n	13662 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1365e:	2f01      	cmp	r7, #1
   13660:	d110      	bne.n	13684 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   13662:	b35d      	cbz	r5, 136bc <z_nrf_clock_control_lf_on+0xdc>
   13664:	f386 8811 	msr	BASEPRI, r6
   13668:	f3bf 8f6f 	isb	sy
}
   1366c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   13670:	f04f 0320 	mov.w	r3, #32
   13674:	f3ef 8611 	mrs	r6, BASEPRI
   13678:	f383 8812 	msr	BASEPRI_MAX, r3
   1367c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13680:	2501      	movs	r5, #1
   13682:	e7de      	b.n	13642 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   13684:	b1ad      	cbz	r5, 136b2 <z_nrf_clock_control_lf_on+0xd2>
	arch_cpu_atomic_idle(key);
   13686:	4630      	mov	r0, r6
   13688:	f7ee fdf8 	bl	227c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1368c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   13690:	2b00      	cmp	r3, #0
   13692:	d1da      	bne.n	1364a <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13694:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   13698:	2a00      	cmp	r2, #0
   1369a:	d0d6      	beq.n	1364a <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1369c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   136a0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   136a4:	2301      	movs	r3, #1
   136a6:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   136aa:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   136ae:	60a3      	str	r3, [r4, #8]
}
   136b0:	e7cb      	b.n	1364a <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   136b2:	2100      	movs	r1, #0
   136b4:	2021      	movs	r0, #33	; 0x21
   136b6:	f003 f901 	bl	168bc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   136ba:	e7e7      	b.n	1368c <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   136bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   136c0:	2202      	movs	r2, #2
   136c2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   136c6:	e7d1      	b.n	1366c <z_nrf_clock_control_lf_on+0x8c>
   136c8:	200023c4 	.word	0x200023c4
   136cc:	200023b4 	.word	0x200023b4
   136d0:	200023e4 	.word	0x200023e4
   136d4:	20002a73 	.word	0x20002a73
   136d8:	e000e100 	.word	0xe000e100

000136dc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   136dc:	b508      	push	{r3, lr}
   136de:	4807      	ldr	r0, [pc, #28]	; (136fc <uart_console_init+0x20>)
   136e0:	f006 fe72 	bl	1a3c8 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   136e4:	b138      	cbz	r0, 136f6 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   136e6:	4806      	ldr	r0, [pc, #24]	; (13700 <uart_console_init+0x24>)
   136e8:	f7ef f96e 	bl	29c8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   136ec:	4804      	ldr	r0, [pc, #16]	; (13700 <uart_console_init+0x24>)
   136ee:	f7ed ff37 	bl	1560 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   136f2:	2000      	movs	r0, #0
}
   136f4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   136f6:	f06f 0012 	mvn.w	r0, #18
   136fa:	e7fb      	b.n	136f4 <uart_console_init+0x18>
   136fc:	0001afc4 	.word	0x0001afc4
   13700:	00013705 	.word	0x00013705

00013704 <console_out>:
	if ('\n' == c) {
   13704:	280a      	cmp	r0, #10
{
   13706:	b538      	push	{r3, r4, r5, lr}
   13708:	4d07      	ldr	r5, [pc, #28]	; (13728 <console_out+0x24>)
   1370a:	4604      	mov	r4, r0
	if ('\n' == c) {
   1370c:	d104      	bne.n	13718 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1370e:	68ab      	ldr	r3, [r5, #8]
   13710:	210d      	movs	r1, #13
   13712:	685b      	ldr	r3, [r3, #4]
   13714:	4628      	mov	r0, r5
   13716:	4798      	blx	r3
   13718:	68ab      	ldr	r3, [r5, #8]
   1371a:	4803      	ldr	r0, [pc, #12]	; (13728 <console_out+0x24>)
   1371c:	685b      	ldr	r3, [r3, #4]
   1371e:	b2e1      	uxtb	r1, r4
   13720:	4798      	blx	r3
}
   13722:	4620      	mov	r0, r4
   13724:	bd38      	pop	{r3, r4, r5, pc}
   13726:	bf00      	nop
   13728:	0001afc4 	.word	0x0001afc4

0001372c <random_byte_get>:
   1372c:	f04f 0320 	mov.w	r3, #32
   13730:	f3ef 8211 	mrs	r2, BASEPRI
   13734:	f383 8812 	msr	BASEPRI_MAX, r3
   13738:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1373c:	4b09      	ldr	r3, [pc, #36]	; (13764 <random_byte_get+0x38>)
   1373e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   13742:	b161      	cbz	r1, 1375e <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   13744:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   13746:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1374a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1374e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   13752:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   13754:	f382 8811 	msr	BASEPRI, r2
   13758:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1375c:	4770      	bx	lr
	int retval = -EAGAIN;
   1375e:	f06f 000a 	mvn.w	r0, #10
   13762:	e7f7      	b.n	13754 <random_byte_get+0x28>
   13764:	4000d000 	.word	0x4000d000

00013768 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   13768:	b5f0      	push	{r4, r5, r6, r7, lr}
   1376a:	4603      	mov	r3, r0
   1376c:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1376e:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   13770:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   13774:	f04f 0520 	mov.w	r5, #32
   13778:	f3ef 8211 	mrs	r2, BASEPRI
   1377c:	f385 8812 	msr	BASEPRI_MAX, r5
   13780:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   13784:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   13786:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1378a:	1be4      	subs	r4, r4, r7
   1378c:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   13790:	42a0      	cmp	r0, r4
		len = available;
   13792:	bf88      	it	hi
   13794:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   13796:	183e      	adds	r6, r7, r0
   13798:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   1379c:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   1379e:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   137a0:	f382 8811 	msr	BASEPRI, r2
   137a4:	f3bf 8f6f 	isb	sy
   137a8:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   137aa:	428a      	cmp	r2, r1
   137ac:	d117      	bne.n	137de <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   137ae:	4577      	cmp	r7, lr
   137b0:	d10d      	bne.n	137ce <rng_pool_get+0x66>
	__asm__ volatile(
   137b2:	f04f 0120 	mov.w	r1, #32
   137b6:	f3ef 8211 	mrs	r2, BASEPRI
   137ba:	f381 8812 	msr	BASEPRI_MAX, r1
   137be:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   137c2:	7819      	ldrb	r1, [r3, #0]
   137c4:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   137c6:	f382 8811 	msr	BASEPRI, r2
   137ca:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   137ce:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   137d0:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   137d2:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   137d4:	bf22      	ittt	cs
   137d6:	4b06      	ldrcs	r3, [pc, #24]	; (137f0 <rng_pool_get+0x88>)
   137d8:	2201      	movcs	r2, #1
   137da:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   137dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   137de:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   137e0:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   137e2:	7976      	ldrb	r6, [r6, #5]
   137e4:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   137e8:	ea05 050c 	and.w	r5, r5, ip
   137ec:	e7dd      	b.n	137aa <rng_pool_get+0x42>
   137ee:	bf00      	nop
   137f0:	4000d000 	.word	0x4000d000

000137f4 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   137f4:	43db      	mvns	r3, r3
{
   137f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   137fa:	f013 0501 	ands.w	r5, r3, #1
{
   137fe:	460e      	mov	r6, r1
   13800:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   13802:	d004      	beq.n	1380e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   13804:	4823      	ldr	r0, [pc, #140]	; (13894 <entropy_nrf5_get_entropy_isr+0xa0>)
   13806:	f7ff ffaf 	bl	13768 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1380a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1380e:	b3a2      	cbz	r2, 1387a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   13810:	f04f 0320 	mov.w	r3, #32
   13814:	f3ef 8811 	mrs	r8, BASEPRI
   13818:	f383 8812 	msr	BASEPRI_MAX, r3
   1381c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   13820:	200d      	movs	r0, #13
   13822:	f7ee fd59 	bl	22d8 <arch_irq_is_enabled>
   13826:	4607      	mov	r7, r0
		irq_disable(IRQN);
   13828:	200d      	movs	r0, #13
   1382a:	f7ee fd41 	bl	22b0 <arch_irq_disable>
	__asm__ volatile(
   1382e:	f388 8811 	msr	BASEPRI, r8
   13832:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   13836:	f8df a060 	ldr.w	sl, [pc, #96]	; 13898 <entropy_nrf5_get_entropy_isr+0xa4>
   1383a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1389c <entropy_nrf5_get_entropy_isr+0xa8>
   1383e:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   13842:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   13846:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1384a:	2301      	movs	r3, #1
   1384c:	f8ca 3000 	str.w	r3, [sl]
   13850:	4625      	mov	r5, r4
   13852:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   13856:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1385a:	b183      	cbz	r3, 1387e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1385c:	f7ff ff66 	bl	1372c <random_byte_get>
			if (byte < 0) {
   13860:	1e03      	subs	r3, r0, #0
   13862:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   13866:	dbf6      	blt.n	13856 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   13868:	3d01      	subs	r5, #1
   1386a:	b2ad      	uxth	r5, r5
   1386c:	5573      	strb	r3, [r6, r5]
		} while (len);
   1386e:	2d00      	cmp	r5, #0
   13870:	d1f1      	bne.n	13856 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   13872:	b117      	cbz	r7, 1387a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   13874:	200d      	movs	r0, #13
   13876:	f7ee fd0d 	bl	2294 <arch_irq_enable>
	return cnt;
   1387a:	4620      	mov	r0, r4
   1387c:	e7c5      	b.n	1380a <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   1387e:	f04f 0320 	mov.w	r3, #32
   13882:	f3ef 8011 	mrs	r0, BASEPRI
   13886:	f383 8812 	msr	BASEPRI_MAX, r3
   1388a:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   1388e:	f7ee fcf5 	bl	227c <arch_cpu_atomic_idle>
}
   13892:	e7e0      	b.n	13856 <entropy_nrf5_get_entropy_isr+0x62>
   13894:	2000244c 	.word	0x2000244c
   13898:	4000d000 	.word	0x4000d000
   1389c:	e000e100 	.word	0xe000e100

000138a0 <entropy_nrf5_get_entropy>:
{
   138a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   138a4:	4f12      	ldr	r7, [pc, #72]	; (138f0 <entropy_nrf5_get_entropy+0x50>)
   138a6:	460d      	mov	r5, r1
   138a8:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   138aa:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   138ae:	b914      	cbnz	r4, 138b6 <entropy_nrf5_get_entropy+0x16>
}
   138b0:	4620      	mov	r0, r4
   138b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   138ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   138be:	4638      	mov	r0, r7
   138c0:	f002 faec 	bl	15e9c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   138c4:	4622      	mov	r2, r4
   138c6:	4629      	mov	r1, r5
   138c8:	4640      	mov	r0, r8
   138ca:	f7ff ff4d 	bl	13768 <rng_pool_get>
   138ce:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   138d0:	4638      	mov	r0, r7
   138d2:	f002 fabd 	bl	15e50 <z_impl_k_sem_give>
		if (bytes == 0U) {
   138d6:	b93e      	cbnz	r6, 138e8 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   138d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   138dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   138e0:	4804      	ldr	r0, [pc, #16]	; (138f4 <entropy_nrf5_get_entropy+0x54>)
   138e2:	f002 fadb 	bl	15e9c <z_impl_k_sem_take>
	while (len) {
   138e6:	e7e6      	b.n	138b6 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   138e8:	1ba4      	subs	r4, r4, r6
   138ea:	b2a4      	uxth	r4, r4
		buf += bytes;
   138ec:	4435      	add	r5, r6
   138ee:	e7de      	b.n	138ae <entropy_nrf5_get_entropy+0xe>
   138f0:	2000241c 	.word	0x2000241c
   138f4:	20002434 	.word	0x20002434

000138f8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   138f8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   138fa:	4c19      	ldr	r4, [pc, #100]	; (13960 <entropy_nrf5_init+0x68>)
   138fc:	2201      	movs	r2, #1
   138fe:	4611      	mov	r1, r2
   13900:	4620      	mov	r0, r4
   13902:	f006 ff20 	bl	1a746 <z_impl_k_sem_init>
   13906:	2201      	movs	r2, #1
   13908:	2100      	movs	r1, #0
   1390a:	f104 0018 	add.w	r0, r4, #24
   1390e:	f006 ff1a 	bl	1a746 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   13912:	f240 4307 	movw	r3, #1031	; 0x407
   13916:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1391a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1391e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   13920:	230c      	movs	r3, #12
   13922:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   13926:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   13928:	4b0e      	ldr	r3, [pc, #56]	; (13964 <entropy_nrf5_init+0x6c>)
   1392a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1392e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   13932:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   13936:	f042 0201 	orr.w	r2, r2, #1
   1393a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1393e:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   13940:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   13944:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   13948:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1394c:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1394e:	6019      	str	r1, [r3, #0]
   13950:	200d      	movs	r0, #13
   13952:	f7ee fccf 	bl	22f4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   13956:	200d      	movs	r0, #13
   13958:	f7ee fc9c 	bl	2294 <arch_irq_enable>

	return 0;
}
   1395c:	4628      	mov	r0, r5
   1395e:	bd38      	pop	{r3, r4, r5, pc}
   13960:	2000241c 	.word	0x2000241c
   13964:	4000d000 	.word	0x4000d000

00013968 <isr>:
{
   13968:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1396a:	f7ff fedf 	bl	1372c <random_byte_get>
	if (byte < 0) {
   1396e:	2800      	cmp	r0, #0
   13970:	db20      	blt.n	139b4 <isr+0x4c>
	uint8_t last  = rngp->last;
   13972:	4b17      	ldr	r3, [pc, #92]	; (139d0 <isr+0x68>)
   13974:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   13978:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1397c:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   13980:	1b14      	subs	r4, r2, r4
   13982:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   13986:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   13988:	d10d      	bne.n	139a6 <isr+0x3e>
	uint8_t last  = rngp->last;
   1398a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1398e:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   13992:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   13996:	1b14      	subs	r4, r2, r4
   13998:	ea31 0404 	bics.w	r4, r1, r4
   1399c:	d10b      	bne.n	139b6 <isr+0x4e>
   1399e:	4b0d      	ldr	r3, [pc, #52]	; (139d4 <isr+0x6c>)
   139a0:	2201      	movs	r2, #1
   139a2:	605a      	str	r2, [r3, #4]
}
   139a4:	e00e      	b.n	139c4 <isr+0x5c>
	rngp->buffer[last] = byte;
   139a6:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   139a8:	3201      	adds	r2, #1
   139aa:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   139ac:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   139b0:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   139b4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   139b6:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   139b8:	3201      	adds	r2, #1
   139ba:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   139bc:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   139c0:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   139c4:	4804      	ldr	r0, [pc, #16]	; (139d8 <isr+0x70>)
}
   139c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   139ca:	f002 ba41 	b.w	15e50 <z_impl_k_sem_give>
   139ce:	bf00      	nop
   139d0:	2000241c 	.word	0x2000241c
   139d4:	4000d000 	.word	0x4000d000
   139d8:	20002434 	.word	0x20002434

000139dc <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   139dc:	b530      	push	{r4, r5, lr}
	return port->config;
   139de:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   139e0:	7b05      	ldrb	r5, [r0, #12]
   139e2:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   139e6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   139ea:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   139ec:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   139f0:	d105      	bne.n	139fe <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   139f2:	4620      	mov	r0, r4
   139f4:	f001 fade 	bl	14fb4 <nrfx_gpiote_trigger_disable>

		return 0;
   139f8:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   139fa:	b005      	add	sp, #20
   139fc:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   139fe:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   13a00:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   13a04:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   13a08:	d114      	bne.n	13a34 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   13a0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   13a0e:	bf0c      	ite	eq
   13a10:	2304      	moveq	r3, #4
   13a12:	2305      	movne	r3, #5
   13a14:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   13a18:	2300      	movs	r3, #0
   13a1a:	4619      	mov	r1, r3
   13a1c:	aa02      	add	r2, sp, #8
   13a1e:	4620      	mov	r0, r4
   13a20:	f001 f8fe 	bl	14c20 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   13a24:	4b1d      	ldr	r3, [pc, #116]	; (13a9c <gpio_nrfx_pin_interrupt_configure+0xc0>)
   13a26:	4298      	cmp	r0, r3
   13a28:	d135      	bne.n	13a96 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   13a2a:	2101      	movs	r1, #1
   13a2c:	4620      	mov	r0, r4
   13a2e:	f001 fa7d 	bl	14f2c <nrfx_gpiote_trigger_enable>
	return 0;
   13a32:	e7e1      	b.n	139f8 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   13a34:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   13a38:	d022      	beq.n	13a80 <gpio_nrfx_pin_interrupt_configure+0xa4>
   13a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   13a3e:	bf14      	ite	ne
   13a40:	2301      	movne	r3, #1
   13a42:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   13a44:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   13a48:	6883      	ldr	r3, [r0, #8]
   13a4a:	40cb      	lsrs	r3, r1
   13a4c:	07d9      	lsls	r1, r3, #31
   13a4e:	d4e3      	bmi.n	13a18 <gpio_nrfx_pin_interrupt_configure+0x3c>
   13a50:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   13a54:	d1e0      	bne.n	13a18 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   13a56:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   13a5a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   13a5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   13a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   13a66:	07db      	lsls	r3, r3, #31
   13a68:	d4d6      	bmi.n	13a18 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   13a6a:	f10d 0507 	add.w	r5, sp, #7
   13a6e:	4629      	mov	r1, r5
   13a70:	4620      	mov	r0, r4
   13a72:	f001 fa07 	bl	14e84 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   13a76:	4b0a      	ldr	r3, [pc, #40]	; (13aa0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   13a78:	4298      	cmp	r0, r3
   13a7a:	d003      	beq.n	13a84 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
   13a7c:	9503      	str	r5, [sp, #12]
   13a7e:	e7cb      	b.n	13a18 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   13a80:	2303      	movs	r3, #3
   13a82:	e7df      	b.n	13a44 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   13a84:	4628      	mov	r0, r5
   13a86:	f001 fa4b 	bl	14f20 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   13a8a:	4b04      	ldr	r3, [pc, #16]	; (13a9c <gpio_nrfx_pin_interrupt_configure+0xc0>)
   13a8c:	4298      	cmp	r0, r3
   13a8e:	d0f5      	beq.n	13a7c <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
   13a90:	f06f 000b 	mvn.w	r0, #11
   13a94:	e7b1      	b.n	139fa <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   13a96:	f06f 0015 	mvn.w	r0, #21
   13a9a:	e7ae      	b.n	139fa <gpio_nrfx_pin_interrupt_configure+0x1e>
   13a9c:	0bad0000 	.word	0x0bad0000
   13aa0:	0bad0004 	.word	0x0bad0004

00013aa4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   13aa4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   13aa6:	f001 fa2b 	bl	14f00 <nrfx_gpiote_is_init>
   13aaa:	4604      	mov	r4, r0
   13aac:	b968      	cbnz	r0, 13aca <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   13aae:	f001 f9ff 	bl	14eb0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   13ab2:	4b08      	ldr	r3, [pc, #32]	; (13ad4 <gpio_nrfx_init+0x30>)
   13ab4:	4298      	cmp	r0, r3
   13ab6:	d10a      	bne.n	13ace <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   13ab8:	4807      	ldr	r0, [pc, #28]	; (13ad8 <gpio_nrfx_init+0x34>)
   13aba:	4621      	mov	r1, r4
   13abc:	f001 f9dc 	bl	14e78 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   13ac0:	4622      	mov	r2, r4
   13ac2:	2105      	movs	r1, #5
   13ac4:	2006      	movs	r0, #6
   13ac6:	f7ee fc15 	bl	22f4 <z_arm_irq_priority_set>
		return 0;
   13aca:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   13acc:	bd10      	pop	{r4, pc}
		return -EIO;
   13ace:	f06f 0004 	mvn.w	r0, #4
   13ad2:	e7fb      	b.n	13acc <gpio_nrfx_init+0x28>
   13ad4:	0bad0000 	.word	0x0bad0000
   13ad8:	00013add 	.word	0x00013add

00013adc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   13adc:	0943      	lsrs	r3, r0, #5
{
   13ade:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   13ae0:	d107      	bne.n	13af2 <nrfx_gpio_handler+0x16>
	return list->head;
   13ae2:	4b0b      	ldr	r3, [pc, #44]	; (13b10 <nrfx_gpio_handler+0x34>)
   13ae4:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   13ae6:	b121      	cbz	r1, 13af2 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   13ae8:	2501      	movs	r5, #1
	return node->next;
   13aea:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   13aec:	4e09      	ldr	r6, [pc, #36]	; (13b14 <nrfx_gpio_handler+0x38>)
   13aee:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   13af0:	b901      	cbnz	r1, 13af4 <nrfx_gpio_handler+0x18>
}
   13af2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   13af4:	688a      	ldr	r2, [r1, #8]
   13af6:	402a      	ands	r2, r5
   13af8:	d002      	beq.n	13b00 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   13afa:	684b      	ldr	r3, [r1, #4]
   13afc:	4630      	mov	r0, r6
   13afe:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   13b00:	b11c      	cbz	r4, 13b0a <nrfx_gpio_handler+0x2e>
   13b02:	6823      	ldr	r3, [r4, #0]
   13b04:	4621      	mov	r1, r4
   13b06:	461c      	mov	r4, r3
   13b08:	e7f2      	b.n	13af0 <nrfx_gpio_handler+0x14>
   13b0a:	4623      	mov	r3, r4
   13b0c:	e7fa      	b.n	13b04 <nrfx_gpio_handler+0x28>
   13b0e:	bf00      	nop
   13b10:	20002470 	.word	0x20002470
   13b14:	0001af7c 	.word	0x0001af7c

00013b18 <gpio_nrfx_pin_configure>:
{
   13b18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   13b1c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   13b1e:	7b3b      	ldrb	r3, [r7, #12]
   13b20:	f001 051f 	and.w	r5, r1, #31
   13b24:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   13b28:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   13b2a:	4628      	mov	r0, r5
   13b2c:	f10d 0103 	add.w	r1, sp, #3
{
   13b30:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   13b32:	f001 f9a7 	bl	14e84 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   13b36:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   13b3a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   13b3c:	d10b      	bne.n	13b56 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   13b3e:	4628      	mov	r0, r5
   13b40:	f001 fa60 	bl	15004 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   13b44:	4b3d      	ldr	r3, [pc, #244]	; (13c3c <gpio_nrfx_pin_configure+0x124>)
   13b46:	4598      	cmp	r8, r3
   13b48:	d103      	bne.n	13b52 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   13b4a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   13b4e:	f001 f9e1 	bl	14f14 <nrfx_gpiote_channel_free>
		return 0;
   13b52:	2000      	movs	r0, #0
   13b54:	e00c      	b.n	13b70 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   13b56:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   13b58:	4619      	mov	r1, r3
   13b5a:	aa02      	add	r2, sp, #8
   13b5c:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   13b5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   13b62:	f001 f85d 	bl	14c20 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   13b66:	4b35      	ldr	r3, [pc, #212]	; (13c3c <gpio_nrfx_pin_configure+0x124>)
   13b68:	4298      	cmp	r0, r3
   13b6a:	d004      	beq.n	13b76 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   13b6c:	f06f 0015 	mvn.w	r0, #21
}
   13b70:	b004      	add	sp, #16
   13b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   13b76:	4580      	cmp	r8, r0
   13b78:	d103      	bne.n	13b82 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   13b7a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   13b7e:	f001 f9c9 	bl	14f14 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   13b82:	03a3      	lsls	r3, r4, #14
   13b84:	d54b      	bpl.n	13c1e <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13b86:	f240 3306 	movw	r3, #774	; 0x306
   13b8a:	4023      	ands	r3, r4
   13b8c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   13b90:	d019      	beq.n	13bc6 <gpio_nrfx_pin_configure+0xae>
   13b92:	d80c      	bhi.n	13bae <gpio_nrfx_pin_configure+0x96>
   13b94:	2b06      	cmp	r3, #6
   13b96:	d017      	beq.n	13bc8 <gpio_nrfx_pin_configure+0xb0>
   13b98:	d804      	bhi.n	13ba4 <gpio_nrfx_pin_configure+0x8c>
   13b9a:	b1ab      	cbz	r3, 13bc8 <gpio_nrfx_pin_configure+0xb0>
   13b9c:	2b02      	cmp	r3, #2
   13b9e:	d1e5      	bne.n	13b6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   13ba0:	2304      	movs	r3, #4
   13ba2:	e011      	b.n	13bc8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   13ba8:	d1e0      	bne.n	13b6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   13baa:	2301      	movs	r3, #1
   13bac:	e00c      	b.n	13bc8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13bae:	f240 2202 	movw	r2, #514	; 0x202
   13bb2:	4293      	cmp	r3, r2
   13bb4:	d027      	beq.n	13c06 <gpio_nrfx_pin_configure+0xee>
   13bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   13bba:	d026      	beq.n	13c0a <gpio_nrfx_pin_configure+0xf2>
   13bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13bc0:	d1d4      	bne.n	13b6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   13bc2:	2302      	movs	r3, #2
   13bc4:	e000      	b.n	13bc8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   13bc6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   13bc8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   13bcc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   13bd0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   13bd4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   13bd6:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   13bda:	bf54      	ite	pl
   13bdc:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   13be0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   13be2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   13be4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   13be8:	d511      	bpl.n	13c0e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   13bea:	687a      	ldr	r2, [r7, #4]
   13bec:	2301      	movs	r3, #1
   13bee:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   13bf0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   13bf4:	2200      	movs	r2, #0
   13bf6:	a901      	add	r1, sp, #4
   13bf8:	4628      	mov	r0, r5
   13bfa:	f001 f8bf 	bl	14d7c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   13bfe:	4b0f      	ldr	r3, [pc, #60]	; (13c3c <gpio_nrfx_pin_configure+0x124>)
   13c00:	4298      	cmp	r0, r3
   13c02:	d0a6      	beq.n	13b52 <gpio_nrfx_pin_configure+0x3a>
   13c04:	e7b2      	b.n	13b6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   13c06:	2305      	movs	r3, #5
   13c08:	e7de      	b.n	13bc8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   13c0a:	2303      	movs	r3, #3
   13c0c:	e7dc      	b.n	13bc8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   13c0e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   13c10:	bf41      	itttt	mi
   13c12:	2301      	movmi	r3, #1
   13c14:	687a      	ldrmi	r2, [r7, #4]
   13c16:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   13c18:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   13c1c:	e7ea      	b.n	13bf4 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   13c1e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   13c20:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   13c24:	bf54      	ite	pl
   13c26:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   13c2a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   13c2c:	461a      	mov	r2, r3
   13c2e:	a901      	add	r1, sp, #4
   13c30:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   13c32:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   13c36:	f000 fff3 	bl	14c20 <nrfx_gpiote_input_configure>
   13c3a:	e7e0      	b.n	13bfe <gpio_nrfx_pin_configure+0xe6>
   13c3c:	0bad0000 	.word	0x0bad0000

00013c40 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
   13c40:	b538      	push	{r3, r4, r5, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   13c42:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   13c44:	6905      	ldr	r5, [r0, #16]

	dev_config->irq_connect();
   13c46:	69e3      	ldr	r3, [r4, #28]
   13c48:	4798      	blx	r3

	int err = pinctrl_apply_state(dev_config->pcfg,
   13c4a:	6a20      	ldr	r0, [r4, #32]
   13c4c:	f006 f967 	bl	19f1e <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
   13c50:	2800      	cmp	r0, #0
   13c52:	db0d      	blt.n	13c70 <i2c_nrfx_twim_init+0x30>
		return err;
	}

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
   13c54:	462b      	mov	r3, r5
   13c56:	4a08      	ldr	r2, [pc, #32]	; (13c78 <i2c_nrfx_twim_init+0x38>)
   13c58:	f104 0108 	add.w	r1, r4, #8
   13c5c:	4620      	mov	r0, r4
   13c5e:	f001 fb5d 	bl	1531c <nrfx_twim_init>
   13c62:	4b06      	ldr	r3, [pc, #24]	; (13c7c <i2c_nrfx_twim_init+0x3c>)
   13c64:	4298      	cmp	r0, r3
   13c66:	d104      	bne.n	13c72 <i2c_nrfx_twim_init+0x32>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_init_suspended(dev);
	pm_device_runtime_enable(dev);
#else
	nrfx_twim_enable(&dev_config->twim);
   13c68:	4620      	mov	r0, r4
   13c6a:	f001 fba9 	bl	153c0 <nrfx_twim_enable>
#endif

	return 0;
   13c6e:	2000      	movs	r0, #0
}
   13c70:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   13c72:	f06f 0004 	mvn.w	r0, #4
   13c76:	e7fb      	b.n	13c70 <i2c_nrfx_twim_init+0x30>
   13c78:	00013cbd 	.word	0x00013cbd
   13c7c:	0bad0000 	.word	0x0bad0000

00013c80 <i2c_nrfx_twim_recover_bus>:
{
   13c80:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   13c82:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
   13c84:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
   13c86:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
   13c8a:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
   13c8e:	4620      	mov	r0, r4
   13c90:	f001 fba6 	bl	153e0 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   13c94:	4631      	mov	r1, r6
   13c96:	4628      	mov	r0, r5
   13c98:	f001 fd5c 	bl	15754 <nrfx_twi_twim_bus_recover>
   13c9c:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
   13c9e:	6a20      	ldr	r0, [r4, #32]
   13ca0:	f006 f93d 	bl	19f1e <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
   13ca4:	4620      	mov	r0, r4
   13ca6:	f001 fb8b 	bl	153c0 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   13caa:	4b03      	ldr	r3, [pc, #12]	; (13cb8 <i2c_nrfx_twim_recover_bus+0x38>)
   13cac:	429d      	cmp	r5, r3
}
   13cae:	bf14      	ite	ne
   13cb0:	f06f 000f 	mvnne.w	r0, #15
   13cb4:	2000      	moveq	r0, #0
   13cb6:	bd70      	pop	{r4, r5, r6, pc}
   13cb8:	0bad0000 	.word	0x0bad0000

00013cbc <event_handler>:
	switch (p_event->type) {
   13cbc:	7803      	ldrb	r3, [r0, #0]
   13cbe:	2b01      	cmp	r3, #1
   13cc0:	d008      	beq.n	13cd4 <event_handler+0x18>
   13cc2:	2b02      	cmp	r3, #2
   13cc4:	d008      	beq.n	13cd8 <event_handler+0x1c>
   13cc6:	b94b      	cbnz	r3, 13cdc <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   13cc8:	4b05      	ldr	r3, [pc, #20]	; (13ce0 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   13cca:	630b      	str	r3, [r1, #48]	; 0x30
   13ccc:	f101 0018 	add.w	r0, r1, #24
   13cd0:	f002 b8be 	b.w	15e50 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   13cd4:	4b03      	ldr	r3, [pc, #12]	; (13ce4 <event_handler+0x28>)
   13cd6:	e7f8      	b.n	13cca <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   13cd8:	4b03      	ldr	r3, [pc, #12]	; (13ce8 <event_handler+0x2c>)
   13cda:	e7f6      	b.n	13cca <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   13cdc:	4b03      	ldr	r3, [pc, #12]	; (13cec <event_handler+0x30>)
   13cde:	e7f4      	b.n	13cca <event_handler+0xe>
   13ce0:	0bad0000 	.word	0x0bad0000
   13ce4:	0bae0001 	.word	0x0bae0001
   13ce8:	0bae0002 	.word	0x0bae0002
   13cec:	0bad0001 	.word	0x0bad0001

00013cf0 <i2c_nrfx_twim_transfer>:
{
   13cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   13cf4:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   13cf8:	6906      	ldr	r6, [r0, #16]
{
   13cfa:	b08b      	sub	sp, #44	; 0x2c
   13cfc:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   13cfe:	2214      	movs	r2, #20
{
   13d00:	461d      	mov	r5, r3
   13d02:	4681      	mov	r9, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   13d04:	f8ba 3018 	ldrh.w	r3, [sl, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
   13d08:	f8d6 8034 	ldr.w	r8, [r6, #52]	; 0x34
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   13d0c:	9302      	str	r3, [sp, #8]
{
   13d0e:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   13d10:	eb0d 0002 	add.w	r0, sp, r2
   13d14:	2100      	movs	r1, #0
   13d16:	f003 fe7c 	bl	17a12 <memset>
   13d1a:	f88d 5015 	strb.w	r5, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
   13d1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d26:	4630      	mov	r0, r6
   13d28:	f002 f8b8 	bl	15e9c <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   13d2c:	f106 0318 	add.w	r3, r6, #24
   13d30:	9301      	str	r3, [sp, #4]
   13d32:	2200      	movs	r2, #0
   13d34:	2300      	movs	r3, #0
   13d36:	f106 0018 	add.w	r0, r6, #24
   13d3a:	f002 f8af 	bl	15e9c <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
   13d3e:	2700      	movs	r7, #0
	uint16_t msg_buf_used = 0;
   13d40:	463d      	mov	r5, r7
	for (size_t i = 0; i < num_msgs; i++) {
   13d42:	455f      	cmp	r7, fp
   13d44:	d301      	bcc.n	13d4a <i2c_nrfx_twim_transfer+0x5a>
   13d46:	2400      	movs	r4, #0
   13d48:	e068      	b.n	13e1c <i2c_nrfx_twim_transfer+0x12c>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   13d4a:	7a20      	ldrb	r0, [r4, #8]
   13d4c:	0702      	lsls	r2, r0, #28
   13d4e:	f100 808a 	bmi.w	13e66 <i2c_nrfx_twim_transfer+0x176>
		bool concat_next = ((i + 1) < num_msgs)
   13d52:	3701      	adds	r7, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   13d54:	455f      	cmp	r7, fp
   13d56:	d20a      	bcs.n	13d6e <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   13d58:	0783      	lsls	r3, r0, #30
   13d5a:	d408      	bmi.n	13d6e <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   13d5c:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   13d5e:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   13d62:	f002 0201 	and.w	r2, r2, #1
   13d66:	f003 0304 	and.w	r3, r3, #4
   13d6a:	431a      	orrs	r2, r3
   13d6c:	d01a      	beq.n	13da4 <i2c_nrfx_twim_transfer+0xb4>
		if (concat_next || (msg_buf_used != 0)) {
   13d6e:	b1dd      	cbz	r5, 13da8 <i2c_nrfx_twim_transfer+0xb8>
		bool concat_next = ((i + 1) < num_msgs)
   13d70:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   13d72:	6862      	ldr	r2, [r4, #4]
   13d74:	f8dd c008 	ldr.w	ip, [sp, #8]
   13d78:	18a9      	adds	r1, r5, r2
   13d7a:	4561      	cmp	r1, ip
   13d7c:	d876      	bhi.n	13e6c <i2c_nrfx_twim_transfer+0x17c>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   13d7e:	07c1      	lsls	r1, r0, #31
   13d80:	d406      	bmi.n	13d90 <i2c_nrfx_twim_transfer+0xa0>
				memcpy(msg_buf + msg_buf_used,
   13d82:	6821      	ldr	r1, [r4, #0]
   13d84:	9303      	str	r3, [sp, #12]
   13d86:	eb08 0005 	add.w	r0, r8, r5
   13d8a:	f003 fe37 	bl	179fc <memcpy>
   13d8e:	9b03      	ldr	r3, [sp, #12]
			msg_buf_used += msgs[i].len;
   13d90:	6862      	ldr	r2, [r4, #4]
   13d92:	442a      	add	r2, r5
   13d94:	b295      	uxth	r5, r2
		if (concat_next) {
   13d96:	2b00      	cmp	r3, #0
   13d98:	d14f      	bne.n	13e3a <i2c_nrfx_twim_transfer+0x14a>
		if (msg_buf_used == 0) {
   13d9a:	b14d      	cbz	r5, 13db0 <i2c_nrfx_twim_transfer+0xc0>
			cur_xfer.p_primary_buf = msg_buf;
   13d9c:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = msg_buf_used;
   13da0:	462b      	mov	r3, r5
   13da2:	e009      	b.n	13db8 <i2c_nrfx_twim_transfer+0xc8>
		bool concat_next = ((i + 1) < num_msgs)
   13da4:	2301      	movs	r3, #1
   13da6:	e7e4      	b.n	13d72 <i2c_nrfx_twim_transfer+0x82>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   13da8:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
   13daa:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   13dae:	d51b      	bpl.n	13de8 <i2c_nrfx_twim_transfer+0xf8>
			cur_xfer.p_primary_buf = msgs[i].buf;
   13db0:	6823      	ldr	r3, [r4, #0]
   13db2:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
   13db4:	6863      	ldr	r3, [r4, #4]
   13db6:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   13db8:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
   13dba:	9306      	str	r3, [sp, #24]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   13dbc:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   13dc0:	f082 0202 	eor.w	r2, r2, #2
   13dc4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   13dc8:	0152      	lsls	r2, r2, #5
   13dca:	a905      	add	r1, sp, #20
   13dcc:	4650      	mov	r0, sl
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   13dce:	f88d 3014 	strb.w	r3, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   13dd2:	f001 fb23 	bl	1541c <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   13dd6:	4b28      	ldr	r3, [pc, #160]	; (13e78 <i2c_nrfx_twim_transfer+0x188>)
   13dd8:	4298      	cmp	r0, r3
   13dda:	d013      	beq.n	13e04 <i2c_nrfx_twim_transfer+0x114>
			if (res == NRFX_ERROR_BUSY) {
   13ddc:	330b      	adds	r3, #11
   13dde:	4298      	cmp	r0, r3
   13de0:	d11a      	bne.n	13e18 <i2c_nrfx_twim_transfer+0x128>
				ret = -EBUSY;
   13de2:	f06f 040f 	mvn.w	r4, #15
   13de6:	e019      	b.n	13e1c <i2c_nrfx_twim_transfer+0x12c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   13de8:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   13dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   13df0:	d0de      	beq.n	13db0 <i2c_nrfx_twim_transfer+0xc0>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   13df2:	f8ba 301a 	ldrh.w	r3, [sl, #26]
   13df6:	4293      	cmp	r3, r2
   13df8:	d33b      	bcc.n	13e72 <i2c_nrfx_twim_transfer+0x182>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
   13dfa:	4640      	mov	r0, r8
   13dfc:	f003 fdfe 	bl	179fc <memcpy>
			msg_buf_used = msgs[i].len;
   13e00:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
   13e02:	e7ca      	b.n	13d9a <i2c_nrfx_twim_transfer+0xaa>
   13e04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13e08:	9801      	ldr	r0, [sp, #4]
   13e0a:	2300      	movs	r3, #0
   13e0c:	f002 f846 	bl	15e9c <z_impl_k_sem_take>
		if (ret != 0) {
   13e10:	b158      	cbz	r0, 13e2a <i2c_nrfx_twim_transfer+0x13a>
			(void)i2c_nrfx_twim_recover_bus(dev);
   13e12:	4648      	mov	r0, r9
   13e14:	f7ff ff34 	bl	13c80 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
   13e18:	f06f 0404 	mvn.w	r4, #4
	z_impl_k_sem_give(sem);
   13e1c:	4630      	mov	r0, r6
   13e1e:	f002 f817 	bl	15e50 <z_impl_k_sem_give>
}
   13e22:	4620      	mov	r0, r4
   13e24:	b00b      	add	sp, #44	; 0x2c
   13e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dev_data->res;
   13e2a:	6b33      	ldr	r3, [r6, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   13e2c:	4a12      	ldr	r2, [pc, #72]	; (13e78 <i2c_nrfx_twim_transfer+0x188>)
   13e2e:	4293      	cmp	r3, r2
   13e30:	d1f2      	bne.n	13e18 <i2c_nrfx_twim_transfer+0x128>
		if ((msgs[i].flags & I2C_MSG_READ)
   13e32:	7a23      	ldrb	r3, [r4, #8]
   13e34:	07db      	lsls	r3, r3, #31
   13e36:	d402      	bmi.n	13e3e <i2c_nrfx_twim_transfer+0x14e>
		msg_buf_used = 0;
   13e38:	2500      	movs	r5, #0
   13e3a:	340c      	adds	r4, #12
   13e3c:	e781      	b.n	13d42 <i2c_nrfx_twim_transfer+0x52>
		    && cur_xfer.p_primary_buf == msg_buf) {
   13e3e:	9b08      	ldr	r3, [sp, #32]
   13e40:	4598      	cmp	r8, r3
   13e42:	d1f9      	bne.n	13e38 <i2c_nrfx_twim_transfer+0x148>
   13e44:	4623      	mov	r3, r4
   13e46:	e008      	b.n	13e5a <i2c_nrfx_twim_transfer+0x16a>
				msg_buf_used -= msgs[j].len;
   13e48:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
   13e4a:	68d8      	ldr	r0, [r3, #12]
   13e4c:	9303      	str	r3, [sp, #12]
				msg_buf_used -= msgs[j].len;
   13e4e:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
   13e50:	fa18 f181 	uxtah	r1, r8, r1
   13e54:	f003 fdd2 	bl	179fc <memcpy>
				j--;
   13e58:	9b03      	ldr	r3, [sp, #12]
			while (msg_buf_used >= msgs[j].len) {
   13e5a:	685a      	ldr	r2, [r3, #4]
   13e5c:	4295      	cmp	r5, r2
   13e5e:	f1a3 030c 	sub.w	r3, r3, #12
   13e62:	d2f1      	bcs.n	13e48 <i2c_nrfx_twim_transfer+0x158>
   13e64:	e7e8      	b.n	13e38 <i2c_nrfx_twim_transfer+0x148>
			ret = -ENOTSUP;
   13e66:	f06f 0485 	mvn.w	r4, #133	; 0x85
   13e6a:	e7d7      	b.n	13e1c <i2c_nrfx_twim_transfer+0x12c>
				ret = -ENOSPC;
   13e6c:	f06f 041b 	mvn.w	r4, #27
   13e70:	e7d4      	b.n	13e1c <i2c_nrfx_twim_transfer+0x12c>
				ret = -EINVAL;
   13e72:	f06f 0415 	mvn.w	r4, #21
   13e76:	e7d1      	b.n	13e1c <i2c_nrfx_twim_transfer+0x12c>
   13e78:	0bad0000 	.word	0x0bad0000

00013e7c <regulator_fixed_enable>:
struct regulator_fixed_data {
	struct regulator_common_data common;
};

static int regulator_fixed_enable(const struct device *dev)
{
   13e7c:	b538      	push	{r3, r4, r5, lr}
	const struct regulator_fixed_config *cfg = dev->config;
   13e7e:	6844      	ldr	r4, [r0, #4]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   13e80:	2201      	movs	r2, #1
   13e82:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   13e86:	6a60      	ldr	r0, [r4, #36]	; 0x24
   13e88:	f006 f96d 	bl	1a166 <gpio_pin_set>
	int ret;

	ret = gpio_pin_set_dt(&cfg->enable, 1);
	if (ret < 0) {
   13e8c:	2800      	cmp	r0, #0
   13e8e:	db02      	blt.n	13e96 <regulator_fixed_enable+0x1a>
		return ret;
	}

	if (cfg->off_on_delay_us > 0U) {
   13e90:	6a24      	ldr	r4, [r4, #32]
   13e92:	b90c      	cbnz	r4, 13e98 <regulator_fixed_enable+0x1c>
		k_sleep(K_USEC(cfg->off_on_delay_us));
	}

	return 0;
   13e94:	2000      	movs	r0, #0
}
   13e96:	bd38      	pop	{r3, r4, r5, pc}
   13e98:	4806      	ldr	r0, [pc, #24]	; (13eb4 <regulator_fixed_enable+0x38>)
   13e9a:	4a07      	ldr	r2, [pc, #28]	; (13eb8 <regulator_fixed_enable+0x3c>)
   13e9c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   13ea0:	2100      	movs	r1, #0
   13ea2:	2300      	movs	r3, #0
   13ea4:	fbe4 0105 	umlal	r0, r1, r4, r5
   13ea8:	f7ec f91a 	bl	e0 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   13eac:	f002 fd06 	bl	168bc <z_impl_k_sleep>
   13eb0:	e7f0      	b.n	13e94 <regulator_fixed_enable+0x18>
   13eb2:	bf00      	nop
   13eb4:	000f423f 	.word	0x000f423f
   13eb8:	000f4240 	.word	0x000f4240

00013ebc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   13ebc:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   13ebe:	794b      	ldrb	r3, [r1, #5]
   13ec0:	2b01      	cmp	r3, #1
   13ec2:	d120      	bne.n	13f06 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   13ec4:	798b      	ldrb	r3, [r1, #6]
   13ec6:	2b03      	cmp	r3, #3
   13ec8:	d11d      	bne.n	13f06 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   13eca:	79cd      	ldrb	r5, [r1, #7]
   13ecc:	b10d      	cbz	r5, 13ed2 <uarte_nrfx_configure+0x16>
   13ece:	2d01      	cmp	r5, #1
   13ed0:	d119      	bne.n	13f06 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   13ed2:	790a      	ldrb	r2, [r1, #4]
   13ed4:	b112      	cbz	r2, 13edc <uarte_nrfx_configure+0x20>
   13ed6:	2a02      	cmp	r2, #2
   13ed8:	d115      	bne.n	13f06 <uarte_nrfx_configure+0x4a>
   13eda:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   13edc:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   13ede:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   13ee0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   13ee4:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
   13ee6:	d064      	beq.n	13fb2 <uarte_nrfx_configure+0xf6>
   13ee8:	d82b      	bhi.n	13f42 <uarte_nrfx_configure+0x86>
   13eea:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   13eee:	d063      	beq.n	13fb8 <uarte_nrfx_configure+0xfc>
   13ef0:	d814      	bhi.n	13f1c <uarte_nrfx_configure+0x60>
   13ef2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   13ef6:	d061      	beq.n	13fbc <uarte_nrfx_configure+0x100>
   13ef8:	d808      	bhi.n	13f0c <uarte_nrfx_configure+0x50>
   13efa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   13efe:	d060      	beq.n	13fc2 <uarte_nrfx_configure+0x106>
   13f00:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   13f04:	d060      	beq.n	13fc8 <uarte_nrfx_configure+0x10c>
   13f06:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13f0a:	e051      	b.n	13fb0 <uarte_nrfx_configure+0xf4>
   13f0c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   13f10:	d05d      	beq.n	13fce <uarte_nrfx_configure+0x112>
   13f12:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   13f16:	d1f6      	bne.n	13f06 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   13f18:	4b37      	ldr	r3, [pc, #220]	; (13ff8 <uarte_nrfx_configure+0x13c>)
   13f1a:	e03c      	b.n	13f96 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13f1c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   13f20:	d058      	beq.n	13fd4 <uarte_nrfx_configure+0x118>
   13f22:	d807      	bhi.n	13f34 <uarte_nrfx_configure+0x78>
   13f24:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   13f28:	d056      	beq.n	13fd8 <uarte_nrfx_configure+0x11c>
   13f2a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   13f2e:	d1ea      	bne.n	13f06 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   13f30:	4b32      	ldr	r3, [pc, #200]	; (13ffc <uarte_nrfx_configure+0x140>)
   13f32:	e030      	b.n	13f96 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13f34:	f647 2412 	movw	r4, #31250	; 0x7a12
   13f38:	42a3      	cmp	r3, r4
   13f3a:	d1e4      	bne.n	13f06 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   13f3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   13f40:	e029      	b.n	13f96 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13f42:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   13f46:	d049      	beq.n	13fdc <uarte_nrfx_configure+0x120>
   13f48:	d813      	bhi.n	13f72 <uarte_nrfx_configure+0xb6>
   13f4a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   13f4e:	d048      	beq.n	13fe2 <uarte_nrfx_configure+0x126>
   13f50:	d809      	bhi.n	13f66 <uarte_nrfx_configure+0xaa>
   13f52:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   13f56:	42a3      	cmp	r3, r4
   13f58:	d045      	beq.n	13fe6 <uarte_nrfx_configure+0x12a>
   13f5a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   13f5e:	d1d2      	bne.n	13f06 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   13f60:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   13f64:	e017      	b.n	13f96 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13f66:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   13f6a:	d1cc      	bne.n	13f06 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   13f6c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   13f70:	e011      	b.n	13f96 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13f72:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   13f76:	d039      	beq.n	13fec <uarte_nrfx_configure+0x130>
   13f78:	d808      	bhi.n	13f8c <uarte_nrfx_configure+0xd0>
   13f7a:	4c21      	ldr	r4, [pc, #132]	; (14000 <uarte_nrfx_configure+0x144>)
   13f7c:	42a3      	cmp	r3, r4
   13f7e:	d038      	beq.n	13ff2 <uarte_nrfx_configure+0x136>
   13f80:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   13f84:	d1bf      	bne.n	13f06 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   13f86:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   13f8a:	e004      	b.n	13f96 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13f8c:	4c1d      	ldr	r4, [pc, #116]	; (14004 <uarte_nrfx_configure+0x148>)
   13f8e:	42a3      	cmp	r3, r4
   13f90:	d1b9      	bne.n	13f06 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   13f92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   13f96:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   13f98:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
   13f9c:	6843      	ldr	r3, [r0, #4]
   13f9e:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   13fa0:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   13fa2:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   13fa6:	c903      	ldmia	r1, {r0, r1}
   13fa8:	1d23      	adds	r3, r4, #4
   13faa:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   13fae:	2000      	movs	r0, #0
}
   13fb0:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   13fb2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   13fb6:	e7ee      	b.n	13f96 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   13fb8:	4b13      	ldr	r3, [pc, #76]	; (14008 <uarte_nrfx_configure+0x14c>)
   13fba:	e7ec      	b.n	13f96 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   13fbc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   13fc0:	e7e9      	b.n	13f96 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   13fc2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   13fc6:	e7e6      	b.n	13f96 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13fc8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   13fcc:	e7e3      	b.n	13f96 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   13fce:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   13fd2:	e7e0      	b.n	13f96 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   13fd4:	4b0d      	ldr	r3, [pc, #52]	; (1400c <uarte_nrfx_configure+0x150>)
   13fd6:	e7de      	b.n	13f96 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   13fd8:	4b0d      	ldr	r3, [pc, #52]	; (14010 <uarte_nrfx_configure+0x154>)
   13fda:	e7dc      	b.n	13f96 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   13fdc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   13fe0:	e7d9      	b.n	13f96 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   13fe2:	4b0c      	ldr	r3, [pc, #48]	; (14014 <uarte_nrfx_configure+0x158>)
   13fe4:	e7d7      	b.n	13f96 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   13fe6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   13fea:	e7d4      	b.n	13f96 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   13fec:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   13ff0:	e7d1      	b.n	13f96 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   13ff2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   13ff6:	e7ce      	b.n	13f96 <uarte_nrfx_configure+0xda>
   13ff8:	0013b000 	.word	0x0013b000
   13ffc:	004ea000 	.word	0x004ea000
   14000:	0003d090 	.word	0x0003d090
   14004:	000f4240 	.word	0x000f4240
   14008:	00275000 	.word	0x00275000
   1400c:	0075c000 	.word	0x0075c000
   14010:	003af000 	.word	0x003af000
   14014:	013a9000 	.word	0x013a9000

00014018 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   14018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1401c:	4680      	mov	r8, r0
   1401e:	2200      	movs	r2, #0
   14020:	2101      	movs	r1, #1
   14022:	2002      	movs	r0, #2
   14024:	f7ee f966 	bl	22f4 <z_arm_irq_priority_set>
   14028:	2002      	movs	r0, #2
   1402a:	f7ee f933 	bl	2294 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1402e:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   14032:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   14036:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   14038:	2100      	movs	r1, #0
   1403a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1403e:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   14042:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   14046:	aa01      	add	r2, sp, #4
   14048:	4648      	mov	r0, r9
   1404a:	f005 ff78 	bl	19f3e <pinctrl_lookup_state>
	if (ret < 0) {
   1404e:	1e05      	subs	r5, r0, #0
   14050:	db54      	blt.n	140fc <uarte_0_init+0xe4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   14052:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   14054:	f8d9 2000 	ldr.w	r2, [r9]
   14058:	7919      	ldrb	r1, [r3, #4]
   1405a:	6818      	ldr	r0, [r3, #0]
   1405c:	f005 ff82 	bl	19f64 <pinctrl_configure_pins>
	if (err < 0) {
   14060:	1e05      	subs	r5, r0, #0
   14062:	db4b      	blt.n	140fc <uarte_0_init+0xe4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   14064:	1d31      	adds	r1, r6, #4
   14066:	4640      	mov	r0, r8
   14068:	f7ff ff28 	bl	13ebc <uarte_nrfx_configure>
	if (err) {
   1406c:	4605      	mov	r5, r0
   1406e:	2800      	cmp	r0, #0
   14070:	d144      	bne.n	140fc <uarte_0_init+0xe4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   14072:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   14074:	0799      	lsls	r1, r3, #30
   14076:	d51a      	bpl.n	140ae <uarte_0_init+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   14078:	f106 0018 	add.w	r0, r6, #24
   1407c:	f001 f88e 	bl	1519c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   14080:	4b22      	ldr	r3, [pc, #136]	; (1410c <uarte_0_init+0xf4>)
   14082:	4298      	cmp	r0, r3
   14084:	d13e      	bne.n	14104 <uarte_0_init+0xec>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   14086:	7e33      	ldrb	r3, [r6, #24]
   14088:	00db      	lsls	r3, r3, #3
   1408a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1408e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   14092:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   14096:	f504 7190 	add.w	r1, r4, #288	; 0x120
   1409a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1409e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   140a2:	7e32      	ldrb	r2, [r6, #24]
   140a4:	2301      	movs	r3, #1
   140a6:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   140a8:	4a19      	ldr	r2, [pc, #100]	; (14110 <uarte_0_init+0xf8>)
   140aa:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   140ae:	2308      	movs	r3, #8
   140b0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   140b4:	7a3b      	ldrb	r3, [r7, #8]
   140b6:	b953      	cbnz	r3, 140ce <uarte_0_init+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   140b8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   140bc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   140c0:	6973      	ldr	r3, [r6, #20]
   140c2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   140c6:	2301      	movs	r3, #1
   140c8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   140cc:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   140ce:	687b      	ldr	r3, [r7, #4]
   140d0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   140d2:	bf5c      	itt	pl
   140d4:	f44f 7380 	movpl.w	r3, #256	; 0x100
   140d8:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   140dc:	687b      	ldr	r3, [r7, #4]
   140de:	06db      	lsls	r3, r3, #27
   140e0:	bf44      	itt	mi
   140e2:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   140e6:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   140ea:	6933      	ldr	r3, [r6, #16]
   140ec:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   140f0:	2300      	movs	r3, #0
   140f2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   140f6:	2301      	movs	r3, #1
   140f8:	60a3      	str	r3, [r4, #8]
   140fa:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   140fc:	4628      	mov	r0, r5
   140fe:	b003      	add	sp, #12
   14100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   14104:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   14108:	e7f8      	b.n	140fc <uarte_0_init+0xe4>
   1410a:	bf00      	nop
   1410c:	0bad0000 	.word	0x0bad0000
   14110:	4001f000 	.word	0x4001f000

00014114 <uarte_nrfx_poll_out>:
{
   14114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14116:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   14118:	6907      	ldr	r7, [r0, #16]
{
   1411a:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1411c:	f006 fa3b 	bl	1a596 <k_is_in_isr>
   14120:	b9b0      	cbnz	r0, 14150 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   14122:	4b2e      	ldr	r3, [pc, #184]	; (141dc <uarte_nrfx_poll_out+0xc8>)
   14124:	781b      	ldrb	r3, [r3, #0]
   14126:	b19b      	cbz	r3, 14150 <uarte_nrfx_poll_out+0x3c>
{
   14128:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1412a:	6860      	ldr	r0, [r4, #4]
   1412c:	f006 f890 	bl	1a250 <is_tx_ready.isra.0>
   14130:	bb00      	cbnz	r0, 14174 <uarte_nrfx_poll_out+0x60>
   14132:	2001      	movs	r0, #1
   14134:	f006 f8f1 	bl	1a31a <nrfx_busy_wait>
   14138:	3e01      	subs	r6, #1
   1413a:	d1f6      	bne.n	1412a <uarte_nrfx_poll_out+0x16>
   1413c:	2100      	movs	r1, #0
   1413e:	2021      	movs	r0, #33	; 0x21
   14140:	f002 fbbc 	bl	168bc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   14144:	e7f0      	b.n	14128 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   14146:	f386 8811 	msr	BASEPRI, r6
   1414a:	f3bf 8f6f 	isb	sy
}
   1414e:	e7f5      	b.n	1413c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   14150:	f04f 0320 	mov.w	r3, #32
   14154:	f3ef 8611 	mrs	r6, BASEPRI
   14158:	f383 8812 	msr	BASEPRI_MAX, r3
   1415c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   14160:	6860      	ldr	r0, [r4, #4]
   14162:	4631      	mov	r1, r6
   14164:	f006 f874 	bl	1a250 <is_tx_ready.isra.0>
   14168:	b990      	cbnz	r0, 14190 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1416a:	f386 8811 	msr	BASEPRI, r6
   1416e:	f3bf 8f6f 	isb	sy
}
   14172:	e7ed      	b.n	14150 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   14174:	f04f 0320 	mov.w	r3, #32
   14178:	f3ef 8611 	mrs	r6, BASEPRI
   1417c:	f383 8812 	msr	BASEPRI_MAX, r3
   14180:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   14184:	6860      	ldr	r0, [r4, #4]
   14186:	4631      	mov	r1, r6
   14188:	f006 f862 	bl	1a250 <is_tx_ready.isra.0>
   1418c:	2800      	cmp	r0, #0
   1418e:	d0da      	beq.n	14146 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   14190:	693b      	ldr	r3, [r7, #16]
   14192:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   14194:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14196:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   14198:	6813      	ldr	r3, [r2, #0]
   1419a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1419e:	2001      	movs	r0, #1
   141a0:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   141a4:	2000      	movs	r0, #0
   141a6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   141aa:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   141ae:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   141b2:	6852      	ldr	r2, [r2, #4]
   141b4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   141b8:	06d2      	lsls	r2, r2, #27
   141ba:	d508      	bpl.n	141ce <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
   141bc:	6862      	ldr	r2, [r4, #4]
   141be:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   141c0:	2008      	movs	r0, #8
   141c2:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   141c6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   141ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   141ce:	2201      	movs	r2, #1
   141d0:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   141d2:	f381 8811 	msr	BASEPRI, r1
   141d6:	f3bf 8f6f 	isb	sy
}
   141da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   141dc:	20002a73 	.word	0x20002a73

000141e0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   141e0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   141e2:	2301      	movs	r3, #1
   141e4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   141e6:	4a0e      	ldr	r2, [pc, #56]	; (14220 <compare_int_lock+0x40>)
   141e8:	f3bf 8f5b 	dmb	ish
   141ec:	43dc      	mvns	r4, r3
   141ee:	e852 1f00 	ldrex	r1, [r2]
   141f2:	ea01 0504 	and.w	r5, r1, r4
   141f6:	e842 5600 	strex	r6, r5, [r2]
   141fa:	2e00      	cmp	r6, #0
   141fc:	d1f7      	bne.n	141ee <compare_int_lock+0xe>
   141fe:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14202:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14206:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   14208:	4806      	ldr	r0, [pc, #24]	; (14224 <compare_int_lock+0x44>)
   1420a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1420e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14212:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   14216:	420b      	tst	r3, r1
}
   14218:	bf14      	ite	ne
   1421a:	2001      	movne	r0, #1
   1421c:	2000      	moveq	r0, #0
   1421e:	bd70      	pop	{r4, r5, r6, pc}
   14220:	200024b0 	.word	0x200024b0
   14224:	40011000 	.word	0x40011000

00014228 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   14228:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1422a:	490e      	ldr	r1, [pc, #56]	; (14264 <sys_clock_timeout_handler+0x3c>)
   1422c:	e9d1 3400 	ldrd	r3, r4, [r1]
   14230:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   14232:	18c3      	adds	r3, r0, r3
   14234:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   14238:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   1423c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   14240:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   14244:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   14248:	d209      	bcs.n	1425e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1424a:	4b07      	ldr	r3, [pc, #28]	; (14268 <sys_clock_timeout_handler+0x40>)
   1424c:	681b      	ldr	r3, [r3, #0]
   1424e:	0a1a      	lsrs	r2, r3, #8
   14250:	061b      	lsls	r3, r3, #24
   14252:	199c      	adds	r4, r3, r6
   14254:	4b05      	ldr	r3, [pc, #20]	; (1426c <sys_clock_timeout_handler+0x44>)
   14256:	f142 0500 	adc.w	r5, r2, #0
   1425a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1425e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   14260:	f002 bc94 	b.w	16b8c <sys_clock_announce>
   14264:	20001000 	.word	0x20001000
   14268:	200024b4 	.word	0x200024b4
   1426c:	20001008 	.word	0x20001008

00014270 <compare_int_unlock>:
	if (key) {
   14270:	b311      	cbz	r1, 142b8 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14272:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   14276:	2301      	movs	r3, #1
   14278:	4a10      	ldr	r2, [pc, #64]	; (142bc <compare_int_unlock+0x4c>)
   1427a:	4083      	lsls	r3, r0
   1427c:	e852 cf00 	ldrex	ip, [r2]
   14280:	ea4c 0c03 	orr.w	ip, ip, r3
   14284:	e842 c100 	strex	r1, ip, [r2]
   14288:	2900      	cmp	r1, #0
   1428a:	d1f7      	bne.n	1427c <compare_int_unlock+0xc>
   1428c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   14290:	4a0b      	ldr	r2, [pc, #44]	; (142c0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14296:	4083      	lsls	r3, r0
   14298:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1429c:	4b09      	ldr	r3, [pc, #36]	; (142c4 <compare_int_unlock+0x54>)
   1429e:	f3bf 8f5b 	dmb	ish
   142a2:	681b      	ldr	r3, [r3, #0]
   142a4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   142a8:	40c3      	lsrs	r3, r0
   142aa:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   142ac:	bf42      	ittt	mi
   142ae:	4b06      	ldrmi	r3, [pc, #24]	; (142c8 <compare_int_unlock+0x58>)
   142b0:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   142b4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   142b8:	4770      	bx	lr
   142ba:	bf00      	nop
   142bc:	200024b0 	.word	0x200024b0
   142c0:	40011000 	.word	0x40011000
   142c4:	200024ac 	.word	0x200024ac
   142c8:	e000e100 	.word	0xe000e100

000142cc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   142cc:	4b0d      	ldr	r3, [pc, #52]	; (14304 <z_nrf_rtc_timer_read+0x38>)
   142ce:	6818      	ldr	r0, [r3, #0]
   142d0:	0a01      	lsrs	r1, r0, #8
   142d2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   142d4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   142d8:	4b0b      	ldr	r3, [pc, #44]	; (14308 <z_nrf_rtc_timer_read+0x3c>)
   142da:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   142de:	1818      	adds	r0, r3, r0
   142e0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   142e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   142e8:	d20a      	bcs.n	14300 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   142ea:	4b08      	ldr	r3, [pc, #32]	; (1430c <z_nrf_rtc_timer_read+0x40>)
   142ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   142f0:	4290      	cmp	r0, r2
   142f2:	eb71 0303 	sbcs.w	r3, r1, r3
   142f6:	d203      	bcs.n	14300 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   142f8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   142fc:	f141 0100 	adc.w	r1, r1, #0
}
   14300:	4770      	bx	lr
   14302:	bf00      	nop
   14304:	200024b4 	.word	0x200024b4
   14308:	40011000 	.word	0x40011000
   1430c:	20001008 	.word	0x20001008

00014310 <compare_set>:
{
   14310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14314:	4616      	mov	r6, r2
   14316:	461f      	mov	r7, r3
   14318:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1431a:	f7ff ff61 	bl	141e0 <compare_int_lock>
   1431e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   14320:	f7ff ffd4 	bl	142cc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   14324:	42b0      	cmp	r0, r6
   14326:	eb71 0307 	sbcs.w	r3, r1, r7
   1432a:	d251      	bcs.n	143d0 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1432c:	4b3a      	ldr	r3, [pc, #232]	; (14418 <compare_set+0x108>)
   1432e:	1a30      	subs	r0, r6, r0
   14330:	eb67 0101 	sbc.w	r1, r7, r1
   14334:	4298      	cmp	r0, r3
   14336:	f171 0100 	sbcs.w	r1, r1, #0
   1433a:	d26a      	bcs.n	14412 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   1433c:	4b37      	ldr	r3, [pc, #220]	; (1441c <compare_set+0x10c>)
   1433e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   14342:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   14346:	429f      	cmp	r7, r3
   14348:	bf08      	it	eq
   1434a:	4296      	cmpeq	r6, r2
   1434c:	d04e      	beq.n	143ec <compare_set+0xdc>
    p_reg->EVTENCLR = mask;
   1434e:	4934      	ldr	r1, [pc, #208]	; (14420 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14350:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   14354:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14358:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1435c:	00ad      	lsls	r5, r5, #2
   1435e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   14362:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14364:	b2ad      	uxth	r5, r5
   14366:	f005 ffbd 	bl	1a2e4 <event_clear>
	return absolute_time & COUNTER_MAX;
   1436a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   1436e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   14372:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   14376:	4a2b      	ldr	r2, [pc, #172]	; (14424 <compare_set+0x114>)
   14378:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1437a:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   1437e:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   14380:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   14384:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14386:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   1438a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   1438e:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   14392:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   14396:	f06f 0002 	mvn.w	r0, #2
   1439a:	eba0 0008 	sub.w	r0, r0, r8
   1439e:	4460      	add	r0, ip
   143a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   143a4:	4290      	cmp	r0, r2
   143a6:	d921      	bls.n	143ec <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   143a8:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   143aa:	b160      	cbz	r0, 143c6 <compare_set+0xb6>
     return p_reg->COUNTER;
   143ac:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   143b0:	eba8 000b 	sub.w	r0, r8, fp
   143b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   143b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   143bc:	d916      	bls.n	143ec <compare_set+0xdc>
					event_clear(chan);
   143be:	4620      	mov	r0, r4
   143c0:	f005 ff90 	bl	1a2e4 <event_clear>
   143c4:	4a17      	ldr	r2, [pc, #92]	; (14424 <compare_set+0x114>)
			cc_val = now + cc_inc;
   143c6:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   143ca:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   143ce:	e7d9      	b.n	14384 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   143d0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   143d2:	4a15      	ldr	r2, [pc, #84]	; (14428 <compare_set+0x118>)
   143d4:	f3bf 8f5b 	dmb	ish
   143d8:	40a3      	lsls	r3, r4
   143da:	e852 0f00 	ldrex	r0, [r2]
   143de:	4318      	orrs	r0, r3
   143e0:	e842 0100 	strex	r1, r0, [r2]
   143e4:	2900      	cmp	r1, #0
   143e6:	d1f8      	bne.n	143da <compare_set+0xca>
   143e8:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   143ec:	490b      	ldr	r1, [pc, #44]	; (1441c <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   143ee:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   143f0:	0123      	lsls	r3, r4, #4
   143f2:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   143f6:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   143fa:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   143fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   143fe:	6053      	str	r3, [r2, #4]
	return ret;
   14400:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   14402:	4620      	mov	r0, r4
   14404:	9900      	ldr	r1, [sp, #0]
   14406:	f7ff ff33 	bl	14270 <compare_int_unlock>
}
   1440a:	4628      	mov	r0, r5
   1440c:	b003      	add	sp, #12
   1440e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   14412:	f06f 0515 	mvn.w	r5, #21
   14416:	e7f4      	b.n	14402 <compare_set+0xf2>
   14418:	00800001 	.word	0x00800001
   1441c:	20000ff0 	.word	0x20000ff0
   14420:	40011000 	.word	0x40011000
   14424:	007ffffd 	.word	0x007ffffd
   14428:	200024ac 	.word	0x200024ac

0001442c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1442c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   1442e:	4c1b      	ldr	r4, [pc, #108]	; (1449c <sys_clock_driver_init+0x70>)
   14430:	4b1b      	ldr	r3, [pc, #108]	; (144a0 <sys_clock_driver_init+0x74>)
   14432:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   14436:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	nrf_rtc_event_disable(RTC, mask);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1443a:	4b1a      	ldr	r3, [pc, #104]	; (144a4 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
   1443c:	2500      	movs	r5, #0
   1443e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14442:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14446:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1444a:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1444e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14452:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14456:	4b14      	ldr	r3, [pc, #80]	; (144a8 <sys_clock_driver_init+0x7c>)
   14458:	2602      	movs	r6, #2
   1445a:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1445e:	2101      	movs	r1, #1
   14460:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   14464:	2011      	movs	r0, #17
   14466:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1446a:	462a      	mov	r2, r5
   1446c:	f7ed ff42 	bl	22f4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   14470:	2011      	movs	r0, #17
   14472:	f7ed ff0f 	bl	2294 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   14476:	4a0d      	ldr	r2, [pc, #52]	; (144ac <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   14478:	2301      	movs	r3, #1
   1447a:	60a3      	str	r3, [r4, #8]
   1447c:	6023      	str	r3, [r4, #0]
   1447e:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   14480:	4b0b      	ldr	r3, [pc, #44]	; (144b0 <sys_clock_driver_init+0x84>)
   14482:	4a0c      	ldr	r2, [pc, #48]	; (144b4 <sys_clock_driver_init+0x88>)
   14484:	9300      	str	r3, [sp, #0]
   14486:	9501      	str	r5, [sp, #4]
   14488:	2300      	movs	r3, #0
   1448a:	4628      	mov	r0, r5
   1448c:	f7ff ff40 	bl	14310 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   14490:	4630      	mov	r0, r6
   14492:	f7ff f8a5 	bl	135e0 <z_nrf_clock_control_lf_on>

	return 0;
}
   14496:	4628      	mov	r0, r5
   14498:	b002      	add	sp, #8
   1449a:	bd70      	pop	{r4, r5, r6, pc}
   1449c:	40011000 	.word	0x40011000
   144a0:	000f0003 	.word	0x000f0003
   144a4:	20000ff0 	.word	0x20000ff0
   144a8:	e000e100 	.word	0xe000e100
   144ac:	200024b0 	.word	0x200024b0
   144b0:	00014229 	.word	0x00014229
   144b4:	007fffff 	.word	0x007fffff

000144b8 <rtc_nrf_isr>:
{
   144b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   144bc:	4c2f      	ldr	r4, [pc, #188]	; (1457c <rtc_nrf_isr+0xc4>)
   144be:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   144c2:	0799      	lsls	r1, r3, #30
   144c4:	d50b      	bpl.n	144de <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   144c6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   144ca:	b143      	cbz	r3, 144de <rtc_nrf_isr+0x26>
		overflow_cnt++;
   144cc:	4a2c      	ldr	r2, [pc, #176]	; (14580 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   144ce:	2300      	movs	r3, #0
   144d0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   144d4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   144d8:	6813      	ldr	r3, [r2, #0]
   144da:	3301      	adds	r3, #1
   144dc:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   144de:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   144e2:	03da      	lsls	r2, r3, #15
   144e4:	d52a      	bpl.n	1453c <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   144e6:	f3bf 8f5b 	dmb	ish
   144ea:	4b26      	ldr	r3, [pc, #152]	; (14584 <rtc_nrf_isr+0xcc>)
   144ec:	e853 2f00 	ldrex	r2, [r3]
   144f0:	f022 0101 	bic.w	r1, r2, #1
   144f4:	e843 1000 	strex	r0, r1, [r3]
   144f8:	2800      	cmp	r0, #0
   144fa:	d1f7      	bne.n	144ec <rtc_nrf_isr+0x34>
   144fc:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   14500:	07d3      	lsls	r3, r2, #31
   14502:	d402      	bmi.n	1450a <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14504:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   14508:	b1c3      	cbz	r3, 1453c <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1450a:	2500      	movs	r5, #0
   1450c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   14510:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   14514:	f7ff feda 	bl	142cc <z_nrf_rtc_timer_read>
	__asm__ volatile(
   14518:	f04f 0320 	mov.w	r3, #32
   1451c:	f3ef 8211 	mrs	r2, BASEPRI
   14520:	f383 8812 	msr	BASEPRI_MAX, r3
   14524:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   14528:	4b17      	ldr	r3, [pc, #92]	; (14588 <rtc_nrf_isr+0xd0>)
   1452a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1452e:	42b0      	cmp	r0, r6
   14530:	41b9      	sbcs	r1, r7
   14532:	d206      	bcs.n	14542 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
   14534:	f382 8811 	msr	BASEPRI, r2
   14538:	f3bf 8f6f 	isb	sy
}
   1453c:	b003      	add	sp, #12
   1453e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   14542:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   14546:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1454a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   1454e:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   14552:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   14554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14558:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1455c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   14560:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   14564:	f382 8811 	msr	BASEPRI, r2
   14568:	f3bf 8f6f 	isb	sy
		if (handler) {
   1456c:	2900      	cmp	r1, #0
   1456e:	d0e5      	beq.n	1453c <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
   14570:	9000      	str	r0, [sp, #0]
   14572:	4632      	mov	r2, r6
   14574:	463b      	mov	r3, r7
   14576:	4628      	mov	r0, r5
   14578:	4788      	blx	r1
   1457a:	e7df      	b.n	1453c <rtc_nrf_isr+0x84>
   1457c:	40011000 	.word	0x40011000
   14580:	200024b4 	.word	0x200024b4
   14584:	200024ac 	.word	0x200024ac
   14588:	20000ff0 	.word	0x20000ff0

0001458c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1458c:	1c43      	adds	r3, r0, #1
{
   1458e:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   14590:	d022      	beq.n	145d8 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   14592:	2801      	cmp	r0, #1
   14594:	dd22      	ble.n	145dc <sys_clock_set_timeout+0x50>
   14596:	4a12      	ldr	r2, [pc, #72]	; (145e0 <sys_clock_set_timeout+0x54>)
   14598:	4b12      	ldr	r3, [pc, #72]	; (145e4 <sys_clock_set_timeout+0x58>)
   1459a:	4290      	cmp	r0, r2
   1459c:	bfd4      	ite	le
   1459e:	4604      	movle	r4, r0
   145a0:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   145a2:	f7ff fe93 	bl	142cc <z_nrf_rtc_timer_read>
   145a6:	4b10      	ldr	r3, [pc, #64]	; (145e8 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   145a8:	490e      	ldr	r1, [pc, #56]	; (145e4 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   145aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   145ae:	1a80      	subs	r0, r0, r2
		cyc = 0;
   145b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   145b4:	bf28      	it	cs
   145b6:	2400      	movcs	r4, #0
	cyc += unannounced;
   145b8:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   145ba:	428c      	cmp	r4, r1
   145bc:	bf28      	it	cs
   145be:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   145c0:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   145c2:	490a      	ldr	r1, [pc, #40]	; (145ec <sys_clock_set_timeout+0x60>)
   145c4:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   145c6:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   145ca:	9001      	str	r0, [sp, #4]
   145cc:	f143 0300 	adc.w	r3, r3, #0
   145d0:	f7ff fe9e 	bl	14310 <compare_set>
}
   145d4:	b002      	add	sp, #8
   145d6:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   145d8:	4c02      	ldr	r4, [pc, #8]	; (145e4 <sys_clock_set_timeout+0x58>)
   145da:	e7e2      	b.n	145a2 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   145dc:	2401      	movs	r4, #1
   145de:	e7e0      	b.n	145a2 <sys_clock_set_timeout+0x16>
   145e0:	007ffffe 	.word	0x007ffffe
   145e4:	007fffff 	.word	0x007fffff
   145e8:	20001000 	.word	0x20001000
   145ec:	00014229 	.word	0x00014229

000145f0 <sys_clock_elapsed>:
{
   145f0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   145f2:	f7ff fe6b 	bl	142cc <z_nrf_rtc_timer_read>
   145f6:	4b02      	ldr	r3, [pc, #8]	; (14600 <sys_clock_elapsed+0x10>)
   145f8:	681b      	ldr	r3, [r3, #0]
}
   145fa:	1ac0      	subs	r0, r0, r3
   145fc:	bd08      	pop	{r3, pc}
   145fe:	bf00      	nop
   14600:	20001000 	.word	0x20001000

00014604 <nrf52_errata_16>:
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   14604:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   14608:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            if (var1 == 0x06)
   1460c:	2a06      	cmp	r2, #6
   1460e:	d109      	bne.n	14624 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   14610:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   14614:	f3c3 1303 	ubfx	r3, r3, #4, #4
   14618:	3b03      	subs	r3, #3
   1461a:	2b04      	cmp	r3, #4
   1461c:	d802      	bhi.n	14624 <nrf52_errata_16+0x20>
   1461e:	4a02      	ldr	r2, [pc, #8]	; (14628 <nrf52_errata_16+0x24>)
   14620:	5cd0      	ldrb	r0, [r2, r3]
   14622:	4770      	bx	lr
                        return false;
   14624:	2000      	movs	r0, #0
}
   14626:	4770      	bx	lr
   14628:	0001ce9b 	.word	0x0001ce9b

0001462c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1462c:	4a02      	ldr	r2, [pc, #8]	; (14638 <nvmc_wait+0xc>)
   1462e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   14632:	2b00      	cmp	r3, #0
   14634:	d0fb      	beq.n	1462e <nvmc_wait+0x2>
}
   14636:	4770      	bx	lr
   14638:	4001e000 	.word	0x4001e000

0001463c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1463c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1463e:	f005 fe5d 	bl	1a2fc <nrf52_errata_108>
   14642:	b140      	cbz	r0, 14656 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   14644:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14648:	4a90      	ldr	r2, [pc, #576]	; (1488c <SystemInit+0x250>)
   1464a:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   1464e:	f3c3 2304 	ubfx	r3, r3, #8, #5
   14652:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   14656:	f7ff ffd5 	bl	14604 <nrf52_errata_16>
   1465a:	b110      	cbz	r0, 14662 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1465c:	4b8c      	ldr	r3, [pc, #560]	; (14890 <SystemInit+0x254>)
   1465e:	4a8d      	ldr	r2, [pc, #564]	; (14894 <SystemInit+0x258>)
   14660:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   14662:	f005 fe4b 	bl	1a2fc <nrf52_errata_108>
   14666:	b148      	cbz	r0, 1467c <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   14668:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1466c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   14670:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   14674:	f3c3 3342 	ubfx	r3, r3, #13, #3
   14678:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1467c:	f7ff ffc2 	bl	14604 <nrf52_errata_16>
   14680:	b130      	cbz	r0, 14690 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   14682:	4a85      	ldr	r2, [pc, #532]	; (14898 <SystemInit+0x25c>)
   14684:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   14688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1468c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   14690:	f005 fe34 	bl	1a2fc <nrf52_errata_108>
   14694:	b140      	cbz	r0, 146a8 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   14696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1469a:	2200      	movs	r2, #0
   1469c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   146a0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   146a4:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   146a8:	f7ff ffac 	bl	14604 <nrf52_errata_16>
   146ac:	b120      	cbz	r0, 146b8 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   146ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   146b2:	2203      	movs	r2, #3
   146b4:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   146b8:	f7ff ffa4 	bl	14604 <nrf52_errata_16>
   146bc:	b160      	cbz	r0, 146d8 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   146be:	4b77      	ldr	r3, [pc, #476]	; (1489c <SystemInit+0x260>)
   146c0:	2205      	movs	r2, #5
   146c2:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   146c6:	2201      	movs	r2, #1
   146c8:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   146cc:	2200      	movs	r2, #0
   146ce:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   146d2:	223f      	movs	r2, #63	; 0x3f
   146d4:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   146d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   146dc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   146e0:	1c51      	adds	r1, r2, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   146e2:	bf09      	itett	eq
   146e4:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = *(uint32_t *)0x10000134ul;
   146e8:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   146ec:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   146f0:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   146f4:	bf08      	it	eq
   146f6:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            if (var1 == 0x06)
   146fa:	2a06      	cmp	r2, #6
   146fc:	d14d      	bne.n	1479a <SystemInit+0x15e>
                switch(var2)
   146fe:	3b03      	subs	r3, #3
   14700:	2b04      	cmp	r3, #4
   14702:	d803      	bhi.n	1470c <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   14704:	4a66      	ldr	r2, [pc, #408]	; (148a0 <SystemInit+0x264>)
   14706:	5cd3      	ldrb	r3, [r2, r3]
   14708:	2b00      	cmp	r3, #0
   1470a:	d046      	beq.n	1479a <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1470c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   14710:	4b64      	ldr	r3, [pc, #400]	; (148a4 <SystemInit+0x268>)
   14712:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   14716:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1471a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1471e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   14722:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   14726:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1472a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1472e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   14732:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   14736:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1473a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1473e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   14742:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   14746:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1474a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1474e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   14752:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   14756:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1475a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1475e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   14762:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   14766:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1476a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1476e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   14772:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   14776:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1477a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1477e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   14782:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   14786:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1478a:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1478e:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   14792:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   14796:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1479a:	f005 fdaf 	bl	1a2fc <nrf52_errata_108>
   1479e:	b148      	cbz	r0, 147b4 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   147a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   147a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   147a8:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   147ac:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   147b0:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   147b4:	f005 fda2 	bl	1a2fc <nrf52_errata_108>
   147b8:	b148      	cbz	r0, 147ce <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   147ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   147be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   147c2:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   147c4:	bf44      	itt	mi
   147c6:	f06f 0201 	mvnmi.w	r2, #1
   147ca:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   147ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   147d2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   147d6:	2a06      	cmp	r2, #6
   147d8:	d126      	bne.n	14828 <SystemInit+0x1ec>
            {
                switch(var2)
   147da:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   147de:	3b03      	subs	r3, #3
   147e0:	2b04      	cmp	r3, #4
   147e2:	d802      	bhi.n	147ea <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   147e4:	4a30      	ldr	r2, [pc, #192]	; (148a8 <SystemInit+0x26c>)
   147e6:	5cd3      	ldrb	r3, [r2, r3]
   147e8:	b163      	cbz	r3, 14804 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   147ea:	4a30      	ldr	r2, [pc, #192]	; (148ac <SystemInit+0x270>)
   147ec:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   147f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   147f4:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   147f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   147fc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   14800:	2b06      	cmp	r3, #6
   14802:	d111      	bne.n	14828 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   14804:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14808:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1480c:	3b03      	subs	r3, #3
   1480e:	2b04      	cmp	r3, #4
   14810:	d802      	bhi.n	14818 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   14812:	4a27      	ldr	r2, [pc, #156]	; (148b0 <SystemInit+0x274>)
   14814:	5cd3      	ldrb	r3, [r2, r3]
   14816:	b13b      	cbz	r3, 14828 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   14818:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1481c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   14820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14824:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   14828:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1482c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   14830:	2a00      	cmp	r2, #0
   14832:	db03      	blt.n	1483c <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   14834:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   14838:	2b00      	cmp	r3, #0
   1483a:	da22      	bge.n	14882 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1483c:	491d      	ldr	r1, [pc, #116]	; (148b4 <SystemInit+0x278>)
   1483e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   14840:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   14844:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   14848:	2415      	movs	r4, #21
    nvmc_wait();
   1484a:	f7ff feef 	bl	1462c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1484e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   14852:	f7ff feeb 	bl	1462c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   14856:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1485a:	f7ff fee7 	bl	1462c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1485e:	2300      	movs	r3, #0
   14860:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   14864:	f7ff fee2 	bl	1462c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   14868:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1486c:	490a      	ldr	r1, [pc, #40]	; (14898 <SystemInit+0x25c>)
   1486e:	4b12      	ldr	r3, [pc, #72]	; (148b8 <SystemInit+0x27c>)
   14870:	68ca      	ldr	r2, [r1, #12]
   14872:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14876:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14878:	60cb      	str	r3, [r1, #12]
   1487a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1487e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14880:	e7fd      	b.n	1487e <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   14882:	4b0e      	ldr	r3, [pc, #56]	; (148bc <SystemInit+0x280>)
   14884:	4a0e      	ldr	r2, [pc, #56]	; (148c0 <SystemInit+0x284>)
   14886:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   14888:	bd10      	pop	{r4, pc}
   1488a:	bf00      	nop
   1488c:	40013000 	.word	0x40013000
   14890:	4007c000 	.word	0x4007c000
   14894:	baadf00d 	.word	0xbaadf00d
   14898:	e000ed00 	.word	0xe000ed00
   1489c:	40005000 	.word	0x40005000
   148a0:	0001ce96 	.word	0x0001ce96
   148a4:	4000c000 	.word	0x4000c000
   148a8:	0001ce91 	.word	0x0001ce91
   148ac:	40001000 	.word	0x40001000
   148b0:	0001ce8c 	.word	0x0001ce8c
   148b4:	4001e000 	.word	0x4001e000
   148b8:	05fa0004 	.word	0x05fa0004
   148bc:	20000770 	.word	0x20000770
   148c0:	03d09000 	.word	0x03d09000

000148c4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   148c4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   148c6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   148c8:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   148ca:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   148ce:	fab2 f382 	clz	r3, r2
   148d2:	f1c3 031f 	rsb	r3, r3, #31
   148d6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   148d8:	fa05 f403 	lsl.w	r4, r5, r3
   148dc:	ea22 0404 	bic.w	r4, r2, r4
   148e0:	e850 6f00 	ldrex	r6, [r0]
   148e4:	4296      	cmp	r6, r2
   148e6:	d104      	bne.n	148f2 <nrfx_flag32_alloc+0x2e>
   148e8:	e840 4c00 	strex	ip, r4, [r0]
   148ec:	f1bc 0f00 	cmp.w	ip, #0
   148f0:	d1f6      	bne.n	148e0 <nrfx_flag32_alloc+0x1c>
   148f2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   148f6:	d1e7      	bne.n	148c8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   148f8:	4801      	ldr	r0, [pc, #4]	; (14900 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   148fa:	700b      	strb	r3, [r1, #0]
}
   148fc:	bd70      	pop	{r4, r5, r6, pc}
   148fe:	bf00      	nop
   14900:	0bad0000 	.word	0x0bad0000

00014904 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   14904:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   14906:	6803      	ldr	r3, [r0, #0]
   14908:	40cb      	lsrs	r3, r1
   1490a:	07db      	lsls	r3, r3, #31
   1490c:	d414      	bmi.n	14938 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1490e:	2301      	movs	r3, #1
   14910:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   14912:	6802      	ldr	r2, [r0, #0]
   14914:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   14918:	ea43 0102 	orr.w	r1, r3, r2
   1491c:	e850 4f00 	ldrex	r4, [r0]
   14920:	4294      	cmp	r4, r2
   14922:	d104      	bne.n	1492e <nrfx_flag32_free+0x2a>
   14924:	e840 1c00 	strex	ip, r1, [r0]
   14928:	f1bc 0f00 	cmp.w	ip, #0
   1492c:	d1f6      	bne.n	1491c <nrfx_flag32_free+0x18>
   1492e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   14932:	d1ee      	bne.n	14912 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   14934:	4801      	ldr	r0, [pc, #4]	; (1493c <nrfx_flag32_free+0x38>)
}
   14936:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   14938:	4801      	ldr	r0, [pc, #4]	; (14940 <nrfx_flag32_free+0x3c>)
   1493a:	e7fc      	b.n	14936 <nrfx_flag32_free+0x32>
   1493c:	0bad0000 	.word	0x0bad0000
   14940:	0bad0004 	.word	0x0bad0004

00014944 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   14944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   14946:	4604      	mov	r4, r0
   14948:	b118      	cbz	r0, 14952 <clock_stop+0xe>
   1494a:	2801      	cmp	r0, #1
   1494c:	d022      	beq.n	14994 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1494e:	b003      	add	sp, #12
   14950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   14952:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14956:	2202      	movs	r2, #2
   14958:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1495c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   14960:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14964:	2201      	movs	r2, #1
   14966:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   14968:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1496a:	2301      	movs	r3, #1
   1496c:	f88d 3007 	strb.w	r3, [sp, #7]
   14970:	f242 7510 	movw	r5, #10000	; 0x2710
   14974:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
   14978:	b1cc      	cbz	r4, 149ae <clock_stop+0x6a>
   1497a:	2c01      	cmp	r4, #1
   1497c:	d1e7      	bne.n	1494e <clock_stop+0xa>
            if (p_clk_src != NULL)
   1497e:	b3c7      	cbz	r7, 149f2 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14980:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   14984:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   14988:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1498a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1498e:	03da      	lsls	r2, r3, #15
   14990:	d521      	bpl.n	149d6 <clock_stop+0x92>
   14992:	e016      	b.n	149c2 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
   14994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14998:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   1499a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1499e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   149a2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   149a6:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   149a8:	f10d 0707 	add.w	r7, sp, #7
   149ac:	e7dd      	b.n	1496a <clock_stop+0x26>
            if (p_clk_src != NULL)
   149ae:	b1b7      	cbz	r7, 149de <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   149b0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   149b4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   149b8:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   149ba:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   149be:	03d8      	lsls	r0, r3, #15
   149c0:	d5c5      	bpl.n	1494e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   149c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   149c6:	2801      	cmp	r0, #1
   149c8:	d103      	bne.n	149d2 <clock_stop+0x8e>
   149ca:	f005 fca6 	bl	1a31a <nrfx_busy_wait>
   149ce:	3d01      	subs	r5, #1
   149d0:	d1d2      	bne.n	14978 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   149d2:	2c01      	cmp	r4, #1
   149d4:	d1bb      	bne.n	1494e <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
   149d6:	4b0c      	ldr	r3, [pc, #48]	; (14a08 <clock_stop+0xc4>)
   149d8:	2200      	movs	r2, #0
   149da:	715a      	strb	r2, [r3, #5]
   149dc:	e7b7      	b.n	1494e <clock_stop+0xa>
   149de:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   149e2:	03d9      	lsls	r1, r3, #15
   149e4:	d5b3      	bpl.n	1494e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   149e6:	2001      	movs	r0, #1
   149e8:	f005 fc97 	bl	1a31a <nrfx_busy_wait>
   149ec:	3d01      	subs	r5, #1
   149ee:	d1f6      	bne.n	149de <clock_stop+0x9a>
   149f0:	e7ad      	b.n	1494e <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   149f2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   149f6:	03db      	lsls	r3, r3, #15
   149f8:	d5ed      	bpl.n	149d6 <clock_stop+0x92>
   149fa:	2001      	movs	r0, #1
   149fc:	f005 fc8d 	bl	1a31a <nrfx_busy_wait>
   14a00:	3d01      	subs	r5, #1
   14a02:	d1f6      	bne.n	149f2 <clock_stop+0xae>
   14a04:	e7e7      	b.n	149d6 <clock_stop+0x92>
   14a06:	bf00      	nop
   14a08:	200024b8 	.word	0x200024b8

00014a0c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   14a0c:	4b04      	ldr	r3, [pc, #16]	; (14a20 <nrfx_clock_init+0x14>)
   14a0e:	791a      	ldrb	r2, [r3, #4]
   14a10:	b922      	cbnz	r2, 14a1c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   14a12:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   14a14:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   14a16:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   14a18:	4802      	ldr	r0, [pc, #8]	; (14a24 <nrfx_clock_init+0x18>)
   14a1a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   14a1c:	4802      	ldr	r0, [pc, #8]	; (14a28 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   14a1e:	4770      	bx	lr
   14a20:	200024b8 	.word	0x200024b8
   14a24:	0bad0000 	.word	0x0bad0000
   14a28:	0bad000c 	.word	0x0bad000c

00014a2c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   14a2c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   14a2e:	b110      	cbz	r0, 14a36 <nrfx_clock_start+0xa>
   14a30:	2801      	cmp	r0, #1
   14a32:	d043      	beq.n	14abc <nrfx_clock_start+0x90>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   14a34:	bd38      	pop	{r3, r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   14a3a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14a3e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   14a42:	03c8      	lsls	r0, r1, #15
   14a44:	d40b      	bmi.n	14a5e <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   14a46:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   14a4a:	07d9      	lsls	r1, r3, #31
   14a4c:	d50f      	bpl.n	14a6e <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   14a4e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   14a52:	079b      	lsls	r3, r3, #30
   14a54:	d408      	bmi.n	14a68 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
   14a56:	2302      	movs	r3, #2
   14a58:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   14a5c:	e7ea      	b.n	14a34 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   14a5e:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   14a62:	2b01      	cmp	r3, #1
   14a64:	d004      	beq.n	14a70 <nrfx_clock_start+0x44>
   14a66:	b113      	cbz	r3, 14a6e <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   14a68:	2000      	movs	r0, #0
   14a6a:	f7ff ff6b 	bl	14944 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   14a6e:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
   14a70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   14a74:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14a78:	2300      	movs	r3, #0
   14a7a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   14a7e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   14a82:	2302      	movs	r3, #2
   14a84:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   14a88:	4a12      	ldr	r2, [pc, #72]	; (14ad4 <nrfx_clock_start+0xa8>)
   14a8a:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   14a8e:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   14a92:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
   14a96:	4b10      	ldr	r3, [pc, #64]	; (14ad8 <nrfx_clock_start+0xac>)
   14a98:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   14a9a:	f044 0101 	orr.w	r1, r4, #1
   14a9e:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   14aa0:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   14aa2:	6859      	ldr	r1, [r3, #4]
   14aa4:	1b49      	subs	r1, r1, r5
   14aa6:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   14aaa:	d3fa      	bcc.n	14aa2 <nrfx_clock_start+0x76>
    DWT->CTRL = dwt_ctrl;
   14aac:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
   14ab2:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   14ab6:	2201      	movs	r2, #1
   14ab8:	609a      	str	r2, [r3, #8]
}
   14aba:	e7bb      	b.n	14a34 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14abc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14ac0:	2200      	movs	r2, #0
   14ac2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14ac6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   14aca:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14ace:	6018      	str	r0, [r3, #0]
}
   14ad0:	e7b0      	b.n	14a34 <nrfx_clock_start+0x8>
   14ad2:	bf00      	nop
   14ad4:	e000ed00 	.word	0xe000ed00
   14ad8:	e0001000 	.word	0xe0001000

00014adc <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   14adc:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14ae2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   14ae6:	b16a      	cbz	r2, 14b04 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ae8:	2200      	movs	r2, #0
   14aea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14aee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   14af2:	2201      	movs	r2, #1
   14af4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   14af8:	4b11      	ldr	r3, [pc, #68]	; (14b40 <nrfx_power_clock_irq_handler+0x64>)
   14afa:	7958      	ldrb	r0, [r3, #5]
   14afc:	b910      	cbnz	r0, 14b04 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   14afe:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   14b00:	681b      	ldr	r3, [r3, #0]
   14b02:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14b04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14b08:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   14b0c:	b172      	cbz	r2, 14b2c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14b0e:	2200      	movs	r2, #0
   14b10:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   14b14:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14b18:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14b1c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   14b20:	0792      	lsls	r2, r2, #30
   14b22:	d104      	bne.n	14b2e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   14b24:	2201      	movs	r2, #1
   14b26:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14b2a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   14b2c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   14b2e:	2202      	movs	r2, #2
   14b30:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   14b34:	4b02      	ldr	r3, [pc, #8]	; (14b40 <nrfx_power_clock_irq_handler+0x64>)
}
   14b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   14b3a:	681b      	ldr	r3, [r3, #0]
   14b3c:	2001      	movs	r0, #1
   14b3e:	4718      	bx	r3
   14b40:	200024b8 	.word	0x200024b8

00014b44 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   14b44:	4b03      	ldr	r3, [pc, #12]	; (14b54 <pin_in_use_by_te+0x10>)
   14b46:	3008      	adds	r0, #8
   14b48:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   14b4c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   14b50:	4770      	bx	lr
   14b52:	bf00      	nop
   14b54:	20000774 	.word	0x20000774

00014b58 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   14b58:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14b5a:	f100 0308 	add.w	r3, r0, #8
   14b5e:	4c0c      	ldr	r4, [pc, #48]	; (14b90 <call_handler+0x38>)
   14b60:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   14b64:	05da      	lsls	r2, r3, #23
{
   14b66:	4605      	mov	r5, r0
   14b68:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14b6a:	d507      	bpl.n	14b7c <call_handler+0x24>
   14b6c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   14b70:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   14b74:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   14b78:	6852      	ldr	r2, [r2, #4]
   14b7a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   14b7c:	68a3      	ldr	r3, [r4, #8]
   14b7e:	b12b      	cbz	r3, 14b8c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   14b80:	68e2      	ldr	r2, [r4, #12]
   14b82:	4631      	mov	r1, r6
   14b84:	4628      	mov	r0, r5
    }
}
   14b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   14b8a:	4718      	bx	r3
}
   14b8c:	bd70      	pop	{r4, r5, r6, pc}
   14b8e:	bf00      	nop
   14b90:	20000774 	.word	0x20000774

00014b94 <release_handler>:
{
   14b94:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14b96:	4a12      	ldr	r2, [pc, #72]	; (14be0 <release_handler+0x4c>)
   14b98:	3008      	adds	r0, #8
   14b9a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   14b9e:	05d9      	lsls	r1, r3, #23
   14ba0:	d51b      	bpl.n	14bda <release_handler+0x46>
   14ba2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   14ba6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   14baa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   14bae:	f102 040e 	add.w	r4, r2, #14
   14bb2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   14bb4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   14bb8:	f413 7f80 	tst.w	r3, #256	; 0x100
   14bbc:	d003      	beq.n	14bc6 <release_handler+0x32>
   14bbe:	f3c3 2343 	ubfx	r3, r3, #9, #4
   14bc2:	4299      	cmp	r1, r3
   14bc4:	d009      	beq.n	14bda <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   14bc6:	3001      	adds	r0, #1
   14bc8:	2820      	cmp	r0, #32
   14bca:	d1f3      	bne.n	14bb4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   14bcc:	2300      	movs	r3, #0
   14bce:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   14bd2:	4804      	ldr	r0, [pc, #16]	; (14be4 <release_handler+0x50>)
}
   14bd4:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   14bd6:	f7ff be95 	b.w	14904 <nrfx_flag32_free>
}
   14bda:	bc10      	pop	{r4}
   14bdc:	4770      	bx	lr
   14bde:	bf00      	nop
   14be0:	20000774 	.word	0x20000774
   14be4:	200007c8 	.word	0x200007c8

00014be8 <pin_handler_trigger_uninit>:
{
   14be8:	b538      	push	{r3, r4, r5, lr}
   14bea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   14bec:	f7ff ffaa 	bl	14b44 <pin_in_use_by_te>
   14bf0:	4c09      	ldr	r4, [pc, #36]	; (14c18 <pin_handler_trigger_uninit+0x30>)
   14bf2:	f102 0508 	add.w	r5, r2, #8
   14bf6:	b140      	cbz	r0, 14c0a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14bf8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   14bfc:	4907      	ldr	r1, [pc, #28]	; (14c1c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   14bfe:	0b5b      	lsrs	r3, r3, #13
   14c00:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   14c04:	2000      	movs	r0, #0
   14c06:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   14c0a:	4610      	mov	r0, r2
   14c0c:	f7ff ffc2 	bl	14b94 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   14c10:	2300      	movs	r3, #0
   14c12:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   14c16:	bd38      	pop	{r3, r4, r5, pc}
   14c18:	20000774 	.word	0x20000774
   14c1c:	40006000 	.word	0x40006000

00014c20 <nrfx_gpiote_input_configure>:
{
   14c20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14c24:	4604      	mov	r4, r0
   14c26:	461d      	mov	r5, r3
    if (p_input_config)
   14c28:	b309      	cbz	r1, 14c6e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14c2a:	4f4f      	ldr	r7, [pc, #316]	; (14d68 <nrfx_gpiote_input_configure+0x148>)
   14c2c:	f100 0808 	add.w	r8, r0, #8
   14c30:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   14c34:	07b3      	lsls	r3, r6, #30
   14c36:	d506      	bpl.n	14c46 <nrfx_gpiote_input_configure+0x26>
   14c38:	f7ff ff84 	bl	14b44 <pin_in_use_by_te>
   14c3c:	b118      	cbz	r0, 14c46 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   14c3e:	484b      	ldr	r0, [pc, #300]	; (14d6c <nrfx_gpiote_input_configure+0x14c>)
}
   14c40:	b002      	add	sp, #8
   14c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
   14c46:	f004 031f 	and.w	r3, r4, #31
   14c4a:	009b      	lsls	r3, r3, #2
   14c4c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14c50:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14c52:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   14c56:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
   14c5a:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   14c5e:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14c62:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
   14c66:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   14c6a:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
   14c6e:	b19a      	cbz	r2, 14c98 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14c70:	4b3d      	ldr	r3, [pc, #244]	; (14d68 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   14c72:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   14c74:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14c76:	f104 0608 	add.w	r6, r4, #8
   14c7a:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
   14c7e:	f011 0f02 	tst.w	r1, #2
   14c82:	d00d      	beq.n	14ca0 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
   14c84:	2800      	cmp	r0, #0
   14c86:	d1da      	bne.n	14c3e <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   14c88:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
   14c8c:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   14c90:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
   14c94:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
   14c98:	2d00      	cmp	r5, #0
   14c9a:	d13b      	bne.n	14d14 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
   14c9c:	4834      	ldr	r0, [pc, #208]	; (14d70 <nrfx_gpiote_input_configure+0x150>)
   14c9e:	e7cf      	b.n	14c40 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   14ca0:	f021 0120 	bic.w	r1, r1, #32
   14ca4:	04c9      	lsls	r1, r1, #19
   14ca6:	0cc9      	lsrs	r1, r1, #19
   14ca8:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
   14cac:	2800      	cmp	r0, #0
   14cae:	d0eb      	beq.n	14c88 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   14cb0:	2f03      	cmp	r7, #3
   14cb2:	d8c4      	bhi.n	14c3e <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   14cb4:	6852      	ldr	r2, [r2, #4]
   14cb6:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   14cba:	b92f      	cbnz	r7, 14cc8 <nrfx_gpiote_input_configure+0xa8>
   14cbc:	4a2d      	ldr	r2, [pc, #180]	; (14d74 <nrfx_gpiote_input_configure+0x154>)
   14cbe:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
   14cc2:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   14cc6:	e7df      	b.n	14c88 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14cc8:	ea4f 028c 	mov.w	r2, ip, lsl #2
   14ccc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   14cd0:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14cd4:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   14cd8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   14cdc:	f020 0003 	bic.w	r0, r0, #3
   14ce0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14ce4:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   14ce8:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   14cec:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   14cf0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14cf4:	0220      	lsls	r0, r4, #8
   14cf6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   14cfa:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   14cfe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   14d02:	ea40 000e 	orr.w	r0, r0, lr
   14d06:	f041 0120 	orr.w	r1, r1, #32
   14d0a:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
   14d0e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   14d12:	e7b9      	b.n	14c88 <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   14d14:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   14d18:	4620      	mov	r0, r4
   14d1a:	f7ff ff3b 	bl	14b94 <release_handler>
    if (!handler)
   14d1e:	2e00      	cmp	r6, #0
   14d20:	d0bc      	beq.n	14c9c <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   14d22:	4d11      	ldr	r5, [pc, #68]	; (14d68 <nrfx_gpiote_input_configure+0x148>)
   14d24:	e9d5 2300 	ldrd	r2, r3, [r5]
   14d28:	4296      	cmp	r6, r2
   14d2a:	d101      	bne.n	14d30 <nrfx_gpiote_input_configure+0x110>
   14d2c:	429f      	cmp	r7, r3
   14d2e:	d019      	beq.n	14d64 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   14d30:	4811      	ldr	r0, [pc, #68]	; (14d78 <nrfx_gpiote_input_configure+0x158>)
   14d32:	f10d 0107 	add.w	r1, sp, #7
   14d36:	f7ff fdc5 	bl	148c4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   14d3a:	4b0d      	ldr	r3, [pc, #52]	; (14d70 <nrfx_gpiote_input_configure+0x150>)
   14d3c:	4298      	cmp	r0, r3
   14d3e:	f47f af7f 	bne.w	14c40 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   14d42:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
   14d46:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   14d4a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   14d4e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   14d50:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   14d52:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   14d56:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   14d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   14d5e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   14d62:	e79b      	b.n	14c9c <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   14d64:	2200      	movs	r2, #0
   14d66:	e7ee      	b.n	14d46 <nrfx_gpiote_input_configure+0x126>
   14d68:	20000774 	.word	0x20000774
   14d6c:	0bad0004 	.word	0x0bad0004
   14d70:	0bad0000 	.word	0x0bad0000
   14d74:	40006000 	.word	0x40006000
   14d78:	200007c8 	.word	0x200007c8

00014d7c <nrfx_gpiote_output_configure>:
{
   14d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d7e:	4604      	mov	r4, r0
    if (p_config)
   14d80:	b389      	cbz	r1, 14de6 <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14d82:	4e3a      	ldr	r6, [pc, #232]	; (14e6c <nrfx_gpiote_output_configure+0xf0>)
   14d84:	f100 0708 	add.w	r7, r0, #8
   14d88:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   14d8c:	07ab      	lsls	r3, r5, #30
   14d8e:	d404      	bmi.n	14d9a <nrfx_gpiote_output_configure+0x1e>
   14d90:	f7ff fed8 	bl	14b44 <pin_in_use_by_te>
   14d94:	b108      	cbz	r0, 14d9a <nrfx_gpiote_output_configure+0x1e>
{
   14d96:	4836      	ldr	r0, [pc, #216]	; (14e70 <nrfx_gpiote_output_configure+0xf4>)
}
   14d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   14d9a:	f015 0f1c 	tst.w	r5, #28
   14d9e:	784b      	ldrb	r3, [r1, #1]
   14da0:	d124      	bne.n	14dec <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
   14da2:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14da6:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
   14daa:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14dae:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14db0:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14db4:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   14db8:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   14dba:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
   14dbe:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
   14dc2:	f02c 0c07 	bic.w	ip, ip, #7
   14dc6:	ea43 030c 	orr.w	r3, r3, ip
   14dca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   14dce:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   14dd2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14dd6:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   14dda:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
   14dde:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   14de2:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   14de6:	b922      	cbnz	r2, 14df2 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
   14de8:	4822      	ldr	r0, [pc, #136]	; (14e74 <nrfx_gpiote_output_configure+0xf8>)
   14dea:	e7d5      	b.n	14d98 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   14dec:	2b01      	cmp	r3, #1
   14dee:	d1d8      	bne.n	14da2 <nrfx_gpiote_output_configure+0x26>
   14df0:	e7d1      	b.n	14d96 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14df2:	4e1e      	ldr	r6, [pc, #120]	; (14e6c <nrfx_gpiote_output_configure+0xf0>)
   14df4:	f104 0708 	add.w	r7, r4, #8
   14df8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   14dfc:	0783      	lsls	r3, r0, #30
   14dfe:	d5ca      	bpl.n	14d96 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   14e00:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   14e04:	4661      	mov	r1, ip
   14e06:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   14e08:	f020 0020 	bic.w	r0, r0, #32
   14e0c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   14e10:	04c0      	lsls	r0, r0, #19
   14e12:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   14e16:	0cc0      	lsrs	r0, r0, #19
   14e18:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   14e1c:	2300      	movs	r3, #0
   14e1e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   14e22:	7855      	ldrb	r5, [r2, #1]
   14e24:	2d00      	cmp	r5, #0
   14e26:	d0df      	beq.n	14de8 <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   14e28:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   14e2c:	7892      	ldrb	r2, [r2, #2]
   14e2e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   14e32:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   14e36:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14e3a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   14e3e:	0223      	lsls	r3, r4, #8
   14e40:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14e44:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14e46:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14e4a:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   14e4e:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14e50:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   14e52:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14e56:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14e5a:	4313      	orrs	r3, r2
   14e5c:	f040 0020 	orr.w	r0, r0, #32
   14e60:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   14e64:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   14e68:	e7be      	b.n	14de8 <nrfx_gpiote_output_configure+0x6c>
   14e6a:	bf00      	nop
   14e6c:	20000774 	.word	0x20000774
   14e70:	0bad0004 	.word	0x0bad0004
   14e74:	0bad0000 	.word	0x0bad0000

00014e78 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   14e78:	4b01      	ldr	r3, [pc, #4]	; (14e80 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   14e7a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   14e7e:	4770      	bx	lr
   14e80:	20000774 	.word	0x20000774

00014e84 <nrfx_gpiote_channel_get>:
{
   14e84:	b508      	push	{r3, lr}
   14e86:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   14e88:	f7ff fe5c 	bl	14b44 <pin_in_use_by_te>
   14e8c:	b138      	cbz	r0, 14e9e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14e8e:	4b05      	ldr	r3, [pc, #20]	; (14ea4 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   14e90:	4805      	ldr	r0, [pc, #20]	; (14ea8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14e92:	3208      	adds	r2, #8
   14e94:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   14e98:	0b5b      	lsrs	r3, r3, #13
   14e9a:	700b      	strb	r3, [r1, #0]
}
   14e9c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   14e9e:	4803      	ldr	r0, [pc, #12]	; (14eac <nrfx_gpiote_channel_get+0x28>)
   14ea0:	e7fc      	b.n	14e9c <nrfx_gpiote_channel_get+0x18>
   14ea2:	bf00      	nop
   14ea4:	20000774 	.word	0x20000774
   14ea8:	0bad0000 	.word	0x0bad0000
   14eac:	0bad0004 	.word	0x0bad0004

00014eb0 <nrfx_gpiote_init>:
{
   14eb0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   14eb2:	4c0f      	ldr	r4, [pc, #60]	; (14ef0 <nrfx_gpiote_init+0x40>)
   14eb4:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   14eb8:	b9bd      	cbnz	r5, 14eea <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   14eba:	2240      	movs	r2, #64	; 0x40
   14ebc:	4629      	mov	r1, r5
   14ebe:	f104 0010 	add.w	r0, r4, #16
   14ec2:	f002 fda6 	bl	17a12 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   14ec6:	2006      	movs	r0, #6
   14ec8:	f7ed f9e4 	bl	2294 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14ecc:	4b09      	ldr	r3, [pc, #36]	; (14ef4 <nrfx_gpiote_init+0x44>)
    return err_code;
   14ece:	480a      	ldr	r0, [pc, #40]	; (14ef8 <nrfx_gpiote_init+0x48>)
   14ed0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   14ed4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   14ed8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14edc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   14ee0:	2301      	movs	r3, #1
   14ee2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   14ee6:	6563      	str	r3, [r4, #84]	; 0x54
}
   14ee8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   14eea:	4804      	ldr	r0, [pc, #16]	; (14efc <nrfx_gpiote_init+0x4c>)
   14eec:	e7fc      	b.n	14ee8 <nrfx_gpiote_init+0x38>
   14eee:	bf00      	nop
   14ef0:	20000774 	.word	0x20000774
   14ef4:	40006000 	.word	0x40006000
   14ef8:	0bad0000 	.word	0x0bad0000
   14efc:	0bad0005 	.word	0x0bad0005

00014f00 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   14f00:	4b03      	ldr	r3, [pc, #12]	; (14f10 <nrfx_gpiote_is_init+0x10>)
   14f02:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   14f06:	3800      	subs	r0, #0
   14f08:	bf18      	it	ne
   14f0a:	2001      	movne	r0, #1
   14f0c:	4770      	bx	lr
   14f0e:	bf00      	nop
   14f10:	20000774 	.word	0x20000774

00014f14 <nrfx_gpiote_channel_free>:
{
   14f14:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   14f16:	4801      	ldr	r0, [pc, #4]	; (14f1c <nrfx_gpiote_channel_free+0x8>)
   14f18:	f7ff bcf4 	b.w	14904 <nrfx_flag32_free>
   14f1c:	200007c4 	.word	0x200007c4

00014f20 <nrfx_gpiote_channel_alloc>:
{
   14f20:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   14f22:	4801      	ldr	r0, [pc, #4]	; (14f28 <nrfx_gpiote_channel_alloc+0x8>)
   14f24:	f7ff bcce 	b.w	148c4 <nrfx_flag32_alloc>
   14f28:	200007c4 	.word	0x200007c4

00014f2c <nrfx_gpiote_trigger_enable>:
{
   14f2c:	b510      	push	{r4, lr}
   14f2e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14f30:	f7ff fe08 	bl	14b44 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14f34:	f102 0408 	add.w	r4, r2, #8
   14f38:	4b1c      	ldr	r3, [pc, #112]	; (14fac <nrfx_gpiote_trigger_enable+0x80>)
   14f3a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14f3e:	b1e0      	cbz	r0, 14f7a <nrfx_gpiote_trigger_enable+0x4e>
   14f40:	f013 0402 	ands.w	r4, r3, #2
   14f44:	d119      	bne.n	14f7a <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14f46:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   14f48:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   14f4a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   14f4e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   14f52:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   14f56:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14f5a:	6004      	str	r4, [r0, #0]
   14f5c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   14f5e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   14f62:	f040 0001 	orr.w	r0, r0, #1
   14f66:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   14f6a:	b129      	cbz	r1, 14f78 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   14f6c:	2201      	movs	r2, #1
   14f6e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   14f72:	4a0f      	ldr	r2, [pc, #60]	; (14fb0 <nrfx_gpiote_trigger_enable+0x84>)
   14f74:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   14f78:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14f7a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   14f7e:	2b04      	cmp	r3, #4
   14f80:	d010      	beq.n	14fa4 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   14f82:	2b05      	cmp	r3, #5
   14f84:	d010      	beq.n	14fa8 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
   14f86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14f8a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
   14f8e:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   14f92:	40d9      	lsrs	r1, r3
   14f94:	f001 0101 	and.w	r1, r1, #1
   14f98:	3102      	adds	r1, #2
}
   14f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   14f9e:	4610      	mov	r0, r2
   14fa0:	f005 b9cc 	b.w	1a33c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   14fa4:	2103      	movs	r1, #3
   14fa6:	e7f8      	b.n	14f9a <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   14fa8:	2102      	movs	r1, #2
   14faa:	e7f6      	b.n	14f9a <nrfx_gpiote_trigger_enable+0x6e>
   14fac:	20000774 	.word	0x20000774
   14fb0:	40006000 	.word	0x40006000

00014fb4 <nrfx_gpiote_trigger_disable>:
{
   14fb4:	b508      	push	{r3, lr}
   14fb6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14fb8:	f7ff fdc4 	bl	14b44 <pin_in_use_by_te>
   14fbc:	b1c0      	cbz	r0, 14ff0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14fbe:	f102 0108 	add.w	r1, r2, #8
   14fc2:	4b0e      	ldr	r3, [pc, #56]	; (14ffc <nrfx_gpiote_trigger_disable+0x48>)
   14fc4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14fc8:	0799      	lsls	r1, r3, #30
   14fca:	d411      	bmi.n	14ff0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14fcc:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   14fce:	2201      	movs	r2, #1
   14fd0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   14fd2:	009b      	lsls	r3, r3, #2
   14fd4:	490a      	ldr	r1, [pc, #40]	; (15000 <nrfx_gpiote_trigger_disable+0x4c>)
   14fd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14fda:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   14fde:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14fe2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   14fe6:	f022 0203 	bic.w	r2, r2, #3
   14fea:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   14fee:	bd08      	pop	{r3, pc}
   14ff0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   14ff4:	2100      	movs	r1, #0
   14ff6:	4610      	mov	r0, r2
   14ff8:	f005 b9a0 	b.w	1a33c <nrf_gpio_cfg_sense_set>
   14ffc:	20000774 	.word	0x20000774
   15000:	40006000 	.word	0x40006000

00015004 <nrfx_gpiote_pin_uninit>:
{
   15004:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   15006:	4b0d      	ldr	r3, [pc, #52]	; (1503c <nrfx_gpiote_pin_uninit+0x38>)
   15008:	f100 0208 	add.w	r2, r0, #8
{
   1500c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1500e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   15012:	07db      	lsls	r3, r3, #31
   15014:	d50f      	bpl.n	15036 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
   15016:	f7ff ffcd 	bl	14fb4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1501a:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
   1501c:	f004 041f 	and.w	r4, r4, #31
   15020:	f7ff fde2 	bl	14be8 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   15024:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   15028:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1502c:	2202      	movs	r2, #2
   1502e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   15032:	4803      	ldr	r0, [pc, #12]	; (15040 <nrfx_gpiote_pin_uninit+0x3c>)
}
   15034:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   15036:	4803      	ldr	r0, [pc, #12]	; (15044 <nrfx_gpiote_pin_uninit+0x40>)
   15038:	e7fc      	b.n	15034 <nrfx_gpiote_pin_uninit+0x30>
   1503a:	bf00      	nop
   1503c:	20000774 	.word	0x20000774
   15040:	0bad0000 	.word	0x0bad0000
   15044:	0bad0004 	.word	0x0bad0004

00015048 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   15048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1504c:	4b4f      	ldr	r3, [pc, #316]	; (1518c <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
   1504e:	4850      	ldr	r0, [pc, #320]	; (15190 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   15050:	4950      	ldr	r1, [pc, #320]	; (15194 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
   15052:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   15054:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15056:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15058:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1505a:	b136      	cbz	r6, 1506a <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   1505c:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   15060:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15062:	bf1e      	ittt	ne
   15064:	601c      	strne	r4, [r3, #0]
   15066:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   15068:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1506a:	3304      	adds	r3, #4
   1506c:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1506e:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   15072:	d1f1      	bne.n	15058 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15074:	4b46      	ldr	r3, [pc, #280]	; (15190 <nrfx_gpiote_irq_handler+0x148>)
   15076:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1507a:	b1bb      	cbz	r3, 150ac <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   1507c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   15080:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   15084:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   15086:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1508a:	af01      	add	r7, sp, #4
   1508c:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   15090:	9c01      	ldr	r4, [sp, #4]
   15092:	b98c      	cbnz	r4, 150b8 <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15094:	4b3e      	ldr	r3, [pc, #248]	; (15190 <nrfx_gpiote_irq_handler+0x148>)
   15096:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
   1509a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1509e:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   150a2:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   150a4:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
   150a8:	2b00      	cmp	r3, #0
   150aa:	d1ee      	bne.n	1508a <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   150ac:	2401      	movs	r4, #1
    while (mask)
   150ae:	2d00      	cmp	r5, #0
   150b0:	d153      	bne.n	1515a <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   150b2:	b003      	add	sp, #12
   150b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   150b8:	fa94 f4a4 	rbit	r4, r4
   150bc:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   150c0:	4a35      	ldr	r2, [pc, #212]	; (15198 <nrfx_gpiote_irq_handler+0x150>)
   150c2:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   150c6:	08e0      	lsrs	r0, r4, #3
   150c8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   150cc:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
   150ce:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   150d2:	fa08 f202 	lsl.w	r2, r8, r2
   150d6:	ea23 0302 	bic.w	r3, r3, r2
   150da:	543b      	strb	r3, [r7, r0]
   150dc:	00a3      	lsls	r3, r4, #2
   150de:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
   150e2:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   150e6:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
   150ea:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   150ec:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   150ee:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   150f2:	d518      	bpl.n	15126 <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
   150f4:	4659      	mov	r1, fp
   150f6:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   150f8:	fa5f fa82 	uxtb.w	sl, r2
   150fc:	f7ff fd2c 	bl	14b58 <call_handler>
   15100:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
   15104:	f3c3 4301 	ubfx	r3, r3, #16, #2
   15108:	459a      	cmp	sl, r3
   1510a:	d107      	bne.n	1511c <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1510c:	2100      	movs	r1, #0
   1510e:	4620      	mov	r0, r4
   15110:	f005 f914 	bl	1a33c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   15114:	4651      	mov	r1, sl
   15116:	4620      	mov	r0, r4
   15118:	f005 f910 	bl	1a33c <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   1511c:	fa08 f404 	lsl.w	r4, r8, r4
   15120:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
   15124:	e7b4      	b.n	15090 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   15126:	2a02      	cmp	r2, #2
   15128:	d10c      	bne.n	15144 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1512a:	2103      	movs	r1, #3
   1512c:	4620      	mov	r0, r4
   1512e:	f005 f905 	bl	1a33c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   15132:	f00a 0305 	and.w	r3, sl, #5
   15136:	2b01      	cmp	r3, #1
   15138:	d1f0      	bne.n	1511c <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
   1513a:	4659      	mov	r1, fp
   1513c:	4620      	mov	r0, r4
   1513e:	f7ff fd0b 	bl	14b58 <call_handler>
   15142:	e7eb      	b.n	1511c <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   15144:	2102      	movs	r1, #2
   15146:	4620      	mov	r0, r4
   15148:	f005 f8f8 	bl	1a33c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1514c:	f1ba 0f03 	cmp.w	sl, #3
   15150:	d0f3      	beq.n	1513a <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   15152:	2a03      	cmp	r2, #3
   15154:	d1e2      	bne.n	1511c <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   15156:	458a      	cmp	sl, r1
   15158:	e7ee      	b.n	15138 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
   1515a:	fa95 f3a5 	rbit	r3, r5
   1515e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   15162:	fa04 f203 	lsl.w	r2, r4, r3
   15166:	009b      	lsls	r3, r3, #2
   15168:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1516c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   15170:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15174:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   15178:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1517c:	f3c0 2004 	ubfx	r0, r0, #8, #5
   15180:	f3c1 4101 	ubfx	r1, r1, #16, #2
   15184:	f7ff fce8 	bl	14b58 <call_handler>
   15188:	e791      	b.n	150ae <nrfx_gpiote_irq_handler+0x66>
   1518a:	bf00      	nop
   1518c:	40006100 	.word	0x40006100
   15190:	40006000 	.word	0x40006000
   15194:	40006120 	.word	0x40006120
   15198:	20000774 	.word	0x20000774

0001519c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1519c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1519e:	4801      	ldr	r0, [pc, #4]	; (151a4 <nrfx_ppi_channel_alloc+0x8>)
   151a0:	f7ff bb90 	b.w	148c4 <nrfx_flag32_alloc>
   151a4:	200007d0 	.word	0x200007d0

000151a8 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   151a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   151aa:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   151ae:	b087      	sub	sp, #28
   151b0:	4604      	mov	r4, r0
   151b2:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   151b4:	b1f3      	cbz	r3, 151f4 <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   151b6:	2300      	movs	r3, #0
   151b8:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   151bc:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   151c0:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   151c4:	b9b3      	cbnz	r3, 151f4 <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   151c6:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
   151c8:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   151cc:	2302      	movs	r3, #2
   151ce:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   151d0:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   151d2:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   151d6:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   151da:	b11b      	cbz	r3, 151e4 <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   151dc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   151e0:	059f      	lsls	r7, r3, #22
   151e2:	d402      	bmi.n	151ea <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151e4:	2301      	movs	r3, #1
   151e6:	6223      	str	r3, [r4, #32]
   151e8:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
   151ea:	2301      	movs	r3, #1
   151ec:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
   151f0:	b007      	add	sp, #28
   151f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   151f4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   151f8:	2b00      	cmp	r3, #0
   151fa:	d041      	beq.n	15280 <twim_irq_handler+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   151fc:	2300      	movs	r3, #0
   151fe:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   15202:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   15206:	6a2b      	ldr	r3, [r5, #32]
   15208:	065e      	lsls	r6, r3, #25
   1520a:	d40a      	bmi.n	15222 <twim_irq_handler+0x7a>
   1520c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   15210:	b93b      	cbnz	r3, 15222 <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   15212:	4629      	mov	r1, r5
   15214:	4620      	mov	r0, r4
   15216:	f005 f89f 	bl	1a358 <xfer_completeness_check>
   1521a:	f080 0001 	eor.w	r0, r0, #1
   1521e:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   15222:	6a2b      	ldr	r3, [r5, #32]
   15224:	f013 0c04 	ands.w	ip, r3, #4
   15228:	d13b      	bne.n	152a2 <twim_irq_handler+0xfa>
            event.xfer_desc = p_cb->xfer_desc;
   1522a:	f105 070c 	add.w	r7, r5, #12
   1522e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   15230:	ae01      	add	r6, sp, #4
   15232:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   15234:	683b      	ldr	r3, [r7, #0]
   15236:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
   1523a:	6033      	str	r3, [r6, #0]
   1523c:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   15240:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
   15244:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   15248:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1524c:	b113      	cbz	r3, 15254 <twim_irq_handler+0xac>
   1524e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   15252:	b333      	cbz	r3, 152a2 <twim_irq_handler+0xfa>
    p_reg->SHORTS = mask;
   15254:	2300      	movs	r3, #0
   15256:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   1525a:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   1525c:	4b2d      	ldr	r3, [pc, #180]	; (15314 <twim_irq_handler+0x16c>)
   1525e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   15262:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   15266:	2b00      	cmp	r3, #0
   15268:	db1b      	blt.n	152a2 <twim_irq_handler+0xfa>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1526a:	095a      	lsrs	r2, r3, #5
   1526c:	2101      	movs	r1, #1
   1526e:	f003 031f 	and.w	r3, r3, #31
   15272:	4099      	lsls	r1, r3
   15274:	f102 0360 	add.w	r3, r2, #96	; 0x60
   15278:	4a27      	ldr	r2, [pc, #156]	; (15318 <twim_irq_handler+0x170>)
   1527a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   1527e:	e010      	b.n	152a2 <twim_irq_handler+0xfa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15280:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   15284:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   15288:	7b2b      	ldrb	r3, [r5, #12]
   1528a:	bb5b      	cbnz	r3, 152e4 <twim_irq_handler+0x13c>
            event.xfer_desc = p_cb->xfer_desc;
   1528c:	f105 070c 	add.w	r7, r5, #12
   15290:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   15292:	ae01      	add	r6, sp, #4
   15294:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   15296:	683b      	ldr	r3, [r7, #0]
   15298:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   1529a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1529e:	2b00      	cmp	r3, #0
   152a0:	d0d9      	beq.n	15256 <twim_irq_handler+0xae>
    uint32_t error_source = p_reg->ERRORSRC;
   152a2:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   152a6:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   152aa:	0798      	lsls	r0, r3, #30
   152ac:	d42c      	bmi.n	15308 <twim_irq_handler+0x160>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   152ae:	0759      	lsls	r1, r3, #29
   152b0:	d42c      	bmi.n	1530c <twim_irq_handler+0x164>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   152b2:	07da      	lsls	r2, r3, #31
   152b4:	d42c      	bmi.n	15310 <twim_irq_handler+0x168>
    else if (p_cb->error)
   152b6:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   152ba:	009b      	lsls	r3, r3, #2
   152bc:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   152be:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   152c2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   152c6:	b90b      	cbnz	r3, 152cc <twim_irq_handler+0x124>
        p_cb->busy = false;
   152c8:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   152cc:	6a2b      	ldr	r3, [r5, #32]
   152ce:	075b      	lsls	r3, r3, #29
   152d0:	d503      	bpl.n	152da <twim_irq_handler+0x132>
   152d2:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   152d6:	2b00      	cmp	r3, #0
   152d8:	d08a      	beq.n	151f0 <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
   152da:	e9d5 3100 	ldrd	r3, r1, [r5]
   152de:	4668      	mov	r0, sp
   152e0:	4798      	blx	r3
   152e2:	e785      	b.n	151f0 <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
   152e4:	f44f 7300 	mov.w	r3, #512	; 0x200
   152e8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   152ec:	f240 2302 	movw	r3, #514	; 0x202
   152f0:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   152f2:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   152f6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   152fa:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   152fc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15300:	2301      	movs	r3, #1
   15302:	60a3      	str	r3, [r4, #8]
   15304:	6223      	str	r3, [r4, #32]
            return;
   15306:	e773      	b.n	151f0 <twim_irq_handler+0x48>
   15308:	2301      	movs	r3, #1
   1530a:	e7d8      	b.n	152be <twim_irq_handler+0x116>
   1530c:	2302      	movs	r3, #2
   1530e:	e7d6      	b.n	152be <twim_irq_handler+0x116>
   15310:	2303      	movs	r3, #3
   15312:	e7d4      	b.n	152be <twim_irq_handler+0x116>
   15314:	019c0202 	.word	0x019c0202
   15318:	e000e100 	.word	0xe000e100

0001531c <nrfx_twim_init>:
{
   1531c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1531e:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   15320:	4d24      	ldr	r5, [pc, #144]	; (153b4 <nrfx_twim_init+0x98>)
   15322:	f04f 0e34 	mov.w	lr, #52	; 0x34
   15326:	fb0e fe06 	mul.w	lr, lr, r6
   1532a:	eb05 040e 	add.w	r4, r5, lr
   1532e:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   15332:	2f00      	cmp	r7, #0
   15334:	d13c      	bne.n	153b0 <nrfx_twim_init+0x94>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   15336:	f8d0 c000 	ldr.w	ip, [r0]
    p_cb->handler         = event_handler;
   1533a:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->int_mask        = 0;
   1533e:	60a7      	str	r7, [r4, #8]
    p_cb->p_context       = p_context;
   15340:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
   15342:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   15346:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1534a:	7b4b      	ldrb	r3, [r1, #13]
   1534c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   15350:	7b8b      	ldrb	r3, [r1, #14]
   15352:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   15356:	b1c3      	cbz	r3, 1538a <nrfx_twim_init+0x6e>
   15358:	7bcb      	ldrb	r3, [r1, #15]
   1535a:	b92b      	cbnz	r3, 15368 <nrfx_twim_init+0x4c>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   1535c:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   15360:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   15364:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   15368:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   1536a:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
    if (p_cb->handler)
   1536e:	b122      	cbz	r2, 1537a <nrfx_twim_init+0x5e>
   15370:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   15372:	f340 3007 	sbfx	r0, r0, #12, #8
   15376:	f7ec ff8d 	bl	2294 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1537a:	2334      	movs	r3, #52	; 0x34
   1537c:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
   15380:	480d      	ldr	r0, [pc, #52]	; (153b8 <nrfx_twim_init+0x9c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   15382:	2301      	movs	r3, #1
   15384:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   15388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
   1538a:	680b      	ldr	r3, [r1, #0]
   1538c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   15390:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   15394:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15398:	f240 670c 	movw	r7, #1548	; 0x60c
   1539c:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   153a0:	684b      	ldr	r3, [r1, #4]
   153a2:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   153a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   153aa:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   153ae:	e7d3      	b.n	15358 <nrfx_twim_init+0x3c>
        return err_code;
   153b0:	4802      	ldr	r0, [pc, #8]	; (153bc <nrfx_twim_init+0xa0>)
   153b2:	e7e9      	b.n	15388 <nrfx_twim_init+0x6c>
   153b4:	200024c0 	.word	0x200024c0
   153b8:	0bad0000 	.word	0x0bad0000
   153bc:	0bad0005 	.word	0x0bad0005

000153c0 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
   153c0:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   153c2:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   153c4:	2106      	movs	r1, #6
   153c6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   153ca:	4b04      	ldr	r3, [pc, #16]	; (153dc <nrfx_twim_enable+0x1c>)
   153cc:	2134      	movs	r1, #52	; 0x34
   153ce:	fb01 3302 	mla	r3, r1, r2, r3
   153d2:	2202      	movs	r2, #2
   153d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   153d8:	4770      	bx	lr
   153da:	bf00      	nop
   153dc:	200024c0 	.word	0x200024c0

000153e0 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   153e0:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
   153e2:	4b0c      	ldr	r3, [pc, #48]	; (15414 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   153e4:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   153e6:	2034      	movs	r0, #52	; 0x34
   153e8:	fb00 3301 	mla	r3, r0, r1, r3
   153ec:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   153ee:	480a      	ldr	r0, [pc, #40]	; (15418 <nrfx_twim_disable+0x38>)
   153f0:	6099      	str	r1, [r3, #8]
   153f2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   153f6:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   153fa:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   153fe:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   15402:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   15406:	2201      	movs	r2, #1
   15408:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   1540c:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   15410:	4770      	bx	lr
   15412:	bf00      	nop
   15414:	200024c0 	.word	0x200024c0
   15418:	019c0202 	.word	0x019c0202

0001541c <nrfx_twim_xfer>:
{
   1541c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   15420:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 15710 <nrfx_twim_xfer+0x2f4>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   15424:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   15428:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   1542a:	2334      	movs	r3, #52	; 0x34
   1542c:	fb03 c30e 	mla	r3, r3, lr, ip
{
   15430:	4617      	mov	r7, r2
    p_cb->error = false;
   15432:	2200      	movs	r2, #0
   15434:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   15438:	684b      	ldr	r3, [r1, #4]
{
   1543a:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   1543c:	b14b      	cbz	r3, 15452 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1543e:	68cb      	ldr	r3, [r1, #12]
   15440:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   15444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   15448:	d003      	beq.n	15452 <nrfx_twim_xfer+0x36>
        return err_code;
   1544a:	4eb2      	ldr	r6, [pc, #712]	; (15714 <nrfx_twim_xfer+0x2f8>)
}
   1544c:	4630      	mov	r0, r6
   1544e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   15452:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   15454:	4bb0      	ldr	r3, [pc, #704]	; (15718 <nrfx_twim_xfer+0x2fc>)
   15456:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   1545a:	fb06 c60e 	mla	r6, r6, lr, ip
   1545e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   15462:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   15466:	b123      	cbz	r3, 15472 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   15468:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   1546a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   1546e:	4eab      	ldr	r6, [pc, #684]	; (1571c <nrfx_twim_xfer+0x300>)
   15470:	e7ec      	b.n	1544c <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   15472:	f017 0f14 	tst.w	r7, #20
   15476:	bf0c      	ite	eq
   15478:	2301      	moveq	r3, #1
   1547a:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   1547c:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   15480:	46a9      	mov	r9, r5
   15482:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   15486:	f106 080c 	add.w	r8, r6, #12
   1548a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   1548e:	f8d9 3000 	ldr.w	r3, [r9]
   15492:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   15496:	f3c7 1300 	ubfx	r3, r7, #4, #1
   1549a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   1549e:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
   154a0:	786b      	ldrb	r3, [r5, #1]
   154a2:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   154a6:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   154aa:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   154ae:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   154b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   154b6:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   154ba:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   154be:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   154c2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   154c6:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   154ca:	bf18      	it	ne
   154cc:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   154ce:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   154d2:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   154d6:	bf18      	it	ne
   154d8:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   154da:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   154de:	782b      	ldrb	r3, [r5, #0]
   154e0:	2b03      	cmp	r3, #3
   154e2:	f200 80b9 	bhi.w	15658 <nrfx_twim_xfer+0x23c>
   154e6:	e8df f003 	tbb	[pc, r3]
   154ea:	a48b      	.short	0xa48b
   154ec:	026d      	.short	0x026d
   154ee:	692b      	ldr	r3, [r5, #16]
   154f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   154f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   154f8:	d1a7      	bne.n	1544a <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   154fa:	f44f 7380 	mov.w	r3, #256	; 0x100
   154fe:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   15502:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15504:	68ea      	ldr	r2, [r5, #12]
   15506:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1550a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1550e:	2300      	movs	r3, #0
   15510:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   15514:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15518:	2201      	movs	r2, #1
   1551a:	6222      	str	r2, [r4, #32]
   1551c:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1551e:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   15522:	2a00      	cmp	r2, #0
   15524:	d0fb      	beq.n	1551e <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15526:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   1552a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1552e:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   15530:	68ab      	ldr	r3, [r5, #8]
   15532:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15536:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1553a:	2334      	movs	r3, #52	; 0x34
   1553c:	fb03 c30e 	mla	r3, r3, lr, ip
   15540:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   15544:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   15546:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   15548:	4e75      	ldr	r6, [pc, #468]	; (15720 <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   1554a:	0738      	lsls	r0, r7, #28
   1554c:	d407      	bmi.n	1555e <nrfx_twim_xfer+0x142>
   1554e:	782a      	ldrb	r2, [r5, #0]
   15550:	2a03      	cmp	r2, #3
   15552:	d004      	beq.n	1555e <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15554:	2201      	movs	r2, #1
   15556:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   15558:	686b      	ldr	r3, [r5, #4]
   1555a:	b903      	cbnz	r3, 1555e <nrfx_twim_xfer+0x142>
   1555c:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   1555e:	2334      	movs	r3, #52	; 0x34
   15560:	fb03 f30e 	mul.w	r3, r3, lr
   15564:	eb0c 0203 	add.w	r2, ip, r3
   15568:	f85c 1003 	ldr.w	r1, [ip, r3]
   1556c:	2900      	cmp	r1, #0
   1556e:	d176      	bne.n	1565e <nrfx_twim_xfer+0x242>
   15570:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15572:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   15576:	2b00      	cmp	r3, #0
   15578:	f000 8089 	beq.w	1568e <nrfx_twim_xfer+0x272>
   1557c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   15580:	2b00      	cmp	r3, #0
   15582:	f040 8087 	bne.w	15694 <nrfx_twim_xfer+0x278>
   15586:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1558a:	2b00      	cmp	r3, #0
   1558c:	f000 8095 	beq.w	156ba <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
   15590:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15592:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   15596:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1559a:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   1559e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   155a2:	2d00      	cmp	r5, #0
   155a4:	f000 8081 	beq.w	156aa <nrfx_twim_xfer+0x28e>
   155a8:	f412 7f00 	tst.w	r2, #512	; 0x200
   155ac:	f402 7280 	and.w	r2, r2, #256	; 0x100
   155b0:	d17e      	bne.n	156b0 <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   155b2:	6220      	str	r0, [r4, #32]
   155b4:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   155b6:	2a00      	cmp	r2, #0
   155b8:	d0db      	beq.n	15572 <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   155ba:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
   155be:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   155c2:	e7d6      	b.n	15572 <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   155c4:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   155c6:	68ea      	ldr	r2, [r5, #12]
   155c8:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   155cc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   155d0:	692b      	ldr	r3, [r5, #16]
   155d2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   155d6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   155da:	f47f af36 	bne.w	1544a <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   155de:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   155e0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   155e4:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   155e8:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   155ec:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   155f0:	2334      	movs	r3, #52	; 0x34
   155f2:	fb03 c30e 	mla	r3, r3, lr, ip
   155f6:	2202      	movs	r2, #2
   155f8:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   155fa:	2301      	movs	r3, #1
   155fc:	6223      	str	r3, [r4, #32]
   155fe:	e7a2      	b.n	15546 <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   15600:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15602:	68ea      	ldr	r2, [r5, #12]
   15604:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   15608:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
   1560c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   15610:	f04f 0334 	mov.w	r3, #52	; 0x34
   15614:	d008      	beq.n	15628 <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
   15616:	f44f 7280 	mov.w	r2, #256	; 0x100
   1561a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1561e:	fb03 c30e 	mla	r3, r3, lr, ip
   15622:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   15626:	e7e7      	b.n	155f8 <nrfx_twim_xfer+0x1dc>
   15628:	f44f 7200 	mov.w	r2, #512	; 0x200
   1562c:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   15630:	e7df      	b.n	155f2 <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   15632:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15634:	68ea      	ldr	r2, [r5, #12]
   15636:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1563a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1563e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   15642:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   15646:	2334      	movs	r3, #52	; 0x34
   15648:	fb03 c30e 	mla	r3, r3, lr, ip
   1564c:	2202      	movs	r2, #2
   1564e:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15650:	2301      	movs	r3, #1
   15652:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   15654:	2300      	movs	r3, #0
   15656:	e777      	b.n	15548 <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
   15658:	4e32      	ldr	r6, [pc, #200]	; (15724 <nrfx_twim_xfer+0x308>)
   1565a:	2308      	movs	r3, #8
   1565c:	e775      	b.n	1554a <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   1565e:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
   15660:	bf44      	itt	mi
   15662:	2300      	movmi	r3, #0
   15664:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   15666:	067a      	lsls	r2, r7, #25
   15668:	d406      	bmi.n	15678 <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   1566a:	2334      	movs	r3, #52	; 0x34
   1566c:	fb03 c30e 	mla	r3, r3, lr, ip
   15670:	689a      	ldr	r2, [r3, #8]
   15672:	f042 0202 	orr.w	r2, r2, #2
   15676:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   15678:	2334      	movs	r3, #52	; 0x34
   1567a:	fb03 c30e 	mla	r3, r3, lr, ip
   1567e:	689a      	ldr	r2, [r3, #8]
   15680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   15684:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   15686:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
   15688:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1568c:	e6de      	b.n	1544c <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1568e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   15692:	b123      	cbz	r3, 1569e <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15694:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   15698:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1569c:	e773      	b.n	15586 <nrfx_twim_xfer+0x16a>
   1569e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   156a2:	2a00      	cmp	r2, #0
   156a4:	f43f af65 	beq.w	15572 <nrfx_twim_xfer+0x156>
   156a8:	e773      	b.n	15592 <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   156aa:	6220      	str	r0, [r4, #32]
   156ac:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   156ae:	e760      	b.n	15572 <nrfx_twim_xfer+0x156>
   156b0:	2a00      	cmp	r2, #0
   156b2:	d182      	bne.n	155ba <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
   156b4:	2b00      	cmp	r3, #0
   156b6:	f43f af5c 	beq.w	15572 <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
   156ba:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   156bc:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   156c0:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   156c4:	fb01 c20e 	mla	r2, r1, lr, ip
   156c8:	2000      	movs	r0, #0
   156ca:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   156ce:	b18b      	cbz	r3, 156f4 <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   156d0:	4a15      	ldr	r2, [pc, #84]	; (15728 <nrfx_twim_xfer+0x30c>)
   156d2:	4e16      	ldr	r6, [pc, #88]	; (1572c <nrfx_twim_xfer+0x310>)
   156d4:	f013 0f01 	tst.w	r3, #1
   156d8:	bf18      	it	ne
   156da:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   156dc:	f013 0f02 	tst.w	r3, #2
   156e0:	f102 0201 	add.w	r2, r2, #1
   156e4:	bf18      	it	ne
   156e6:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   156e8:	f013 0f04 	tst.w	r3, #4
   156ec:	4b10      	ldr	r3, [pc, #64]	; (15730 <nrfx_twim_xfer+0x314>)
   156ee:	bf18      	it	ne
   156f0:	461e      	movne	r6, r3
   156f2:	e6ab      	b.n	1544c <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   156f4:	067b      	lsls	r3, r7, #25
   156f6:	f53f aea9 	bmi.w	1544c <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   156fa:	fb0e c101 	mla	r1, lr, r1, ip
   156fe:	4620      	mov	r0, r4
   15700:	f004 fe2a 	bl	1a358 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   15704:	4b09      	ldr	r3, [pc, #36]	; (1572c <nrfx_twim_xfer+0x310>)
   15706:	2800      	cmp	r0, #0
   15708:	bf08      	it	eq
   1570a:	461e      	moveq	r6, r3
   1570c:	e69e      	b.n	1544c <nrfx_twim_xfer+0x30>
   1570e:	bf00      	nop
   15710:	200024c0 	.word	0x200024c0
   15714:	0bad000a 	.word	0x0bad000a
   15718:	019c0202 	.word	0x019c0202
   1571c:	0bad000b 	.word	0x0bad000b
   15720:	0bad0000 	.word	0x0bad0000
   15724:	0bad0004 	.word	0x0bad0004
   15728:	0bae0000 	.word	0x0bae0000
   1572c:	0bad0001 	.word	0x0bad0001
   15730:	0bae0002 	.word	0x0bae0002

00015734 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
   15734:	4901      	ldr	r1, [pc, #4]	; (1573c <nrfx_twim_0_irq_handler+0x8>)
   15736:	4802      	ldr	r0, [pc, #8]	; (15740 <nrfx_twim_0_irq_handler+0xc>)
   15738:	f7ff bd36 	b.w	151a8 <twim_irq_handler>
   1573c:	200024c0 	.word	0x200024c0
   15740:	40003000 	.word	0x40003000

00015744 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
   15744:	4902      	ldr	r1, [pc, #8]	; (15750 <nrfx_twim_1_irq_handler+0xc>)
   15746:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   1574a:	f7ff bd2d 	b.w	151a8 <twim_irq_handler>
   1574e:	bf00      	nop
   15750:	200024f4 	.word	0x200024f4

00015754 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   15754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
   15758:	f000 001f 	and.w	r0, r0, #31
   1575c:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15760:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
   15762:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15766:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
   1576a:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
   1576e:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   15772:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15776:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
   15778:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
   1577c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   15780:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
   15784:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   15788:	2004      	movs	r0, #4
   1578a:	f004 fdc6 	bl	1a31a <nrfx_busy_wait>
   1578e:	2709      	movs	r7, #9
    return p_reg->IN;
   15790:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   15794:	421c      	tst	r4, r3
   15796:	d10d      	bne.n	157b4 <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   15798:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   1579a:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
   1579e:	f004 fdbc 	bl	1a31a <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   157a2:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
   157a4:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   157a8:	2004      	movs	r0, #4
   157aa:	f004 fdb6 	bl	1a31a <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   157ae:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   157b2:	d1ed      	bne.n	15790 <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
   157b4:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   157b8:	2004      	movs	r0, #4
   157ba:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
   157be:	f004 fdac 	bl	1a31a <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   157c2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   157c6:	2004      	movs	r0, #4
   157c8:	f004 fda7 	bl	1a31a <nrfx_busy_wait>
    return p_reg->IN;
   157cc:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   157d0:	4803      	ldr	r0, [pc, #12]	; (157e0 <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   157d2:	40f3      	lsrs	r3, r6
   157d4:	f003 0301 	and.w	r3, r3, #1
   157d8:	1ac0      	subs	r0, r0, r3
   157da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   157de:	bf00      	nop
   157e0:	0bad0001 	.word	0x0bad0001

000157e4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   157e4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   157e6:	4c14      	ldr	r4, [pc, #80]	; (15838 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   157e8:	4a14      	ldr	r2, [pc, #80]	; (1583c <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   157ea:	4915      	ldr	r1, [pc, #84]	; (15840 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   157ec:	2303      	movs	r3, #3
   157ee:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   157f0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   157f2:	4b14      	ldr	r3, [pc, #80]	; (15844 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   157f4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   157f6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   157f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   157fc:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   157fe:	2300      	movs	r3, #0
   15800:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   15802:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   15804:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   15806:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   15808:	4a0f      	ldr	r2, [pc, #60]	; (15848 <_DoInit+0x64>)
   1580a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1580c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1580e:	2210      	movs	r2, #16
   15810:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   15812:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   15814:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   15816:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   15818:	f002 f8c6 	bl	179a8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1581c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   15820:	490a      	ldr	r1, [pc, #40]	; (1584c <_DoInit+0x68>)
   15822:	4620      	mov	r0, r4
   15824:	f002 f8c0 	bl	179a8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   15828:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   1582c:	2320      	movs	r3, #32
   1582e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   15830:	f3bf 8f5f 	dmb	sy
}
   15834:	bd10      	pop	{r4, pc}
   15836:	bf00      	nop
   15838:	20002528 	.word	0x20002528
   1583c:	0001ceca 	.word	0x0001ceca
   15840:	0001ced3 	.word	0x0001ced3
   15844:	20002673 	.word	0x20002673
   15848:	20002663 	.word	0x20002663
   1584c:	0001ced7 	.word	0x0001ced7

00015850 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15850:	4b0f      	ldr	r3, [pc, #60]	; (15890 <z_sys_init_run_level+0x40>)
{
   15852:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15854:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   15858:	3001      	adds	r0, #1
   1585a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1585e:	42a6      	cmp	r6, r4
   15860:	d800      	bhi.n	15864 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   15862:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   15864:	e9d4 3500 	ldrd	r3, r5, [r4]
   15868:	4628      	mov	r0, r5
   1586a:	4798      	blx	r3
		if (dev != NULL) {
   1586c:	b16d      	cbz	r5, 1588a <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1586e:	b138      	cbz	r0, 15880 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   15870:	2800      	cmp	r0, #0
   15872:	bfb8      	it	lt
   15874:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   15876:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   15878:	28ff      	cmp	r0, #255	; 0xff
   1587a:	bfa8      	it	ge
   1587c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1587e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   15880:	68ea      	ldr	r2, [r5, #12]
   15882:	7853      	ldrb	r3, [r2, #1]
   15884:	f043 0301 	orr.w	r3, r3, #1
   15888:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1588a:	3408      	adds	r4, #8
   1588c:	e7e7      	b.n	1585e <z_sys_init_run_level+0xe>
   1588e:	bf00      	nop
   15890:	0001c960 	.word	0x0001c960

00015894 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   15894:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   15896:	4b0a      	ldr	r3, [pc, #40]	; (158c0 <bg_thread_main+0x2c>)
   15898:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1589a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1589c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1589e:	f7ff ffd7 	bl	15850 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   158a2:	f001 fa9b 	bl	16ddc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   158a6:	2004      	movs	r0, #4
   158a8:	f7ff ffd2 	bl	15850 <z_sys_init_run_level>

	z_init_static_threads();
   158ac:	f000 f96e 	bl	15b8c <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   158b0:	f7eb fdae 	bl	1410 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   158b4:	4a03      	ldr	r2, [pc, #12]	; (158c4 <bg_thread_main+0x30>)
   158b6:	7b13      	ldrb	r3, [r2, #12]
   158b8:	f023 0301 	bic.w	r3, r3, #1
   158bc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   158be:	bd08      	pop	{r3, pc}
   158c0:	20002a73 	.word	0x20002a73
   158c4:	20001090 	.word	0x20001090

000158c8 <z_bss_zero>:
{
   158c8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   158ca:	4803      	ldr	r0, [pc, #12]	; (158d8 <z_bss_zero+0x10>)
   158cc:	4a03      	ldr	r2, [pc, #12]	; (158dc <z_bss_zero+0x14>)
   158ce:	2100      	movs	r1, #0
   158d0:	1a12      	subs	r2, r2, r0
   158d2:	f004 fdab 	bl	1a42c <z_early_memset>
}
   158d6:	bd08      	pop	{r3, pc}
   158d8:	20000a30 	.word	0x20000a30
   158dc:	20002a78 	.word	0x20002a78

000158e0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   158e0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   158e2:	2300      	movs	r3, #0
{
   158e4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   158e6:	2201      	movs	r2, #1
   158e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   158ec:	4e13      	ldr	r6, [pc, #76]	; (1593c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   158ee:	4d14      	ldr	r5, [pc, #80]	; (15940 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   158f0:	9301      	str	r3, [sp, #4]
   158f2:	220f      	movs	r2, #15
   158f4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   158f8:	4912      	ldr	r1, [pc, #72]	; (15944 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   158fa:	2314      	movs	r3, #20
   158fc:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   15900:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   15904:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   15906:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1590a:	fb00 1104 	mla	r1, r0, r4, r1
   1590e:	4b0e      	ldr	r3, [pc, #56]	; (15948 <z_init_cpu+0x68>)
   15910:	9500      	str	r5, [sp, #0]
   15912:	f44f 72a0 	mov.w	r2, #320	; 0x140
   15916:	4630      	mov	r0, r6
   15918:	f000 f8da 	bl	15ad0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1591c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1591e:	4a0b      	ldr	r2, [pc, #44]	; (1594c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   15920:	60ee      	str	r6, [r5, #12]
   15922:	f023 0304 	bic.w	r3, r3, #4
   15926:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   15928:	f44f 6304 	mov.w	r3, #2112	; 0x840
   1592c:	fb04 3303 	mla	r3, r4, r3, r3
   15930:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   15932:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   15934:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   15936:	b006      	add	sp, #24
   15938:	bd70      	pop	{r4, r5, r6, pc}
   1593a:	bf00      	nop
   1593c:	20001010 	.word	0x20001010
   15940:	200025d0 	.word	0x200025d0
   15944:	200046c0 	.word	0x200046c0
   15948:	00015c45 	.word	0x00015c45
   1594c:	20003e80 	.word	0x20003e80

00015950 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   15950:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   15952:	2000      	movs	r0, #0
{
   15954:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   15956:	f7ff ff7b 	bl	15850 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1595a:	4b2d      	ldr	r3, [pc, #180]	; (15a10 <z_cstart+0xc0>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1595c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   15960:	4d2c      	ldr	r5, [pc, #176]	; (15a14 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   15962:	4e2d      	ldr	r6, [pc, #180]	; (15a18 <z_cstart+0xc8>)
   15964:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15966:	4f2d      	ldr	r7, [pc, #180]	; (15a1c <z_cstart+0xcc>)
   15968:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1596c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1596e:	2400      	movs	r4, #0
   15970:	23e0      	movs	r3, #224	; 0xe0
   15972:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   15976:	77ec      	strb	r4, [r5, #31]
   15978:	762c      	strb	r4, [r5, #24]
   1597a:	766c      	strb	r4, [r5, #25]
   1597c:	76ac      	strb	r4, [r5, #26]
   1597e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   15982:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   15984:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   15988:	626b      	str	r3, [r5, #36]	; 0x24
   1598a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1598e:	f7ec ff07 	bl	27a0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   15992:	f7ec fc5f 	bl	2254 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   15996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1599a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1599c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1599e:	f7ec ffe3 	bl	2968 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   159a2:	f7ec ff49 	bl	2838 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   159a6:	f240 1301 	movw	r3, #257	; 0x101
   159aa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   159ae:	ab06      	add	r3, sp, #24
   159b0:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   159b2:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   159b6:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   159b8:	f004 fd05 	bl	1a3c6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   159bc:	2001      	movs	r0, #1
   159be:	f7ff ff47 	bl	15850 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   159c2:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   159c4:	4d16      	ldr	r5, [pc, #88]	; (15a20 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   159c6:	f7ff ff43 	bl	15850 <z_sys_init_run_level>
	z_sched_init();
   159ca:	f000 fee9 	bl	167a0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   159ce:	4b15      	ldr	r3, [pc, #84]	; (15a24 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   159d0:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   159d2:	9305      	str	r3, [sp, #20]
   159d4:	2301      	movs	r3, #1
   159d6:	4914      	ldr	r1, [pc, #80]	; (15a28 <z_cstart+0xd8>)
   159d8:	9400      	str	r4, [sp, #0]
   159da:	e9cd 4303 	strd	r4, r3, [sp, #12]
   159de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   159e2:	463b      	mov	r3, r7
   159e4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   159e8:	4628      	mov	r0, r5
   159ea:	f000 f871 	bl	15ad0 <z_setup_new_thread>
   159ee:	7b6a      	ldrb	r2, [r5, #13]
   159f0:	4606      	mov	r6, r0
   159f2:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   159f6:	4628      	mov	r0, r5
   159f8:	736a      	strb	r2, [r5, #13]
   159fa:	f005 f801 	bl	1aa00 <z_ready_thread>
	z_init_cpu(0);
   159fe:	4620      	mov	r0, r4
   15a00:	f7ff ff6e 	bl	158e0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   15a04:	463a      	mov	r2, r7
   15a06:	4631      	mov	r1, r6
   15a08:	4628      	mov	r0, r5
   15a0a:	f7ec fd47 	bl	249c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   15a0e:	bf00      	nop
   15a10:	200046c0 	.word	0x200046c0
   15a14:	e000ed00 	.word	0xe000ed00
   15a18:	200025d0 	.word	0x200025d0
   15a1c:	00015895 	.word	0x00015895
   15a20:	20001090 	.word	0x20001090
   15a24:	0001cede 	.word	0x0001cede
   15a28:	20004840 	.word	0x20004840

00015a2c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   15a2c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   15a2e:	4c06      	ldr	r4, [pc, #24]	; (15a48 <statics_init+0x1c>)
   15a30:	4d06      	ldr	r5, [pc, #24]	; (15a4c <statics_init+0x20>)
   15a32:	42ac      	cmp	r4, r5
   15a34:	d301      	bcc.n	15a3a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   15a36:	2000      	movs	r0, #0
   15a38:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   15a3a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   15a3e:	4620      	mov	r0, r4
   15a40:	f004 fcf8 	bl	1a434 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   15a44:	3414      	adds	r4, #20
   15a46:	e7f4      	b.n	15a32 <statics_init+0x6>
   15a48:	200008f8 	.word	0x200008f8
   15a4c:	200008f8 	.word	0x200008f8

00015a50 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   15a50:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15a52:	4c06      	ldr	r4, [pc, #24]	; (15a6c <init_mem_slab_module+0x1c>)
   15a54:	4d06      	ldr	r5, [pc, #24]	; (15a70 <init_mem_slab_module+0x20>)
	int rc = 0;
   15a56:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15a58:	42ac      	cmp	r4, r5
   15a5a:	d300      	bcc.n	15a5e <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   15a5c:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   15a5e:	4620      	mov	r0, r4
   15a60:	f004 fd5a 	bl	1a518 <create_free_list>
		if (rc < 0) {
   15a64:	2800      	cmp	r0, #0
   15a66:	dbf9      	blt.n	15a5c <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15a68:	341c      	adds	r4, #28
   15a6a:	e7f5      	b.n	15a58 <init_mem_slab_module+0x8>
   15a6c:	200008a4 	.word	0x200008a4
   15a70:	200008f8 	.word	0x200008f8

00015a74 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   15a74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15a76:	460c      	mov	r4, r1
	__asm__ volatile(
   15a78:	f04f 0520 	mov.w	r5, #32
   15a7c:	f3ef 8111 	mrs	r1, BASEPRI
   15a80:	f385 8812 	msr	BASEPRI_MAX, r5
   15a84:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   15a88:	6945      	ldr	r5, [r0, #20]
   15a8a:	b15d      	cbz	r5, 15aa4 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   15a8c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   15a8e:	682b      	ldr	r3, [r5, #0]
   15a90:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   15a92:	6983      	ldr	r3, [r0, #24]
   15a94:	3301      	adds	r3, #1
   15a96:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   15a98:	2000      	movs	r0, #0
	__asm__ volatile(
   15a9a:	f381 8811 	msr	BASEPRI, r1
   15a9e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   15aa2:	e011      	b.n	15ac8 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   15aa4:	ea52 0603 	orrs.w	r6, r2, r3
   15aa8:	d103      	bne.n	15ab2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   15aaa:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   15aac:	f06f 000b 	mvn.w	r0, #11
   15ab0:	e7f3      	b.n	15a9a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   15ab2:	e9cd 2300 	strd	r2, r3, [sp]
   15ab6:	4602      	mov	r2, r0
   15ab8:	3008      	adds	r0, #8
   15aba:	f000 fd7b 	bl	165b4 <z_pend_curr>
		if (result == 0) {
   15abe:	b918      	cbnz	r0, 15ac8 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   15ac0:	4b02      	ldr	r3, [pc, #8]	; (15acc <k_mem_slab_alloc+0x58>)
   15ac2:	689b      	ldr	r3, [r3, #8]
   15ac4:	695b      	ldr	r3, [r3, #20]
   15ac6:	6023      	str	r3, [r4, #0]
}
   15ac8:	b002      	add	sp, #8
   15aca:	bd70      	pop	{r4, r5, r6, pc}
   15acc:	200025d0 	.word	0x200025d0

00015ad0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   15ad0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   15ad4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   15ad6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   15ad8:	2604      	movs	r6, #4
   15ada:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   15adc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   15ade:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   15ae0:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   15ae4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15ae6:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   15ae8:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   15aee:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15af0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   15af4:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   15af6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   15afa:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   15afe:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   15b00:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   15b02:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15b04:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15b08:	9202      	str	r2, [sp, #8]
   15b0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15b0c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   15b0e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15b12:	9200      	str	r2, [sp, #0]
   15b14:	4642      	mov	r2, r8
{
   15b16:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15b18:	f7ec fc8e 	bl	2438 <arch_new_thread>
	if (!_current) {
   15b1c:	4b04      	ldr	r3, [pc, #16]	; (15b30 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   15b1e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   15b20:	689b      	ldr	r3, [r3, #8]
   15b22:	b103      	cbz	r3, 15b26 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   15b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   15b26:	6763      	str	r3, [r4, #116]	; 0x74
}
   15b28:	4640      	mov	r0, r8
   15b2a:	b004      	add	sp, #16
   15b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15b30:	200025d0 	.word	0x200025d0

00015b34 <z_impl_k_thread_create>:
{
   15b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b36:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15b38:	2500      	movs	r5, #0
   15b3a:	9505      	str	r5, [sp, #20]
   15b3c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   15b3e:	9504      	str	r5, [sp, #16]
   15b40:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   15b42:	9503      	str	r5, [sp, #12]
   15b44:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   15b46:	9502      	str	r5, [sp, #8]
{
   15b48:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15b4c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   15b4e:	9501      	str	r5, [sp, #4]
   15b50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   15b52:	9500      	str	r5, [sp, #0]
{
   15b54:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15b56:	f7ff ffbb 	bl	15ad0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   15b5a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   15b5e:	bf08      	it	eq
   15b60:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   15b64:	d005      	beq.n	15b72 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15b66:	ea56 0307 	orrs.w	r3, r6, r7
   15b6a:	d105      	bne.n	15b78 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   15b6c:	4620      	mov	r0, r4
   15b6e:	f000 fd97 	bl	166a0 <z_sched_start>
}
   15b72:	4620      	mov	r0, r4
   15b74:	b007      	add	sp, #28
   15b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   15b78:	4903      	ldr	r1, [pc, #12]	; (15b88 <z_impl_k_thread_create+0x54>)
   15b7a:	463a      	mov	r2, r7
   15b7c:	4633      	mov	r3, r6
   15b7e:	f104 0018 	add.w	r0, r4, #24
   15b82:	f000 ff8d 	bl	16aa0 <z_add_timeout>
   15b86:	e7f4      	b.n	15b72 <z_impl_k_thread_create+0x3e>
   15b88:	0001aa65 	.word	0x0001aa65

00015b8c <z_init_static_threads>:
{
   15b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15b90:	4c29      	ldr	r4, [pc, #164]	; (15c38 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   15b92:	4d2a      	ldr	r5, [pc, #168]	; (15c3c <z_init_static_threads+0xb0>)
{
   15b94:	b087      	sub	sp, #28
   15b96:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   15b98:	42ae      	cmp	r6, r5
   15b9a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   15b9e:	d30f      	bcc.n	15bc0 <z_init_static_threads+0x34>
	k_sched_lock();
   15ba0:	f000 fdce 	bl	16740 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   15ba4:	4c24      	ldr	r4, [pc, #144]	; (15c38 <z_init_static_threads+0xac>)
   15ba6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 15c40 <z_init_static_threads+0xb4>
   15baa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   15bae:	f240 37e7 	movw	r7, #999	; 0x3e7
   15bb2:	42ac      	cmp	r4, r5
   15bb4:	d320      	bcc.n	15bf8 <z_init_static_threads+0x6c>
}
   15bb6:	b007      	add	sp, #28
   15bb8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   15bbc:	f000 bdd4 	b.w	16768 <k_sched_unlock>
		z_setup_new_thread(
   15bc0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   15bc4:	9305      	str	r3, [sp, #20]
   15bc6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   15bca:	9304      	str	r3, [sp, #16]
   15bcc:	f854 3c10 	ldr.w	r3, [r4, #-16]
   15bd0:	9303      	str	r3, [sp, #12]
   15bd2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   15bd6:	9302      	str	r3, [sp, #8]
   15bd8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   15bdc:	9301      	str	r3, [sp, #4]
   15bde:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   15be2:	9300      	str	r3, [sp, #0]
   15be4:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   15be8:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   15bec:	f7ff ff70 	bl	15ad0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   15bf0:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   15bf4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   15bf6:	e7ce      	b.n	15b96 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   15bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15bfa:	1c5a      	adds	r2, r3, #1
   15bfc:	d00d      	beq.n	15c1a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   15bfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15c02:	2100      	movs	r1, #0
   15c04:	4638      	mov	r0, r7
   15c06:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15c0a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   15c0e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15c12:	d104      	bne.n	15c1e <z_init_static_threads+0x92>
	z_sched_start(thread);
   15c14:	4640      	mov	r0, r8
   15c16:	f000 fd43 	bl	166a0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   15c1a:	342c      	adds	r4, #44	; 0x2c
   15c1c:	e7c9      	b.n	15bb2 <z_init_static_threads+0x26>
   15c1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15c22:	2300      	movs	r3, #0
   15c24:	f7ea fa5c 	bl	e0 <__aeabi_uldivmod>
   15c28:	4602      	mov	r2, r0
   15c2a:	460b      	mov	r3, r1
   15c2c:	f108 0018 	add.w	r0, r8, #24
   15c30:	4649      	mov	r1, r9
   15c32:	f000 ff35 	bl	16aa0 <z_add_timeout>
   15c36:	e7f0      	b.n	15c1a <z_init_static_threads+0x8e>
   15c38:	0001b18c 	.word	0x0001b18c
   15c3c:	0001b1b8 	.word	0x0001b1b8
   15c40:	0001aa65 	.word	0x0001aa65

00015c44 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   15c44:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   15c46:	4c0b      	ldr	r4, [pc, #44]	; (15c74 <idle+0x30>)
	return !z_sys_post_kernel;
   15c48:	4d0b      	ldr	r5, [pc, #44]	; (15c78 <idle+0x34>)
	__asm__ volatile(
   15c4a:	f04f 0220 	mov.w	r2, #32
   15c4e:	f3ef 8311 	mrs	r3, BASEPRI
   15c52:	f382 8812 	msr	BASEPRI_MAX, r2
   15c56:	f3bf 8f6f 	isb	sy
   15c5a:	f004 ff9a 	bl	1ab92 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   15c5e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   15c60:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   15c62:	b913      	cbnz	r3, 15c6a <idle+0x26>
	arch_cpu_idle();
   15c64:	f7ec fafc 	bl	2260 <arch_cpu_idle>
}
   15c68:	e7ef      	b.n	15c4a <idle+0x6>
   15c6a:	f7ec f9b9 	bl	1fe0 <pm_system_suspend>
   15c6e:	2800      	cmp	r0, #0
   15c70:	d1eb      	bne.n	15c4a <idle+0x6>
   15c72:	e7f7      	b.n	15c64 <idle+0x20>
   15c74:	200025d0 	.word	0x200025d0
   15c78:	20002a73 	.word	0x20002a73

00015c7c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   15c7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15c80:	4604      	mov	r4, r0
   15c82:	4617      	mov	r7, r2
   15c84:	461e      	mov	r6, r3
   15c86:	f04f 0320 	mov.w	r3, #32
   15c8a:	f3ef 8811 	mrs	r8, BASEPRI
   15c8e:	f383 8812 	msr	BASEPRI_MAX, r3
   15c92:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   15c96:	68c3      	ldr	r3, [r0, #12]
   15c98:	4a33      	ldr	r2, [pc, #204]	; (15d68 <z_impl_k_mutex_lock+0xec>)
   15c9a:	b17b      	cbz	r3, 15cbc <z_impl_k_mutex_lock+0x40>
   15c9c:	6880      	ldr	r0, [r0, #8]
   15c9e:	6891      	ldr	r1, [r2, #8]
   15ca0:	4288      	cmp	r0, r1
   15ca2:	d019      	beq.n	15cd8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   15ca4:	ea57 0306 	orrs.w	r3, r7, r6
   15ca8:	d118      	bne.n	15cdc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   15caa:	f388 8811 	msr	BASEPRI, r8
   15cae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   15cb2:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   15cb6:	b002      	add	sp, #8
   15cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   15cbc:	6891      	ldr	r1, [r2, #8]
   15cbe:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   15cc2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   15cc4:	3301      	adds	r3, #1
   15cc6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   15cc8:	6893      	ldr	r3, [r2, #8]
   15cca:	60a3      	str	r3, [r4, #8]
   15ccc:	f388 8811 	msr	BASEPRI, r8
   15cd0:	f3bf 8f6f 	isb	sy
		return 0;
   15cd4:	2000      	movs	r0, #0
   15cd6:	e7ee      	b.n	15cb6 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   15cd8:	6921      	ldr	r1, [r4, #16]
   15cda:	e7f2      	b.n	15cc2 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   15cdc:	f991 100e 	ldrsb.w	r1, [r1, #14]
   15ce0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   15ce4:	4299      	cmp	r1, r3
   15ce6:	bfa8      	it	ge
   15ce8:	4619      	movge	r1, r3
   15cea:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   15cee:	4291      	cmp	r1, r2
   15cf0:	bfb8      	it	lt
   15cf2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   15cf4:	428b      	cmp	r3, r1
   15cf6:	dd2e      	ble.n	15d56 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   15cf8:	f004 fc5f 	bl	1a5ba <adjust_owner_prio.isra.0>
   15cfc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   15cfe:	e9cd 7600 	strd	r7, r6, [sp]
   15d02:	481a      	ldr	r0, [pc, #104]	; (15d6c <z_impl_k_mutex_lock+0xf0>)
   15d04:	4622      	mov	r2, r4
   15d06:	4641      	mov	r1, r8
   15d08:	f000 fc54 	bl	165b4 <z_pend_curr>
	if (got_mutex == 0) {
   15d0c:	2800      	cmp	r0, #0
   15d0e:	d0e1      	beq.n	15cd4 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   15d10:	f04f 0320 	mov.w	r3, #32
   15d14:	f3ef 8611 	mrs	r6, BASEPRI
   15d18:	f383 8812 	msr	BASEPRI_MAX, r3
   15d1c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   15d20:	68a0      	ldr	r0, [r4, #8]
   15d22:	b1d0      	cbz	r0, 15d5a <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   15d24:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   15d26:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15d28:	429c      	cmp	r4, r3
   15d2a:	d00a      	beq.n	15d42 <z_impl_k_mutex_lock+0xc6>
   15d2c:	b14b      	cbz	r3, 15d42 <z_impl_k_mutex_lock+0xc6>
   15d2e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   15d32:	4299      	cmp	r1, r3
   15d34:	bfa8      	it	ge
   15d36:	4619      	movge	r1, r3
   15d38:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   15d3c:	4299      	cmp	r1, r3
   15d3e:	bfb8      	it	lt
   15d40:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   15d42:	f004 fc3a 	bl	1a5ba <adjust_owner_prio.isra.0>
   15d46:	b140      	cbz	r0, 15d5a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   15d48:	4808      	ldr	r0, [pc, #32]	; (15d6c <z_impl_k_mutex_lock+0xf0>)
   15d4a:	4631      	mov	r1, r6
   15d4c:	f000 fc96 	bl	1667c <z_reschedule>
	return -EAGAIN;
   15d50:	f06f 000a 	mvn.w	r0, #10
   15d54:	e7af      	b.n	15cb6 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   15d56:	2500      	movs	r5, #0
   15d58:	e7d1      	b.n	15cfe <z_impl_k_mutex_lock+0x82>
	if (resched) {
   15d5a:	2d00      	cmp	r5, #0
   15d5c:	d1f4      	bne.n	15d48 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   15d5e:	f386 8811 	msr	BASEPRI, r6
   15d62:	f3bf 8f6f 	isb	sy
   15d66:	e7f3      	b.n	15d50 <z_impl_k_mutex_lock+0xd4>
   15d68:	200025d0 	.word	0x200025d0
   15d6c:	20002a74 	.word	0x20002a74

00015d70 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   15d70:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   15d72:	6883      	ldr	r3, [r0, #8]
{
   15d74:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   15d76:	b36b      	cbz	r3, 15dd4 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   15d78:	4a19      	ldr	r2, [pc, #100]	; (15de0 <z_impl_k_mutex_unlock+0x70>)
   15d7a:	6892      	ldr	r2, [r2, #8]
   15d7c:	4293      	cmp	r3, r2
   15d7e:	d12c      	bne.n	15dda <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   15d80:	68c3      	ldr	r3, [r0, #12]
   15d82:	2b01      	cmp	r3, #1
   15d84:	d903      	bls.n	15d8e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   15d86:	3b01      	subs	r3, #1
   15d88:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   15d8a:	2000      	movs	r0, #0
}
   15d8c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   15d8e:	f04f 0320 	mov.w	r3, #32
   15d92:	f3ef 8511 	mrs	r5, BASEPRI
   15d96:	f383 8812 	msr	BASEPRI_MAX, r3
   15d9a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   15d9e:	6901      	ldr	r1, [r0, #16]
   15da0:	6880      	ldr	r0, [r0, #8]
   15da2:	f004 fc0a 	bl	1a5ba <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   15da6:	4620      	mov	r0, r4
   15da8:	f004 fe60 	bl	1aa6c <z_unpend_first_thread>
	mutex->owner = new_owner;
   15dac:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   15dae:	b158      	cbz	r0, 15dc8 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   15db0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   15db4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   15db6:	2200      	movs	r2, #0
   15db8:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   15dba:	f004 fe21 	bl	1aa00 <z_ready_thread>
		z_reschedule(&lock, key);
   15dbe:	4809      	ldr	r0, [pc, #36]	; (15de4 <z_impl_k_mutex_unlock+0x74>)
   15dc0:	4629      	mov	r1, r5
   15dc2:	f000 fc5b 	bl	1667c <z_reschedule>
   15dc6:	e7e0      	b.n	15d8a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   15dc8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   15dca:	f385 8811 	msr	BASEPRI, r5
   15dce:	f3bf 8f6f 	isb	sy
   15dd2:	e7da      	b.n	15d8a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   15dd4:	f06f 0015 	mvn.w	r0, #21
   15dd8:	e7d8      	b.n	15d8c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   15dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15dde:	e7d5      	b.n	15d8c <z_impl_k_mutex_unlock+0x1c>
   15de0:	200025d0 	.word	0x200025d0
   15de4:	20002a74 	.word	0x20002a74

00015de8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   15de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15dea:	4611      	mov	r1, r2
	__asm__ volatile(
   15dec:	f04f 0220 	mov.w	r2, #32
   15df0:	f3ef 8511 	mrs	r5, BASEPRI
   15df4:	f382 8812 	msr	BASEPRI_MAX, r2
   15df8:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   15dfc:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   15dfe:	b19c      	cbz	r4, 15e28 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   15e00:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   15e02:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   15e04:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   15e08:	4294      	cmp	r4, r2
	list->head = node;
   15e0a:	6003      	str	r3, [r0, #0]
	list->tail = node;
   15e0c:	bf08      	it	eq
   15e0e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   15e10:	2101      	movs	r1, #1
   15e12:	4620      	mov	r0, r4
   15e14:	f004 fc46 	bl	1a6a4 <z_queue_node_peek>
   15e18:	4604      	mov	r4, r0
	__asm__ volatile(
   15e1a:	f385 8811 	msr	BASEPRI, r5
   15e1e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   15e22:	4620      	mov	r0, r4
   15e24:	b003      	add	sp, #12
   15e26:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15e28:	ea51 0203 	orrs.w	r2, r1, r3
   15e2c:	d0f5      	beq.n	15e1a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   15e2e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   15e32:	e9cd 1300 	strd	r1, r3, [sp]
   15e36:	4610      	mov	r0, r2
   15e38:	4629      	mov	r1, r5
   15e3a:	f000 fbbb 	bl	165b4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   15e3e:	2800      	cmp	r0, #0
   15e40:	d1ef      	bne.n	15e22 <z_impl_k_queue_get+0x3a>
   15e42:	4b02      	ldr	r3, [pc, #8]	; (15e4c <z_impl_k_queue_get+0x64>)
   15e44:	689b      	ldr	r3, [r3, #8]
   15e46:	695c      	ldr	r4, [r3, #20]
   15e48:	e7eb      	b.n	15e22 <z_impl_k_queue_get+0x3a>
   15e4a:	bf00      	nop
   15e4c:	200025d0 	.word	0x200025d0

00015e50 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   15e50:	b538      	push	{r3, r4, r5, lr}
   15e52:	4604      	mov	r4, r0
	__asm__ volatile(
   15e54:	f04f 0320 	mov.w	r3, #32
   15e58:	f3ef 8511 	mrs	r5, BASEPRI
   15e5c:	f383 8812 	msr	BASEPRI_MAX, r3
   15e60:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   15e64:	f004 fe02 	bl	1aa6c <z_unpend_first_thread>

	if (thread != NULL) {
   15e68:	b148      	cbz	r0, 15e7e <z_impl_k_sem_give+0x2e>
   15e6a:	2200      	movs	r2, #0
   15e6c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   15e6e:	f004 fdc7 	bl	1aa00 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   15e72:	4629      	mov	r1, r5
   15e74:	4808      	ldr	r0, [pc, #32]	; (15e98 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   15e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   15e7a:	f000 bbff 	b.w	1667c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   15e7e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   15e82:	429a      	cmp	r2, r3
   15e84:	bf18      	it	ne
   15e86:	3301      	addne	r3, #1
   15e88:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   15e8a:	2102      	movs	r1, #2
   15e8c:	f104 0010 	add.w	r0, r4, #16
   15e90:	f004 fff9 	bl	1ae86 <z_handle_obj_poll_events>
}
   15e94:	e7ed      	b.n	15e72 <z_impl_k_sem_give+0x22>
   15e96:	bf00      	nop
   15e98:	20002a74 	.word	0x20002a74

00015e9c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   15e9c:	b513      	push	{r0, r1, r4, lr}
   15e9e:	f04f 0420 	mov.w	r4, #32
   15ea2:	f3ef 8111 	mrs	r1, BASEPRI
   15ea6:	f384 8812 	msr	BASEPRI_MAX, r4
   15eaa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   15eae:	6884      	ldr	r4, [r0, #8]
   15eb0:	b144      	cbz	r4, 15ec4 <z_impl_k_sem_take+0x28>
		sem->count--;
   15eb2:	3c01      	subs	r4, #1
   15eb4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   15eb6:	f381 8811 	msr	BASEPRI, r1
   15eba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   15ebe:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   15ec0:	b002      	add	sp, #8
   15ec2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15ec4:	ea52 0403 	orrs.w	r4, r2, r3
   15ec8:	d106      	bne.n	15ed8 <z_impl_k_sem_take+0x3c>
   15eca:	f381 8811 	msr	BASEPRI, r1
   15ece:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   15ed2:	f06f 000f 	mvn.w	r0, #15
   15ed6:	e7f3      	b.n	15ec0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   15ed8:	e9cd 2300 	strd	r2, r3, [sp]
   15edc:	4602      	mov	r2, r0
   15ede:	4802      	ldr	r0, [pc, #8]	; (15ee8 <z_impl_k_sem_take+0x4c>)
   15ee0:	f000 fb68 	bl	165b4 <z_pend_curr>
	return ret;
   15ee4:	e7ec      	b.n	15ec0 <z_impl_k_sem_take+0x24>
   15ee6:	bf00      	nop
   15ee8:	20002a74 	.word	0x20002a74

00015eec <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   15eec:	b570      	push	{r4, r5, r6, lr}
   15eee:	4604      	mov	r4, r0
	__asm__ volatile(
   15ef0:	f04f 0320 	mov.w	r3, #32
   15ef4:	f3ef 8511 	mrs	r5, BASEPRI
   15ef8:	f383 8812 	msr	BASEPRI_MAX, r3
   15efc:	f3bf 8f6f 	isb	sy
   15f00:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   15f04:	4620      	mov	r0, r4
   15f06:	f004 fdb1 	bl	1aa6c <z_unpend_first_thread>
		if (thread == NULL) {
   15f0a:	b118      	cbz	r0, 15f14 <z_impl_k_sem_reset+0x28>
   15f0c:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   15f0e:	f004 fd77 	bl	1aa00 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   15f12:	e7f7      	b.n	15f04 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   15f14:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   15f16:	2102      	movs	r1, #2
   15f18:	f104 0010 	add.w	r0, r4, #16
   15f1c:	f004 ffb3 	bl	1ae86 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   15f20:	4629      	mov	r1, r5
   15f22:	4802      	ldr	r0, [pc, #8]	; (15f2c <z_impl_k_sem_reset+0x40>)
}
   15f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   15f28:	f000 bba8 	b.w	1667c <z_reschedule>
   15f2c:	20002a74 	.word	0x20002a74

00015f30 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   15f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   15f32:	4b09      	ldr	r3, [pc, #36]	; (15f58 <k_sys_work_q_init+0x28>)
   15f34:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   15f36:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   15f38:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   15f3a:	9300      	str	r3, [sp, #0]
   15f3c:	4907      	ldr	r1, [pc, #28]	; (15f5c <k_sys_work_q_init+0x2c>)
   15f3e:	4808      	ldr	r0, [pc, #32]	; (15f60 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   15f40:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   15f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15f4c:	f000 f924 	bl	16198 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   15f50:	4620      	mov	r0, r4
   15f52:	b004      	add	sp, #16
   15f54:	bd10      	pop	{r4, pc}
   15f56:	bf00      	nop
   15f58:	0001cee6 	.word	0x0001cee6
   15f5c:	20004c80 	.word	0x20004c80
   15f60:	20001110 	.word	0x20001110

00015f64 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   15f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   15f68:	4e4a      	ldr	r6, [pc, #296]	; (16094 <work_queue_main+0x130>)
   15f6a:	b085      	sub	sp, #20
   15f6c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   15f6e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   15f72:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   15f76:	f04f 0320 	mov.w	r3, #32
   15f7a:	f3ef 8711 	mrs	r7, BASEPRI
   15f7e:	f383 8812 	msr	BASEPRI_MAX, r3
   15f82:	f3bf 8f6f 	isb	sy
   15f86:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   15f8a:	b98d      	cbnz	r5, 15fb0 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   15f8c:	2102      	movs	r1, #2
   15f8e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15f92:	f004 fbe8 	bl	1a766 <flag_test_and_clear>
   15f96:	2800      	cmp	r0, #0
   15f98:	d143      	bne.n	16022 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   15f9a:	2300      	movs	r3, #0
   15f9c:	e9cd 8900 	strd	r8, r9, [sp]
   15fa0:	9302      	str	r3, [sp, #8]
   15fa2:	f104 0288 	add.w	r2, r4, #136	; 0x88
   15fa6:	4639      	mov	r1, r7
   15fa8:	483b      	ldr	r0, [pc, #236]	; (16098 <work_queue_main+0x134>)
   15faa:	f000 fd07 	bl	169bc <z_sched_wait>
			continue;
   15fae:	e7e2      	b.n	15f76 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15fb0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   15fb4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   15fb6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15fba:	4295      	cmp	r5, r2
	list->tail = node;
   15fbc:	bf08      	it	eq
   15fbe:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   15fc2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   15fc6:	f043 0302 	orr.w	r3, r3, #2
   15fca:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   15fce:	68eb      	ldr	r3, [r5, #12]
   15fd0:	f023 0304 	bic.w	r3, r3, #4
   15fd4:	f043 0301 	orr.w	r3, r3, #1
   15fd8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   15fda:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   15fdc:	f387 8811 	msr	BASEPRI, r7
   15fe0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   15fe4:	4628      	mov	r0, r5
   15fe6:	4798      	blx	r3
	__asm__ volatile(
   15fe8:	f04f 0320 	mov.w	r3, #32
   15fec:	f3ef 8b11 	mrs	fp, BASEPRI
   15ff0:	f383 8812 	msr	BASEPRI_MAX, r3
   15ff4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   15ff8:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15ffa:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   15ffc:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   16000:	d419      	bmi.n	16036 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   16002:	60ea      	str	r2, [r5, #12]
   16004:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   16008:	f023 0302 	bic.w	r3, r3, #2
   1600c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   16010:	f38b 8811 	msr	BASEPRI, fp
   16014:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   16018:	05db      	lsls	r3, r3, #23
   1601a:	d4ac      	bmi.n	15f76 <work_queue_main+0x12>
	z_impl_k_yield();
   1601c:	f000 fbcc 	bl	167b8 <z_impl_k_yield>
}
   16020:	e7a9      	b.n	15f76 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   16022:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   16026:	2200      	movs	r2, #0
   16028:	2101      	movs	r1, #1
   1602a:	4628      	mov	r0, r5
   1602c:	f004 fd78 	bl	1ab20 <z_sched_wake>
   16030:	2800      	cmp	r0, #0
   16032:	d1f8      	bne.n	16026 <work_queue_main+0xc2>
   16034:	e7b1      	b.n	15f9a <work_queue_main+0x36>
	return list->head;
   16036:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   16038:	f023 0303 	bic.w	r3, r3, #3
   1603c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1603e:	2800      	cmp	r0, #0
   16040:	d0e0      	beq.n	16004 <work_queue_main+0xa0>
	return node->next;
   16042:	2700      	movs	r7, #0
   16044:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   16048:	463b      	mov	r3, r7
   1604a:	2800      	cmp	r0, #0
   1604c:	d0da      	beq.n	16004 <work_queue_main+0xa0>
		if (wc->work == work) {
   1604e:	6842      	ldr	r2, [r0, #4]
   16050:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   16052:	4601      	mov	r1, r0
		if (wc->work == work) {
   16054:	d10c      	bne.n	16070 <work_queue_main+0x10c>
	return node->next;
   16056:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   16058:	b99f      	cbnz	r7, 16082 <work_queue_main+0x11e>
   1605a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1605c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1605e:	4282      	cmp	r2, r0
   16060:	d100      	bne.n	16064 <work_queue_main+0x100>
	list->tail = node;
   16062:	6071      	str	r1, [r6, #4]
	parent->next = child;
   16064:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   16068:	f7ff fef2 	bl	15e50 <z_impl_k_sem_give>
}
   1606c:	4639      	mov	r1, r7
   1606e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   16070:	f1ba 0f00 	cmp.w	sl, #0
   16074:	d00b      	beq.n	1608e <work_queue_main+0x12a>
	return node->next;
   16076:	f8da 2000 	ldr.w	r2, [sl]
   1607a:	4650      	mov	r0, sl
   1607c:	460f      	mov	r7, r1
   1607e:	4692      	mov	sl, r2
   16080:	e7e3      	b.n	1604a <work_queue_main+0xe6>
	parent->next = child;
   16082:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   16084:	6872      	ldr	r2, [r6, #4]
   16086:	4282      	cmp	r2, r0
	list->tail = node;
   16088:	bf08      	it	eq
   1608a:	6077      	streq	r7, [r6, #4]
}
   1608c:	e7ea      	b.n	16064 <work_queue_main+0x100>
   1608e:	4652      	mov	r2, sl
   16090:	e7f3      	b.n	1607a <work_queue_main+0x116>
   16092:	bf00      	nop
   16094:	200025f4 	.word	0x200025f4
   16098:	20002a74 	.word	0x20002a74

0001609c <cancel_sync_locked>:
{
   1609c:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1609e:	68c3      	ldr	r3, [r0, #12]
   160a0:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   160a4:	079b      	lsls	r3, r3, #30
{
   160a6:	4605      	mov	r5, r0
   160a8:	460c      	mov	r4, r1
	if (ret) {
   160aa:	d50d      	bpl.n	160c8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   160ac:	2201      	movs	r2, #1
   160ae:	2100      	movs	r1, #0
   160b0:	f104 0008 	add.w	r0, r4, #8
   160b4:	f004 fb47 	bl	1a746 <z_impl_k_sem_init>
	parent->next = child;
   160b8:	2300      	movs	r3, #0
   160ba:	6023      	str	r3, [r4, #0]
	return list->tail;
   160bc:	4b05      	ldr	r3, [pc, #20]	; (160d4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   160be:	6065      	str	r5, [r4, #4]
   160c0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   160c2:	b91a      	cbnz	r2, 160cc <cancel_sync_locked+0x30>
	list->head = node;
   160c4:	e9c3 4400 	strd	r4, r4, [r3]
}
   160c8:	4630      	mov	r0, r6
   160ca:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   160cc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   160ce:	605c      	str	r4, [r3, #4]
}
   160d0:	e7fa      	b.n	160c8 <cancel_sync_locked+0x2c>
   160d2:	bf00      	nop
   160d4:	200025f4 	.word	0x200025f4

000160d8 <submit_to_queue_locked>:
{
   160d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   160da:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   160dc:	079a      	lsls	r2, r3, #30
{
   160de:	4604      	mov	r4, r0
   160e0:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   160e2:	f3c3 0640 	ubfx	r6, r3, #1, #1
   160e6:	d42c      	bmi.n	16142 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   160e8:	075b      	lsls	r3, r3, #29
   160ea:	d41a      	bmi.n	16122 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   160ec:	680b      	ldr	r3, [r1, #0]
   160ee:	b90b      	cbnz	r3, 160f4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   160f0:	6883      	ldr	r3, [r0, #8]
   160f2:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   160f4:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   160f6:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   160f8:	bf44      	itt	mi
   160fa:	68a3      	ldrmi	r3, [r4, #8]
   160fc:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   160fe:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   16100:	bf4c      	ite	mi
   16102:	2602      	movmi	r6, #2
		ret = 1;
   16104:	2601      	movpl	r6, #1
	if (queue == NULL) {
   16106:	2d00      	cmp	r5, #0
   16108:	d03a      	beq.n	16180 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1610a:	4b1f      	ldr	r3, [pc, #124]	; (16188 <submit_to_queue_locked+0xb0>)
   1610c:	689b      	ldr	r3, [r3, #8]
   1610e:	42ab      	cmp	r3, r5
   16110:	d00a      	beq.n	16128 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   16112:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   16116:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   16118:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1611c:	d414      	bmi.n	16148 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1611e:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   16122:	2300      	movs	r3, #0
   16124:	603b      	str	r3, [r7, #0]
	return ret;
   16126:	e025      	b.n	16174 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   16128:	f004 fa35 	bl	1a596 <k_is_in_isr>
   1612c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   16130:	2800      	cmp	r0, #0
   16132:	d1f0      	bne.n	16116 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   16134:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   16136:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1613a:	d5f0      	bpl.n	1611e <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   1613c:	b152      	cbz	r2, 16154 <submit_to_queue_locked+0x7c>
   1613e:	075b      	lsls	r3, r3, #29
   16140:	d408      	bmi.n	16154 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   16142:	f06f 060f 	mvn.w	r6, #15
   16146:	e7ec      	b.n	16122 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   16148:	2a00      	cmp	r2, #0
   1614a:	d1fa      	bne.n	16142 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1614c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   16150:	2b00      	cmp	r3, #0
   16152:	d1f6      	bne.n	16142 <submit_to_queue_locked+0x6a>
	parent->next = child;
   16154:	2300      	movs	r3, #0
   16156:	6023      	str	r3, [r4, #0]
	return list->tail;
   16158:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1615c:	b963      	cbnz	r3, 16178 <submit_to_queue_locked+0xa0>
	list->head = node;
   1615e:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   16162:	4628      	mov	r0, r5
   16164:	f004 fb19 	bl	1a79a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   16168:	68e3      	ldr	r3, [r4, #12]
   1616a:	f043 0304 	orr.w	r3, r3, #4
   1616e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   16170:	683b      	ldr	r3, [r7, #0]
   16172:	60a3      	str	r3, [r4, #8]
}
   16174:	4630      	mov	r0, r6
   16176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   16178:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1617a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   1617e:	e7f0      	b.n	16162 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   16180:	f06f 0615 	mvn.w	r6, #21
   16184:	e7cd      	b.n	16122 <submit_to_queue_locked+0x4a>
   16186:	bf00      	nop
   16188:	200025d0 	.word	0x200025d0

0001618c <k_work_submit>:
{
   1618c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1618e:	4801      	ldr	r0, [pc, #4]	; (16194 <k_work_submit+0x8>)
   16190:	f004 bb89 	b.w	1a8a6 <k_work_submit_to_queue>
   16194:	20001110 	.word	0x20001110

00016198 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   16198:	b5f0      	push	{r4, r5, r6, r7, lr}
   1619a:	b089      	sub	sp, #36	; 0x24
   1619c:	4604      	mov	r4, r0
	list->head = NULL;
   1619e:	2000      	movs	r0, #0
	list->tail = NULL;
   161a0:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   161a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   161a6:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   161aa:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   161ae:	f104 0090 	add.w	r0, r4, #144	; 0x90
   161b2:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   161b6:	b31d      	cbz	r5, 16200 <k_work_queue_start+0x68>
   161b8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   161ba:	2800      	cmp	r0, #0
   161bc:	f240 1001 	movw	r0, #257	; 0x101
   161c0:	bf08      	it	eq
   161c2:	2001      	moveq	r0, #1
	*flagp = flags;
   161c4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   161c8:	2000      	movs	r0, #0
   161ca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   161ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   161d2:	e9cd 3003 	strd	r3, r0, [sp, #12]
   161d6:	e9cd 0001 	strd	r0, r0, [sp, #4]
   161da:	e9cd 6706 	strd	r6, r7, [sp, #24]
   161de:	4b09      	ldr	r3, [pc, #36]	; (16204 <k_work_queue_start+0x6c>)
   161e0:	9400      	str	r4, [sp, #0]
   161e2:	4620      	mov	r0, r4
   161e4:	f7ff fca6 	bl	15b34 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   161e8:	b125      	cbz	r5, 161f4 <k_work_queue_start+0x5c>
   161ea:	6829      	ldr	r1, [r5, #0]
   161ec:	b111      	cbz	r1, 161f4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   161ee:	4620      	mov	r0, r4
   161f0:	f004 f9d7 	bl	1a5a2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   161f4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   161f6:	b009      	add	sp, #36	; 0x24
   161f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   161fc:	f004 b9d4 	b.w	1a5a8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   16200:	2001      	movs	r0, #1
   16202:	e7df      	b.n	161c4 <k_work_queue_start+0x2c>
   16204:	00015f65 	.word	0x00015f65

00016208 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   16208:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1620a:	9001      	str	r0, [sp, #4]
   1620c:	4608      	mov	r0, r1
	__asm__ volatile(
   1620e:	f04f 0120 	mov.w	r1, #32
   16212:	f3ef 8411 	mrs	r4, BASEPRI
   16216:	f381 8812 	msr	BASEPRI_MAX, r1
   1621a:	f3bf 8f6f 	isb	sy
	return *flagp;
   1621e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   16220:	f011 0f0e 	tst.w	r1, #14
   16224:	d116      	bne.n	16254 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16226:	ea53 0502 	orrs.w	r5, r3, r2
   1622a:	d108      	bne.n	1623e <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1622c:	a901      	add	r1, sp, #4
   1622e:	f7ff ff53 	bl	160d8 <submit_to_queue_locked>
	__asm__ volatile(
   16232:	f384 8811 	msr	BASEPRI, r4
   16236:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1623a:	b003      	add	sp, #12
   1623c:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   1623e:	f041 0108 	orr.w	r1, r1, #8
   16242:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   16244:	9901      	ldr	r1, [sp, #4]
   16246:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   16248:	3010      	adds	r0, #16
   1624a:	4903      	ldr	r1, [pc, #12]	; (16258 <k_work_schedule_for_queue+0x50>)
   1624c:	f000 fc28 	bl	16aa0 <z_add_timeout>
	return ret;
   16250:	2001      	movs	r0, #1
   16252:	e7ee      	b.n	16232 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   16254:	2000      	movs	r0, #0
   16256:	e7ec      	b.n	16232 <k_work_schedule_for_queue+0x2a>
   16258:	0001a80f 	.word	0x0001a80f

0001625c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1625c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1625e:	4801      	ldr	r0, [pc, #4]	; (16264 <k_work_schedule+0x8>)
   16260:	f7ff bfd2 	b.w	16208 <k_work_schedule_for_queue>
   16264:	20001110 	.word	0x20001110

00016268 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   16268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1626a:	460c      	mov	r4, r1
   1626c:	9001      	str	r0, [sp, #4]
   1626e:	4616      	mov	r6, r2
   16270:	461d      	mov	r5, r3
	__asm__ volatile(
   16272:	f04f 0320 	mov.w	r3, #32
   16276:	f3ef 8711 	mrs	r7, BASEPRI
   1627a:	f383 8812 	msr	BASEPRI_MAX, r3
   1627e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   16282:	4608      	mov	r0, r1
   16284:	f004 fa7a 	bl	1a77c <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16288:	ea55 0306 	orrs.w	r3, r5, r6
   1628c:	d109      	bne.n	162a2 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1628e:	a901      	add	r1, sp, #4
   16290:	4620      	mov	r0, r4
   16292:	f7ff ff21 	bl	160d8 <submit_to_queue_locked>
	__asm__ volatile(
   16296:	f387 8811 	msr	BASEPRI, r7
   1629a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1629e:	b003      	add	sp, #12
   162a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   162a2:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   162a4:	4906      	ldr	r1, [pc, #24]	; (162c0 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   162a6:	f043 0308 	orr.w	r3, r3, #8
   162aa:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   162ac:	9b01      	ldr	r3, [sp, #4]
   162ae:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   162b0:	f104 0010 	add.w	r0, r4, #16
   162b4:	4632      	mov	r2, r6
   162b6:	462b      	mov	r3, r5
   162b8:	f000 fbf2 	bl	16aa0 <z_add_timeout>
	return ret;
   162bc:	2001      	movs	r0, #1
   162be:	e7ea      	b.n	16296 <k_work_reschedule_for_queue+0x2e>
   162c0:	0001a80f 	.word	0x0001a80f

000162c4 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   162c4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   162c6:	4801      	ldr	r0, [pc, #4]	; (162cc <k_work_reschedule+0x8>)
   162c8:	f7ff bfce 	b.w	16268 <k_work_reschedule_for_queue>
   162cc:	20001110 	.word	0x20001110

000162d0 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   162d0:	89c3      	ldrh	r3, [r0, #14]
   162d2:	2b7f      	cmp	r3, #127	; 0x7f
   162d4:	d812      	bhi.n	162fc <sliceable+0x2c>
	int ret = slice_ticks;
   162d6:	4b0a      	ldr	r3, [pc, #40]	; (16300 <sliceable+0x30>)
   162d8:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   162da:	b163      	cbz	r3, 162f6 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   162dc:	4b09      	ldr	r3, [pc, #36]	; (16304 <sliceable+0x34>)
   162de:	f990 200e 	ldrsb.w	r2, [r0, #14]
   162e2:	681b      	ldr	r3, [r3, #0]
   162e4:	429a      	cmp	r2, r3
   162e6:	db09      	blt.n	162fc <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   162e8:	7b43      	ldrb	r3, [r0, #13]
   162ea:	06db      	lsls	r3, r3, #27
   162ec:	d106      	bne.n	162fc <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   162ee:	4b06      	ldr	r3, [pc, #24]	; (16308 <sliceable+0x38>)
   162f0:	1ac3      	subs	r3, r0, r3
   162f2:	bf18      	it	ne
   162f4:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   162f6:	f003 0001 	and.w	r0, r3, #1
   162fa:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   162fc:	2300      	movs	r3, #0
   162fe:	e7fa      	b.n	162f6 <sliceable+0x26>
   16300:	20002604 	.word	0x20002604
   16304:	20002600 	.word	0x20002600
   16308:	20001010 	.word	0x20001010

0001630c <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   1630c:	4b04      	ldr	r3, [pc, #16]	; (16320 <slice_timeout+0x14>)
   1630e:	1ac0      	subs	r0, r0, r3
   16310:	4b04      	ldr	r3, [pc, #16]	; (16324 <slice_timeout+0x18>)
   16312:	10c0      	asrs	r0, r0, #3
   16314:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   16316:	4b04      	ldr	r3, [pc, #16]	; (16328 <slice_timeout+0x1c>)
   16318:	2201      	movs	r2, #1
   1631a:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   1631c:	4770      	bx	lr
   1631e:	bf00      	nop
   16320:	200011b0 	.word	0x200011b0
   16324:	aaaaaaab 	.word	0xaaaaaaab
   16328:	20002a74 	.word	0x20002a74

0001632c <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   1632c:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   1632e:	4b0e      	ldr	r3, [pc, #56]	; (16368 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   16330:	4c0e      	ldr	r4, [pc, #56]	; (1636c <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   16332:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   16334:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   16338:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   1633c:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   1633e:	4620      	mov	r0, r4
   16340:	f004 fc11 	bl	1ab66 <z_abort_timeout>
	slice_expired[cpu] = false;
   16344:	4b0a      	ldr	r3, [pc, #40]	; (16370 <z_reset_time_slice+0x44>)
   16346:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   16348:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   1634a:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   1634c:	f7ff ffc0 	bl	162d0 <sliceable>
   16350:	b148      	cbz	r0, 16366 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   16352:	4b08      	ldr	r3, [pc, #32]	; (16374 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   16354:	4908      	ldr	r1, [pc, #32]	; (16378 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   16356:	681a      	ldr	r2, [r3, #0]
   16358:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1635a:	4620      	mov	r0, r4
   1635c:	17d3      	asrs	r3, r2, #31
	}
}
   1635e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   16362:	f000 bb9d 	b.w	16aa0 <z_add_timeout>
}
   16366:	bd70      	pop	{r4, r5, r6, pc}
   16368:	200025d0 	.word	0x200025d0
   1636c:	200011b0 	.word	0x200011b0
   16370:	20002a74 	.word	0x20002a74
   16374:	20002604 	.word	0x20002604
   16378:	0001630d 	.word	0x0001630d

0001637c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   1637c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1637e:	4d0d      	ldr	r5, [pc, #52]	; (163b4 <update_cache+0x38>)
   16380:	462b      	mov	r3, r5
   16382:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16386:	429c      	cmp	r4, r3
   16388:	d000      	beq.n	1638c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1638a:	b904      	cbnz	r4, 1638e <update_cache+0x12>
   1638c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1638e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   16390:	b938      	cbnz	r0, 163a2 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   16392:	7b5a      	ldrb	r2, [r3, #13]
   16394:	06d2      	lsls	r2, r2, #27
   16396:	d104      	bne.n	163a2 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   16398:	69a2      	ldr	r2, [r4, #24]
   1639a:	b912      	cbnz	r2, 163a2 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   1639c:	89da      	ldrh	r2, [r3, #14]
   1639e:	2a7f      	cmp	r2, #127	; 0x7f
   163a0:	d805      	bhi.n	163ae <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   163a2:	429c      	cmp	r4, r3
   163a4:	d002      	beq.n	163ac <update_cache+0x30>
			z_reset_time_slice(thread);
   163a6:	4620      	mov	r0, r4
   163a8:	f7ff ffc0 	bl	1632c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   163ac:	4623      	mov	r3, r4
   163ae:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   163b0:	bd38      	pop	{r3, r4, r5, pc}
   163b2:	bf00      	nop
   163b4:	200025d0 	.word	0x200025d0

000163b8 <move_thread_to_end_of_prio_q>:
{
   163b8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   163ba:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   163be:	7b43      	ldrb	r3, [r0, #13]
   163c0:	2a00      	cmp	r2, #0
{
   163c2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   163c4:	da04      	bge.n	163d0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   163c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   163ca:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   163cc:	f004 fad5 	bl	1a97a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   163d0:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   163d2:	4a15      	ldr	r2, [pc, #84]	; (16428 <move_thread_to_end_of_prio_q+0x70>)
   163d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   163d8:	4610      	mov	r0, r2
   163da:	734b      	strb	r3, [r1, #13]
   163dc:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   163e0:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   163e2:	4283      	cmp	r3, r0
   163e4:	bf08      	it	eq
   163e6:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   163e8:	b923      	cbnz	r3, 163f4 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   163ea:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   163ee:	6021      	str	r1, [r4, #0]
	list->tail = node;
   163f0:	6211      	str	r1, [r2, #32]
}
   163f2:	e00c      	b.n	1640e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   163f4:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   163f8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   163fc:	42b5      	cmp	r5, r6
   163fe:	d00e      	beq.n	1641e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16400:	42ae      	cmp	r6, r5
   16402:	dd0c      	ble.n	1641e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   16404:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   16406:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1640a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1640c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1640e:	6890      	ldr	r0, [r2, #8]
   16410:	1a43      	subs	r3, r0, r1
   16412:	4258      	negs	r0, r3
}
   16414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   16418:	4158      	adcs	r0, r3
   1641a:	f7ff bfaf 	b.w	1637c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1641e:	429c      	cmp	r4, r3
   16420:	d0e3      	beq.n	163ea <move_thread_to_end_of_prio_q+0x32>
   16422:	681b      	ldr	r3, [r3, #0]
   16424:	e7e0      	b.n	163e8 <move_thread_to_end_of_prio_q+0x30>
   16426:	bf00      	nop
   16428:	200025d0 	.word	0x200025d0

0001642c <ready_thread>:
{
   1642c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1642e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   16432:	7b42      	ldrb	r2, [r0, #13]
   16434:	2b00      	cmp	r3, #0
   16436:	db29      	blt.n	1648c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16438:	06d3      	lsls	r3, r2, #27
   1643a:	d127      	bne.n	1648c <ready_thread+0x60>
	return node->next != NULL;
   1643c:	6983      	ldr	r3, [r0, #24]
   1643e:	bb2b      	cbnz	r3, 1648c <ready_thread+0x60>
	return list->head == list;
   16440:	4913      	ldr	r1, [pc, #76]	; (16490 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   16442:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16446:	7342      	strb	r2, [r0, #13]
   16448:	460a      	mov	r2, r1
   1644a:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1644e:	4294      	cmp	r4, r2
   16450:	bf18      	it	ne
   16452:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   16454:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16456:	b923      	cbnz	r3, 16462 <ready_thread+0x36>
	node->prev = tail;
   16458:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   1645c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1645e:	6208      	str	r0, [r1, #32]
}
   16460:	e00c      	b.n	1647c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   16462:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   16466:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1646a:	42b5      	cmp	r5, r6
   1646c:	d00a      	beq.n	16484 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1646e:	42ae      	cmp	r6, r5
   16470:	dd08      	ble.n	16484 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   16472:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   16474:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   16478:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1647a:	6058      	str	r0, [r3, #4]
}
   1647c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1647e:	2000      	movs	r0, #0
   16480:	f7ff bf7c 	b.w	1637c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   16484:	42a3      	cmp	r3, r4
   16486:	d0e7      	beq.n	16458 <ready_thread+0x2c>
   16488:	681b      	ldr	r3, [r3, #0]
   1648a:	e7e4      	b.n	16456 <ready_thread+0x2a>
}
   1648c:	bc70      	pop	{r4, r5, r6}
   1648e:	4770      	bx	lr
   16490:	200025d0 	.word	0x200025d0

00016494 <unready_thread>:
{
   16494:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   16496:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1649a:	7b43      	ldrb	r3, [r0, #13]
   1649c:	2a00      	cmp	r2, #0
{
   1649e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   164a0:	da04      	bge.n	164ac <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   164a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   164a6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   164a8:	f004 fa67 	bl	1a97a <sys_dlist_remove>
	update_cache(thread == _current);
   164ac:	4b04      	ldr	r3, [pc, #16]	; (164c0 <unready_thread+0x2c>)
   164ae:	6898      	ldr	r0, [r3, #8]
   164b0:	1a43      	subs	r3, r0, r1
   164b2:	4258      	negs	r0, r3
   164b4:	4158      	adcs	r0, r3
}
   164b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   164ba:	f7ff bf5f 	b.w	1637c <update_cache>
   164be:	bf00      	nop
   164c0:	200025d0 	.word	0x200025d0

000164c4 <pend_locked>:
{
   164c4:	b570      	push	{r4, r5, r6, lr}
   164c6:	4615      	mov	r5, r2
   164c8:	461c      	mov	r4, r3
   164ca:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   164cc:	f004 fa70 	bl	1a9b0 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   164d0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   164d4:	bf08      	it	eq
   164d6:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   164da:	d008      	beq.n	164ee <pend_locked+0x2a>
   164dc:	462a      	mov	r2, r5
   164de:	4623      	mov	r3, r4
   164e0:	f106 0018 	add.w	r0, r6, #24
   164e4:	4902      	ldr	r1, [pc, #8]	; (164f0 <pend_locked+0x2c>)
}
   164e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   164ea:	f000 bad9 	b.w	16aa0 <z_add_timeout>
   164ee:	bd70      	pop	{r4, r5, r6, pc}
   164f0:	0001aa65 	.word	0x0001aa65

000164f4 <k_sched_time_slice_set>:
{
   164f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   164f6:	4604      	mov	r4, r0
   164f8:	460d      	mov	r5, r1
	__asm__ volatile(
   164fa:	f04f 0320 	mov.w	r3, #32
   164fe:	f3ef 8611 	mrs	r6, BASEPRI
   16502:	f383 8812 	msr	BASEPRI_MAX, r3
   16506:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   1650a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1650e:	f240 30e7 	movw	r0, #999	; 0x3e7
   16512:	2100      	movs	r1, #0
   16514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16518:	2300      	movs	r3, #0
   1651a:	fbe4 0107 	umlal	r0, r1, r4, r7
   1651e:	f7e9 fddf 	bl	e0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   16522:	2c00      	cmp	r4, #0
   16524:	dd02      	ble.n	1652c <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
   16526:	2802      	cmp	r0, #2
   16528:	bfb8      	it	lt
   1652a:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1652c:	4b06      	ldr	r3, [pc, #24]	; (16548 <k_sched_time_slice_set+0x54>)
   1652e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   16530:	4b06      	ldr	r3, [pc, #24]	; (1654c <k_sched_time_slice_set+0x58>)
   16532:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   16534:	4b06      	ldr	r3, [pc, #24]	; (16550 <k_sched_time_slice_set+0x5c>)
   16536:	6898      	ldr	r0, [r3, #8]
   16538:	f7ff fef8 	bl	1632c <z_reset_time_slice>
	__asm__ volatile(
   1653c:	f386 8811 	msr	BASEPRI, r6
   16540:	f3bf 8f6f 	isb	sy
}
   16544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16546:	bf00      	nop
   16548:	20002604 	.word	0x20002604
   1654c:	20002600 	.word	0x20002600
   16550:	200025d0 	.word	0x200025d0

00016554 <z_time_slice>:
{
   16554:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   16556:	f04f 0320 	mov.w	r3, #32
   1655a:	f3ef 8511 	mrs	r5, BASEPRI
   1655e:	f383 8812 	msr	BASEPRI_MAX, r3
   16562:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   16566:	4b10      	ldr	r3, [pc, #64]	; (165a8 <z_time_slice+0x54>)
	if (pending_current == curr) {
   16568:	4a10      	ldr	r2, [pc, #64]	; (165ac <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   1656a:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   1656c:	6810      	ldr	r0, [r2, #0]
   1656e:	42a0      	cmp	r0, r4
   16570:	d106      	bne.n	16580 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   16572:	f7ff fedb 	bl	1632c <z_reset_time_slice>
	__asm__ volatile(
   16576:	f385 8811 	msr	BASEPRI, r5
   1657a:	f3bf 8f6f 	isb	sy
}
   1657e:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   16580:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   16582:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   16584:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   16586:	4a0a      	ldr	r2, [pc, #40]	; (165b0 <z_time_slice+0x5c>)
   16588:	5cd3      	ldrb	r3, [r2, r3]
   1658a:	2b00      	cmp	r3, #0
   1658c:	d0f3      	beq.n	16576 <z_time_slice+0x22>
   1658e:	4620      	mov	r0, r4
   16590:	f7ff fe9e 	bl	162d0 <sliceable>
   16594:	2800      	cmp	r0, #0
   16596:	d0ee      	beq.n	16576 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   16598:	7b63      	ldrb	r3, [r4, #13]
   1659a:	06db      	lsls	r3, r3, #27
   1659c:	d102      	bne.n	165a4 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   1659e:	4620      	mov	r0, r4
   165a0:	f7ff ff0a 	bl	163b8 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   165a4:	4620      	mov	r0, r4
   165a6:	e7e4      	b.n	16572 <z_time_slice+0x1e>
   165a8:	200025d0 	.word	0x200025d0
   165ac:	200025fc 	.word	0x200025fc
   165b0:	20002a74 	.word	0x20002a74

000165b4 <z_pend_curr>:
{
   165b4:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   165b6:	480c      	ldr	r0, [pc, #48]	; (165e8 <z_pend_curr+0x34>)
   165b8:	4d0c      	ldr	r5, [pc, #48]	; (165ec <z_pend_curr+0x38>)
   165ba:	6886      	ldr	r6, [r0, #8]
   165bc:	602e      	str	r6, [r5, #0]
{
   165be:	460c      	mov	r4, r1
   165c0:	4611      	mov	r1, r2
   165c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   165c6:	f04f 0620 	mov.w	r6, #32
   165ca:	f3ef 8511 	mrs	r5, BASEPRI
   165ce:	f386 8812 	msr	BASEPRI_MAX, r6
   165d2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   165d6:	6880      	ldr	r0, [r0, #8]
   165d8:	f7ff ff74 	bl	164c4 <pend_locked>
	ret = arch_swap(key);
   165dc:	4620      	mov	r0, r4
}
   165de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   165e2:	f7eb bed5 	b.w	2390 <arch_swap>
   165e6:	bf00      	nop
   165e8:	200025d0 	.word	0x200025d0
   165ec:	200025fc 	.word	0x200025fc

000165f0 <z_set_prio>:
{
   165f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   165f2:	4604      	mov	r4, r0
   165f4:	f04f 0320 	mov.w	r3, #32
   165f8:	f3ef 8611 	mrs	r6, BASEPRI
   165fc:	f383 8812 	msr	BASEPRI_MAX, r3
   16600:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   16604:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16606:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   16608:	b249      	sxtb	r1, r1
   1660a:	d119      	bne.n	16640 <z_set_prio+0x50>
	return node->next != NULL;
   1660c:	6985      	ldr	r5, [r0, #24]
   1660e:	b9bd      	cbnz	r5, 16640 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16614:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   16616:	f004 f9b0 	bl	1a97a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1661a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1661c:	4a16      	ldr	r2, [pc, #88]	; (16678 <z_set_prio+0x88>)
				thread->base.prio = prio;
   1661e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   16620:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16624:	7343      	strb	r3, [r0, #13]
   16626:	4613      	mov	r3, r2
   16628:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1662c:	4298      	cmp	r0, r3
   1662e:	bf18      	it	ne
   16630:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   16632:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16634:	b95d      	cbnz	r5, 1664e <z_set_prio+0x5e>
	node->prev = tail;
   16636:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   1663a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1663c:	6214      	str	r4, [r2, #32]
}
   1663e:	e011      	b.n	16664 <z_set_prio+0x74>
			thread->base.prio = prio;
   16640:	73a1      	strb	r1, [r4, #14]
   16642:	2000      	movs	r0, #0
	__asm__ volatile(
   16644:	f386 8811 	msr	BASEPRI, r6
   16648:	f3bf 8f6f 	isb	sy
}
   1664c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   1664e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   16652:	42b9      	cmp	r1, r7
   16654:	d00b      	beq.n	1666e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16656:	428f      	cmp	r7, r1
   16658:	dd09      	ble.n	1666e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1665a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1665c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   16660:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16662:	606c      	str	r4, [r5, #4]
			update_cache(1);
   16664:	2001      	movs	r0, #1
   16666:	f7ff fe89 	bl	1637c <update_cache>
   1666a:	2001      	movs	r0, #1
   1666c:	e7ea      	b.n	16644 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   1666e:	42a8      	cmp	r0, r5
   16670:	d0e1      	beq.n	16636 <z_set_prio+0x46>
   16672:	682d      	ldr	r5, [r5, #0]
   16674:	e7de      	b.n	16634 <z_set_prio+0x44>
   16676:	bf00      	nop
   16678:	200025d0 	.word	0x200025d0

0001667c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1667c:	b949      	cbnz	r1, 16692 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1667e:	f3ef 8005 	mrs	r0, IPSR
   16682:	b930      	cbnz	r0, 16692 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   16684:	4b05      	ldr	r3, [pc, #20]	; (1669c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   16686:	699a      	ldr	r2, [r3, #24]
   16688:	689b      	ldr	r3, [r3, #8]
   1668a:	429a      	cmp	r2, r3
   1668c:	d001      	beq.n	16692 <z_reschedule+0x16>
   1668e:	f7eb be7f 	b.w	2390 <arch_swap>
   16692:	f381 8811 	msr	BASEPRI, r1
   16696:	f3bf 8f6f 	isb	sy
}
   1669a:	4770      	bx	lr
   1669c:	200025d0 	.word	0x200025d0

000166a0 <z_sched_start>:
{
   166a0:	b510      	push	{r4, lr}
	__asm__ volatile(
   166a2:	f04f 0220 	mov.w	r2, #32
   166a6:	f3ef 8411 	mrs	r4, BASEPRI
   166aa:	f382 8812 	msr	BASEPRI_MAX, r2
   166ae:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   166b2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   166b4:	0751      	lsls	r1, r2, #29
   166b6:	d404      	bmi.n	166c2 <z_sched_start+0x22>
	__asm__ volatile(
   166b8:	f384 8811 	msr	BASEPRI, r4
   166bc:	f3bf 8f6f 	isb	sy
}
   166c0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   166c2:	f022 0204 	bic.w	r2, r2, #4
   166c6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   166c8:	f7ff feb0 	bl	1642c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   166cc:	4621      	mov	r1, r4
   166ce:	4802      	ldr	r0, [pc, #8]	; (166d8 <z_sched_start+0x38>)
}
   166d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   166d4:	f7ff bfd2 	b.w	1667c <z_reschedule>
   166d8:	20002a75 	.word	0x20002a75

000166dc <z_impl_k_thread_suspend>:
{
   166dc:	b570      	push	{r4, r5, r6, lr}
   166de:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   166e0:	3018      	adds	r0, #24
   166e2:	f004 fa40 	bl	1ab66 <z_abort_timeout>
	__asm__ volatile(
   166e6:	f04f 0320 	mov.w	r3, #32
   166ea:	f3ef 8611 	mrs	r6, BASEPRI
   166ee:	f383 8812 	msr	BASEPRI_MAX, r3
   166f2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   166f6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   166fa:	7b63      	ldrb	r3, [r4, #13]
   166fc:	2a00      	cmp	r2, #0
   166fe:	da05      	bge.n	1670c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16704:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   16706:	4620      	mov	r0, r4
   16708:	f004 f937 	bl	1a97a <sys_dlist_remove>
		update_cache(thread == _current);
   1670c:	4d0b      	ldr	r5, [pc, #44]	; (1673c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1670e:	7b63      	ldrb	r3, [r4, #13]
   16710:	68a8      	ldr	r0, [r5, #8]
   16712:	f043 0310 	orr.w	r3, r3, #16
   16716:	7363      	strb	r3, [r4, #13]
   16718:	1b03      	subs	r3, r0, r4
   1671a:	4258      	negs	r0, r3
   1671c:	4158      	adcs	r0, r3
   1671e:	f7ff fe2d 	bl	1637c <update_cache>
	__asm__ volatile(
   16722:	f386 8811 	msr	BASEPRI, r6
   16726:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1672a:	68ab      	ldr	r3, [r5, #8]
   1672c:	42a3      	cmp	r3, r4
   1672e:	d103      	bne.n	16738 <z_impl_k_thread_suspend+0x5c>
}
   16730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   16734:	f004 b9da 	b.w	1aaec <z_reschedule_unlocked>
}
   16738:	bd70      	pop	{r4, r5, r6, pc}
   1673a:	bf00      	nop
   1673c:	200025d0 	.word	0x200025d0

00016740 <k_sched_lock>:
	__asm__ volatile(
   16740:	f04f 0320 	mov.w	r3, #32
   16744:	f3ef 8111 	mrs	r1, BASEPRI
   16748:	f383 8812 	msr	BASEPRI_MAX, r3
   1674c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   16750:	4b04      	ldr	r3, [pc, #16]	; (16764 <k_sched_lock+0x24>)
   16752:	689a      	ldr	r2, [r3, #8]
   16754:	7bd3      	ldrb	r3, [r2, #15]
   16756:	3b01      	subs	r3, #1
   16758:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1675a:	f381 8811 	msr	BASEPRI, r1
   1675e:	f3bf 8f6f 	isb	sy
}
   16762:	4770      	bx	lr
   16764:	200025d0 	.word	0x200025d0

00016768 <k_sched_unlock>:
{
   16768:	b510      	push	{r4, lr}
	__asm__ volatile(
   1676a:	f04f 0320 	mov.w	r3, #32
   1676e:	f3ef 8411 	mrs	r4, BASEPRI
   16772:	f383 8812 	msr	BASEPRI_MAX, r3
   16776:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1677a:	4b08      	ldr	r3, [pc, #32]	; (1679c <k_sched_unlock+0x34>)
   1677c:	689a      	ldr	r2, [r3, #8]
   1677e:	7bd3      	ldrb	r3, [r2, #15]
   16780:	3301      	adds	r3, #1
   16782:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   16784:	2000      	movs	r0, #0
   16786:	f7ff fdf9 	bl	1637c <update_cache>
	__asm__ volatile(
   1678a:	f384 8811 	msr	BASEPRI, r4
   1678e:	f3bf 8f6f 	isb	sy
}
   16792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   16796:	f004 b9a9 	b.w	1aaec <z_reschedule_unlocked>
   1679a:	bf00      	nop
   1679c:	200025d0 	.word	0x200025d0

000167a0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   167a0:	4b04      	ldr	r3, [pc, #16]	; (167b4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   167a2:	2100      	movs	r1, #0
   167a4:	f103 021c 	add.w	r2, r3, #28
   167a8:	4608      	mov	r0, r1
	list->tail = (sys_dnode_t *)list;
   167aa:	e9c3 2207 	strd	r2, r2, [r3, #28]
   167ae:	f7ff bea1 	b.w	164f4 <k_sched_time_slice_set>
   167b2:	bf00      	nop
   167b4:	200025d0 	.word	0x200025d0

000167b8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   167b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   167ba:	f04f 0320 	mov.w	r3, #32
   167be:	f3ef 8511 	mrs	r5, BASEPRI
   167c2:	f383 8812 	msr	BASEPRI_MAX, r3
   167c6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   167ca:	4919      	ldr	r1, [pc, #100]	; (16830 <z_impl_k_yield+0x78>)
   167cc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   167ce:	7b43      	ldrb	r3, [r0, #13]
   167d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   167d4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   167d6:	f004 f8d0 	bl	1a97a <sys_dlist_remove>
	}
	queue_thread(_current);
   167da:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   167dc:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   167de:	4608      	mov	r0, r1
   167e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   167e4:	735a      	strb	r2, [r3, #13]
   167e6:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   167ea:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   167ec:	4282      	cmp	r2, r0
   167ee:	bf08      	it	eq
   167f0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   167f2:	b922      	cbnz	r2, 167fe <z_impl_k_yield+0x46>
	node->prev = tail;
   167f4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   167f8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   167fa:	620b      	str	r3, [r1, #32]
}
   167fc:	e00c      	b.n	16818 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   167fe:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   16802:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   16806:	42be      	cmp	r6, r7
   16808:	d00e      	beq.n	16828 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1680a:	42b7      	cmp	r7, r6
   1680c:	dd0c      	ble.n	16828 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1680e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   16810:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   16814:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   16816:	6053      	str	r3, [r2, #4]
	update_cache(1);
   16818:	2001      	movs	r0, #1
   1681a:	f7ff fdaf 	bl	1637c <update_cache>
   1681e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   16820:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16824:	f7eb bdb4 	b.w	2390 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   16828:	42a2      	cmp	r2, r4
   1682a:	d0e3      	beq.n	167f4 <z_impl_k_yield+0x3c>
   1682c:	6812      	ldr	r2, [r2, #0]
   1682e:	e7e0      	b.n	167f2 <z_impl_k_yield+0x3a>
   16830:	200025d0 	.word	0x200025d0

00016834 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   16834:	ea50 0301 	orrs.w	r3, r0, r1
{
   16838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1683c:	4605      	mov	r5, r0
   1683e:	460e      	mov	r6, r1
	if (ticks == 0) {
   16840:	d103      	bne.n	1684a <z_tick_sleep+0x16>
	z_impl_k_yield();
   16842:	f7ff ffb9 	bl	167b8 <z_impl_k_yield>
		k_yield();
		return 0;
   16846:	2000      	movs	r0, #0
   16848:	e02c      	b.n	168a4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1684a:	1c83      	adds	r3, r0, #2
   1684c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   16850:	db2a      	blt.n	168a8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   16852:	f004 f9ae 	bl	1abb2 <sys_clock_tick_get_32>
   16856:	182c      	adds	r4, r5, r0
   16858:	f04f 0320 	mov.w	r3, #32
   1685c:	f3ef 8811 	mrs	r8, BASEPRI
   16860:	f383 8812 	msr	BASEPRI_MAX, r3
   16864:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   16868:	4f11      	ldr	r7, [pc, #68]	; (168b0 <z_tick_sleep+0x7c>)
   1686a:	4b12      	ldr	r3, [pc, #72]	; (168b4 <z_tick_sleep+0x80>)
   1686c:	68b8      	ldr	r0, [r7, #8]
   1686e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   16870:	f7ff fe10 	bl	16494 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   16874:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   16876:	4910      	ldr	r1, [pc, #64]	; (168b8 <z_tick_sleep+0x84>)
   16878:	462a      	mov	r2, r5
   1687a:	4633      	mov	r3, r6
   1687c:	3018      	adds	r0, #24
   1687e:	f000 f90f 	bl	16aa0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   16882:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   16884:	7b53      	ldrb	r3, [r2, #13]
   16886:	f043 0310 	orr.w	r3, r3, #16
   1688a:	7353      	strb	r3, [r2, #13]
   1688c:	4640      	mov	r0, r8
   1688e:	f7eb fd7f 	bl	2390 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   16892:	f004 f98e 	bl	1abb2 <sys_clock_tick_get_32>
   16896:	1a20      	subs	r0, r4, r0
   16898:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1689c:	2801      	cmp	r0, #1
   1689e:	f173 0300 	sbcs.w	r3, r3, #0
   168a2:	dbd0      	blt.n	16846 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   168a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   168a8:	f06f 0401 	mvn.w	r4, #1
   168ac:	1a24      	subs	r4, r4, r0
   168ae:	e7d3      	b.n	16858 <z_tick_sleep+0x24>
   168b0:	200025d0 	.word	0x200025d0
   168b4:	200025fc 	.word	0x200025fc
   168b8:	0001aa65 	.word	0x0001aa65

000168bc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   168bc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   168c0:	bf08      	it	eq
   168c2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   168c6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   168c8:	d106      	bne.n	168d8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   168ca:	4b08      	ldr	r3, [pc, #32]	; (168ec <z_impl_k_sleep+0x30>)
   168cc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   168ce:	f7ff ff05 	bl	166dc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   168d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   168d6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   168d8:	f7ff ffac 	bl	16834 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   168dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   168e0:	fb80 0303 	smull	r0, r3, r0, r3
   168e4:	0bc0      	lsrs	r0, r0, #15
   168e6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   168ea:	e7f4      	b.n	168d6 <z_impl_k_sleep+0x1a>
   168ec:	200025d0 	.word	0x200025d0

000168f0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   168f0:	4b01      	ldr	r3, [pc, #4]	; (168f8 <z_impl_z_current_get+0x8>)
   168f2:	6898      	ldr	r0, [r3, #8]
   168f4:	4770      	bx	lr
   168f6:	bf00      	nop
   168f8:	200025d0 	.word	0x200025d0

000168fc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   168fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16900:	4604      	mov	r4, r0
   16902:	f04f 0320 	mov.w	r3, #32
   16906:	f3ef 8611 	mrs	r6, BASEPRI
   1690a:	f383 8812 	msr	BASEPRI_MAX, r3
   1690e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   16912:	7b03      	ldrb	r3, [r0, #12]
   16914:	07d9      	lsls	r1, r3, #31
   16916:	d50b      	bpl.n	16930 <z_thread_abort+0x34>
	__asm__ volatile(
   16918:	f386 8811 	msr	BASEPRI, r6
   1691c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   16920:	4040      	eors	r0, r0
   16922:	f380 8811 	msr	BASEPRI, r0
   16926:	f04f 0004 	mov.w	r0, #4
   1692a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1692c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   16930:	7b43      	ldrb	r3, [r0, #13]
   16932:	071a      	lsls	r2, r3, #28
   16934:	d504      	bpl.n	16940 <z_thread_abort+0x44>
   16936:	f386 8811 	msr	BASEPRI, r6
   1693a:	f3bf 8f6f 	isb	sy
   1693e:	e7f5      	b.n	1692c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   16940:	f023 0220 	bic.w	r2, r3, #32
   16944:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   16948:	09d2      	lsrs	r2, r2, #7
   1694a:	d120      	bne.n	1698e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1694c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1694e:	68a3      	ldr	r3, [r4, #8]
   16950:	b113      	cbz	r3, 16958 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   16952:	4620      	mov	r0, r4
   16954:	f004 f819 	bl	1a98a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   16958:	f104 0018 	add.w	r0, r4, #24
   1695c:	f004 f903 	bl	1ab66 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   16960:	f104 0758 	add.w	r7, r4, #88	; 0x58
   16964:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   16968:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1696a:	42bd      	cmp	r5, r7
   1696c:	d000      	beq.n	16970 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1696e:	b9b5      	cbnz	r5, 1699e <z_thread_abort+0xa2>
		update_cache(1);
   16970:	2001      	movs	r0, #1
   16972:	f7ff fd03 	bl	1637c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   16976:	4b10      	ldr	r3, [pc, #64]	; (169b8 <z_thread_abort+0xbc>)
   16978:	689b      	ldr	r3, [r3, #8]
   1697a:	42a3      	cmp	r3, r4
   1697c:	d1db      	bne.n	16936 <z_thread_abort+0x3a>
   1697e:	f3ef 8305 	mrs	r3, IPSR
   16982:	2b00      	cmp	r3, #0
   16984:	d1d7      	bne.n	16936 <z_thread_abort+0x3a>
   16986:	4630      	mov	r0, r6
   16988:	f7eb fd02 	bl	2390 <arch_swap>
	return ret;
   1698c:	e7d3      	b.n	16936 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1698e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   16992:	f043 0308 	orr.w	r3, r3, #8
   16996:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   16998:	f003 ffef 	bl	1a97a <sys_dlist_remove>
}
   1699c:	e7d7      	b.n	1694e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   1699e:	4628      	mov	r0, r5
   169a0:	f003 fff3 	bl	1a98a <unpend_thread_no_timeout>
   169a4:	f105 0018 	add.w	r0, r5, #24
   169a8:	f004 f8dd 	bl	1ab66 <z_abort_timeout>
   169ac:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   169b0:	4628      	mov	r0, r5
   169b2:	f7ff fd3b 	bl	1642c <ready_thread>
   169b6:	e7d7      	b.n	16968 <z_thread_abort+0x6c>
   169b8:	200025d0 	.word	0x200025d0

000169bc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   169bc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   169be:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   169c2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   169c4:	e9cd 6700 	strd	r6, r7, [sp]
   169c8:	f7ff fdf4 	bl	165b4 <z_pend_curr>

	if (data != NULL) {
   169cc:	b11c      	cbz	r4, 169d6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   169ce:	4b03      	ldr	r3, [pc, #12]	; (169dc <z_sched_wait+0x20>)
   169d0:	689b      	ldr	r3, [r3, #8]
   169d2:	695b      	ldr	r3, [r3, #20]
   169d4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   169d6:	b002      	add	sp, #8
   169d8:	bdd0      	pop	{r4, r6, r7, pc}
   169da:	bf00      	nop
   169dc:	200025d0 	.word	0x200025d0

000169e0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   169e0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   169e2:	4806      	ldr	r0, [pc, #24]	; (169fc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   169e4:	4a06      	ldr	r2, [pc, #24]	; (16a00 <z_data_copy+0x20>)
   169e6:	4907      	ldr	r1, [pc, #28]	; (16a04 <z_data_copy+0x24>)
   169e8:	1a12      	subs	r2, r2, r0
   169ea:	f003 fd21 	bl	1a430 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   169ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   169f2:	4a05      	ldr	r2, [pc, #20]	; (16a08 <z_data_copy+0x28>)
   169f4:	4905      	ldr	r1, [pc, #20]	; (16a0c <z_data_copy+0x2c>)
   169f6:	4806      	ldr	r0, [pc, #24]	; (16a10 <z_data_copy+0x30>)
   169f8:	f003 bd1a 	b.w	1a430 <z_early_memcpy>
   169fc:	20000000 	.word	0x20000000
   16a00:	20000a30 	.word	0x20000a30
   16a04:	0001cf34 	.word	0x0001cf34
   16a08:	00000000 	.word	0x00000000
   16a0c:	0001cf34 	.word	0x0001cf34
   16a10:	20000000 	.word	0x20000000

00016a14 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   16a14:	4b03      	ldr	r3, [pc, #12]	; (16a24 <elapsed+0x10>)
   16a16:	681b      	ldr	r3, [r3, #0]
   16a18:	b90b      	cbnz	r3, 16a1e <elapsed+0xa>
   16a1a:	f7fd bde9 	b.w	145f0 <sys_clock_elapsed>
}
   16a1e:	2000      	movs	r0, #0
   16a20:	4770      	bx	lr
   16a22:	bf00      	nop
   16a24:	20002608 	.word	0x20002608

00016a28 <next_timeout>:

static int32_t next_timeout(void)
{
   16a28:	b510      	push	{r4, lr}
	return list->head == list;
   16a2a:	4b0e      	ldr	r3, [pc, #56]	; (16a64 <next_timeout+0x3c>)
   16a2c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16a2e:	429c      	cmp	r4, r3
   16a30:	d104      	bne.n	16a3c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   16a32:	f7ff ffef 	bl	16a14 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   16a36:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   16a3a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   16a3c:	f7ff ffea 	bl	16a14 <elapsed>
	if ((to == NULL) ||
   16a40:	2c00      	cmp	r4, #0
   16a42:	d0f8      	beq.n	16a36 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   16a44:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   16a48:	1a1b      	subs	r3, r3, r0
   16a4a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   16a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   16a52:	f172 0100 	sbcs.w	r1, r2, #0
   16a56:	daee      	bge.n	16a36 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   16a58:	2a00      	cmp	r2, #0
   16a5a:	bfac      	ite	ge
   16a5c:	4618      	movge	r0, r3
   16a5e:	2000      	movlt	r0, #0
	return ret;
   16a60:	e7eb      	b.n	16a3a <next_timeout+0x12>
   16a62:	bf00      	nop
   16a64:	200007d4 	.word	0x200007d4

00016a68 <remove_timeout>:
{
   16a68:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16a6a:	b170      	cbz	r0, 16a8a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   16a6c:	4b0b      	ldr	r3, [pc, #44]	; (16a9c <remove_timeout+0x34>)
   16a6e:	685b      	ldr	r3, [r3, #4]
   16a70:	4298      	cmp	r0, r3
   16a72:	d00a      	beq.n	16a8a <remove_timeout+0x22>
   16a74:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   16a76:	b143      	cbz	r3, 16a8a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   16a78:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   16a7c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   16a80:	1912      	adds	r2, r2, r4
   16a82:	eb41 0105 	adc.w	r1, r1, r5
   16a86:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   16a8a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   16a8e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16a90:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16a92:	2300      	movs	r3, #0
	node->prev = NULL;
   16a94:	e9c0 3300 	strd	r3, r3, [r0]
}
   16a98:	bd30      	pop	{r4, r5, pc}
   16a9a:	bf00      	nop
   16a9c:	200007d4 	.word	0x200007d4

00016aa0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   16aa4:	bf08      	it	eq
   16aa6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   16aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16aac:	4604      	mov	r4, r0
   16aae:	461d      	mov	r5, r3
   16ab0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16ab2:	d05c      	beq.n	16b6e <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   16ab4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   16ab6:	f04f 0320 	mov.w	r3, #32
   16aba:	f3ef 8711 	mrs	r7, BASEPRI
   16abe:	f383 8812 	msr	BASEPRI_MAX, r3
   16ac2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   16ac6:	3201      	adds	r2, #1
   16ac8:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   16acc:	da24      	bge.n	16b18 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   16ace:	492d      	ldr	r1, [pc, #180]	; (16b84 <z_add_timeout+0xe4>)
   16ad0:	e9d1 2000 	ldrd	r2, r0, [r1]
   16ad4:	f06f 0301 	mvn.w	r3, #1
   16ad8:	1a9b      	subs	r3, r3, r2
   16ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16ade:	eb62 0000 	sbc.w	r0, r2, r0
   16ae2:	1b9e      	subs	r6, r3, r6
   16ae4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   16ae8:	2e01      	cmp	r6, #1
   16aea:	f170 0300 	sbcs.w	r3, r0, #0
   16aee:	da01      	bge.n	16af4 <z_add_timeout+0x54>
   16af0:	2601      	movs	r6, #1
   16af2:	2000      	movs	r0, #0
   16af4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   16af8:	4e23      	ldr	r6, [pc, #140]	; (16b88 <z_add_timeout+0xe8>)
   16afa:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   16afe:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16b00:	45b4      	cmp	ip, r6
   16b02:	bf08      	it	eq
   16b04:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   16b08:	f1bc 0f00 	cmp.w	ip, #0
   16b0c:	d10d      	bne.n	16b2a <z_add_timeout+0x8a>
	node->prev = tail;
   16b0e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   16b12:	602c      	str	r4, [r5, #0]
	list->tail = node;
   16b14:	6074      	str	r4, [r6, #4]
}
   16b16:	e01c      	b.n	16b52 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   16b18:	f7ff ff7c 	bl	16a14 <elapsed>
   16b1c:	3601      	adds	r6, #1
   16b1e:	f145 0500 	adc.w	r5, r5, #0
   16b22:	1836      	adds	r6, r6, r0
   16b24:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   16b28:	e7e4      	b.n	16af4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   16b2a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   16b2e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   16b32:	4293      	cmp	r3, r2
   16b34:	eb71 0e00 	sbcs.w	lr, r1, r0
   16b38:	da1a      	bge.n	16b70 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   16b3a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   16b3c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   16b40:	eb60 0001 	sbc.w	r0, r0, r1
   16b44:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   16b48:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   16b4c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16b4e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   16b52:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16b54:	42b3      	cmp	r3, r6
   16b56:	d006      	beq.n	16b66 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   16b58:	429c      	cmp	r4, r3
   16b5a:	d104      	bne.n	16b66 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   16b5c:	f7ff ff64 	bl	16a28 <next_timeout>
   16b60:	2100      	movs	r1, #0
   16b62:	f7fd fd13 	bl	1458c <sys_clock_set_timeout>
	__asm__ volatile(
   16b66:	f387 8811 	msr	BASEPRI, r7
   16b6a:	f3bf 8f6f 	isb	sy
		}
	}
}
   16b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   16b70:	1a9b      	subs	r3, r3, r2
   16b72:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   16b76:	45ac      	cmp	ip, r5
   16b78:	e9c4 3104 	strd	r3, r1, [r4, #16]
   16b7c:	d0c7      	beq.n	16b0e <z_add_timeout+0x6e>
   16b7e:	f8dc c000 	ldr.w	ip, [ip]
   16b82:	e7c1      	b.n	16b08 <z_add_timeout+0x68>
   16b84:	200011c8 	.word	0x200011c8
   16b88:	200007d4 	.word	0x200007d4

00016b8c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   16b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   16b90:	f04f 0320 	mov.w	r3, #32
   16b94:	f3ef 8c11 	mrs	ip, BASEPRI
   16b98:	f383 8812 	msr	BASEPRI_MAX, r3
   16b9c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   16ba0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 16c54 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   16ba4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 16c58 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   16ba8:	4f2c      	ldr	r7, [pc, #176]	; (16c5c <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   16baa:	f8c9 0000 	str.w	r0, [r9]
   16bae:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   16bb2:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16bb4:	4550      	cmp	r0, sl
   16bb6:	bf08      	it	eq
   16bb8:	2000      	moveq	r0, #0
   16bba:	2500      	movs	r5, #0
		curr_tick += dt;
   16bbc:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   16bc0:	f8d9 3000 	ldr.w	r3, [r9]
   16bc4:	46e0      	mov	r8, ip
   16bc6:	b380      	cbz	r0, 16c2a <sys_clock_announce+0x9e>
   16bc8:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   16bcc:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   16bd0:	42b3      	cmp	r3, r6
   16bd2:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   16bd6:	da05      	bge.n	16be4 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   16bd8:	1af6      	subs	r6, r6, r3
   16bda:	eb6c 040e 	sbc.w	r4, ip, lr
   16bde:	e9c0 6404 	strd	r6, r4, [r0, #16]
   16be2:	e022      	b.n	16c2a <sys_clock_announce+0x9e>
		curr_tick += dt;
   16be4:	18b2      	adds	r2, r6, r2
   16be6:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   16bea:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   16bee:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   16bf2:	f7ff ff39 	bl	16a68 <remove_timeout>
	__asm__ volatile(
   16bf6:	f388 8811 	msr	BASEPRI, r8
   16bfa:	f3bf 8f6f 	isb	sy
		t->fn(t);
   16bfe:	6883      	ldr	r3, [r0, #8]
   16c00:	4798      	blx	r3
	__asm__ volatile(
   16c02:	f04f 0320 	mov.w	r3, #32
   16c06:	f3ef 8811 	mrs	r8, BASEPRI
   16c0a:	f383 8812 	msr	BASEPRI_MAX, r3
   16c0e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   16c12:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   16c16:	f8da 0000 	ldr.w	r0, [sl]
   16c1a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16c1c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   16c1e:	46c4      	mov	ip, r8
   16c20:	f8c9 3000 	str.w	r3, [r9]
   16c24:	d1ca      	bne.n	16bbc <sys_clock_announce+0x30>
		curr_tick += dt;
   16c26:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   16c2a:	189a      	adds	r2, r3, r2
   16c2c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   16c30:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   16c32:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   16c36:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   16c3a:	f7ff fef5 	bl	16a28 <next_timeout>
   16c3e:	4621      	mov	r1, r4
   16c40:	f7fd fca4 	bl	1458c <sys_clock_set_timeout>
	__asm__ volatile(
   16c44:	f388 8811 	msr	BASEPRI, r8
   16c48:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   16c4c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   16c50:	f7ff bc80 	b.w	16554 <z_time_slice>
   16c54:	200007d4 	.word	0x200007d4
   16c58:	20002608 	.word	0x20002608
   16c5c:	200011c8 	.word	0x200011c8

00016c60 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   16c60:	b510      	push	{r4, lr}
	__asm__ volatile(
   16c62:	f04f 0320 	mov.w	r3, #32
   16c66:	f3ef 8411 	mrs	r4, BASEPRI
   16c6a:	f383 8812 	msr	BASEPRI_MAX, r3
   16c6e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   16c72:	f7ff fecf 	bl	16a14 <elapsed>
   16c76:	4a06      	ldr	r2, [pc, #24]	; (16c90 <sys_clock_tick_get+0x30>)
   16c78:	4603      	mov	r3, r0
   16c7a:	e9d2 0100 	ldrd	r0, r1, [r2]
   16c7e:	1818      	adds	r0, r3, r0
   16c80:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   16c84:	f384 8811 	msr	BASEPRI, r4
   16c88:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   16c8c:	bd10      	pop	{r4, pc}
   16c8e:	bf00      	nop
   16c90:	200011c8 	.word	0x200011c8

00016c94 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   16c94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16c98:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   16c9a:	4b29      	ldr	r3, [pc, #164]	; (16d40 <z_impl_k_poll+0xac>)
   16c9c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   16c9e:	2301      	movs	r3, #1
   16ca0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   16ca4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   16ca8:	ea52 0305 	orrs.w	r3, r2, r5
{
   16cac:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   16cae:	bf0c      	ite	eq
   16cb0:	2301      	moveq	r3, #1
   16cb2:	2300      	movne	r3, #0
   16cb4:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   16cb8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   16cba:	f003 ffd5 	bl	1ac68 <register_events>
   16cbe:	4681      	mov	r9, r0
	__asm__ volatile(
   16cc0:	f04f 0320 	mov.w	r3, #32
   16cc4:	f3ef 8a11 	mrs	sl, BASEPRI
   16cc8:	f383 8812 	msr	BASEPRI_MAX, r3
   16ccc:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   16cd0:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   16cd4:	b964      	cbnz	r4, 16cf0 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   16cd6:	4601      	mov	r1, r0
   16cd8:	4652      	mov	r2, sl
   16cda:	4640      	mov	r0, r8
   16cdc:	f004 f895 	bl	1ae0a <clear_event_registrations>
	__asm__ volatile(
   16ce0:	f38a 8811 	msr	BASEPRI, sl
   16ce4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   16ce8:	4620      	mov	r0, r4
   16cea:	b002      	add	sp, #8
   16cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   16cf0:	2300      	movs	r3, #0
   16cf2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16cf6:	ea56 0305 	orrs.w	r3, r6, r5
   16cfa:	d106      	bne.n	16d0a <z_impl_k_poll+0x76>
   16cfc:	f38a 8811 	msr	BASEPRI, sl
   16d00:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   16d04:	f06f 040a 	mvn.w	r4, #10
   16d08:	e7ee      	b.n	16ce8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   16d0a:	e9cd 6500 	strd	r6, r5, [sp]
   16d0e:	4a0d      	ldr	r2, [pc, #52]	; (16d44 <z_impl_k_poll+0xb0>)
   16d10:	480d      	ldr	r0, [pc, #52]	; (16d48 <z_impl_k_poll+0xb4>)
   16d12:	4651      	mov	r1, sl
   16d14:	f7ff fc4e 	bl	165b4 <z_pend_curr>
   16d18:	4604      	mov	r4, r0
	__asm__ volatile(
   16d1a:	f04f 0320 	mov.w	r3, #32
   16d1e:	f3ef 8511 	mrs	r5, BASEPRI
   16d22:	f383 8812 	msr	BASEPRI_MAX, r3
   16d26:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   16d2a:	462a      	mov	r2, r5
   16d2c:	4649      	mov	r1, r9
   16d2e:	4640      	mov	r0, r8
   16d30:	f004 f86b 	bl	1ae0a <clear_event_registrations>
	__asm__ volatile(
   16d34:	f385 8811 	msr	BASEPRI, r5
   16d38:	f3bf 8f6f 	isb	sy
	return swap_rc;
   16d3c:	e7d4      	b.n	16ce8 <z_impl_k_poll+0x54>
   16d3e:	bf00      	nop
   16d40:	200025d0 	.word	0x200025d0
   16d44:	200007dc 	.word	0x200007dc
   16d48:	20002a75 	.word	0x20002a75

00016d4c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   16d4c:	b538      	push	{r3, r4, r5, lr}
   16d4e:	4603      	mov	r3, r0
	__asm__ volatile(
   16d50:	f04f 0220 	mov.w	r2, #32
   16d54:	f3ef 8511 	mrs	r5, BASEPRI
   16d58:	f382 8812 	msr	BASEPRI_MAX, r2
   16d5c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   16d60:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   16d62:	2101      	movs	r1, #1
   16d64:	6081      	str	r1, [r0, #8]
	return list->head == list;
   16d66:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   16d68:	4283      	cmp	r3, r0
   16d6a:	d106      	bne.n	16d7a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   16d6c:	f385 8811 	msr	BASEPRI, r5
   16d70:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   16d74:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   16d76:	4620      	mov	r0, r4
   16d78:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   16d7a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   16d7e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16d80:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16d82:	2300      	movs	r3, #0
	node->prev = NULL;
   16d84:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   16d88:	f003 ffe5 	bl	1ad56 <signal_poll_event>
	z_reschedule(&lock, key);
   16d8c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   16d8e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   16d90:	4801      	ldr	r0, [pc, #4]	; (16d98 <z_impl_k_poll_signal_raise+0x4c>)
   16d92:	f7ff fc73 	bl	1667c <z_reschedule>
	return rc;
   16d96:	e7ee      	b.n	16d76 <z_impl_k_poll_signal_raise+0x2a>
   16d98:	20002a75 	.word	0x20002a75

00016d9c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   16d9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16d9e:	4606      	mov	r6, r0
   16da0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   16da2:	f003 fbf8 	bl	1a596 <k_is_in_isr>
   16da6:	b978      	cbnz	r0, 16dc8 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   16da8:	4b0b      	ldr	r3, [pc, #44]	; (16dd8 <z_thread_aligned_alloc+0x3c>)
   16daa:	689b      	ldr	r3, [r3, #8]
   16dac:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   16dae:	b17c      	cbz	r4, 16dd0 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   16db0:	1d2a      	adds	r2, r5, #4
   16db2:	d209      	bcs.n	16dc8 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   16db4:	2000      	movs	r0, #0
   16db6:	2100      	movs	r1, #0
   16db8:	e9cd 0100 	strd	r0, r1, [sp]
   16dbc:	f046 0104 	orr.w	r1, r6, #4
   16dc0:	4620      	mov	r0, r4
   16dc2:	f003 fb3f 	bl	1a444 <k_heap_aligned_alloc>
	if (mem == NULL) {
   16dc6:	b908      	cbnz	r0, 16dcc <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   16dc8:	2400      	movs	r4, #0
	}

	return ret;
   16dca:	e001      	b.n	16dd0 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   16dcc:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   16dce:	1d04      	adds	r4, r0, #4
}
   16dd0:	4620      	mov	r0, r4
   16dd2:	b002      	add	sp, #8
   16dd4:	bd70      	pop	{r4, r5, r6, pc}
   16dd6:	bf00      	nop
   16dd8:	200025d0 	.word	0x200025d0

00016ddc <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   16ddc:	4801      	ldr	r0, [pc, #4]	; (16de4 <boot_banner+0x8>)
   16dde:	f000 b83a 	b.w	16e56 <printk>
   16de2:	bf00      	nop
   16de4:	0001ceef 	.word	0x0001ceef

00016de8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   16de8:	4770      	bx	lr

00016dea <initGpio>:
{
   16dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16dec:	4604      	mov	r4, r0
   16dee:	6800      	ldr	r0, [r0, #0]
   16df0:	f003 faea 	bl	1a3c8 <z_device_is_ready>
	if (!gpio_is_ready_dt(led_dt))
   16df4:	b908      	cbnz	r0, 16dfa <initGpio+0x10>
		return true;
   16df6:	2001      	movs	r0, #1
}
   16df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return gpio_pin_configure(spec->port,
   16dfa:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   16dfc:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   16dfe:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   16e00:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
   16e02:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   16e06:	683d      	ldr	r5, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   16e08:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   16e0a:	bf54      	ite	pl
   16e0c:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   16e10:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   16e14:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   16e16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   16e1a:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   16e1c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   16e1e:	bf4c      	ite	mi
   16e20:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   16e22:	43b5      	bicpl	r5, r6
   16e24:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
   16e26:	f8dc 3000 	ldr.w	r3, [ip]
   16e2a:	4798      	blx	r3
	if (gpio_pin_configure_dt(led_dt, GPIO_OUTPUT_ACTIVE) < 0)
   16e2c:	2800      	cmp	r0, #0
   16e2e:	dbe2      	blt.n	16df6 <initGpio+0xc>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   16e30:	7923      	ldrb	r3, [r4, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
   16e32:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   16e34:	2101      	movs	r1, #1
   16e36:	4099      	lsls	r1, r3
   16e38:	6903      	ldr	r3, [r0, #16]
   16e3a:	681b      	ldr	r3, [r3, #0]
   16e3c:	4219      	tst	r1, r3
   16e3e:	d104      	bne.n	16e4a <initGpio+0x60>
	return api->port_clear_bits_raw(port, pins);
   16e40:	6883      	ldr	r3, [r0, #8]
   16e42:	691b      	ldr	r3, [r3, #16]
   16e44:	4798      	blx	r3
	return false;
   16e46:	2000      	movs	r0, #0
   16e48:	e7d6      	b.n	16df8 <initGpio+0xe>
	return api->port_set_bits_raw(port, pins);
   16e4a:	6883      	ldr	r3, [r0, #8]
   16e4c:	68db      	ldr	r3, [r3, #12]
   16e4e:	e7f9      	b.n	16e44 <initGpio+0x5a>

00016e50 <aq_ccc_cfg_changed>:
}
   16e50:	4770      	bx	lr

00016e52 <arch_printk_char_out>:
}
   16e52:	2000      	movs	r0, #0
   16e54:	4770      	bx	lr

00016e56 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   16e56:	b40f      	push	{r0, r1, r2, r3}
   16e58:	b507      	push	{r0, r1, r2, lr}
   16e5a:	a904      	add	r1, sp, #16
   16e5c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   16e60:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   16e62:	f7ea fb83 	bl	156c <vprintk>

	va_end(ap);
}
   16e66:	b003      	add	sp, #12
   16e68:	f85d eb04 	ldr.w	lr, [sp], #4
   16e6c:	b004      	add	sp, #16
   16e6e:	4770      	bx	lr

00016e70 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   16e70:	4604      	mov	r4, r0
   16e72:	b508      	push	{r3, lr}
   16e74:	4608      	mov	r0, r1
   16e76:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   16e78:	461a      	mov	r2, r3
   16e7a:	47a0      	blx	r4
	return z_impl_z_current_get();
   16e7c:	f7ff fd38 	bl	168f0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   16e80:	f7eb fcc4 	bl	280c <z_impl_k_thread_abort>

00016e84 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   16e84:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   16e88:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   16e8a:	0840      	lsrs	r0, r0, #1
   16e8c:	4770      	bx	lr

00016e8e <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   16e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16e90:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   16e92:	f7ff fff7 	bl	16e84 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   16e96:	fab0 f080 	clz	r0, r0
   16e9a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   16e9e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   16ea2:	00ca      	lsls	r2, r1, #3
   16ea4:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   16ea8:	1d17      	adds	r7, r2, #4
{
   16eaa:	460c      	mov	r4, r1
   16eac:	3206      	adds	r2, #6
   16eae:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   16eb0:	b956      	cbnz	r6, 16ec8 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   16eb2:	2101      	movs	r1, #1
   16eb4:	fa01 f000 	lsl.w	r0, r1, r0
   16eb8:	68d9      	ldr	r1, [r3, #12]
   16eba:	4301      	orrs	r1, r0
   16ebc:	60d9      	str	r1, [r3, #12]
		b->next = c;
   16ebe:	f8cc 4010 	str.w	r4, [ip, #16]
   16ec2:	53dd      	strh	r5, [r3, r7]
   16ec4:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   16ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   16ec8:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   16eca:	3104      	adds	r1, #4
   16ecc:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   16ece:	53d8      	strh	r0, [r3, r7]
   16ed0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   16ed4:	529e      	strh	r6, [r3, r2]
   16ed6:	80c5      	strh	r5, [r0, #6]
   16ed8:	525d      	strh	r5, [r3, r1]
   16eda:	e7f4      	b.n	16ec6 <free_list_add+0x38>

00016edc <free_list_remove_bidx>:
{
   16edc:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   16ede:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   16ee2:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   16ee4:	4299      	cmp	r1, r3
   16ee6:	f102 0104 	add.w	r1, r2, #4
   16eea:	d10a      	bne.n	16f02 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   16eec:	2301      	movs	r3, #1
   16eee:	fa03 f202 	lsl.w	r2, r3, r2
   16ef2:	68c3      	ldr	r3, [r0, #12]
   16ef4:	ea23 0302 	bic.w	r3, r3, r2
   16ef8:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   16efa:	2300      	movs	r3, #0
   16efc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   16f00:	bd10      	pop	{r4, pc}
   16f02:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   16f04:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   16f08:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   16f0c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   16f10:	80cb      	strh	r3, [r1, #6]
   16f12:	8082      	strh	r2, [r0, #4]
}
   16f14:	e7f4      	b.n	16f00 <free_list_remove_bidx+0x24>

00016f16 <free_list_remove>:
{
   16f16:	b508      	push	{r3, lr}
   16f18:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   16f1a:	f7ff ffb3 	bl	16e84 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   16f1e:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   16f22:	f1c2 021f 	rsb	r2, r2, #31
   16f26:	4618      	mov	r0, r3
}
   16f28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   16f2c:	f7ff bfd6 	b.w	16edc <free_list_remove_bidx>

00016f30 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   16f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16f34:	fab1 f581 	clz	r5, r1
   16f38:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   16f3c:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   16f40:	4603      	mov	r3, r0
	if (b->next) {
   16f42:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   16f46:	460e      	mov	r6, r1
	if (b->next) {
   16f48:	b1c2      	cbz	r2, 16f7c <alloc_chunk+0x4c>
   16f4a:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   16f4c:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   16f50:	4618      	mov	r0, r3
   16f52:	4621      	mov	r1, r4
   16f54:	f7ff ff96 	bl	16e84 <chunk_size>
   16f58:	42b0      	cmp	r0, r6
   16f5a:	d306      	bcc.n	16f6a <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   16f5c:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   16f5e:	4618      	mov	r0, r3
   16f60:	f7ff ffbc 	bl	16edc <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   16f64:	4620      	mov	r0, r4
   16f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   16f6a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   16f6e:	3f01      	subs	r7, #1
   16f70:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   16f72:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   16f76:	d001      	beq.n	16f7c <alloc_chunk+0x4c>
   16f78:	4282      	cmp	r2, r0
   16f7a:	d1e7      	bne.n	16f4c <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   16f7c:	f1c5 0220 	rsb	r2, r5, #32
   16f80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16f84:	4094      	lsls	r4, r2
   16f86:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   16f88:	4014      	ands	r4, r2
   16f8a:	d0eb      	beq.n	16f64 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   16f8c:	fa94 f2a4 	rbit	r2, r4
   16f90:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   16f94:	1d11      	adds	r1, r2, #4
   16f96:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   16f9a:	4621      	mov	r1, r4
   16f9c:	e7df      	b.n	16f5e <alloc_chunk+0x2e>

00016f9e <merge_chunks>:
{
   16f9e:	b538      	push	{r3, r4, r5, lr}
   16fa0:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   16fa2:	f7ff ff6f 	bl	16e84 <chunk_size>
{
   16fa6:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   16fa8:	4604      	mov	r4, r0
   16faa:	4611      	mov	r1, r2
   16fac:	4618      	mov	r0, r3
   16fae:	f7ff ff69 	bl	16e84 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   16fb2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   16fb6:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16fb8:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   16fba:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   16fbc:	4618      	mov	r0, r3
   16fbe:	f7ff ff61 	bl	16e84 <chunk_size>
	void *cmem = &buf[c];
   16fc2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   16fc4:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   16fc8:	bd38      	pop	{r3, r4, r5, pc}

00016fca <split_chunks>:
{
   16fca:	b538      	push	{r3, r4, r5, lr}
   16fcc:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   16fce:	f7ff ff59 	bl	16e84 <chunk_size>
{
   16fd2:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   16fd4:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   16fd6:	1a51      	subs	r1, r2, r1
   16fd8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   16fdc:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16fde:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   16fe0:	8060      	strh	r0, [r4, #2]
   16fe2:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16fe6:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   16fe8:	8044      	strh	r4, [r0, #2]
   16fea:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   16fee:	4618      	mov	r0, r3
   16ff0:	4611      	mov	r1, r2
   16ff2:	f7ff ff47 	bl	16e84 <chunk_size>
	void *cmem = &buf[c];
   16ff6:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   16ff8:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   16ffc:	bd38      	pop	{r3, r4, r5, pc}

00016ffe <free_chunk>:
{
   16ffe:	b538      	push	{r3, r4, r5, lr}
   17000:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   17002:	f7ff ff3f 	bl	16e84 <chunk_size>
   17006:	460c      	mov	r4, r1
   17008:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1700a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1700e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   17010:	07da      	lsls	r2, r3, #31
   17012:	d40a      	bmi.n	1702a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   17014:	4628      	mov	r0, r5
   17016:	f7ff ff7e 	bl	16f16 <free_list_remove>
	return c + chunk_size(h, c);
   1701a:	4621      	mov	r1, r4
   1701c:	4628      	mov	r0, r5
   1701e:	f7ff ff31 	bl	16e84 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   17022:	1822      	adds	r2, r4, r0
   17024:	4628      	mov	r0, r5
   17026:	f7ff ffba 	bl	16f9e <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1702a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1702e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   17030:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   17034:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   17036:	07db      	lsls	r3, r3, #31
   17038:	d40c      	bmi.n	17054 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1703a:	4628      	mov	r0, r5
   1703c:	f7ff ff6b 	bl	16f16 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   17040:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   17044:	4622      	mov	r2, r4
   17046:	1a61      	subs	r1, r4, r1
   17048:	4628      	mov	r0, r5
   1704a:	f7ff ffa8 	bl	16f9e <merge_chunks>
   1704e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   17052:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   17054:	4621      	mov	r1, r4
   17056:	4628      	mov	r0, r5
}
   17058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1705c:	f7ff bf17 	b.w	16e8e <free_list_add>

00017060 <sys_heap_free>:
	if (mem == NULL) {
   17060:	b161      	cbz	r1, 1707c <sys_heap_free+0x1c>
   17062:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   17064:	3904      	subs	r1, #4
   17066:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   17068:	f021 0307 	bic.w	r3, r1, #7
   1706c:	4403      	add	r3, r0
	free_chunk(h, c);
   1706e:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   17070:	885a      	ldrh	r2, [r3, #2]
   17072:	f022 0201 	bic.w	r2, r2, #1
   17076:	805a      	strh	r2, [r3, #2]
   17078:	f7ff bfc1 	b.w	16ffe <free_chunk>
}
   1707c:	4770      	bx	lr

0001707e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1707e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   17080:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   17082:	b909      	cbnz	r1, 17088 <sys_heap_alloc+0xa>
		return NULL;
   17084:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   17086:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   17088:	68ab      	ldr	r3, [r5, #8]
   1708a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1708e:	d9f9      	bls.n	17084 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   17090:	310b      	adds	r1, #11
   17092:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   17094:	4621      	mov	r1, r4
   17096:	4628      	mov	r0, r5
   17098:	f7ff ff4a 	bl	16f30 <alloc_chunk>
	if (c == 0U) {
   1709c:	4606      	mov	r6, r0
   1709e:	2800      	cmp	r0, #0
   170a0:	d0f0      	beq.n	17084 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   170a2:	4601      	mov	r1, r0
   170a4:	4628      	mov	r0, r5
   170a6:	f7ff feed 	bl	16e84 <chunk_size>
   170aa:	42a0      	cmp	r0, r4
   170ac:	d907      	bls.n	170be <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   170ae:	1932      	adds	r2, r6, r4
   170b0:	4628      	mov	r0, r5
   170b2:	f7ff ff8a 	bl	16fca <split_chunks>
		free_list_add(h, c + chunk_sz);
   170b6:	4611      	mov	r1, r2
   170b8:	4628      	mov	r0, r5
   170ba:	f7ff fee8 	bl	16e8e <free_list_add>
	void *cmem = &buf[c];
   170be:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   170c2:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   170c4:	8853      	ldrh	r3, [r2, #2]
   170c6:	f043 0301 	orr.w	r3, r3, #1
   170ca:	8053      	strh	r3, [r2, #2]
   170cc:	3004      	adds	r0, #4
	return mem;
   170ce:	e7da      	b.n	17086 <sys_heap_alloc+0x8>

000170d0 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   170d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   170d4:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   170d8:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   170dc:	6806      	ldr	r6, [r0, #0]
{
   170de:	460f      	mov	r7, r1
   170e0:	4614      	mov	r4, r2
	if (align != rew) {
   170e2:	d00c      	beq.n	170fe <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   170e4:	424b      	negs	r3, r1
   170e6:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   170e8:	2b04      	cmp	r3, #4
   170ea:	461a      	mov	r2, r3
   170ec:	464f      	mov	r7, r9
   170ee:	bf28      	it	cs
   170f0:	2204      	movcs	r2, #4
	rew = align & -align;
   170f2:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   170f4:	b964      	cbnz	r4, 17110 <sys_heap_aligned_alloc+0x40>
		return NULL;
   170f6:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   170f8:	4628      	mov	r0, r5
   170fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   170fe:	2904      	cmp	r1, #4
   17100:	d804      	bhi.n	1710c <sys_heap_aligned_alloc+0x3c>
}
   17102:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   17106:	4611      	mov	r1, r2
   17108:	f7ff bfb9 	b.w	1707e <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   1710c:	2204      	movs	r2, #4
   1710e:	e7f1      	b.n	170f4 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   17110:	68b3      	ldr	r3, [r6, #8]
   17112:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   17116:	d9ee      	bls.n	170f6 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   17118:	f104 010b 	add.w	r1, r4, #11
   1711c:	4439      	add	r1, r7
   1711e:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   17120:	08c9      	lsrs	r1, r1, #3
   17122:	4630      	mov	r0, r6
   17124:	f7ff ff04 	bl	16f30 <alloc_chunk>
	if (c0 == 0) {
   17128:	4680      	mov	r8, r0
   1712a:	2800      	cmp	r0, #0
   1712c:	d0e3      	beq.n	170f6 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1712e:	f109 0504 	add.w	r5, r9, #4
   17132:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   17136:	1e7b      	subs	r3, r7, #1
   17138:	4435      	add	r5, r6
   1713a:	441d      	add	r5, r3
   1713c:	427f      	negs	r7, r7
   1713e:	403d      	ands	r5, r7
   17140:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   17144:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   17146:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   17148:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1714a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1714c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   17150:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   17152:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   17156:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1715a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1715e:	d208      	bcs.n	17172 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   17160:	4601      	mov	r1, r0
   17162:	463a      	mov	r2, r7
   17164:	4630      	mov	r0, r6
   17166:	f7ff ff30 	bl	16fca <split_chunks>
		free_list_add(h, c0);
   1716a:	4641      	mov	r1, r8
   1716c:	4630      	mov	r0, r6
   1716e:	f7ff fe8e 	bl	16e8e <free_list_add>
	return c + chunk_size(h, c);
   17172:	4639      	mov	r1, r7
   17174:	4630      	mov	r0, r6
   17176:	f7ff fe85 	bl	16e84 <chunk_size>
   1717a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1717c:	4284      	cmp	r4, r0
   1717e:	d207      	bcs.n	17190 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   17180:	4630      	mov	r0, r6
   17182:	4622      	mov	r2, r4
   17184:	f7ff ff21 	bl	16fca <split_chunks>
		free_list_add(h, c_end);
   17188:	4621      	mov	r1, r4
   1718a:	4630      	mov	r0, r6
   1718c:	f7ff fe7f 	bl	16e8e <free_list_add>
	void *cmem = &buf[c];
   17190:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17194:	8873      	ldrh	r3, [r6, #2]
   17196:	f043 0301 	orr.w	r3, r3, #1
   1719a:	8073      	strh	r3, [r6, #2]
   1719c:	e7ac      	b.n	170f8 <sys_heap_aligned_alloc+0x28>

0001719e <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1719e:	3a04      	subs	r2, #4
{
   171a0:	b4f0      	push	{r4, r5, r6, r7}
   171a2:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   171a4:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   171a6:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   171a8:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   171ac:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   171b0:	1a0e      	subs	r6, r1, r0
   171b2:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   171b4:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   171b6:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   171ba:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   171bc:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   171c0:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   171c2:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   171c4:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   171c6:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   171ca:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   171cc:	f1c2 0220 	rsb	r2, r2, #32
   171d0:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   171d2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   171d6:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   171da:	4294      	cmp	r4, r2
   171dc:	d1fb      	bne.n	171d6 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   171de:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   171e0:	f042 0201 	orr.w	r2, r2, #1
   171e4:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   171e6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   171ea:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   171ec:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   171ee:	8007      	strh	r7, [r0, #0]
   171f0:	8065      	strh	r5, [r4, #2]
   171f2:	1984      	adds	r4, r0, r6
   171f4:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   171f8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   171fc:	8067      	strh	r7, [r4, #2]
   171fe:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17200:	885a      	ldrh	r2, [r3, #2]
   17202:	f042 0201 	orr.w	r2, r2, #1
   17206:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   17208:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1720a:	f7ff be40 	b.w	16e8e <free_list_add>

0001720e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1720e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   17210:	f013 0307 	ands.w	r3, r3, #7
   17214:	d105      	bne.n	17222 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   17216:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   17218:	2b00      	cmp	r3, #0
   1721a:	bf0c      	ite	eq
   1721c:	2000      	moveq	r0, #0
   1721e:	2003      	movne	r0, #3
   17220:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   17222:	2b02      	cmp	r3, #2
   17224:	d105      	bne.n	17232 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   17226:	8b40      	ldrh	r0, [r0, #26]
   17228:	fab0 f080 	clz	r0, r0
   1722c:	0940      	lsrs	r0, r0, #5
   1722e:	0080      	lsls	r0, r0, #2
   17230:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   17232:	2b01      	cmp	r3, #1
   17234:	d105      	bne.n	17242 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   17236:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   17238:	2b00      	cmp	r3, #0
   1723a:	bf0c      	ite	eq
   1723c:	2000      	moveq	r0, #0
   1723e:	2005      	movne	r0, #5
   17240:	4770      	bx	lr
	int evt = EVT_NOP;
   17242:	2000      	movs	r0, #0
}
   17244:	4770      	bx	lr

00017246 <validate_args>:
{
   17246:	b510      	push	{r4, lr}
   17248:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1724a:	b100      	cbz	r0, 1724e <validate_args+0x8>
   1724c:	b911      	cbnz	r1, 17254 <validate_args+0xe>
		return -EINVAL;
   1724e:	f06f 0015 	mvn.w	r0, #21
}
   17252:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   17254:	1d08      	adds	r0, r1, #4
   17256:	f000 f8ba 	bl	173ce <sys_notify_validate>
	if ((rv == 0)
   1725a:	2800      	cmp	r0, #0
   1725c:	d1f9      	bne.n	17252 <validate_args+0xc>
	    && ((cli->notify.flags
   1725e:	68a3      	ldr	r3, [r4, #8]
   17260:	2b03      	cmp	r3, #3
   17262:	d9f6      	bls.n	17252 <validate_args+0xc>
   17264:	e7f3      	b.n	1724e <validate_args+0x8>

00017266 <notify_one>:
{
   17266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1726a:	460d      	mov	r5, r1
   1726c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1726e:	4619      	mov	r1, r3
   17270:	1d28      	adds	r0, r5, #4
{
   17272:	4690      	mov	r8, r2
   17274:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   17276:	f000 f8be 	bl	173f6 <sys_notify_finalize>
	if (cb) {
   1727a:	4604      	mov	r4, r0
   1727c:	b138      	cbz	r0, 1728e <notify_one+0x28>
		cb(mgr, cli, state, res);
   1727e:	4633      	mov	r3, r6
   17280:	4642      	mov	r2, r8
   17282:	4629      	mov	r1, r5
   17284:	4638      	mov	r0, r7
   17286:	46a4      	mov	ip, r4
}
   17288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1728c:	4760      	bx	ip
}
   1728e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017292 <transition_complete>:
{
   17292:	b410      	push	{r4}
	__asm__ volatile(
   17294:	f04f 0420 	mov.w	r4, #32
   17298:	f3ef 8211 	mrs	r2, BASEPRI
   1729c:	f384 8812 	msr	BASEPRI_MAX, r4
   172a0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   172a4:	6141      	str	r1, [r0, #20]
}
   172a6:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   172a8:	2101      	movs	r1, #1
   172aa:	f7ea b96d 	b.w	1588 <process_event>

000172ae <onoff_manager_init>:
{
   172ae:	b538      	push	{r3, r4, r5, lr}
   172b0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   172b2:	4605      	mov	r5, r0
   172b4:	b158      	cbz	r0, 172ce <onoff_manager_init+0x20>
	    || (transitions == NULL)
   172b6:	b151      	cbz	r1, 172ce <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   172b8:	680b      	ldr	r3, [r1, #0]
   172ba:	b143      	cbz	r3, 172ce <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   172bc:	684b      	ldr	r3, [r1, #4]
   172be:	b133      	cbz	r3, 172ce <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   172c0:	221c      	movs	r2, #28
   172c2:	2100      	movs	r1, #0
   172c4:	f000 fba5 	bl	17a12 <memset>
   172c8:	612c      	str	r4, [r5, #16]
	return 0;
   172ca:	2000      	movs	r0, #0
}
   172cc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   172ce:	f06f 0015 	mvn.w	r0, #21
   172d2:	e7fb      	b.n	172cc <onoff_manager_init+0x1e>

000172d4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   172d4:	b570      	push	{r4, r5, r6, lr}
   172d6:	4605      	mov	r5, r0
   172d8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   172da:	f7ff ffb4 	bl	17246 <validate_args>

	if (rv < 0) {
   172de:	1e04      	subs	r4, r0, #0
   172e0:	db15      	blt.n	1730e <onoff_request+0x3a>
   172e2:	f04f 0320 	mov.w	r3, #32
   172e6:	f3ef 8211 	mrs	r2, BASEPRI
   172ea:	f383 8812 	msr	BASEPRI_MAX, r3
   172ee:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   172f2:	8b6b      	ldrh	r3, [r5, #26]
   172f4:	8b2c      	ldrh	r4, [r5, #24]
   172f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   172fa:	428b      	cmp	r3, r1
   172fc:	f004 0407 	and.w	r4, r4, #7
   17300:	d107      	bne.n	17312 <onoff_request+0x3e>
	__asm__ volatile(
   17302:	f382 8811 	msr	BASEPRI, r2
   17306:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   1730a:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1730e:	4620      	mov	r0, r4
   17310:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   17312:	2c02      	cmp	r4, #2
   17314:	d10c      	bne.n	17330 <onoff_request+0x5c>
		mgr->refs += 1U;
   17316:	3301      	adds	r3, #1
   17318:	836b      	strh	r3, [r5, #26]
   1731a:	f382 8811 	msr	BASEPRI, r2
   1731e:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   17322:	2300      	movs	r3, #0
   17324:	4622      	mov	r2, r4
   17326:	4631      	mov	r1, r6
   17328:	4628      	mov	r0, r5
   1732a:	f7ff ff9c 	bl	17266 <notify_one>
   1732e:	e7ee      	b.n	1730e <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   17330:	2c06      	cmp	r4, #6
   17332:	d814      	bhi.n	1735e <onoff_request+0x8a>
   17334:	e8df f004 	tbb	[pc, r4]
   17338:	13131304 	.word	0x13131304
   1733c:	1a04      	.short	0x1a04
   1733e:	04          	.byte	0x04
   1733f:	00          	.byte	0x00
	parent->next = child;
   17340:	2300      	movs	r3, #0
   17342:	6033      	str	r3, [r6, #0]
	return list->tail;
   17344:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   17346:	b93b      	cbnz	r3, 17358 <onoff_request+0x84>
	list->head = node;
   17348:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   1734c:	b9ac      	cbnz	r4, 1737a <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   1734e:	2102      	movs	r1, #2
   17350:	4628      	mov	r0, r5
   17352:	f7ea f919 	bl	1588 <process_event>
   17356:	e7da      	b.n	1730e <onoff_request+0x3a>
	parent->next = child;
   17358:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1735a:	606e      	str	r6, [r5, #4]
}
   1735c:	e7f6      	b.n	1734c <onoff_request+0x78>
   1735e:	f382 8811 	msr	BASEPRI, r2
   17362:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   17366:	f06f 0404 	mvn.w	r4, #4
   1736a:	e7d0      	b.n	1730e <onoff_request+0x3a>
   1736c:	f382 8811 	msr	BASEPRI, r2
   17370:	f3bf 8f6f 	isb	sy
   17374:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17378:	e7c9      	b.n	1730e <onoff_request+0x3a>
   1737a:	f382 8811 	msr	BASEPRI, r2
   1737e:	f3bf 8f6f 	isb	sy
		if (notify) {
   17382:	e7c4      	b.n	1730e <onoff_request+0x3a>

00017384 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   17384:	b510      	push	{r4, lr}
	__asm__ volatile(
   17386:	f04f 0320 	mov.w	r3, #32
   1738a:	f3ef 8211 	mrs	r2, BASEPRI
   1738e:	f383 8812 	msr	BASEPRI_MAX, r3
   17392:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   17396:	8b04      	ldrh	r4, [r0, #24]
   17398:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1739c:	2c02      	cmp	r4, #2
   1739e:	d00a      	beq.n	173b6 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   173a0:	2c01      	cmp	r4, #1
   173a2:	bf0c      	ite	eq
   173a4:	f06f 0004 	mvneq.w	r0, #4
   173a8:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   173ac:	f382 8811 	msr	BASEPRI, r2
   173b0:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   173b4:	e008      	b.n	173c8 <onoff_release+0x44>
	mgr->refs -= 1U;
   173b6:	8b43      	ldrh	r3, [r0, #26]
   173b8:	3b01      	subs	r3, #1
   173ba:	b29b      	uxth	r3, r3
   173bc:	8343      	strh	r3, [r0, #26]
	if (stop) {
   173be:	b923      	cbnz	r3, 173ca <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   173c0:	4621      	mov	r1, r4
   173c2:	f7ea f8e1 	bl	1588 <process_event>
	int rv = state;
   173c6:	4620      	mov	r0, r4
}
   173c8:	bd10      	pop	{r4, pc}
	int rv = state;
   173ca:	4620      	mov	r0, r4
   173cc:	e7ee      	b.n	173ac <onoff_release+0x28>

000173ce <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   173ce:	4603      	mov	r3, r0
   173d0:	b140      	cbz	r0, 173e4 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   173d2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   173d4:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   173d8:	2a02      	cmp	r2, #2
   173da:	d006      	beq.n	173ea <sys_notify_validate+0x1c>
   173dc:	2a03      	cmp	r2, #3
   173de:	d004      	beq.n	173ea <sys_notify_validate+0x1c>
   173e0:	2a01      	cmp	r2, #1
   173e2:	d005      	beq.n	173f0 <sys_notify_validate+0x22>
   173e4:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   173e8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   173ea:	681a      	ldr	r2, [r3, #0]
   173ec:	2a00      	cmp	r2, #0
   173ee:	d0f9      	beq.n	173e4 <sys_notify_validate+0x16>
		notify->result = 0;
   173f0:	2000      	movs	r0, #0
   173f2:	6098      	str	r0, [r3, #8]
   173f4:	4770      	bx	lr

000173f6 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   173f6:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   173f8:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   173fa:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   173fc:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   17400:	2a02      	cmp	r2, #2
{
   17402:	4603      	mov	r3, r0
	switch (method) {
   17404:	f04f 0400 	mov.w	r4, #0
   17408:	d007      	beq.n	1741a <sys_notify_finalize+0x24>
   1740a:	2a03      	cmp	r2, #3
   1740c:	d002      	beq.n	17414 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1740e:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   17410:	2000      	movs	r0, #0
   17412:	e001      	b.n	17418 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   17414:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   17416:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   17418:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1741a:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1741c:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1741e:	2800      	cmp	r0, #0
   17420:	d0f6      	beq.n	17410 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   17422:	f7ff fc93 	bl	16d4c <z_impl_k_poll_signal_raise>
   17426:	e7f3      	b.n	17410 <sys_notify_finalize+0x1a>

00017428 <encode_uint>:
{
   17428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1742c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1742e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   17430:	2b6f      	cmp	r3, #111	; 0x6f
{
   17432:	4680      	mov	r8, r0
   17434:	460f      	mov	r7, r1
   17436:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   17438:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1743c:	d029      	beq.n	17492 <encode_uint+0x6a>
   1743e:	d824      	bhi.n	1748a <encode_uint+0x62>
		return 10;
   17440:	2b58      	cmp	r3, #88	; 0x58
   17442:	bf0c      	ite	eq
   17444:	2610      	moveq	r6, #16
   17446:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   17448:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1744c:	4632      	mov	r2, r6
   1744e:	2300      	movs	r3, #0
   17450:	4640      	mov	r0, r8
   17452:	4639      	mov	r1, r7
   17454:	f7e8 fe44 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17458:	2a09      	cmp	r2, #9
   1745a:	b2d4      	uxtb	r4, r2
   1745c:	d81e      	bhi.n	1749c <encode_uint+0x74>
   1745e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   17460:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17462:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   17464:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17468:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1746c:	d301      	bcc.n	17472 <encode_uint+0x4a>
   1746e:	45d1      	cmp	r9, sl
   17470:	d811      	bhi.n	17496 <encode_uint+0x6e>
	if (conv->flag_hash) {
   17472:	782b      	ldrb	r3, [r5, #0]
   17474:	069b      	lsls	r3, r3, #26
   17476:	d505      	bpl.n	17484 <encode_uint+0x5c>
		if (radix == 8) {
   17478:	2e08      	cmp	r6, #8
   1747a:	d115      	bne.n	174a8 <encode_uint+0x80>
			conv->altform_0 = true;
   1747c:	78ab      	ldrb	r3, [r5, #2]
   1747e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   17482:	70ab      	strb	r3, [r5, #2]
}
   17484:	4648      	mov	r0, r9
   17486:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1748a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1748e:	2b70      	cmp	r3, #112	; 0x70
   17490:	e7d7      	b.n	17442 <encode_uint+0x1a>
	switch (specifier) {
   17492:	2608      	movs	r6, #8
   17494:	e7d8      	b.n	17448 <encode_uint+0x20>
		value /= radix;
   17496:	4680      	mov	r8, r0
   17498:	460f      	mov	r7, r1
   1749a:	e7d7      	b.n	1744c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1749c:	f1bb 0f19 	cmp.w	fp, #25
   174a0:	bf94      	ite	ls
   174a2:	3437      	addls	r4, #55	; 0x37
   174a4:	3457      	addhi	r4, #87	; 0x57
   174a6:	e7db      	b.n	17460 <encode_uint+0x38>
		} else if (radix == 16) {
   174a8:	2e10      	cmp	r6, #16
   174aa:	d1eb      	bne.n	17484 <encode_uint+0x5c>
			conv->altform_0c = true;
   174ac:	78ab      	ldrb	r3, [r5, #2]
   174ae:	f043 0310 	orr.w	r3, r3, #16
   174b2:	e7e6      	b.n	17482 <encode_uint+0x5a>

000174b4 <outs>:
{
   174b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174b8:	4607      	mov	r7, r0
   174ba:	4688      	mov	r8, r1
   174bc:	4615      	mov	r5, r2
   174be:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   174c0:	4614      	mov	r4, r2
   174c2:	42b4      	cmp	r4, r6
   174c4:	d305      	bcc.n	174d2 <outs+0x1e>
   174c6:	b10e      	cbz	r6, 174cc <outs+0x18>
	return (int)count;
   174c8:	1b60      	subs	r0, r4, r5
   174ca:	e008      	b.n	174de <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   174cc:	7823      	ldrb	r3, [r4, #0]
   174ce:	2b00      	cmp	r3, #0
   174d0:	d0fa      	beq.n	174c8 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   174d2:	f814 0b01 	ldrb.w	r0, [r4], #1
   174d6:	4641      	mov	r1, r8
   174d8:	47b8      	blx	r7
		if (rc < 0) {
   174da:	2800      	cmp	r0, #0
   174dc:	daf1      	bge.n	174c2 <outs+0xe>
}
   174de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000174e2 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   174e2:	b40f      	push	{r0, r1, r2, r3}
   174e4:	b507      	push	{r0, r1, r2, lr}
   174e6:	a904      	add	r1, sp, #16
   174e8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   174ec:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   174ee:	f7ea f83d 	bl	156c <vprintk>

	va_end(ap);
}
   174f2:	b003      	add	sp, #12
   174f4:	f85d eb04 	ldr.w	lr, [sp], #4
   174f8:	b004      	add	sp, #16
   174fa:	4770      	bx	lr

000174fc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_TAINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   174fc:	4770      	bx	lr

000174fe <read_str>:
{
   174fe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   17502:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   17506:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   17508:	4640      	mov	r0, r8
{
   1750a:	461f      	mov	r7, r3
   1750c:	460c      	mov	r4, r1
   1750e:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   17510:	f000 fa54 	bl	179bc <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   17514:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   17518:	9300      	str	r3, [sp, #0]
   1751a:	b280      	uxth	r0, r0
   1751c:	e9cd 8001 	strd	r8, r0, [sp, #4]
   17520:	463b      	mov	r3, r7
   17522:	4632      	mov	r2, r6
   17524:	4621      	mov	r1, r4
   17526:	4628      	mov	r0, r5
   17528:	f001 ffd5 	bl	194d6 <bt_gatt_attr_read>
}
   1752c:	b004      	add	sp, #16
   1752e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017532 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   17532:	b538      	push	{r3, r4, r5, lr}
   17534:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   17536:	42ab      	cmp	r3, r5
{
   17538:	4611      	mov	r1, r2
   1753a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1753c:	d804      	bhi.n	17548 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1753e:	461a      	mov	r2, r3
   17540:	f000 fa5c 	bl	179fc <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   17544:	4620      	mov	r0, r4
   17546:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   17548:	2400      	movs	r4, #0
   1754a:	e7fb      	b.n	17544 <_copy+0x12>

0001754c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1754c:	f000 ba61 	b.w	17a12 <memset>

00017550 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   17550:	09c3      	lsrs	r3, r0, #7
   17552:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   17556:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1755a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1755e:	b2c0      	uxtb	r0, r0
   17560:	4770      	bx	lr

00017562 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   17562:	78cb      	ldrb	r3, [r1, #3]
   17564:	7802      	ldrb	r2, [r0, #0]
   17566:	4053      	eors	r3, r2
   17568:	7003      	strb	r3, [r0, #0]
   1756a:	884b      	ldrh	r3, [r1, #2]
   1756c:	7842      	ldrb	r2, [r0, #1]
   1756e:	4053      	eors	r3, r2
   17570:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   17572:	680a      	ldr	r2, [r1, #0]
   17574:	7883      	ldrb	r3, [r0, #2]
   17576:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1757a:	7083      	strb	r3, [r0, #2]
   1757c:	680a      	ldr	r2, [r1, #0]
   1757e:	78c3      	ldrb	r3, [r0, #3]
   17580:	4053      	eors	r3, r2
   17582:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   17584:	79cb      	ldrb	r3, [r1, #7]
   17586:	7902      	ldrb	r2, [r0, #4]
   17588:	4053      	eors	r3, r2
   1758a:	7103      	strb	r3, [r0, #4]
   1758c:	88cb      	ldrh	r3, [r1, #6]
   1758e:	7942      	ldrb	r2, [r0, #5]
   17590:	4053      	eors	r3, r2
   17592:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   17594:	684a      	ldr	r2, [r1, #4]
   17596:	7983      	ldrb	r3, [r0, #6]
   17598:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1759c:	7183      	strb	r3, [r0, #6]
   1759e:	684a      	ldr	r2, [r1, #4]
   175a0:	79c3      	ldrb	r3, [r0, #7]
   175a2:	4053      	eors	r3, r2
   175a4:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   175a6:	7acb      	ldrb	r3, [r1, #11]
   175a8:	7a02      	ldrb	r2, [r0, #8]
   175aa:	4053      	eors	r3, r2
   175ac:	7203      	strb	r3, [r0, #8]
   175ae:	7a42      	ldrb	r2, [r0, #9]
   175b0:	894b      	ldrh	r3, [r1, #10]
   175b2:	4053      	eors	r3, r2
   175b4:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   175b6:	688a      	ldr	r2, [r1, #8]
   175b8:	7a83      	ldrb	r3, [r0, #10]
   175ba:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   175be:	7283      	strb	r3, [r0, #10]
   175c0:	688a      	ldr	r2, [r1, #8]
   175c2:	7ac3      	ldrb	r3, [r0, #11]
   175c4:	4053      	eors	r3, r2
   175c6:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   175c8:	7bcb      	ldrb	r3, [r1, #15]
   175ca:	7b02      	ldrb	r2, [r0, #12]
   175cc:	4053      	eors	r3, r2
   175ce:	7303      	strb	r3, [r0, #12]
   175d0:	89cb      	ldrh	r3, [r1, #14]
   175d2:	7b42      	ldrb	r2, [r0, #13]
   175d4:	4053      	eors	r3, r2
   175d6:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   175d8:	68ca      	ldr	r2, [r1, #12]
   175da:	7b83      	ldrb	r3, [r0, #14]
   175dc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   175e0:	7383      	strb	r3, [r0, #14]
   175e2:	68ca      	ldr	r2, [r1, #12]
   175e4:	7bc3      	ldrb	r3, [r0, #15]
   175e6:	4053      	eors	r3, r2
   175e8:	73c3      	strb	r3, [r0, #15]
}
   175ea:	4770      	bx	lr

000175ec <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   175ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   175ee:	7802      	ldrb	r2, [r0, #0]
   175f0:	f88d 2000 	strb.w	r2, [sp]
   175f4:	7942      	ldrb	r2, [r0, #5]
   175f6:	f88d 2001 	strb.w	r2, [sp, #1]
   175fa:	7a82      	ldrb	r2, [r0, #10]
   175fc:	f88d 2002 	strb.w	r2, [sp, #2]
   17600:	7bc2      	ldrb	r2, [r0, #15]
   17602:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   17606:	7902      	ldrb	r2, [r0, #4]
   17608:	f88d 2004 	strb.w	r2, [sp, #4]
   1760c:	7a42      	ldrb	r2, [r0, #9]
   1760e:	f88d 2005 	strb.w	r2, [sp, #5]
   17612:	7b82      	ldrb	r2, [r0, #14]
   17614:	f88d 2006 	strb.w	r2, [sp, #6]
   17618:	78c2      	ldrb	r2, [r0, #3]
   1761a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1761e:	7a02      	ldrb	r2, [r0, #8]
   17620:	f88d 2008 	strb.w	r2, [sp, #8]
   17624:	7b42      	ldrb	r2, [r0, #13]
   17626:	f88d 2009 	strb.w	r2, [sp, #9]
   1762a:	7882      	ldrb	r2, [r0, #2]
   1762c:	f88d 200a 	strb.w	r2, [sp, #10]
   17630:	79c2      	ldrb	r2, [r0, #7]
   17632:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   17636:	7b02      	ldrb	r2, [r0, #12]
   17638:	f88d 200c 	strb.w	r2, [sp, #12]
   1763c:	7842      	ldrb	r2, [r0, #1]
   1763e:	7ac3      	ldrb	r3, [r0, #11]
   17640:	f88d 200d 	strb.w	r2, [sp, #13]
   17644:	7982      	ldrb	r2, [r0, #6]
   17646:	f88d 200e 	strb.w	r2, [sp, #14]
   1764a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1764e:	2310      	movs	r3, #16
   17650:	466a      	mov	r2, sp
   17652:	4619      	mov	r1, r3
   17654:	f7ff ff6d 	bl	17532 <_copy>
}
   17658:	b005      	add	sp, #20
   1765a:	f85d fb04 	ldr.w	pc, [sp], #4

0001765e <mult_row_column>:
{
   1765e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17660:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   17662:	7808      	ldrb	r0, [r1, #0]
{
   17664:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   17666:	f7ff ff73 	bl	17550 <_double_byte>
   1766a:	4605      	mov	r5, r0
   1766c:	7860      	ldrb	r0, [r4, #1]
   1766e:	f7ff ff6f 	bl	17550 <_double_byte>
   17672:	78a2      	ldrb	r2, [r4, #2]
   17674:	7863      	ldrb	r3, [r4, #1]
   17676:	4053      	eors	r3, r2
   17678:	78e2      	ldrb	r2, [r4, #3]
   1767a:	4053      	eors	r3, r2
   1767c:	405d      	eors	r5, r3
   1767e:	4068      	eors	r0, r5
   17680:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   17682:	7860      	ldrb	r0, [r4, #1]
   17684:	7827      	ldrb	r7, [r4, #0]
   17686:	f7ff ff63 	bl	17550 <_double_byte>
   1768a:	4605      	mov	r5, r0
   1768c:	78a0      	ldrb	r0, [r4, #2]
   1768e:	f7ff ff5f 	bl	17550 <_double_byte>
   17692:	78a3      	ldrb	r3, [r4, #2]
   17694:	405f      	eors	r7, r3
   17696:	78e3      	ldrb	r3, [r4, #3]
   17698:	405f      	eors	r7, r3
   1769a:	407d      	eors	r5, r7
   1769c:	4068      	eors	r0, r5
   1769e:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   176a0:	7863      	ldrb	r3, [r4, #1]
   176a2:	7827      	ldrb	r7, [r4, #0]
   176a4:	78a0      	ldrb	r0, [r4, #2]
   176a6:	405f      	eors	r7, r3
   176a8:	f7ff ff52 	bl	17550 <_double_byte>
   176ac:	4605      	mov	r5, r0
   176ae:	78e0      	ldrb	r0, [r4, #3]
   176b0:	f7ff ff4e 	bl	17550 <_double_byte>
   176b4:	78e3      	ldrb	r3, [r4, #3]
   176b6:	405f      	eors	r7, r3
   176b8:	407d      	eors	r5, r7
   176ba:	4068      	eors	r0, r5
   176bc:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   176be:	7820      	ldrb	r0, [r4, #0]
   176c0:	f7ff ff46 	bl	17550 <_double_byte>
   176c4:	7862      	ldrb	r2, [r4, #1]
   176c6:	7823      	ldrb	r3, [r4, #0]
   176c8:	4053      	eors	r3, r2
   176ca:	78a2      	ldrb	r2, [r4, #2]
   176cc:	4053      	eors	r3, r2
   176ce:	ea80 0503 	eor.w	r5, r0, r3
   176d2:	78e0      	ldrb	r0, [r4, #3]
   176d4:	f7ff ff3c 	bl	17550 <_double_byte>
   176d8:	b2ed      	uxtb	r5, r5
   176da:	4045      	eors	r5, r0
   176dc:	70f5      	strb	r5, [r6, #3]
}
   176de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000176e0 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   176e0:	b570      	push	{r4, r5, r6, lr}
   176e2:	4614      	mov	r4, r2
   176e4:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   176e6:	4605      	mov	r5, r0
   176e8:	2800      	cmp	r0, #0
   176ea:	d049      	beq.n	17780 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   176ec:	2900      	cmp	r1, #0
   176ee:	d049      	beq.n	17784 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   176f0:	2a00      	cmp	r2, #0
   176f2:	d049      	beq.n	17788 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   176f4:	2310      	movs	r3, #16
   176f6:	460a      	mov	r2, r1
   176f8:	4668      	mov	r0, sp
   176fa:	4619      	mov	r1, r3
   176fc:	f7ff ff19 	bl	17532 <_copy>
	add_round_key(state, s->words);
   17700:	4621      	mov	r1, r4
   17702:	4668      	mov	r0, sp
   17704:	f7ff ff2d 	bl	17562 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   17708:	3410      	adds	r4, #16
   1770a:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1770e:	4668      	mov	r0, sp
   17710:	f7ea fd42 	bl	2198 <sub_bytes>
		shift_rows(state);
   17714:	4668      	mov	r0, sp
   17716:	f7ff ff69 	bl	175ec <shift_rows>
	mult_row_column(t, s);
   1771a:	4669      	mov	r1, sp
   1771c:	a804      	add	r0, sp, #16
   1771e:	f7ff ff9e 	bl	1765e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   17722:	a901      	add	r1, sp, #4
   17724:	a805      	add	r0, sp, #20
   17726:	f7ff ff9a 	bl	1765e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1772a:	a902      	add	r1, sp, #8
   1772c:	a806      	add	r0, sp, #24
   1772e:	f7ff ff96 	bl	1765e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   17732:	a903      	add	r1, sp, #12
   17734:	a807      	add	r0, sp, #28
   17736:	f7ff ff92 	bl	1765e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1773a:	2310      	movs	r3, #16
   1773c:	4619      	mov	r1, r3
   1773e:	eb0d 0203 	add.w	r2, sp, r3
   17742:	4668      	mov	r0, sp
   17744:	f7ff fef5 	bl	17532 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   17748:	4621      	mov	r1, r4
   1774a:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1774c:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1774e:	f7ff ff08 	bl	17562 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   17752:	42b4      	cmp	r4, r6
   17754:	d1db      	bne.n	1770e <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   17756:	f7ea fd1f 	bl	2198 <sub_bytes>
	shift_rows(state);
   1775a:	4668      	mov	r0, sp
   1775c:	f7ff ff46 	bl	175ec <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   17760:	4621      	mov	r1, r4
   17762:	4668      	mov	r0, sp
   17764:	f7ff fefd 	bl	17562 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   17768:	2310      	movs	r3, #16
   1776a:	4619      	mov	r1, r3
   1776c:	466a      	mov	r2, sp
   1776e:	4628      	mov	r0, r5
   17770:	f7ff fedf 	bl	17532 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   17774:	4668      	mov	r0, sp
   17776:	2210      	movs	r2, #16
   17778:	2100      	movs	r1, #0
   1777a:	f7ff fee7 	bl	1754c <_set>

	return TC_CRYPTO_SUCCESS;
   1777e:	2001      	movs	r0, #1
}
   17780:	b008      	add	sp, #32
   17782:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   17784:	4608      	mov	r0, r1
   17786:	e7fb      	b.n	17780 <tc_aes_encrypt+0xa0>
   17788:	4610      	mov	r0, r2
   1778a:	e7f9      	b.n	17780 <tc_aes_encrypt+0xa0>

0001778c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1778c:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1778e:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   17790:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   17792:	f912 3b10 	ldrsb.w	r3, [r2], #16
   17796:	2b00      	cmp	r3, #0
   17798:	bfac      	ite	ge
   1779a:	2300      	movge	r3, #0
   1779c:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1779e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   177a2:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   177a6:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   177a8:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   177ac:	d002      	beq.n	177b4 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   177ae:	7813      	ldrb	r3, [r2, #0]
   177b0:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   177b2:	e7f4      	b.n	1779e <gf_double+0x12>
	}
}
   177b4:	bd10      	pop	{r4, pc}

000177b6 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   177b6:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   177b8:	b120      	cbz	r0, 177c4 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   177ba:	2258      	movs	r2, #88	; 0x58
   177bc:	2100      	movs	r1, #0
   177be:	f7ff fec5 	bl	1754c <_set>
   177c2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   177c4:	bd08      	pop	{r3, pc}

000177c6 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   177c6:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   177c8:	4604      	mov	r4, r0
   177ca:	b188      	cbz	r0, 177f0 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   177cc:	2210      	movs	r2, #16
   177ce:	2100      	movs	r1, #0
   177d0:	f7ff febc 	bl	1754c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   177d4:	2210      	movs	r2, #16
   177d6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   177da:	2100      	movs	r1, #0
   177dc:	f7ff feb6 	bl	1754c <_set>
	s->leftover_offset = 0;
   177e0:	2300      	movs	r3, #0
   177e2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   177e4:	2200      	movs	r2, #0
   177e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   177ea:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   177ee:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   177f0:	bd10      	pop	{r4, pc}

000177f2 <tc_cmac_setup>:
{
   177f2:	b570      	push	{r4, r5, r6, lr}
   177f4:	4604      	mov	r4, r0
   177f6:	460d      	mov	r5, r1
   177f8:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   177fa:	b310      	cbz	r0, 17842 <tc_cmac_setup+0x50>
   177fc:	b311      	cbz	r1, 17844 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   177fe:	2258      	movs	r2, #88	; 0x58
   17800:	2100      	movs	r1, #0
   17802:	f7ff fea3 	bl	1754c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   17806:	4629      	mov	r1, r5
	s->sched = sched;
   17808:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1780a:	4630      	mov	r0, r6
   1780c:	f7ea fcd0 	bl	21b0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   17810:	2210      	movs	r2, #16
   17812:	2100      	movs	r1, #0
   17814:	4620      	mov	r0, r4
   17816:	f7ff fe99 	bl	1754c <_set>
	gf_double (s->K1, s->iv);
   1781a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1781e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   17820:	4621      	mov	r1, r4
   17822:	4620      	mov	r0, r4
   17824:	f7ff ff5c 	bl	176e0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   17828:	4621      	mov	r1, r4
   1782a:	4628      	mov	r0, r5
   1782c:	f7ff ffae 	bl	1778c <gf_double>
	gf_double (s->K2, s->K1);
   17830:	4629      	mov	r1, r5
   17832:	f104 0020 	add.w	r0, r4, #32
   17836:	f7ff ffa9 	bl	1778c <gf_double>
	tc_cmac_init(s);
   1783a:	4620      	mov	r0, r4
   1783c:	f7ff ffc3 	bl	177c6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   17840:	2001      	movs	r0, #1
}
   17842:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   17844:	4608      	mov	r0, r1
   17846:	e7fc      	b.n	17842 <tc_cmac_setup+0x50>

00017848 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   17848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1784c:	460e      	mov	r6, r1
   1784e:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   17850:	4604      	mov	r4, r0
   17852:	2800      	cmp	r0, #0
   17854:	d060      	beq.n	17918 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   17856:	b1fa      	cbz	r2, 17898 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   17858:	2900      	cmp	r1, #0
   1785a:	d05d      	beq.n	17918 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   1785c:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   17860:	ea53 0102 	orrs.w	r1, r3, r2
   17864:	d058      	beq.n	17918 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   17866:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   17868:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1786c:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   17870:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   17874:	f1b8 0f00 	cmp.w	r8, #0
   17878:	d02c      	beq.n	178d4 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1787a:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1787e:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   17882:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   17884:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   17886:	d20a      	bcs.n	1789e <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   17888:	462b      	mov	r3, r5
   1788a:	4632      	mov	r2, r6
   1788c:	4629      	mov	r1, r5
   1788e:	f7ff fe50 	bl	17532 <_copy>
			s->leftover_offset += data_length;
   17892:	6c63      	ldr	r3, [r4, #68]	; 0x44
   17894:	442b      	add	r3, r5
   17896:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   17898:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   1789a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   1789e:	463b      	mov	r3, r7
   178a0:	4632      	mov	r2, r6
   178a2:	4639      	mov	r1, r7
   178a4:	f7ff fe45 	bl	17532 <_copy>
		data_length -= remaining_space;
   178a8:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   178aa:	2300      	movs	r3, #0
   178ac:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   178ae:	4445      	add	r5, r8
		data += remaining_space;
   178b0:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   178b2:	1e63      	subs	r3, r4, #1
   178b4:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   178b8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   178bc:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   178c0:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   178c2:	ea82 0200 	eor.w	r2, r2, r0
   178c6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   178c8:	d1f6      	bne.n	178b8 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   178ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   178cc:	4621      	mov	r1, r4
   178ce:	4620      	mov	r0, r4
   178d0:	f7ff ff06 	bl	176e0 <tc_aes_encrypt>
   178d4:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   178d8:	2d10      	cmp	r5, #16
   178da:	d80a      	bhi.n	178f2 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   178dc:	2d00      	cmp	r5, #0
   178de:	d0db      	beq.n	17898 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   178e0:	462b      	mov	r3, r5
   178e2:	4632      	mov	r2, r6
   178e4:	4629      	mov	r1, r5
   178e6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   178ea:	f7ff fe22 	bl	17532 <_copy>
		s->leftover_offset = data_length;
   178ee:	6465      	str	r5, [r4, #68]	; 0x44
   178f0:	e7d2      	b.n	17898 <tc_cmac_update+0x50>
   178f2:	1e63      	subs	r3, r4, #1
   178f4:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   178f6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   178fa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   178fe:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   17900:	ea82 0200 	eor.w	r2, r2, r0
   17904:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17906:	d1f6      	bne.n	178f6 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   17908:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1790a:	4621      	mov	r1, r4
   1790c:	4620      	mov	r0, r4
   1790e:	f7ff fee7 	bl	176e0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   17912:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   17914:	3d10      	subs	r5, #16
   17916:	e7df      	b.n	178d8 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   17918:	2000      	movs	r0, #0
   1791a:	e7be      	b.n	1789a <tc_cmac_update+0x52>

0001791c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1791c:	b570      	push	{r4, r5, r6, lr}
   1791e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   17920:	4605      	mov	r5, r0
   17922:	b1e8      	cbz	r0, 17960 <tc_cmac_final+0x44>
   17924:	b369      	cbz	r1, 17982 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   17926:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   17928:	2a10      	cmp	r2, #16
   1792a:	d11a      	bne.n	17962 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1792c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1792e:	1e63      	subs	r3, r4, #1
   17930:	3901      	subs	r1, #1
   17932:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   17936:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1793a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1793e:	4072      	eors	r2, r6
   17940:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17944:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   17946:	ea82 0206 	eor.w	r2, r2, r6
   1794a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1794c:	d1f3      	bne.n	17936 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1794e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   17950:	4621      	mov	r1, r4
   17952:	4628      	mov	r0, r5
   17954:	f7ff fec4 	bl	176e0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   17958:	4620      	mov	r0, r4
   1795a:	f7ff ff2c 	bl	177b6 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1795e:	2001      	movs	r0, #1
}
   17960:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   17962:	f102 0030 	add.w	r0, r2, #48	; 0x30
   17966:	2100      	movs	r1, #0
   17968:	f1c2 0210 	rsb	r2, r2, #16
   1796c:	4420      	add	r0, r4
   1796e:	f7ff fded 	bl	1754c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   17972:	6c63      	ldr	r3, [r4, #68]	; 0x44
   17974:	4423      	add	r3, r4
   17976:	2280      	movs	r2, #128	; 0x80
   17978:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1797c:	f104 0120 	add.w	r1, r4, #32
   17980:	e7d5      	b.n	1792e <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   17982:	4608      	mov	r0, r1
   17984:	e7ec      	b.n	17960 <tc_cmac_final+0x44>

00017986 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   17986:	f002 bd36 	b.w	1a3f6 <z_fatal_error>

0001798a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1798a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1798c:	6800      	ldr	r0, [r0, #0]
   1798e:	f002 bd32 	b.w	1a3f6 <z_fatal_error>

00017992 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   17992:	2100      	movs	r1, #0
   17994:	2001      	movs	r0, #1
   17996:	f7ff bff6 	b.w	17986 <z_arm_fatal_error>

0001799a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1799a:	b508      	push	{r3, lr}
	handler();
   1799c:	f7ea fcd0 	bl	2340 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   179a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   179a4:	f7ea bdb0 	b.w	2508 <z_arm_exc_exit>

000179a8 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   179a8:	3901      	subs	r1, #1
   179aa:	4603      	mov	r3, r0
   179ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   179b0:	b90a      	cbnz	r2, 179b6 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   179b2:	701a      	strb	r2, [r3, #0]

	return dest;
}
   179b4:	4770      	bx	lr
		*d = *s;
   179b6:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   179ba:	e7f7      	b.n	179ac <strcpy+0x4>

000179bc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   179bc:	4603      	mov	r3, r0
	size_t n = 0;
   179be:	2000      	movs	r0, #0

	while (*s != '\0') {
   179c0:	5c1a      	ldrb	r2, [r3, r0]
   179c2:	b902      	cbnz	r2, 179c6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   179c4:	4770      	bx	lr
		n++;
   179c6:	3001      	adds	r0, #1
   179c8:	e7fa      	b.n	179c0 <strlen+0x4>

000179ca <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   179ca:	4603      	mov	r3, r0
	size_t n = 0;
   179cc:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   179ce:	5c1a      	ldrb	r2, [r3, r0]
   179d0:	b10a      	cbz	r2, 179d6 <strnlen+0xc>
   179d2:	4288      	cmp	r0, r1
   179d4:	d100      	bne.n	179d8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   179d6:	4770      	bx	lr
		n++;
   179d8:	3001      	adds	r0, #1
   179da:	e7f8      	b.n	179ce <strnlen+0x4>

000179dc <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   179dc:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   179de:	b15a      	cbz	r2, 179f8 <memcmp+0x1c>
   179e0:	3901      	subs	r1, #1
   179e2:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   179e4:	f810 2b01 	ldrb.w	r2, [r0], #1
   179e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   179ec:	42a0      	cmp	r0, r4
   179ee:	d001      	beq.n	179f4 <memcmp+0x18>
   179f0:	429a      	cmp	r2, r3
   179f2:	d0f7      	beq.n	179e4 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   179f4:	1ad0      	subs	r0, r2, r3
}
   179f6:	bd10      	pop	{r4, pc}
		return 0;
   179f8:	4610      	mov	r0, r2
   179fa:	e7fc      	b.n	179f6 <memcmp+0x1a>

000179fc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   179fc:	b510      	push	{r4, lr}
   179fe:	1e43      	subs	r3, r0, #1
   17a00:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   17a02:	4291      	cmp	r1, r2
   17a04:	d100      	bne.n	17a08 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   17a06:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   17a08:	f811 4b01 	ldrb.w	r4, [r1], #1
   17a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   17a10:	e7f7      	b.n	17a02 <memcpy+0x6>

00017a12 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   17a12:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   17a14:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   17a16:	4603      	mov	r3, r0
	while (n > 0) {
   17a18:	4293      	cmp	r3, r2
   17a1a:	d100      	bne.n	17a1e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   17a1c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   17a1e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   17a22:	e7f9      	b.n	17a18 <memset+0x6>

00017a24 <_stdout_hook_default>:
}
   17a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17a28:	4770      	bx	lr

00017a2a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   17a2a:	2806      	cmp	r0, #6
   17a2c:	d108      	bne.n	17a40 <pm_state_set+0x16>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   17a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17a32:	2201      	movs	r2, #1
   17a34:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   17a38:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   17a3c:	bf20      	wfe
    while (true)
   17a3e:	e7fd      	b.n	17a3c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   17a40:	4770      	bx	lr

00017a42 <pm_state_exit_post_ops>:
   17a42:	2300      	movs	r3, #0
   17a44:	f383 8811 	msr	BASEPRI, r3
   17a48:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   17a4c:	4770      	bx	lr

00017a4e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   17a4e:	b510      	push	{r4, lr}
   17a50:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   17a52:	7801      	ldrb	r1, [r0, #0]
   17a54:	7822      	ldrb	r2, [r4, #0]
   17a56:	428a      	cmp	r2, r1
{
   17a58:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   17a5a:	d00f      	beq.n	17a7c <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   17a5c:	4669      	mov	r1, sp
   17a5e:	f7eb f805 	bl	2a6c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   17a62:	a905      	add	r1, sp, #20
   17a64:	4620      	mov	r0, r4
   17a66:	f7eb f801 	bl	2a6c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   17a6a:	2210      	movs	r2, #16
   17a6c:	f10d 0115 	add.w	r1, sp, #21
   17a70:	f10d 0001 	add.w	r0, sp, #1
   17a74:	f7ff ffb2 	bl	179dc <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   17a78:	b00a      	add	sp, #40	; 0x28
   17a7a:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   17a7c:	2a01      	cmp	r2, #1
   17a7e:	d006      	beq.n	17a8e <bt_uuid_cmp+0x40>
   17a80:	2a02      	cmp	r2, #2
   17a82:	d007      	beq.n	17a94 <bt_uuid_cmp+0x46>
   17a84:	b972      	cbnz	r2, 17aa4 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   17a86:	8840      	ldrh	r0, [r0, #2]
   17a88:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   17a8a:	1ac0      	subs	r0, r0, r3
   17a8c:	e7f4      	b.n	17a78 <bt_uuid_cmp+0x2a>
   17a8e:	6840      	ldr	r0, [r0, #4]
   17a90:	6863      	ldr	r3, [r4, #4]
   17a92:	e7fa      	b.n	17a8a <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   17a94:	2210      	movs	r2, #16
   17a96:	1c61      	adds	r1, r4, #1
   17a98:	3001      	adds	r0, #1
}
   17a9a:	b00a      	add	sp, #40	; 0x28
   17a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   17aa0:	f7ff bf9c 	b.w	179dc <memcmp>
	switch (u1->type) {
   17aa4:	f06f 0015 	mvn.w	r0, #21
   17aa8:	e7e6      	b.n	17a78 <bt_uuid_cmp+0x2a>

00017aaa <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   17aaa:	2a04      	cmp	r2, #4
{
   17aac:	b510      	push	{r4, lr}
	switch (data_len) {
   17aae:	d00a      	beq.n	17ac6 <bt_uuid_create+0x1c>
   17ab0:	2a10      	cmp	r2, #16
   17ab2:	d00d      	beq.n	17ad0 <bt_uuid_create+0x26>
   17ab4:	2a02      	cmp	r2, #2
   17ab6:	f04f 0300 	mov.w	r3, #0
   17aba:	d10f      	bne.n	17adc <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   17abc:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   17abe:	880b      	ldrh	r3, [r1, #0]
   17ac0:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   17ac2:	2001      	movs	r0, #1
}
   17ac4:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   17ac6:	2301      	movs	r3, #1
   17ac8:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   17aca:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   17acc:	6043      	str	r3, [r0, #4]
		break;
   17ace:	e7f8      	b.n	17ac2 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   17ad0:	2302      	movs	r3, #2
   17ad2:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   17ad6:	f7ff ff91 	bl	179fc <memcpy>
		break;
   17ada:	e7f2      	b.n	17ac2 <bt_uuid_create+0x18>
	switch (data_len) {
   17adc:	4618      	mov	r0, r3
   17ade:	e7f1      	b.n	17ac4 <bt_uuid_create+0x1a>

00017ae0 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   17ae0:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   17ae2:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   17ae4:	2106      	movs	r1, #6
{
   17ae6:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   17ae8:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   17aec:	f7f8 fcf8 	bl	104e0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   17af0:	b918      	cbnz	r0, 17afa <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   17af2:	79a3      	ldrb	r3, [r4, #6]
   17af4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   17af8:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   17afa:	bd10      	pop	{r4, pc}

00017afc <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   17afc:	b510      	push	{r4, lr}
   17afe:	4604      	mov	r4, r0
   17b00:	2207      	movs	r2, #7
   17b02:	f7ff ff7b 	bl	179fc <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   17b06:	7823      	ldrb	r3, [r4, #0]
   17b08:	f023 0302 	bic.w	r3, r3, #2
   17b0c:	7023      	strb	r3, [r4, #0]
}
   17b0e:	bd10      	pop	{r4, pc}

00017b10 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   17b10:	7800      	ldrb	r0, [r0, #0]
}
   17b12:	f3c0 0040 	ubfx	r0, r0, #1, #1
   17b16:	4770      	bx	lr

00017b18 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   17b18:	280f      	cmp	r0, #15
   17b1a:	d807      	bhi.n	17b2c <bt_hci_evt_get_flags+0x14>
   17b1c:	280d      	cmp	r0, #13
   17b1e:	d80b      	bhi.n	17b38 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   17b20:	2805      	cmp	r0, #5
   17b22:	bf08      	it	eq
   17b24:	2003      	moveq	r0, #3
   17b26:	bf18      	it	ne
   17b28:	2002      	movne	r0, #2
   17b2a:	4770      	bx	lr
	switch (evt) {
   17b2c:	2813      	cmp	r0, #19
   17b2e:	d003      	beq.n	17b38 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   17b30:	281a      	cmp	r0, #26
   17b32:	bf08      	it	eq
   17b34:	2001      	moveq	r0, #1
   17b36:	e7f6      	b.n	17b26 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   17b38:	2001      	movs	r0, #1
	}
}
   17b3a:	4770      	bx	lr

00017b3c <hci_data_buf_overflow>:
}
   17b3c:	4770      	bx	lr

00017b3e <hci_disconn_complete>:
{
   17b3e:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   17b40:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   17b42:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17b44:	f8b5 0001 	ldrh.w	r0, [r5, #1]
	if (evt->status) {
   17b48:	b96e      	cbnz	r6, 17b66 <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   17b4a:	f7ec fd51 	bl	45f0 <bt_conn_lookup_handle>
	if (!conn) {
   17b4e:	4604      	mov	r4, r0
   17b50:	b148      	cbz	r0, 17b66 <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   17b52:	78eb      	ldrb	r3, [r5, #3]
   17b54:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17b56:	4631      	mov	r1, r6
   17b58:	f7ec fd52 	bl	4600 <bt_conn_set_state>
		bt_conn_unref(conn);
   17b5c:	4620      	mov	r0, r4
}
   17b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   17b62:	f000 bc8a 	b.w	1847a <bt_conn_unref>
}
   17b66:	bd70      	pop	{r4, r5, r6, pc}

00017b68 <le_phy_update_complete>:
{
   17b68:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17b6a:	68c3      	ldr	r3, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   17b6c:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   17b70:	f7ec fd3e 	bl	45f0 <bt_conn_lookup_handle>
	if (!conn) {
   17b74:	b118      	cbz	r0, 17b7e <le_phy_update_complete+0x16>
}
   17b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   17b7a:	f000 bc7e 	b.w	1847a <bt_conn_unref>
}
   17b7e:	bd08      	pop	{r3, pc}

00017b80 <le_data_len_change>:
{
   17b80:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17b82:	68c3      	ldr	r3, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   17b84:	8818      	ldrh	r0, [r3, #0]
   17b86:	f7ec fd33 	bl	45f0 <bt_conn_lookup_handle>
	if (!conn) {
   17b8a:	b118      	cbz	r0, 17b94 <le_data_len_change+0x14>
}
   17b8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   17b90:	f000 bc73 	b.w	1847a <bt_conn_unref>
}
   17b94:	bd08      	pop	{r3, pc}

00017b96 <atomic_or>:
{
   17b96:	b510      	push	{r4, lr}
   17b98:	4603      	mov	r3, r0
}
   17b9a:	f3bf 8f5b 	dmb	ish
   17b9e:	e853 0f00 	ldrex	r0, [r3]
   17ba2:	ea40 0201 	orr.w	r2, r0, r1
   17ba6:	e843 2400 	strex	r4, r2, [r3]
   17baa:	2c00      	cmp	r4, #0
   17bac:	d1f7      	bne.n	17b9e <atomic_or+0x8>
   17bae:	f3bf 8f5b 	dmb	ish
   17bb2:	bd10      	pop	{r4, pc}

00017bb4 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   17bb4:	2101      	movs	r1, #1
   17bb6:	300c      	adds	r0, #12
   17bb8:	f001 beb2 	b.w	19920 <net_buf_simple_pull_mem>

00017bbc <le_remote_feat_complete>:
{
   17bbc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   17bbe:	68c5      	ldr	r5, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   17bc0:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   17bc4:	f7ec fd14 	bl	45f0 <bt_conn_lookup_handle>
	if (!conn) {
   17bc8:	4604      	mov	r4, r0
   17bca:	b180      	cbz	r0, 17bee <le_remote_feat_complete+0x32>
	if (!evt->status) {
   17bcc:	782b      	ldrb	r3, [r5, #0]
   17bce:	b923      	cbnz	r3, 17bda <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   17bd0:	2208      	movs	r2, #8
   17bd2:	1ce9      	adds	r1, r5, #3
   17bd4:	30ad      	adds	r0, #173	; 0xad
   17bd6:	f7ff ff11 	bl	179fc <memcpy>
   17bda:	1d20      	adds	r0, r4, #4
   17bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17be0:	f7ff ffd9 	bl	17b96 <atomic_or>
	bt_conn_unref(conn);
   17be4:	4620      	mov	r0, r4
}
   17be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   17bea:	f000 bc46 	b.w	1847a <bt_conn_unref>
}
   17bee:	bd38      	pop	{r3, r4, r5, pc}

00017bf0 <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
   17bf0:	b430      	push	{r4, r5}
   17bf2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   17bf6:	4604      	mov	r4, r0
   17bf8:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   17bfa:	429a      	cmp	r2, r3
   17bfc:	d101      	bne.n	17c02 <handle_event_common.isra.0+0x12>
}
   17bfe:	bc30      	pop	{r4, r5}
   17c00:	4770      	bx	lr
		if (handler->event != event) {
   17c02:	4611      	mov	r1, r2
   17c04:	f811 5b08 	ldrb.w	r5, [r1], #8
   17c08:	42a5      	cmp	r5, r4
   17c0a:	d106      	bne.n	17c1a <handle_event_common.isra.0+0x2a>
		if (buf->len < handler->min_len) {
   17c0c:	8a01      	ldrh	r1, [r0, #16]
   17c0e:	7853      	ldrb	r3, [r2, #1]
   17c10:	4299      	cmp	r1, r3
   17c12:	d3f4      	bcc.n	17bfe <handle_event_common.isra.0+0xe>
}
   17c14:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   17c16:	6853      	ldr	r3, [r2, #4]
   17c18:	4718      	bx	r3
   17c1a:	460a      	mov	r2, r1
   17c1c:	e7ed      	b.n	17bfa <handle_event_common.isra.0+0xa>

00017c1e <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17c1e:	f3bf 8f5b 	dmb	ish
   17c22:	e850 3f00 	ldrex	r3, [r0]
   17c26:	400b      	ands	r3, r1
   17c28:	e840 3200 	strex	r2, r3, [r0]
   17c2c:	2a00      	cmp	r2, #0
   17c2e:	d1f8      	bne.n	17c22 <atomic_and.isra.0+0x4>
   17c30:	f3bf 8f5b 	dmb	ish
}
   17c34:	4770      	bx	lr

00017c36 <hci_vendor_event>:
static void hci_vendor_event(struct net_buf *buf)
   17c36:	4770      	bx	lr

00017c38 <hci_num_completed_packets>:
{
   17c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   17c3c:	68c7      	ldr	r7, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   17c3e:	783a      	ldrb	r2, [r7, #0]
   17c40:	2301      	movs	r3, #1
   17c42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   17c46:	8a02      	ldrh	r2, [r0, #16]
   17c48:	4293      	cmp	r3, r2
   17c4a:	d95e      	bls.n	17d0a <hci_num_completed_packets+0xd2>
}
   17c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return list->head;
   17c50:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   17c52:	2b00      	cmp	r3, #0
   17c54:	d132      	bne.n	17cbc <hci_num_completed_packets+0x84>
   17c56:	f382 8811 	msr	BASEPRI, r2
   17c5a:	f3bf 8f6f 	isb	sy
		bt_conn_unref(conn);
   17c5e:	4620      	mov	r0, r4
   17c60:	f000 fc0b 	bl	1847a <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   17c64:	3501      	adds	r5, #1
   17c66:	783b      	ldrb	r3, [r7, #0]
   17c68:	429d      	cmp	r5, r3
   17c6a:	daef      	bge.n	17c4c <hci_num_completed_packets+0x14>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   17c6c:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   17c70:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   17c74:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   17c78:	f7ec fcba 	bl	45f0 <bt_conn_lookup_handle>
		if (!conn) {
   17c7c:	4604      	mov	r4, r0
   17c7e:	2800      	cmp	r0, #0
   17c80:	d0f0      	beq.n	17c64 <hci_num_completed_packets+0x2c>
			k_work_submit(&conn->tx_complete_work);
   17c82:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   17c86:	2e00      	cmp	r6, #0
   17c88:	d0e9      	beq.n	17c5e <hci_num_completed_packets+0x26>
	__asm__ volatile(
   17c8a:	f04f 0320 	mov.w	r3, #32
   17c8e:	f3ef 8211 	mrs	r2, BASEPRI
   17c92:	f383 8812 	msr	BASEPRI_MAX, r3
   17c96:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   17c9a:	69e3      	ldr	r3, [r4, #28]
   17c9c:	2b00      	cmp	r3, #0
   17c9e:	d0d7      	beq.n	17c50 <hci_num_completed_packets+0x18>
				conn->pending_no_cb--;
   17ca0:	3b01      	subs	r3, #1
   17ca2:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   17ca4:	f382 8811 	msr	BASEPRI, r2
   17ca8:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   17cac:	4620      	mov	r0, r4
   17cae:	f7ec fbcb 	bl	4448 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   17cb2:	3e01      	subs	r6, #1
   17cb4:	f7fe f8cc 	bl	15e50 <z_impl_k_sem_give>
   17cb8:	b2b6      	uxth	r6, r6
   17cba:	e7e4      	b.n	17c86 <hci_num_completed_packets+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17cbc:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   17cbe:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   17cc0:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17cc2:	428b      	cmp	r3, r1
	list->tail = node;
   17cc4:	bf08      	it	eq
   17cc6:	61a0      	streq	r0, [r4, #24]
   17cc8:	f382 8811 	msr	BASEPRI, r2
   17ccc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   17cd0:	f04f 0220 	mov.w	r2, #32
   17cd4:	f3ef 8111 	mrs	r1, BASEPRI
   17cd8:	f382 8812 	msr	BASEPRI_MAX, r2
   17cdc:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   17ce0:	68da      	ldr	r2, [r3, #12]
   17ce2:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   17ce4:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   17ce8:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   17cec:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   17cee:	b94a      	cbnz	r2, 17d04 <hci_num_completed_packets+0xcc>
	list->head = node;
   17cf0:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   17cf4:	f381 8811 	msr	BASEPRI, r1
   17cf8:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   17cfc:	4648      	mov	r0, r9
   17cfe:	f7fe fa45 	bl	1618c <k_work_submit>
   17d02:	e7d3      	b.n	17cac <hci_num_completed_packets+0x74>
	parent->next = child;
   17d04:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17d06:	6263      	str	r3, [r4, #36]	; 0x24
}
   17d08:	e7f4      	b.n	17cf4 <hci_num_completed_packets+0xbc>
	for (i = 0; i < evt->num_handles; i++) {
   17d0a:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
   17d0c:	46a8      	mov	r8, r5
   17d0e:	e7aa      	b.n	17c66 <hci_num_completed_packets+0x2e>

00017d10 <le_conn_update_complete>:
{
   17d10:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   17d12:	68c5      	ldr	r5, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   17d14:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   17d18:	f7ec fc6a 	bl	45f0 <bt_conn_lookup_handle>
	if (!conn) {
   17d1c:	4604      	mov	r4, r0
   17d1e:	2800      	cmp	r0, #0
   17d20:	d04e      	beq.n	17dc0 <le_conn_update_complete+0xb0>
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17d22:	782b      	ldrb	r3, [r5, #0]
   17d24:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   17d26:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17d2a:	d119      	bne.n	17d60 <le_conn_update_complete+0x50>
   17d2c:	78c3      	ldrb	r3, [r0, #3]
   17d2e:	2b01      	cmp	r3, #1
   17d30:	d12a      	bne.n	17d88 <le_conn_update_complete+0x78>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   17d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
   17d36:	4630      	mov	r0, r6
   17d38:	f7ff ff2d 	bl	17b96 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   17d3c:	0542      	lsls	r2, r0, #21
   17d3e:	d40f      	bmi.n	17d60 <le_conn_update_complete+0x50>
		param.interval_min = conn->le.interval_min;
   17d40:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   17d44:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   17d46:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   17d48:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   17d4c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   17d4e:	4620      	mov	r0, r4
   17d50:	f7ec ffd2 	bl	4cf8 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   17d54:	4620      	mov	r0, r4
}
   17d56:	b002      	add	sp, #8
   17d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   17d5c:	f000 bb8d 	b.w	1847a <bt_conn_unref>
		if (!evt->status) {
   17d60:	782b      	ldrb	r3, [r5, #0]
   17d62:	b98b      	cbnz	r3, 17d88 <le_conn_update_complete+0x78>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   17d64:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   17d68:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   17d6c:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   17d70:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   17d74:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   17d78:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17d7c:	f46f 7180 	mvn.w	r1, #256	; 0x100
   17d80:	4630      	mov	r0, r6
   17d82:	f7ff ff4c 	bl	17c1e <atomic_and.isra.0>
}
   17d86:	e017      	b.n	17db8 <le_conn_update_complete+0xa8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17d88:	f3bf 8f5b 	dmb	ish
   17d8c:	6863      	ldr	r3, [r4, #4]
   17d8e:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   17d92:	05db      	lsls	r3, r3, #23
   17d94:	d5f2      	bpl.n	17d7c <le_conn_update_complete+0x6c>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   17d96:	782b      	ldrb	r3, [r5, #0]
   17d98:	2b20      	cmp	r3, #32
   17d9a:	d1ef      	bne.n	17d7c <le_conn_update_complete+0x6c>
			   conn->le.conn_param_retry_countdown) {
   17d9c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   17da0:	2b00      	cmp	r3, #0
   17da2:	d0eb      	beq.n	17d7c <le_conn_update_complete+0x6c>
			conn->le.conn_param_retry_countdown--;
   17da4:	3b01      	subs	r3, #1
   17da6:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   17daa:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   17dae:	2300      	movs	r3, #0
   17db0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17db4:	f7fe fa52 	bl	1625c <k_work_schedule>
		notify_le_param_updated(conn);
   17db8:	4620      	mov	r0, r4
   17dba:	f7ec fcfd 	bl	47b8 <notify_le_param_updated>
   17dbe:	e7c9      	b.n	17d54 <le_conn_update_complete+0x44>
}
   17dc0:	b002      	add	sp, #8
   17dc2:	bd70      	pop	{r4, r5, r6, pc}

00017dc4 <hci_le_read_max_data_len>:
{
   17dc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17dc6:	4606      	mov	r6, r0
   17dc8:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   17dca:	aa01      	add	r2, sp, #4
   17dcc:	2100      	movs	r1, #0
   17dce:	f242 002f 	movw	r0, #8239	; 0x202f
   17dd2:	f7ea fff3 	bl	2dbc <bt_hci_cmd_send_sync>
	if (err) {
   17dd6:	4604      	mov	r4, r0
   17dd8:	b948      	cbnz	r0, 17dee <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   17dda:	9801      	ldr	r0, [sp, #4]
   17ddc:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   17dde:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17de2:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   17de4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   17de8:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   17dea:	f7fb fa85 	bl	132f8 <net_buf_unref>
}
   17dee:	4620      	mov	r0, r4
   17df0:	b002      	add	sp, #8
   17df2:	bd70      	pop	{r4, r5, r6, pc}

00017df4 <bt_hci_disconnect>:
{
   17df4:	b570      	push	{r4, r5, r6, lr}
   17df6:	4606      	mov	r6, r0
   17df8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   17dfa:	f240 4006 	movw	r0, #1030	; 0x406
   17dfe:	2103      	movs	r1, #3
   17e00:	f7ea ffa2 	bl	2d48 <bt_hci_cmd_create>
	if (!buf) {
   17e04:	4604      	mov	r4, r0
   17e06:	b168      	cbz	r0, 17e24 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   17e08:	2103      	movs	r1, #3
   17e0a:	300c      	adds	r0, #12
   17e0c:	f001 fd61 	bl	198d2 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   17e10:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   17e12:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   17e14:	4621      	mov	r1, r4
   17e16:	2200      	movs	r2, #0
}
   17e18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   17e1c:	f240 4006 	movw	r0, #1030	; 0x406
   17e20:	f7ea bfcc 	b.w	2dbc <bt_hci_cmd_send_sync>
}
   17e24:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17e28:	bd70      	pop	{r4, r5, r6, pc}

00017e2a <bt_le_set_data_len>:
{
   17e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e2c:	4607      	mov	r7, r0
   17e2e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   17e30:	f242 0022 	movw	r0, #8226	; 0x2022
   17e34:	2106      	movs	r1, #6
{
   17e36:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   17e38:	f7ea ff86 	bl	2d48 <bt_hci_cmd_create>
	if (!buf) {
   17e3c:	4604      	mov	r4, r0
   17e3e:	b178      	cbz	r0, 17e60 <bt_le_set_data_len+0x36>
   17e40:	2106      	movs	r1, #6
   17e42:	300c      	adds	r0, #12
   17e44:	f001 fd45 	bl	198d2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   17e48:	883b      	ldrh	r3, [r7, #0]
   17e4a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   17e4c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   17e4e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   17e50:	4621      	mov	r1, r4
   17e52:	2200      	movs	r2, #0
}
   17e54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   17e58:	f242 0022 	movw	r0, #8226	; 0x2022
   17e5c:	f7ea bfae 	b.w	2dbc <bt_hci_cmd_send_sync>
}
   17e60:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017e66 <bt_le_set_phy>:
{
   17e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17e6a:	4681      	mov	r9, r0
   17e6c:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   17e6e:	f242 0032 	movw	r0, #8242	; 0x2032
   17e72:	2107      	movs	r1, #7
{
   17e74:	f89d a020 	ldrb.w	sl, [sp, #32]
   17e78:	4617      	mov	r7, r2
   17e7a:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   17e7c:	f7ea ff64 	bl	2d48 <bt_hci_cmd_create>
	if (!buf) {
   17e80:	4605      	mov	r5, r0
   17e82:	b1a0      	cbz	r0, 17eae <bt_le_set_phy+0x48>
   17e84:	2107      	movs	r1, #7
   17e86:	300c      	adds	r0, #12
   17e88:	f001 fd23 	bl	198d2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   17e8c:	f8b9 3000 	ldrh.w	r3, [r9]
   17e90:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   17e92:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   17e96:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   17e98:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   17e9a:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   17e9e:	4629      	mov	r1, r5
   17ea0:	2200      	movs	r2, #0
}
   17ea2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   17ea6:	f242 0032 	movw	r0, #8242	; 0x2032
   17eaa:	f7ea bf87 	b.w	2dbc <bt_hci_cmd_send_sync>
}
   17eae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00017eb6 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   17eb6:	68c0      	ldr	r0, [r0, #12]
   17eb8:	f7eb b814 	b.w	2ee4 <bt_hci_le_enh_conn_complete>

00017ebc <bt_le_conn_params_valid>:
{
   17ebc:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   17ebe:	8803      	ldrh	r3, [r0, #0]
   17ec0:	8842      	ldrh	r2, [r0, #2]
   17ec2:	4293      	cmp	r3, r2
   17ec4:	d819      	bhi.n	17efa <bt_le_conn_params_valid+0x3e>
   17ec6:	2b05      	cmp	r3, #5
   17ec8:	d917      	bls.n	17efa <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   17eca:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   17ece:	d814      	bhi.n	17efa <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   17ed0:	8883      	ldrh	r3, [r0, #4]
   17ed2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   17ed6:	d210      	bcs.n	17efa <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   17ed8:	88c0      	ldrh	r0, [r0, #6]
   17eda:	f1a0 010a 	sub.w	r1, r0, #10
   17ede:	b289      	uxth	r1, r1
   17ee0:	f640 4476 	movw	r4, #3190	; 0xc76
   17ee4:	42a1      	cmp	r1, r4
   17ee6:	d808      	bhi.n	17efa <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   17ee8:	3301      	adds	r3, #1
   17eea:	b29b      	uxth	r3, r3
   17eec:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   17eee:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   17ef2:	bf34      	ite	cc
   17ef4:	2001      	movcc	r0, #1
   17ef6:	2000      	movcs	r0, #0
}
   17ef8:	bd10      	pop	{r4, pc}
		return false;
   17efa:	2000      	movs	r0, #0
   17efc:	e7fc      	b.n	17ef8 <bt_le_conn_params_valid+0x3c>

00017efe <le_conn_param_neg_reply>:
{
   17efe:	b570      	push	{r4, r5, r6, lr}
   17f00:	4606      	mov	r6, r0
   17f02:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   17f04:	f242 0021 	movw	r0, #8225	; 0x2021
   17f08:	2103      	movs	r1, #3
   17f0a:	f7ea ff1d 	bl	2d48 <bt_hci_cmd_create>
	if (!buf) {
   17f0e:	4604      	mov	r4, r0
   17f10:	b160      	cbz	r0, 17f2c <le_conn_param_neg_reply+0x2e>
   17f12:	2103      	movs	r1, #3
   17f14:	300c      	adds	r0, #12
   17f16:	f001 fcdc 	bl	198d2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   17f1a:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   17f1c:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   17f1e:	4621      	mov	r1, r4
   17f20:	f242 0021 	movw	r0, #8225	; 0x2021
}
   17f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   17f28:	f7eb b91c 	b.w	3164 <bt_hci_cmd_send>
}
   17f2c:	bd70      	pop	{r4, r5, r6, pc}

00017f2e <le_conn_param_req>:
{
   17f2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   17f30:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   17f32:	78d9      	ldrb	r1, [r3, #3]
   17f34:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   17f36:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   17f38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17f3c:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   17f40:	7959      	ldrb	r1, [r3, #5]
   17f42:	791a      	ldrb	r2, [r3, #4]
   17f44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17f48:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   17f4c:	799a      	ldrb	r2, [r3, #6]
   17f4e:	79d9      	ldrb	r1, [r3, #7]
   17f50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17f54:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17f58:	7a1a      	ldrb	r2, [r3, #8]
   17f5a:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   17f5c:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17f5e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   17f62:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17f64:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   17f68:	f7ec fb42 	bl	45f0 <bt_conn_lookup_handle>
	if (!conn) {
   17f6c:	4606      	mov	r6, r0
   17f6e:	b928      	cbnz	r0, 17f7c <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   17f70:	2102      	movs	r1, #2
   17f72:	4620      	mov	r0, r4
   17f74:	f7ff ffc3 	bl	17efe <le_conn_param_neg_reply>
}
   17f78:	b003      	add	sp, #12
   17f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   17f7c:	4669      	mov	r1, sp
   17f7e:	f7ec fc67 	bl	4850 <le_param_req>
   17f82:	b938      	cbnz	r0, 17f94 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   17f84:	211e      	movs	r1, #30
   17f86:	4620      	mov	r0, r4
   17f88:	f7ff ffb9 	bl	17efe <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   17f8c:	4630      	mov	r0, r6
   17f8e:	f000 fa74 	bl	1847a <bt_conn_unref>
   17f92:	e7f1      	b.n	17f78 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   17f94:	210e      	movs	r1, #14
   17f96:	f242 0020 	movw	r0, #8224	; 0x2020
   17f9a:	f7ea fed5 	bl	2d48 <bt_hci_cmd_create>
	if (!buf) {
   17f9e:	4605      	mov	r5, r0
   17fa0:	2800      	cmp	r0, #0
   17fa2:	d0f3      	beq.n	17f8c <le_conn_param_req+0x5e>
   17fa4:	210e      	movs	r1, #14
   17fa6:	300c      	adds	r0, #12
   17fa8:	f001 fc93 	bl	198d2 <net_buf_simple_add>
   17fac:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   17fae:	220e      	movs	r2, #14
   17fb0:	2100      	movs	r1, #0
   17fb2:	f7ff fd2e 	bl	17a12 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   17fb6:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   17fb8:	f8bd 3000 	ldrh.w	r3, [sp]
   17fbc:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   17fbe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   17fc2:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   17fc4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   17fc8:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   17fca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   17fce:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   17fd0:	4629      	mov	r1, r5
   17fd2:	f242 0020 	movw	r0, #8224	; 0x2020
   17fd6:	f7eb f8c5 	bl	3164 <bt_hci_cmd_send>
   17fda:	e7d7      	b.n	17f8c <le_conn_param_req+0x5e>

00017fdc <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   17fdc:	f240 3041 	movw	r0, #833	; 0x341
   17fe0:	4770      	bx	lr

00017fe2 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   17fe2:	2000      	movs	r0, #0
   17fe4:	4770      	bx	lr

00017fe6 <bt_hci_evt_create>:
#include <stdint.h>
#include <zephyr/sys/byteorder.h>
#include <zephyr/drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   17fe6:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   17fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   17fec:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   17fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ff2:	2100      	movs	r1, #0
{
   17ff4:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   17ff6:	f7ea fd99 	bl	2b2c <bt_buf_get_evt>
   17ffa:	2102      	movs	r1, #2
   17ffc:	4604      	mov	r4, r0
   17ffe:	300c      	adds	r0, #12
   18000:	f001 fc67 	bl	198d2 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   18004:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   18006:	7045      	strb	r5, [r0, #1]

	return buf;
}
   18008:	4620      	mov	r0, r4
   1800a:	bd70      	pop	{r4, r5, r6, pc}

0001800c <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1800c:	3103      	adds	r1, #3
{
   1800e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   18010:	b2c9      	uxtb	r1, r1
{
   18012:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   18014:	200e      	movs	r0, #14
   18016:	f7ff ffe6 	bl	17fe6 <bt_hci_evt_create>
   1801a:	2103      	movs	r1, #3
   1801c:	4604      	mov	r4, r0
   1801e:	300c      	adds	r0, #12
   18020:	f001 fc57 	bl	198d2 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   18024:	2301      	movs	r3, #1
   18026:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   18028:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   1802c:	4620      	mov	r0, r4
   1802e:	bd38      	pop	{r3, r4, r5, pc}

00018030 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   18030:	b570      	push	{r4, r5, r6, lr}
   18032:	4605      	mov	r5, r0
   18034:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   18036:	200f      	movs	r0, #15
   18038:	2104      	movs	r1, #4
   1803a:	f7ff ffd4 	bl	17fe6 <bt_hci_evt_create>
   1803e:	2104      	movs	r1, #4
   18040:	4604      	mov	r4, r0
   18042:	300c      	adds	r0, #12
   18044:	f001 fc45 	bl	198d2 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   18048:	2201      	movs	r2, #1
	cs->status = status;
   1804a:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   1804c:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   1804e:	8045      	strh	r5, [r0, #2]

	return buf;
}
   18050:	4620      	mov	r0, r4
   18052:	bd70      	pop	{r4, r5, r6, pc}

00018054 <bt_addr_le_eq>:
{
   18054:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   18056:	2207      	movs	r2, #7
   18058:	f7ff fcc0 	bl	179dc <memcmp>
}
   1805c:	fab0 f080 	clz	r0, r0
   18060:	0940      	lsrs	r0, r0, #5
   18062:	bd08      	pop	{r3, pc}

00018064 <bt_lookup_id_addr>:
	return addr;
   18064:	2800      	cmp	r0, #0
}
   18066:	bf0c      	ite	eq
   18068:	4608      	moveq	r0, r1
   1806a:	2000      	movne	r0, #0
   1806c:	4770      	bx	lr

0001806e <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   1806e:	b118      	cbz	r0, 18078 <bt_id_set_adv_random_addr+0xa>
   18070:	b111      	cbz	r1, 18078 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   18072:	4608      	mov	r0, r1
   18074:	f7eb bc84 	b.w	3980 <set_random_address>
}
   18078:	f06f 0015 	mvn.w	r0, #21
   1807c:	4770      	bx	lr

0001807e <bt_id_set_adv_private_addr>:
{
   1807e:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   18080:	4604      	mov	r4, r0
   18082:	b180      	cbz	r0, 180a6 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   18084:	2106      	movs	r1, #6
   18086:	4668      	mov	r0, sp
   18088:	f7f8 fa2a 	bl	104e0 <bt_rand>
	if (err) {
   1808c:	b948      	cbnz	r0, 180a2 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   1808e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   18092:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   18094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   18098:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   1809a:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1809e:	f7ff ffe6 	bl	1806e <bt_id_set_adv_random_addr>
}
   180a2:	b002      	add	sp, #8
   180a4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   180a6:	f06f 0015 	mvn.w	r0, #21
   180aa:	e7fa      	b.n	180a2 <bt_id_set_adv_private_addr+0x24>

000180ac <bt_id_adv_random_addr_check>:
}
   180ac:	3800      	subs	r0, #0
   180ae:	bf18      	it	ne
   180b0:	2001      	movne	r0, #1
   180b2:	4770      	bx	lr

000180b4 <get_adv_channel_map>:
{
   180b4:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   180b6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   180ba:	bf0c      	ite	eq
   180bc:	2007      	moveq	r0, #7
   180be:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   180c0:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   180c2:	bf48      	it	mi
   180c4:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   180c8:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   180ca:	bf48      	it	mi
   180cc:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   180d0:	4770      	bx	lr

000180d2 <atomic_get>:
   180d2:	f3bf 8f5b 	dmb	ish
   180d6:	6800      	ldr	r0, [r0, #0]
   180d8:	f3bf 8f5b 	dmb	ish
}
   180dc:	4770      	bx	lr

000180de <atomic_and>:
{
   180de:	b510      	push	{r4, lr}
   180e0:	4603      	mov	r3, r0
}
   180e2:	f3bf 8f5b 	dmb	ish
   180e6:	e853 0f00 	ldrex	r0, [r3]
   180ea:	ea00 0201 	and.w	r2, r0, r1
   180ee:	e843 2400 	strex	r4, r2, [r3]
   180f2:	2c00      	cmp	r4, #0
   180f4:	d1f7      	bne.n	180e6 <atomic_and+0x8>
   180f6:	f3bf 8f5b 	dmb	ish
   180fa:	bd10      	pop	{r4, pc}

000180fc <hci_set_ad>:
{
   180fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18100:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   18102:	2120      	movs	r1, #32
{
   18104:	9000      	str	r0, [sp, #0]
   18106:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   18108:	f7ea fe1e 	bl	2d48 <bt_hci_cmd_create>
	if (!buf) {
   1810c:	4605      	mov	r5, r0
   1810e:	2800      	cmp	r0, #0
   18110:	d050      	beq.n	181b4 <hci_set_ad+0xb8>
   18112:	2120      	movs	r1, #32
   18114:	300c      	adds	r0, #12
   18116:	f001 fbdc 	bl	198d2 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1811a:	2220      	movs	r2, #32
   1811c:	2100      	movs	r1, #0
   1811e:	4681      	mov	r9, r0
   18120:	f7ff fc77 	bl	17a12 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   18124:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   18128:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   1812c:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1812e:	f8d4 8000 	ldr.w	r8, [r4]
   18132:	2300      	movs	r3, #0
   18134:	6862      	ldr	r2, [r4, #4]
   18136:	4293      	cmp	r3, r2
   18138:	d30c      	bcc.n	18154 <hci_set_ad+0x58>
	for (size_t i = 0; i < ad_len; i++) {
   1813a:	3408      	adds	r4, #8
   1813c:	45a2      	cmp	sl, r4
   1813e:	d1f6      	bne.n	1812e <hci_set_ad+0x32>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   18140:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   18142:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   18146:	2200      	movs	r2, #0
   18148:	4629      	mov	r1, r5
}
   1814a:	b003      	add	sp, #12
   1814c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   18150:	f7ea be34 	b.w	2dbc <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   18154:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   18158:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1815c:	1cb0      	adds	r0, r6, #2
   1815e:	1811      	adds	r1, r2, r0
   18160:	291f      	cmp	r1, #31
   18162:	d908      	bls.n	18176 <hci_set_ad+0x7a>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   18164:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   18168:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1816c:	d11a      	bne.n	181a4 <hci_set_ad+0xa8>
   1816e:	2a00      	cmp	r2, #0
   18170:	dd18      	ble.n	181a4 <hci_set_ad+0xa8>
				type = BT_DATA_NAME_SHORTENED;
   18172:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   18176:	b2d7      	uxtb	r7, r2
   18178:	1c79      	adds	r1, r7, #1
   1817a:	f80b 1006 	strb.w	r1, [fp, r6]
   1817e:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   18180:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   18182:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   18186:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1818a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1818e:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   18190:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   18192:	f7ff fc33 	bl	179fc <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   18196:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   18198:	4437      	add	r7, r6
   1819a:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   1819c:	3301      	adds	r3, #1
   1819e:	f108 0808 	add.w	r8, r8, #8
   181a2:	e7c7      	b.n	18134 <hci_set_ad+0x38>
		net_buf_unref(buf);
   181a4:	4628      	mov	r0, r5
   181a6:	f7fb f8a7 	bl	132f8 <net_buf_unref>
		return err;
   181aa:	f06f 0015 	mvn.w	r0, #21
}
   181ae:	b003      	add	sp, #12
   181b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   181b4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   181b8:	e7f9      	b.n	181ae <hci_set_ad+0xb2>

000181ba <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   181ba:	2301      	movs	r3, #1
{
   181bc:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   181be:	fa03 f101 	lsl.w	r1, r3, r1
{
   181c2:	4604      	mov	r4, r0
	if (val) {
   181c4:	b162      	cbz	r2, 181e0 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   181c6:	f3bf 8f5b 	dmb	ish
   181ca:	e854 3f00 	ldrex	r3, [r4]
   181ce:	430b      	orrs	r3, r1
   181d0:	e844 3200 	strex	r2, r3, [r4]
   181d4:	2a00      	cmp	r2, #0
   181d6:	d1f8      	bne.n	181ca <atomic_set_bit_to+0x10>
   181d8:	f3bf 8f5b 	dmb	ish
	}
}
   181dc:	bc10      	pop	{r4}
   181de:	4770      	bx	lr
   181e0:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   181e2:	43c9      	mvns	r1, r1
   181e4:	f7ff bf7b 	b.w	180de <atomic_and>

000181e8 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   181e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181ec:	b087      	sub	sp, #28
   181ee:	4605      	mov	r5, r0
   181f0:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   181f4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   181f8:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   181fc:	460c      	mov	r4, r1
   181fe:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   18200:	2100      	movs	r1, #0
   18202:	2210      	movs	r2, #16
   18204:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   18206:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   18208:	f7ff fc03 	bl	17a12 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1820c:	b9ee      	cbnz	r6, 1824a <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   1820e:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   18212:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   18214:	a902      	add	r1, sp, #8
   18216:	f242 0008 	movw	r0, #8200	; 0x2008
   1821a:	f7ff ff6f 	bl	180fc <hci_set_ad>
		if (err) {
   1821e:	4604      	mov	r4, r0
   18220:	b978      	cbnz	r0, 18242 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   18222:	f1ba 0f00 	cmp.w	sl, #0
   18226:	d13e      	bne.n	182a6 <le_adv_update.constprop.0+0xbe>
   18228:	3510      	adds	r5, #16
   1822a:	f3bf 8f5b 	dmb	ish
   1822e:	e855 3f00 	ldrex	r3, [r5]
   18232:	f043 0304 	orr.w	r3, r3, #4
   18236:	e845 3200 	strex	r2, r3, [r5]
   1823a:	2a00      	cmp	r2, #0
   1823c:	d1f7      	bne.n	1822e <le_adv_update.constprop.0+0x46>
   1823e:	f3bf 8f5b 	dmb	ish
}
   18242:	4620      	mov	r0, r4
   18244:	b007      	add	sp, #28
   18246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   1824a:	f7eb fb7d 	bl	3948 <bt_get_name>
   1824e:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   18250:	b9e4      	cbnz	r4, 1828c <le_adv_update.constprop.0+0xa4>
   18252:	bb37      	cbnz	r7, 182a2 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   18254:	4658      	mov	r0, fp
   18256:	f7ff fbb1 	bl	179bc <strlen>
   1825a:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   1825c:	2e01      	cmp	r6, #1
		d[0].data = ad;
   1825e:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   18262:	f88d 3000 	strb.w	r3, [sp]
   18266:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   1826a:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   1826e:	d1d0      	bne.n	18212 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   18270:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   18274:	9605      	str	r6, [sp, #20]
			d_len = 2;
   18276:	2202      	movs	r2, #2
   18278:	e7cc      	b.n	18214 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1827a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1827e:	3a08      	subs	r2, #8
   18280:	2a01      	cmp	r2, #1
   18282:	d925      	bls.n	182d0 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   18284:	3301      	adds	r3, #1
   18286:	4598      	cmp	r8, r3
   18288:	d1f7      	bne.n	1827a <le_adv_update.constprop.0+0x92>
   1828a:	e7e2      	b.n	18252 <le_adv_update.constprop.0+0x6a>
   1828c:	2300      	movs	r3, #0
   1828e:	e7fa      	b.n	18286 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   18290:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   18294:	3a08      	subs	r2, #8
   18296:	2a01      	cmp	r2, #1
   18298:	d91a      	bls.n	182d0 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1829a:	3301      	adds	r3, #1
   1829c:	4599      	cmp	r9, r3
   1829e:	d1f7      	bne.n	18290 <le_adv_update.constprop.0+0xa8>
   182a0:	e7d8      	b.n	18254 <le_adv_update.constprop.0+0x6c>
   182a2:	2300      	movs	r3, #0
   182a4:	e7fa      	b.n	1829c <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   182a6:	2e02      	cmp	r6, #2
   182a8:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   182ac:	bf08      	it	eq
   182ae:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   182b0:	a902      	add	r1, sp, #8
			d_len = 2;
   182b2:	bf08      	it	eq
   182b4:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   182b6:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   182ba:	bf08      	it	eq
   182bc:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   182c0:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   182c4:	f7ff ff1a 	bl	180fc <hci_set_ad>
		if (err) {
   182c8:	2800      	cmp	r0, #0
   182ca:	d0ad      	beq.n	18228 <le_adv_update.constprop.0+0x40>
   182cc:	4604      	mov	r4, r0
   182ce:	e7b8      	b.n	18242 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   182d0:	f06f 0415 	mvn.w	r4, #21
   182d4:	e7b5      	b.n	18242 <le_adv_update.constprop.0+0x5a>

000182d6 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   182d6:	6843      	ldr	r3, [r0, #4]
   182d8:	f013 0008 	ands.w	r0, r3, #8
   182dc:	d00a      	beq.n	182f4 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   182de:	035a      	lsls	r2, r3, #13
   182e0:	d407      	bmi.n	182f2 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   182e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   182e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   182ea:	bf14      	ite	ne
   182ec:	2002      	movne	r0, #2
   182ee:	2001      	moveq	r0, #1
   182f0:	4770      	bx	lr
   182f2:	2001      	movs	r0, #1
}
   182f4:	4770      	bx	lr

000182f6 <bt_le_adv_set_enable_legacy>:
{
   182f6:	b570      	push	{r4, r5, r6, lr}
   182f8:	4606      	mov	r6, r0
   182fa:	b086      	sub	sp, #24
   182fc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   182fe:	f242 000a 	movw	r0, #8202	; 0x200a
   18302:	2101      	movs	r1, #1
   18304:	f7ea fd20 	bl	2d48 <bt_hci_cmd_create>
	if (!buf) {
   18308:	4604      	mov	r4, r0
   1830a:	b1b0      	cbz	r0, 1833a <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1830c:	300c      	adds	r0, #12
	if (enable) {
   1830e:	b195      	cbz	r5, 18336 <bt_le_adv_set_enable_legacy+0x40>
   18310:	2101      	movs	r1, #1
   18312:	f001 faed 	bl	198f0 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   18316:	f106 0210 	add.w	r2, r6, #16
   1831a:	a903      	add	r1, sp, #12
   1831c:	4620      	mov	r0, r4
   1831e:	9500      	str	r5, [sp, #0]
   18320:	2307      	movs	r3, #7
   18322:	f7ea fcff 	bl	2d24 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   18326:	2200      	movs	r2, #0
   18328:	4621      	mov	r1, r4
   1832a:	f242 000a 	movw	r0, #8202	; 0x200a
   1832e:	f7ea fd45 	bl	2dbc <bt_hci_cmd_send_sync>
}
   18332:	b006      	add	sp, #24
   18334:	bd70      	pop	{r4, r5, r6, pc}
   18336:	4629      	mov	r1, r5
   18338:	e7eb      	b.n	18312 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1833a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1833e:	e7f8      	b.n	18332 <bt_le_adv_set_enable_legacy+0x3c>

00018340 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   18340:	3018      	adds	r0, #24
   18342:	f002 bad5 	b.w	1a8f0 <k_work_cancel_delayable>

00018346 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   18346:	f7eb beb1 	b.w	40ac <bt_le_adv_stop>

0001834a <tx_complete_work>:
	tx_notify(conn);
   1834a:	3828      	subs	r0, #40	; 0x28
   1834c:	f7eb bf72 	b.w	4234 <tx_notify>

00018350 <bt_conn_reset_rx_state>:
{
   18350:	b510      	push	{r4, lr}
   18352:	4604      	mov	r4, r0
	if (!conn->rx) {
   18354:	6900      	ldr	r0, [r0, #16]
   18356:	b118      	cbz	r0, 18360 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   18358:	f7fa ffce 	bl	132f8 <net_buf_unref>
	conn->rx = NULL;
   1835c:	2300      	movs	r3, #0
   1835e:	6123      	str	r3, [r4, #16]
}
   18360:	bd10      	pop	{r4, pc}

00018362 <conn_cleanup>:
{
   18362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18366:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   18368:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1836a:	f104 0638 	add.w	r6, r4, #56	; 0x38
   1836e:	2300      	movs	r3, #0
   18370:	2200      	movs	r2, #0
   18372:	4630      	mov	r0, r6
   18374:	f001 fa73 	bl	1985e <net_buf_get>
   18378:	4603      	mov	r3, r0
   1837a:	b950      	cbnz	r0, 18392 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   1837c:	4620      	mov	r0, r4
   1837e:	f7ff ffe7 	bl	18350 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   18382:	f104 0058 	add.w	r0, r4, #88	; 0x58
   18386:	2200      	movs	r2, #0
}
   18388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1838c:	2300      	movs	r3, #0
   1838e:	f7fd bf99 	b.w	162c4 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   18392:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   18394:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   18396:	f7fa ffaf 	bl	132f8 <net_buf_unref>
		if (tx) {
   1839a:	2d00      	cmp	r5, #0
   1839c:	d0e7      	beq.n	1836e <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   1839e:	4629      	mov	r1, r5
   183a0:	4620      	mov	r0, r4
   183a2:	f7eb ff77 	bl	4294 <conn_tx_destroy>
   183a6:	e7e0      	b.n	1836a <conn_cleanup+0x8>

000183a8 <bt_conn_recv>:
{
   183a8:	b570      	push	{r4, r5, r6, lr}
   183aa:	4616      	mov	r6, r2
   183ac:	4604      	mov	r4, r0
   183ae:	460d      	mov	r5, r1
	tx_notify(conn);
   183b0:	f7eb ff40 	bl	4234 <tx_notify>
	switch (flags) {
   183b4:	2e01      	cmp	r6, #1
   183b6:	d017      	beq.n	183e8 <bt_conn_recv+0x40>
   183b8:	2e02      	cmp	r6, #2
   183ba:	d117      	bne.n	183ec <bt_conn_recv+0x44>
		if (conn->rx) {
   183bc:	6923      	ldr	r3, [r4, #16]
   183be:	b113      	cbz	r3, 183c6 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   183c0:	4620      	mov	r0, r4
   183c2:	f7ff ffc5 	bl	18350 <bt_conn_reset_rx_state>
		conn->rx = buf;
   183c6:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   183c8:	6921      	ldr	r1, [r4, #16]
   183ca:	8a0a      	ldrh	r2, [r1, #16]
   183cc:	2a01      	cmp	r2, #1
   183ce:	d937      	bls.n	18440 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   183d0:	68cb      	ldr	r3, [r1, #12]
   183d2:	881b      	ldrh	r3, [r3, #0]
   183d4:	3304      	adds	r3, #4
   183d6:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   183d8:	429a      	cmp	r2, r3
   183da:	d331      	bcc.n	18440 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   183dc:	d928      	bls.n	18430 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   183de:	4620      	mov	r0, r4
}
   183e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   183e4:	f7ff bfb4 	b.w	18350 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   183e8:	6920      	ldr	r0, [r4, #16]
   183ea:	b918      	cbnz	r0, 183f4 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   183ec:	4620      	mov	r0, r4
   183ee:	f7ff ffaf 	bl	18350 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   183f2:	e001      	b.n	183f8 <bt_conn_recv+0x50>
		if (!buf->len) {
   183f4:	8a2e      	ldrh	r6, [r5, #16]
   183f6:	b926      	cbnz	r6, 18402 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   183f8:	4628      	mov	r0, r5
}
   183fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   183fe:	f7fa bf7b 	b.w	132f8 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   18402:	300c      	adds	r0, #12
   18404:	f001 faa0 	bl	19948 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   18408:	4286      	cmp	r6, r0
   1840a:	d907      	bls.n	1841c <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   1840c:	6921      	ldr	r1, [r4, #16]
   1840e:	2200      	movs	r2, #0
   18410:	4620      	mov	r0, r4
   18412:	f000 f965 	bl	186e0 <bt_l2cap_recv>
			conn->rx = NULL;
   18416:	2300      	movs	r3, #0
   18418:	6123      	str	r3, [r4, #16]
   1841a:	e7ed      	b.n	183f8 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1841c:	6920      	ldr	r0, [r4, #16]
   1841e:	8a2a      	ldrh	r2, [r5, #16]
   18420:	68e9      	ldr	r1, [r5, #12]
   18422:	300c      	adds	r0, #12
   18424:	f001 fa5b 	bl	198de <net_buf_simple_add_mem>
		net_buf_unref(buf);
   18428:	4628      	mov	r0, r5
   1842a:	f7fa ff65 	bl	132f8 <net_buf_unref>
		break;
   1842e:	e7cb      	b.n	183c8 <bt_conn_recv+0x20>
	conn->rx = NULL;
   18430:	2300      	movs	r3, #0
   18432:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   18434:	4620      	mov	r0, r4
   18436:	2201      	movs	r2, #1
}
   18438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   1843c:	f000 b950 	b.w	186e0 <bt_l2cap_recv>
}
   18440:	bd70      	pop	{r4, r5, r6, pc}

00018442 <bt_conn_ref>:
{
   18442:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18444:	f3bf 8f5b 	dmb	ish
   18448:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1844c:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   18450:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
		if (!old) {
   18454:	b17b      	cbz	r3, 18476 <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18456:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1845a:	1c59      	adds	r1, r3, #1
   1845c:	e852 4f00 	ldrex	r4, [r2]
   18460:	429c      	cmp	r4, r3
   18462:	d104      	bne.n	1846e <bt_conn_ref+0x2c>
   18464:	e842 1c00 	strex	ip, r1, [r2]
   18468:	f1bc 0f00 	cmp.w	ip, #0
   1846c:	d1f6      	bne.n	1845c <bt_conn_ref+0x1a>
   1846e:	f3bf 8f5b 	dmb	ish
   18472:	d1e7      	bne.n	18444 <bt_conn_ref+0x2>
}
   18474:	bd10      	pop	{r4, pc}
			return NULL;
   18476:	4618      	mov	r0, r3
   18478:	e7fc      	b.n	18474 <bt_conn_ref+0x32>

0001847a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1847a:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1847e:	f3bf 8f5b 	dmb	ish
   18482:	e853 1f00 	ldrex	r1, [r3]
   18486:	3901      	subs	r1, #1
   18488:	e843 1200 	strex	r2, r1, [r3]
   1848c:	2a00      	cmp	r2, #0
   1848e:	d1f8      	bne.n	18482 <bt_conn_unref+0x8>
   18490:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   18494:	8842      	ldrh	r2, [r0, #2]
   18496:	f240 1301 	movw	r3, #257	; 0x101
   1849a:	429a      	cmp	r2, r3
   1849c:	d108      	bne.n	184b0 <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1849e:	f3bf 8f5b 	dmb	ish
   184a2:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   184a6:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   184aa:	b90b      	cbnz	r3, 184b0 <bt_conn_unref+0x36>
		bt_le_adv_resume();
   184ac:	f7eb be3a 	b.w	4124 <bt_le_adv_resume>
}
   184b0:	4770      	bx	lr

000184b2 <conn_lookup_handle>:
{
   184b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   184b6:	4607      	mov	r7, r0
   184b8:	460e      	mov	r6, r1
   184ba:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   184bc:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   184be:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   184c2:	42b4      	cmp	r4, r6
   184c4:	d103      	bne.n	184ce <conn_lookup_handle+0x1c>
	return NULL;
   184c6:	2300      	movs	r3, #0
}
   184c8:	4618      	mov	r0, r3
   184ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   184ce:	fb09 7004 	mla	r0, r9, r4, r7
   184d2:	f7ff ffb6 	bl	18442 <bt_conn_ref>
   184d6:	4603      	mov	r3, r0
		if (!conn) {
   184d8:	b158      	cbz	r0, 184f2 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   184da:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   184dc:	2d01      	cmp	r5, #1
   184de:	d002      	beq.n	184e6 <conn_lookup_handle+0x34>
   184e0:	3d07      	subs	r5, #7
   184e2:	2d01      	cmp	r5, #1
   184e4:	d803      	bhi.n	184ee <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   184e6:	881a      	ldrh	r2, [r3, #0]
   184e8:	4542      	cmp	r2, r8
   184ea:	d0ed      	beq.n	184c8 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   184ec:	4618      	mov	r0, r3
   184ee:	f7ff ffc4 	bl	1847a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   184f2:	3401      	adds	r4, #1
   184f4:	e7e5      	b.n	184c2 <conn_lookup_handle+0x10>

000184f6 <bt_conn_connected>:
{
   184f6:	b510      	push	{r4, lr}
   184f8:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   184fa:	f7ec fbaf 	bl	4c5c <bt_l2cap_connected>
	notify_connected(conn);
   184fe:	4620      	mov	r0, r4
}
   18500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   18504:	f7eb be78 	b.w	41f8 <notify_connected>

00018508 <bt_conn_is_peer_addr_le>:
{
   18508:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1850a:	7a03      	ldrb	r3, [r0, #8]
   1850c:	428b      	cmp	r3, r1
{
   1850e:	4604      	mov	r4, r0
   18510:	4615      	mov	r5, r2
	if (id != conn->id) {
   18512:	d115      	bne.n	18540 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   18514:	f100 0188 	add.w	r1, r0, #136	; 0x88
   18518:	2207      	movs	r2, #7
   1851a:	4628      	mov	r0, r5
   1851c:	f7ff fa5e 	bl	179dc <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   18520:	b180      	cbz	r0, 18544 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   18522:	78e3      	ldrb	r3, [r4, #3]
   18524:	2207      	movs	r2, #7
   18526:	b943      	cbnz	r3, 1853a <bt_conn_is_peer_addr_le+0x32>
   18528:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1852c:	4628      	mov	r0, r5
   1852e:	f7ff fa55 	bl	179dc <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   18532:	fab0 f080 	clz	r0, r0
   18536:	0940      	lsrs	r0, r0, #5
}
   18538:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   1853a:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1853e:	e7f5      	b.n	1852c <bt_conn_is_peer_addr_le+0x24>
		return false;
   18540:	2000      	movs	r0, #0
   18542:	e7f9      	b.n	18538 <bt_conn_is_peer_addr_le+0x30>
		return true;
   18544:	2001      	movs	r0, #1
   18546:	e7f7      	b.n	18538 <bt_conn_is_peer_addr_le+0x30>

00018548 <bt_conn_exists_le>:
{
   18548:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1854a:	f7ec f9d5 	bl	48f8 <bt_conn_lookup_addr_le>
	if (conn) {
   1854e:	b110      	cbz	r0, 18556 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   18550:	f7ff ff93 	bl	1847a <bt_conn_unref>
		return true;
   18554:	2001      	movs	r0, #1
}
   18556:	bd08      	pop	{r3, pc}

00018558 <bt_conn_le_conn_update>:
{
   18558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1855a:	4607      	mov	r7, r0
   1855c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1855e:	f242 0013 	movw	r0, #8211	; 0x2013
   18562:	210e      	movs	r1, #14
   18564:	f7ea fbf0 	bl	2d48 <bt_hci_cmd_create>
	if (!buf) {
   18568:	4606      	mov	r6, r0
   1856a:	b1d0      	cbz	r0, 185a2 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1856c:	210e      	movs	r1, #14
   1856e:	300c      	adds	r0, #12
   18570:	f001 f9af 	bl	198d2 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   18574:	220e      	movs	r2, #14
   18576:	4604      	mov	r4, r0
   18578:	2100      	movs	r1, #0
   1857a:	f7ff fa4a 	bl	17a12 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1857e:	883b      	ldrh	r3, [r7, #0]
   18580:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   18582:	882b      	ldrh	r3, [r5, #0]
   18584:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   18586:	886b      	ldrh	r3, [r5, #2]
   18588:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1858a:	88ab      	ldrh	r3, [r5, #4]
   1858c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1858e:	88eb      	ldrh	r3, [r5, #6]
   18590:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   18592:	4631      	mov	r1, r6
   18594:	2200      	movs	r2, #0
}
   18596:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1859a:	f242 0013 	movw	r0, #8211	; 0x2013
   1859e:	f7ea bc0d 	b.w	2dbc <bt_hci_cmd_send_sync>
}
   185a2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   185a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000185a8 <l2cap_connected>:
}
   185a8:	4770      	bx	lr

000185aa <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   185aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   185ac:	4607      	mov	r7, r0
   185ae:	460e      	mov	r6, r1
   185b0:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   185b2:	2300      	movs	r3, #0
   185b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   185b8:	2104      	movs	r1, #4
   185ba:	2000      	movs	r0, #0
   185bc:	f7ec f8ea 	bl	4794 <bt_conn_create_pdu_timeout>
	if (!buf) {
   185c0:	4604      	mov	r4, r0
   185c2:	b130      	cbz	r0, 185d2 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   185c4:	2104      	movs	r1, #4
   185c6:	300c      	adds	r0, #12
   185c8:	f001 f983 	bl	198d2 <net_buf_simple_add>
	hdr->code = code;
   185cc:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   185ce:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   185d0:	8045      	strh	r5, [r0, #2]
}
   185d2:	4620      	mov	r0, r4
   185d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000185d6 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   185d6:	4770      	bx	lr

000185d8 <bt_l2cap_chan_del>:
{
   185d8:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   185da:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   185de:	4604      	mov	r4, r0
	if (!chan->conn) {
   185e0:	b123      	cbz	r3, 185ec <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   185e2:	686b      	ldr	r3, [r5, #4]
   185e4:	b103      	cbz	r3, 185e8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   185e6:	4798      	blx	r3
	chan->conn = NULL;
   185e8:	2300      	movs	r3, #0
   185ea:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   185ec:	68e3      	ldr	r3, [r4, #12]
   185ee:	b10b      	cbz	r3, 185f4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   185f0:	4620      	mov	r0, r4
   185f2:	4798      	blx	r3
	if (ops->released) {
   185f4:	6a2b      	ldr	r3, [r5, #32]
   185f6:	b11b      	cbz	r3, 18600 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   185f8:	4620      	mov	r0, r4
}
   185fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   185fe:	4718      	bx	r3
}
   18600:	bd70      	pop	{r4, r5, r6, pc}

00018602 <bt_l2cap_disconnected>:
{
   18602:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   18604:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   18606:	b130      	cbz	r0, 18616 <bt_l2cap_disconnected+0x14>
	return node->next;
   18608:	f850 4908 	ldr.w	r4, [r0], #-8
   1860c:	b104      	cbz	r4, 18610 <bt_l2cap_disconnected+0xe>
   1860e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   18610:	f7ff ffe2 	bl	185d8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   18614:	b904      	cbnz	r4, 18618 <bt_l2cap_disconnected+0x16>
}
   18616:	bd38      	pop	{r3, r4, r5, pc}
   18618:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1861a:	b12d      	cbz	r5, 18628 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   1861c:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1861e:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   18620:	f7ff ffda 	bl	185d8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   18624:	462c      	mov	r4, r5
   18626:	e7f7      	b.n	18618 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   18628:	4620      	mov	r0, r4
}
   1862a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1862e:	f7ff bfd3 	b.w	185d8 <bt_l2cap_chan_del>

00018632 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   18632:	3104      	adds	r1, #4
   18634:	f7ec b8ae 	b.w	4794 <bt_conn_create_pdu_timeout>

00018638 <bt_l2cap_send_cb>:
{
   18638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1863c:	4614      	mov	r4, r2
   1863e:	4605      	mov	r5, r0
   18640:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   18642:	f102 000c 	add.w	r0, r2, #12
   18646:	2104      	movs	r1, #4
   18648:	461e      	mov	r6, r3
   1864a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1864e:	f001 f957 	bl	19900 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   18652:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   18654:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   18656:	3a04      	subs	r2, #4
   18658:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1865a:	4643      	mov	r3, r8
   1865c:	4632      	mov	r2, r6
   1865e:	4621      	mov	r1, r4
   18660:	4628      	mov	r0, r5
}
   18662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   18666:	f7eb bf2d 	b.w	44c4 <bt_conn_send_cb>

0001866a <l2cap_recv>:
{
   1866a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1866c:	8a0b      	ldrh	r3, [r1, #16]
   1866e:	2b03      	cmp	r3, #3
{
   18670:	4605      	mov	r5, r0
   18672:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   18674:	d927      	bls.n	186c6 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   18676:	2104      	movs	r1, #4
   18678:	f104 000c 	add.w	r0, r4, #12
   1867c:	f001 f950 	bl	19920 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   18680:	8a23      	ldrh	r3, [r4, #16]
   18682:	8842      	ldrh	r2, [r0, #2]
   18684:	429a      	cmp	r2, r3
   18686:	d11e      	bne.n	186c6 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   18688:	7841      	ldrb	r1, [r0, #1]
   1868a:	b1e1      	cbz	r1, 186c6 <l2cap_recv+0x5c>
	switch (hdr->code) {
   1868c:	7803      	ldrb	r3, [r0, #0]
   1868e:	2b01      	cmp	r3, #1
   18690:	d019      	beq.n	186c6 <l2cap_recv+0x5c>
   18692:	2b13      	cmp	r3, #19
   18694:	d017      	beq.n	186c6 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18696:	2202      	movs	r2, #2
   18698:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1869a:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1869c:	f7ff ff85 	bl	185aa <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   186a0:	4604      	mov	r4, r0
   186a2:	b180      	cbz	r0, 186c6 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   186a4:	2102      	movs	r1, #2
   186a6:	300c      	adds	r0, #12
   186a8:	f001 f913 	bl	198d2 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   186ac:	2300      	movs	r3, #0
   186ae:	7003      	strb	r3, [r0, #0]
   186b0:	7043      	strb	r3, [r0, #1]
   186b2:	4622      	mov	r2, r4
   186b4:	9300      	str	r3, [sp, #0]
   186b6:	2105      	movs	r1, #5
   186b8:	4628      	mov	r0, r5
   186ba:	f7ff ffbd 	bl	18638 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   186be:	b110      	cbz	r0, 186c6 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   186c0:	4620      	mov	r0, r4
   186c2:	f7fa fe19 	bl	132f8 <net_buf_unref>
}
   186c6:	2000      	movs	r0, #0
   186c8:	b003      	add	sp, #12
   186ca:	bd30      	pop	{r4, r5, pc}

000186cc <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   186cc:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   186ce:	b130      	cbz	r0, 186de <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   186d0:	8983      	ldrh	r3, [r0, #12]
   186d2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   186d4:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   186d8:	d001      	beq.n	186de <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   186da:	6880      	ldr	r0, [r0, #8]
   186dc:	e7f7      	b.n	186ce <bt_l2cap_le_lookup_rx_cid+0x2>
}
   186de:	4770      	bx	lr

000186e0 <bt_l2cap_recv>:
{
   186e0:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   186e2:	8a0b      	ldrh	r3, [r1, #16]
   186e4:	2b03      	cmp	r3, #3
{
   186e6:	4605      	mov	r5, r0
   186e8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   186ea:	d804      	bhi.n	186f6 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   186ec:	4620      	mov	r0, r4
}
   186ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   186f2:	f7fa be01 	b.w	132f8 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   186f6:	2104      	movs	r1, #4
   186f8:	f104 000c 	add.w	r0, r4, #12
   186fc:	f001 f910 	bl	19920 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   18700:	8841      	ldrh	r1, [r0, #2]
   18702:	4628      	mov	r0, r5
   18704:	f7ff ffe2 	bl	186cc <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18708:	2800      	cmp	r0, #0
   1870a:	d0ef      	beq.n	186ec <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1870c:	6843      	ldr	r3, [r0, #4]
   1870e:	4621      	mov	r1, r4
   18710:	695b      	ldr	r3, [r3, #20]
   18712:	4798      	blx	r3
   18714:	e7ea      	b.n	186ec <bt_l2cap_recv+0xc>

00018716 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   18716:	4770      	bx	lr

00018718 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   18718:	4603      	mov	r3, r0
	return list->head;
   1871a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1871c:	b128      	cbz	r0, 1872a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1871e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   18720:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   18722:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18724:	4288      	cmp	r0, r1
	list->tail = node;
   18726:	bf08      	it	eq
   18728:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1872a:	4770      	bx	lr

0001872c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1872c:	4603      	mov	r3, r0
	size_t bytes = 0;
   1872e:	2000      	movs	r0, #0

	while (buf) {
   18730:	b903      	cbnz	r3, 18734 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   18732:	4770      	bx	lr
		bytes += buf->len;
   18734:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   18736:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   18738:	4410      	add	r0, r2
		buf = buf->frags;
   1873a:	e7f9      	b.n	18730 <net_buf_frags_len+0x4>

0001873c <attr_read_type_cb>:
{
   1873c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1873e:	68d4      	ldr	r4, [r2, #12]
   18740:	7823      	ldrb	r3, [r4, #0]
   18742:	3102      	adds	r1, #2
   18744:	b913      	cbnz	r3, 1874c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   18746:	7021      	strb	r1, [r4, #0]
	return true;
   18748:	2001      	movs	r0, #1
}
   1874a:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1874c:	428b      	cmp	r3, r1
   1874e:	d0fb      	beq.n	18748 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   18750:	8a03      	ldrh	r3, [r0, #16]
   18752:	3b02      	subs	r3, #2
   18754:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   18756:	2000      	movs	r0, #0
   18758:	6110      	str	r0, [r2, #16]
		return false;
   1875a:	e7f6      	b.n	1874a <attr_read_type_cb+0xe>

0001875c <att_prepare_write_req>:
}
   1875c:	2006      	movs	r0, #6
   1875e:	4770      	bx	lr

00018760 <atomic_test_bit>:
   18760:	f3bf 8f5b 	dmb	ish
   18764:	6800      	ldr	r0, [r0, #0]
   18766:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1876a:	4108      	asrs	r0, r1
}
   1876c:	f000 0001 	and.w	r0, r0, #1
   18770:	4770      	bx	lr

00018772 <att_get>:
{
   18772:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   18774:	7a83      	ldrb	r3, [r0, #10]
   18776:	2b07      	cmp	r3, #7
   18778:	d001      	beq.n	1877e <att_get+0xc>
		return NULL;
   1877a:	2000      	movs	r0, #0
}
   1877c:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1877e:	2104      	movs	r1, #4
   18780:	f7ff ffa4 	bl	186cc <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18784:	4603      	mov	r3, r0
   18786:	2800      	cmp	r0, #0
   18788:	d0f7      	beq.n	1877a <att_get+0x8>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   1878a:	2102      	movs	r1, #2
   1878c:	3030      	adds	r0, #48	; 0x30
   1878e:	f7ff ffe7 	bl	18760 <atomic_test_bit>
   18792:	2800      	cmp	r0, #0
   18794:	d0f1      	beq.n	1877a <att_get+0x8>
	return att_chan->att;
   18796:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1879a:	e7ef      	b.n	1877c <att_get+0xa>

0001879c <chan_req_send>:
{
   1879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1879e:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   187a0:	6888      	ldr	r0, [r1, #8]
   187a2:	f7ff ffc3 	bl	1872c <net_buf_frags_len>
   187a6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   187a8:	4283      	cmp	r3, r0
{
   187aa:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   187ac:	d30b      	bcc.n	187c6 <chan_req_send+0x2a>
	chan->req = req;
   187ae:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   187b0:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   187b2:	2600      	movs	r6, #0
   187b4:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   187b6:	4628      	mov	r0, r5
   187b8:	4639      	mov	r1, r7
   187ba:	f7ec fb23 	bl	4e04 <chan_send>
	if (err) {
   187be:	b108      	cbz	r0, 187c4 <chan_req_send+0x28>
		req->buf = buf;
   187c0:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   187c2:	63ae      	str	r6, [r5, #56]	; 0x38
}
   187c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   187c6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   187ca:	e7fb      	b.n	187c4 <chan_req_send+0x28>

000187cc <write_cb>:
{
   187cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   187ce:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   187d0:	4601      	mov	r1, r0
{
   187d2:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   187d4:	f44f 7295 	mov.w	r2, #298	; 0x12a
   187d8:	6820      	ldr	r0, [r4, #0]
   187da:	f000 feec 	bl	195b6 <bt_gatt_check_perm>
   187de:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   187e0:	bb00      	cbnz	r0, 18824 <write_cb+0x58>
	if (!data->req) {
   187e2:	7a23      	ldrb	r3, [r4, #8]
   187e4:	b1b3      	cbz	r3, 18814 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   187e6:	f1a3 0218 	sub.w	r2, r3, #24
   187ea:	4253      	negs	r3, r2
   187ec:	4153      	adcs	r3, r2
   187ee:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   187f0:	9301      	str	r3, [sp, #4]
   187f2:	8a63      	ldrh	r3, [r4, #18]
   187f4:	9300      	str	r3, [sp, #0]
   187f6:	68ae      	ldr	r6, [r5, #8]
   187f8:	8a23      	ldrh	r3, [r4, #16]
   187fa:	68e2      	ldr	r2, [r4, #12]
   187fc:	6820      	ldr	r0, [r4, #0]
   187fe:	4629      	mov	r1, r5
   18800:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   18802:	2800      	cmp	r0, #0
   18804:	db08      	blt.n	18818 <write_cb+0x4c>
   18806:	8a23      	ldrh	r3, [r4, #16]
   18808:	4298      	cmp	r0, r3
   1880a:	d10e      	bne.n	1882a <write_cb+0x5e>
	data->err = 0U;
   1880c:	2300      	movs	r3, #0
   1880e:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   18810:	2001      	movs	r0, #1
   18812:	e008      	b.n	18826 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   18814:	2302      	movs	r3, #2
   18816:	e7eb      	b.n	187f0 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   18818:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1881c:	d305      	bcc.n	1882a <write_cb+0x5e>
		return -err;
   1881e:	4240      	negs	r0, r0
   18820:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   18822:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   18824:	2000      	movs	r0, #0
}
   18826:	b002      	add	sp, #8
   18828:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   1882a:	200e      	movs	r0, #14
   1882c:	e7f9      	b.n	18822 <write_cb+0x56>

0001882e <bt_gatt_foreach_attr>:
{
   1882e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   18830:	e9cd 2301 	strd	r2, r3, [sp, #4]
   18834:	2300      	movs	r3, #0
   18836:	9300      	str	r3, [sp, #0]
   18838:	461a      	mov	r2, r3
   1883a:	f7ed fab1 	bl	5da0 <bt_gatt_foreach_attr_type>
}
   1883e:	b005      	add	sp, #20
   18840:	f85d fb04 	ldr.w	pc, [sp], #4

00018844 <bt_att_chan_send_rsp>:
{
   18844:	b538      	push	{r3, r4, r5, lr}
   18846:	4604      	mov	r4, r0
   18848:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   1884a:	f7ec fadb 	bl	4e04 <chan_send>
	if (err) {
   1884e:	b130      	cbz	r0, 1885e <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   18850:	4629      	mov	r1, r5
   18852:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   18856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1885a:	f001 b802 	b.w	19862 <net_buf_put>
}
   1885e:	bd38      	pop	{r3, r4, r5, pc}

00018860 <find_type_cb>:
{
   18860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18864:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   18866:	f8d2 9000 	ldr.w	r9, [r2]
{
   1886a:	4607      	mov	r7, r0
   1886c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1886e:	2500      	movs	r5, #0
   18870:	f642 0301 	movw	r3, #10241	; 0x2801
   18874:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   18876:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1887a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1887e:	a90b      	add	r1, sp, #44	; 0x2c
{
   18880:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18882:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   18886:	f7ff f8e2 	bl	17a4e <bt_uuid_cmp>
   1888a:	2800      	cmp	r0, #0
   1888c:	d079      	beq.n	18982 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1888e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18892:	6838      	ldr	r0, [r7, #0]
   18894:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   18898:	a90b      	add	r1, sp, #44	; 0x2c
   1889a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1889e:	f7ff f8d6 	bl	17a4e <bt_uuid_cmp>
   188a2:	b138      	cbz	r0, 188b4 <find_type_cb+0x54>
		if (data->group &&
   188a4:	68a3      	ldr	r3, [r4, #8]
   188a6:	b11b      	cbz	r3, 188b0 <find_type_cb+0x50>
   188a8:	885a      	ldrh	r2, [r3, #2]
   188aa:	42b2      	cmp	r2, r6
   188ac:	d200      	bcs.n	188b0 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   188ae:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   188b0:	2001      	movs	r0, #1
   188b2:	e009      	b.n	188c8 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   188b4:	6861      	ldr	r1, [r4, #4]
   188b6:	4608      	mov	r0, r1
   188b8:	f7ff ff38 	bl	1872c <net_buf_frags_len>
   188bc:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   188c0:	1a1b      	subs	r3, r3, r0
   188c2:	2b03      	cmp	r3, #3
   188c4:	d803      	bhi.n	188ce <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   188c6:	2000      	movs	r0, #0
}
   188c8:	b011      	add	sp, #68	; 0x44
   188ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   188ce:	4608      	mov	r0, r1
   188d0:	f000 ffcd 	bl	1986e <net_buf_frag_last>
   188d4:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   188d6:	6860      	ldr	r0, [r4, #4]
   188d8:	f7ff ff28 	bl	1872c <net_buf_frags_len>
   188dc:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   188e0:	f105 0b0c 	add.w	fp, r5, #12
   188e4:	ebaa 0a00 	sub.w	sl, sl, r0
   188e8:	4658      	mov	r0, fp
   188ea:	f001 f82d 	bl	19948 <net_buf_simple_tailroom>
   188ee:	4582      	cmp	sl, r0
   188f0:	d23f      	bcs.n	18972 <find_type_cb+0x112>
   188f2:	6860      	ldr	r0, [r4, #4]
   188f4:	f7ff ff1a 	bl	1872c <net_buf_frags_len>
   188f8:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   188fc:	1a18      	subs	r0, r3, r0
	if (!len) {
   188fe:	b970      	cbnz	r0, 1891e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   18900:	6863      	ldr	r3, [r4, #4]
   18902:	7a98      	ldrb	r0, [r3, #10]
   18904:	f7fa fc36 	bl	13174 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   18908:	2200      	movs	r2, #0
   1890a:	2300      	movs	r3, #0
   1890c:	f000 ffa2 	bl	19854 <net_buf_alloc_fixed>
		if (!frag) {
   18910:	4605      	mov	r5, r0
   18912:	2800      	cmp	r0, #0
   18914:	d0d7      	beq.n	188c6 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   18916:	4601      	mov	r1, r0
   18918:	6860      	ldr	r0, [r4, #4]
   1891a:	f000 ffb9 	bl	19890 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1891e:	2300      	movs	r3, #0
   18920:	9300      	str	r3, [sp, #0]
   18922:	f8d7 9004 	ldr.w	r9, [r7, #4]
   18926:	4639      	mov	r1, r7
   18928:	2310      	movs	r3, #16
   1892a:	aa02      	add	r2, sp, #8
   1892c:	4640      	mov	r0, r8
   1892e:	47c8      	blx	r9
	if (read < 0) {
   18930:	1e07      	subs	r7, r0, #0
   18932:	db26      	blt.n	18982 <find_type_cb+0x122>
	if (read != data->value_len) {
   18934:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18936:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   18938:	42ba      	cmp	r2, r7
   1893a:	d01e      	beq.n	1897a <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1893c:	4601      	mov	r1, r0
   1893e:	a80b      	add	r0, sp, #44	; 0x2c
   18940:	f7ff f8b3 	bl	17aaa <bt_uuid_create>
   18944:	b1e8      	cbz	r0, 18982 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   18946:	b2fa      	uxtb	r2, r7
   18948:	a902      	add	r1, sp, #8
   1894a:	a806      	add	r0, sp, #24
   1894c:	f7ff f8ad 	bl	17aaa <bt_uuid_create>
   18950:	b1b8      	cbz	r0, 18982 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18952:	a906      	add	r1, sp, #24
   18954:	a80b      	add	r0, sp, #44	; 0x2c
   18956:	f7ff f87a 	bl	17a4e <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1895a:	b990      	cbnz	r0, 18982 <find_type_cb+0x122>
	data->err = 0x00;
   1895c:	2300      	movs	r3, #0
   1895e:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   18960:	2104      	movs	r1, #4
   18962:	f105 000c 	add.w	r0, r5, #12
   18966:	f000 ffb4 	bl	198d2 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1896a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1896c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1896e:	68a3      	ldr	r3, [r4, #8]
   18970:	e79d      	b.n	188ae <find_type_cb+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   18972:	4658      	mov	r0, fp
   18974:	f000 ffe8 	bl	19948 <net_buf_simple_tailroom>
   18978:	e7c1      	b.n	188fe <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   1897a:	a902      	add	r1, sp, #8
   1897c:	f7ff f82e 	bl	179dc <memcmp>
   18980:	e7eb      	b.n	1895a <find_type_cb+0xfa>
	data->group = NULL;
   18982:	2300      	movs	r3, #0
   18984:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   18986:	e793      	b.n	188b0 <find_type_cb+0x50>

00018988 <find_info_cb>:
{
   18988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1898a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1898c:	6817      	ldr	r7, [r2, #0]
{
   1898e:	4605      	mov	r5, r0
   18990:	460e      	mov	r6, r1
   18992:	4614      	mov	r4, r2
	if (!data->rsp) {
   18994:	b963      	cbnz	r3, 189b0 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   18996:	6850      	ldr	r0, [r2, #4]
   18998:	2101      	movs	r1, #1
   1899a:	300c      	adds	r0, #12
   1899c:	f000 ff99 	bl	198d2 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   189a0:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   189a2:	682b      	ldr	r3, [r5, #0]
   189a4:	781b      	ldrb	r3, [r3, #0]
   189a6:	2b00      	cmp	r3, #0
   189a8:	bf14      	ite	ne
   189aa:	2302      	movne	r3, #2
   189ac:	2301      	moveq	r3, #1
   189ae:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   189b0:	68a3      	ldr	r3, [r4, #8]
   189b2:	781b      	ldrb	r3, [r3, #0]
   189b4:	2b01      	cmp	r3, #1
   189b6:	d003      	beq.n	189c0 <find_info_cb+0x38>
   189b8:	2b02      	cmp	r3, #2
   189ba:	d019      	beq.n	189f0 <find_info_cb+0x68>
   189bc:	2000      	movs	r0, #0
   189be:	e016      	b.n	189ee <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   189c0:	682b      	ldr	r3, [r5, #0]
   189c2:	781b      	ldrb	r3, [r3, #0]
   189c4:	2b00      	cmp	r3, #0
   189c6:	d1f9      	bne.n	189bc <find_info_cb+0x34>
   189c8:	6860      	ldr	r0, [r4, #4]
   189ca:	2104      	movs	r1, #4
   189cc:	300c      	adds	r0, #12
   189ce:	f000 ff80 	bl	198d2 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   189d2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   189d4:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   189d6:	682a      	ldr	r2, [r5, #0]
   189d8:	68e3      	ldr	r3, [r4, #12]
   189da:	8852      	ldrh	r2, [r2, #2]
   189dc:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   189de:	6863      	ldr	r3, [r4, #4]
   189e0:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   189e2:	8a1b      	ldrh	r3, [r3, #16]
   189e4:	1ac0      	subs	r0, r0, r3
   189e6:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   189e8:	bf94      	ite	ls
   189ea:	2000      	movls	r0, #0
   189ec:	2001      	movhi	r0, #1
}
   189ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   189f0:	682b      	ldr	r3, [r5, #0]
   189f2:	781b      	ldrb	r3, [r3, #0]
   189f4:	2b02      	cmp	r3, #2
   189f6:	d1e1      	bne.n	189bc <find_info_cb+0x34>
   189f8:	6860      	ldr	r0, [r4, #4]
   189fa:	2112      	movs	r1, #18
   189fc:	300c      	adds	r0, #12
   189fe:	f000 ff68 	bl	198d2 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   18a02:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   18a04:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   18a06:	6829      	ldr	r1, [r5, #0]
   18a08:	68e0      	ldr	r0, [r4, #12]
   18a0a:	2210      	movs	r2, #16
   18a0c:	3101      	adds	r1, #1
   18a0e:	3002      	adds	r0, #2
   18a10:	f7fe fff4 	bl	179fc <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   18a14:	6863      	ldr	r3, [r4, #4]
   18a16:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   18a18:	8a1b      	ldrh	r3, [r3, #16]
   18a1a:	1ac0      	subs	r0, r0, r3
   18a1c:	2812      	cmp	r0, #18
   18a1e:	e7e3      	b.n	189e8 <find_info_cb+0x60>

00018a20 <att_chan_mtu_updated>:
{
   18a20:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   18a22:	6805      	ldr	r5, [r0, #0]
	return list->head;
   18a24:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18a26:	b352      	cbz	r2, 18a7e <att_chan_mtu_updated+0x5e>
	return node->next;
   18a28:	6813      	ldr	r3, [r2, #0]
   18a2a:	b103      	cbz	r3, 18a2e <att_chan_mtu_updated+0xe>
   18a2c:	3b88      	subs	r3, #136	; 0x88
   18a2e:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   18a32:	2200      	movs	r2, #0
   18a34:	4611      	mov	r1, r2
   18a36:	e000      	b.n	18a3a <att_chan_mtu_updated+0x1a>
   18a38:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   18a3a:	4284      	cmp	r4, r0
   18a3c:	d007      	beq.n	18a4e <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   18a3e:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   18a40:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   18a42:	42b1      	cmp	r1, r6
   18a44:	bf38      	it	cc
   18a46:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   18a48:	42a2      	cmp	r2, r4
   18a4a:	bf38      	it	cc
   18a4c:	4622      	movcc	r2, r4
   18a4e:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18a50:	b12b      	cbz	r3, 18a5e <att_chan_mtu_updated+0x3e>
   18a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   18a56:	2b00      	cmp	r3, #0
   18a58:	d1ee      	bne.n	18a38 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   18a5a:	4284      	cmp	r4, r0
   18a5c:	d1ef      	bne.n	18a3e <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   18a5e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   18a60:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   18a62:	428b      	cmp	r3, r1
   18a64:	d801      	bhi.n	18a6a <att_chan_mtu_updated+0x4a>
   18a66:	4290      	cmp	r0, r2
   18a68:	d90b      	bls.n	18a82 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   18a6a:	4282      	cmp	r2, r0
   18a6c:	bf38      	it	cc
   18a6e:	4602      	movcc	r2, r0
   18a70:	4299      	cmp	r1, r3
   18a72:	6828      	ldr	r0, [r5, #0]
   18a74:	bf38      	it	cc
   18a76:	4619      	movcc	r1, r3
}
   18a78:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   18a7a:	f7ed bcd9 	b.w	6430 <bt_gatt_att_max_mtu_changed>
   18a7e:	4611      	mov	r1, r2
   18a80:	e7ed      	b.n	18a5e <att_chan_mtu_updated+0x3e>
}
   18a82:	bc70      	pop	{r4, r5, r6}
   18a84:	4770      	bx	lr

00018a86 <attr_read_group_cb>:
	if (!data->rsp->len) {
   18a86:	68d0      	ldr	r0, [r2, #12]
   18a88:	7803      	ldrb	r3, [r0, #0]
   18a8a:	3104      	adds	r1, #4
   18a8c:	b913      	cbnz	r3, 18a94 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   18a8e:	7001      	strb	r1, [r0, #0]
	return true;
   18a90:	2001      	movs	r0, #1
   18a92:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   18a94:	428b      	cmp	r3, r1
   18a96:	d0fb      	beq.n	18a90 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   18a98:	6891      	ldr	r1, [r2, #8]
   18a9a:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   18a9c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   18a9e:	3b04      	subs	r3, #4
   18aa0:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   18aa2:	6110      	str	r0, [r2, #16]
}
   18aa4:	4770      	bx	lr

00018aa6 <process_queue>:
{
   18aa6:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   18aa8:	2200      	movs	r2, #0
{
   18aaa:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   18aac:	2300      	movs	r3, #0
   18aae:	4608      	mov	r0, r1
{
   18ab0:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   18ab2:	f000 fed4 	bl	1985e <net_buf_get>
	if (buf) {
   18ab6:	4605      	mov	r5, r0
   18ab8:	b158      	cbz	r0, 18ad2 <process_queue+0x2c>
	return chan_send(chan, buf);
   18aba:	4601      	mov	r1, r0
   18abc:	4620      	mov	r0, r4
   18abe:	f7ec f9a1 	bl	4e04 <chan_send>
		if (err) {
   18ac2:	4604      	mov	r4, r0
   18ac4:	b118      	cbz	r0, 18ace <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   18ac6:	4629      	mov	r1, r5
   18ac8:	4630      	mov	r0, r6
   18aca:	f001 fe2e 	bl	1a72a <k_queue_prepend>
}
   18ace:	4620      	mov	r0, r4
   18ad0:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   18ad2:	f06f 0401 	mvn.w	r4, #1
   18ad6:	e7fa      	b.n	18ace <process_queue+0x28>

00018ad8 <att_chan_read>:
{
   18ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18adc:	4680      	mov	r8, r0
   18ade:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   18ae0:	4610      	mov	r0, r2
{
   18ae2:	4699      	mov	r9, r3
   18ae4:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   18ae6:	f7ff fe21 	bl	1872c <net_buf_frags_len>
   18aea:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   18aee:	4283      	cmp	r3, r0
{
   18af0:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   18af2:	d97a      	bls.n	18bea <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   18af4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   18af8:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   18afa:	4630      	mov	r0, r6
   18afc:	f000 feb7 	bl	1986e <net_buf_frag_last>
	size_t len, total = 0;
   18b00:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   18b04:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   18b06:	4630      	mov	r0, r6
   18b08:	f7ff fe10 	bl	1872c <net_buf_frags_len>
   18b0c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   18b10:	f105 070c 	add.w	r7, r5, #12
   18b14:	1a24      	subs	r4, r4, r0
   18b16:	4638      	mov	r0, r7
   18b18:	f000 ff16 	bl	19948 <net_buf_simple_tailroom>
   18b1c:	4284      	cmp	r4, r0
   18b1e:	d211      	bcs.n	18b44 <att_chan_read+0x6c>
   18b20:	4630      	mov	r0, r6
   18b22:	f7ff fe03 	bl	1872c <net_buf_frags_len>
   18b26:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   18b2a:	1a24      	subs	r4, r4, r0
		if (!len) {
   18b2c:	bb34      	cbnz	r4, 18b7c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   18b2e:	7ab0      	ldrb	r0, [r6, #10]
   18b30:	f7fa fb20 	bl	13174 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   18b34:	2200      	movs	r2, #0
   18b36:	2300      	movs	r3, #0
   18b38:	f000 fe8c 	bl	19854 <net_buf_alloc_fixed>
			if (!frag) {
   18b3c:	4605      	mov	r5, r0
   18b3e:	b930      	cbnz	r0, 18b4e <att_chan_read+0x76>
	return total;
   18b40:	4657      	mov	r7, sl
   18b42:	e02c      	b.n	18b9e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   18b44:	4638      	mov	r0, r7
   18b46:	f000 feff 	bl	19948 <net_buf_simple_tailroom>
   18b4a:	4604      	mov	r4, r0
   18b4c:	e7ee      	b.n	18b2c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   18b4e:	4601      	mov	r1, r0
   18b50:	4630      	mov	r0, r6
   18b52:	f000 fe9d 	bl	19890 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   18b56:	4630      	mov	r0, r6
   18b58:	f7ff fde8 	bl	1872c <net_buf_frags_len>
   18b5c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   18b60:	f105 070c 	add.w	r7, r5, #12
   18b64:	1a24      	subs	r4, r4, r0
   18b66:	4638      	mov	r0, r7
   18b68:	f000 feee 	bl	19948 <net_buf_simple_tailroom>
   18b6c:	4284      	cmp	r4, r0
   18b6e:	d21a      	bcs.n	18ba6 <att_chan_read+0xce>
   18b70:	4630      	mov	r0, r6
   18b72:	f7ff fddb 	bl	1872c <net_buf_frags_len>
   18b76:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   18b7a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   18b7c:	68e9      	ldr	r1, [r5, #12]
   18b7e:	8a2a      	ldrh	r2, [r5, #16]
   18b80:	f8cd 9000 	str.w	r9, [sp]
   18b84:	f8db 7004 	ldr.w	r7, [fp, #4]
   18b88:	9803      	ldr	r0, [sp, #12]
   18b8a:	440a      	add	r2, r1
   18b8c:	b2a3      	uxth	r3, r4
   18b8e:	4659      	mov	r1, fp
   18b90:	47b8      	blx	r7
		if (read < 0) {
   18b92:	1e07      	subs	r7, r0, #0
   18b94:	da0c      	bge.n	18bb0 <att_chan_read+0xd8>
				return total;
   18b96:	f1ba 0f00 	cmp.w	sl, #0
   18b9a:	bf18      	it	ne
   18b9c:	4657      	movne	r7, sl
}
   18b9e:	4638      	mov	r0, r7
   18ba0:	b005      	add	sp, #20
   18ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ba6:	4638      	mov	r0, r7
   18ba8:	f000 fece 	bl	19948 <net_buf_simple_tailroom>
   18bac:	4604      	mov	r4, r0
   18bae:	e7e5      	b.n	18b7c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   18bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18bb2:	b993      	cbnz	r3, 18bda <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   18bb4:	4639      	mov	r1, r7
   18bb6:	f105 000c 	add.w	r0, r5, #12
   18bba:	f000 fe8a 	bl	198d2 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   18bbe:	4630      	mov	r0, r6
   18bc0:	f7ff fdb4 	bl	1872c <net_buf_frags_len>
   18bc4:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   18bc8:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   18bca:	4283      	cmp	r3, r0
		total += read;
   18bcc:	44ba      	add	sl, r7
		offset += read;
   18bce:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   18bd2:	d9b5      	bls.n	18b40 <att_chan_read+0x68>
   18bd4:	42a7      	cmp	r7, r4
   18bd6:	d096      	beq.n	18b06 <att_chan_read+0x2e>
   18bd8:	e7b2      	b.n	18b40 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   18bda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   18bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18bde:	4639      	mov	r1, r7
   18be0:	4628      	mov	r0, r5
   18be2:	4798      	blx	r3
   18be4:	2800      	cmp	r0, #0
   18be6:	d1e5      	bne.n	18bb4 <att_chan_read+0xdc>
   18be8:	e7aa      	b.n	18b40 <att_chan_read+0x68>
		return 0;
   18bea:	2700      	movs	r7, #0
   18bec:	e7d7      	b.n	18b9e <att_chan_read+0xc6>

00018bee <sys_slist_find_and_remove.isra.0>:
	return list->head;
   18bee:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18bf0:	2200      	movs	r2, #0
   18bf2:	b903      	cbnz	r3, 18bf6 <sys_slist_find_and_remove.isra.0+0x8>
   18bf4:	4770      	bx	lr
   18bf6:	428b      	cmp	r3, r1
   18bf8:	d10f      	bne.n	18c1a <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   18bfa:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   18bfc:	b93a      	cbnz	r2, 18c0e <sys_slist_find_and_remove.isra.0+0x20>
   18bfe:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   18c00:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   18c02:	4291      	cmp	r1, r2
   18c04:	d100      	bne.n	18c08 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   18c06:	6043      	str	r3, [r0, #4]
	parent->next = child;
   18c08:	2300      	movs	r3, #0
   18c0a:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   18c0c:	4770      	bx	lr
	parent->next = child;
   18c0e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   18c10:	6843      	ldr	r3, [r0, #4]
   18c12:	4299      	cmp	r1, r3
	list->tail = node;
   18c14:	bf08      	it	eq
   18c16:	6042      	streq	r2, [r0, #4]
}
   18c18:	e7f6      	b.n	18c08 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   18c1a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18c1c:	681b      	ldr	r3, [r3, #0]
   18c1e:	e7e8      	b.n	18bf2 <sys_slist_find_and_remove.isra.0+0x4>

00018c20 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   18c20:	2301      	movs	r3, #1
   18c22:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18c24:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18c26:	f3bf 8f5b 	dmb	ish
   18c2a:	e850 2f00 	ldrex	r2, [r0]
   18c2e:	401a      	ands	r2, r3
   18c30:	e840 2100 	strex	r1, r2, [r0]
   18c34:	2900      	cmp	r1, #0
   18c36:	d1f8      	bne.n	18c2a <atomic_clear_bit+0xa>
   18c38:	f3bf 8f5b 	dmb	ish
}
   18c3c:	4770      	bx	lr

00018c3e <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   18c3e:	2006      	movs	r0, #6
   18c40:	4770      	bx	lr

00018c42 <atomic_test_and_set_bit>:
{
   18c42:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   18c44:	2301      	movs	r3, #1
   18c46:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18c4a:	f3bf 8f5b 	dmb	ish
   18c4e:	e850 3f00 	ldrex	r3, [r0]
   18c52:	ea43 0201 	orr.w	r2, r3, r1
   18c56:	e840 2400 	strex	r4, r2, [r0]
   18c5a:	2c00      	cmp	r4, #0
   18c5c:	d1f7      	bne.n	18c4e <atomic_test_and_set_bit+0xc>
   18c5e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   18c62:	4219      	tst	r1, r3
}
   18c64:	bf14      	ite	ne
   18c66:	2001      	movne	r0, #1
   18c68:	2000      	moveq	r0, #0
   18c6a:	bd10      	pop	{r4, pc}

00018c6c <read_cb>:
{
   18c6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   18c6e:	6816      	ldr	r6, [r2, #0]
{
   18c70:	4605      	mov	r5, r0
	data->err = 0x00;
   18c72:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   18c74:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   18c76:	7313      	strb	r3, [r2, #12]
{
   18c78:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18c7a:	4629      	mov	r1, r5
   18c7c:	2295      	movs	r2, #149	; 0x95
   18c7e:	f000 fc9a 	bl	195b6 <bt_gatt_check_perm>
   18c82:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   18c84:	b980      	cbnz	r0, 18ca8 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   18c86:	e9cd 0000 	strd	r0, r0, [sp]
   18c8a:	4629      	mov	r1, r5
   18c8c:	88a3      	ldrh	r3, [r4, #4]
   18c8e:	68a2      	ldr	r2, [r4, #8]
   18c90:	4630      	mov	r0, r6
   18c92:	f7ff ff21 	bl	18ad8 <att_chan_read>
	if (ret < 0) {
   18c96:	2800      	cmp	r0, #0
   18c98:	da09      	bge.n	18cae <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   18c9a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   18c9e:	bf26      	itte	cs
   18ca0:	4240      	negcs	r0, r0
   18ca2:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   18ca4:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   18ca6:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   18ca8:	2000      	movs	r0, #0
}
   18caa:	b002      	add	sp, #8
   18cac:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   18cae:	2001      	movs	r0, #1
   18cb0:	e7fb      	b.n	18caa <read_cb+0x3e>

00018cb2 <read_vl_cb>:
{
   18cb2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   18cb6:	f8d2 8000 	ldr.w	r8, [r2]
{
   18cba:	4606      	mov	r6, r0
	data->err = 0x00;
   18cbc:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   18cbe:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   18cc2:	7313      	strb	r3, [r2, #12]
{
   18cc4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18cc6:	4631      	mov	r1, r6
   18cc8:	2295      	movs	r2, #149	; 0x95
   18cca:	f000 fc74 	bl	195b6 <bt_gatt_check_perm>
   18cce:	4605      	mov	r5, r0
   18cd0:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   18cd2:	b9e0      	cbnz	r0, 18d0e <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   18cd4:	68a0      	ldr	r0, [r4, #8]
   18cd6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   18cda:	8a02      	ldrh	r2, [r0, #16]
   18cdc:	1a9b      	subs	r3, r3, r2
   18cde:	2b01      	cmp	r3, #1
   18ce0:	dd15      	ble.n	18d0e <read_vl_cb+0x5c>
   18ce2:	2102      	movs	r1, #2
   18ce4:	300c      	adds	r0, #12
   18ce6:	f000 fdf4 	bl	198d2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   18cea:	e9cd 5500 	strd	r5, r5, [sp]
   18cee:	4607      	mov	r7, r0
   18cf0:	88a3      	ldrh	r3, [r4, #4]
   18cf2:	68a2      	ldr	r2, [r4, #8]
   18cf4:	4631      	mov	r1, r6
   18cf6:	4640      	mov	r0, r8
   18cf8:	f7ff feee 	bl	18ad8 <att_chan_read>
	if (read < 0) {
   18cfc:	1e03      	subs	r3, r0, #0
   18cfe:	da0a      	bge.n	18d16 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   18d00:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   18d04:	bf26      	itte	cs
   18d06:	425b      	negcs	r3, r3
   18d08:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   18d0a:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   18d0c:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   18d0e:	2000      	movs	r0, #0
}
   18d10:	b002      	add	sp, #8
   18d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   18d16:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   18d18:	2001      	movs	r0, #1
   18d1a:	e7f9      	b.n	18d10 <read_vl_cb+0x5e>

00018d1c <bt_att_sent>:
{
   18d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   18d1e:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   18d22:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   18d24:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   18d26:	2104      	movs	r1, #4
   18d28:	3030      	adds	r0, #48	; 0x30
   18d2a:	f7ff ff79 	bl	18c20 <atomic_clear_bit>
	if (!att) {
   18d2e:	b304      	cbz	r4, 18d72 <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   18d30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18d32:	b98b      	cbnz	r3, 18d58 <bt_att_sent+0x3c>
   18d34:	6863      	ldr	r3, [r4, #4]
   18d36:	b17b      	cbz	r3, 18d58 <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   18d38:	1d20      	adds	r0, r4, #4
   18d3a:	f7ff fced 	bl	18718 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   18d3e:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   18d40:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   18d42:	4638      	mov	r0, r7
   18d44:	f7ff fd2a 	bl	1879c <chan_req_send>
   18d48:	2800      	cmp	r0, #0
   18d4a:	da12      	bge.n	18d72 <bt_att_sent+0x56>
	return list->head;
   18d4c:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   18d4e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   18d50:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   18d52:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   18d54:	b903      	cbnz	r3, 18d58 <bt_att_sent+0x3c>
	list->tail = node;
   18d56:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   18d58:	f105 0138 	add.w	r1, r5, #56	; 0x38
   18d5c:	4638      	mov	r0, r7
   18d5e:	f7ff fea2 	bl	18aa6 <process_queue>
	if (!err) {
   18d62:	b130      	cbz	r0, 18d72 <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   18d64:	f104 010c 	add.w	r1, r4, #12
   18d68:	4638      	mov	r0, r7
}
   18d6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   18d6e:	f7ff be9a 	b.w	18aa6 <process_queue>
}
   18d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018d74 <att_req_send_process>:
{
   18d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   18d78:	6a44      	ldr	r4, [r0, #36]	; 0x24
   18d7a:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18d7c:	2c00      	cmp	r4, #0
   18d7e:	d03a      	beq.n	18df6 <att_req_send_process+0x82>
	return node->next;
   18d80:	f854 6988 	ldr.w	r6, [r4], #-136
   18d84:	b106      	cbz	r6, 18d88 <att_req_send_process+0x14>
   18d86:	3e88      	subs	r6, #136	; 0x88
{
   18d88:	2300      	movs	r3, #0
   18d8a:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   18d8c:	f108 0704 	add.w	r7, r8, #4
   18d90:	e013      	b.n	18dba <att_req_send_process+0x46>
		if (!req && prev &&
   18d92:	b1bb      	cbz	r3, 18dc4 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   18d94:	2103      	movs	r1, #3
   18d96:	f104 0034 	add.w	r0, r4, #52	; 0x34
   18d9a:	f7ff fce1 	bl	18760 <atomic_test_bit>
   18d9e:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   18da0:	f103 0034 	add.w	r0, r3, #52	; 0x34
   18da4:	f7ff fcdc 	bl	18760 <atomic_test_bit>
		if (!req && prev &&
   18da8:	4282      	cmp	r2, r0
   18daa:	d10b      	bne.n	18dc4 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18dac:	b31e      	cbz	r6, 18df6 <att_req_send_process+0x82>
   18dae:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   18db2:	b102      	cbz	r2, 18db6 <att_req_send_process+0x42>
   18db4:	3a88      	subs	r2, #136	; 0x88
{
   18db6:	4634      	mov	r4, r6
   18db8:	4616      	mov	r6, r2
		if (chan->req) {
   18dba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   18dbc:	2a00      	cmp	r2, #0
   18dbe:	d1f5      	bne.n	18dac <att_req_send_process+0x38>
		if (!req && prev &&
   18dc0:	2d00      	cmp	r5, #0
   18dc2:	d0e6      	beq.n	18d92 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   18dc4:	4638      	mov	r0, r7
   18dc6:	f7ff fca7 	bl	18718 <sys_slist_get>
	if (node) {
   18dca:	4605      	mov	r5, r0
   18dcc:	b908      	cbnz	r0, 18dd2 <att_req_send_process+0x5e>
   18dce:	4623      	mov	r3, r4
   18dd0:	e7ec      	b.n	18dac <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   18dd2:	4601      	mov	r1, r0
   18dd4:	4620      	mov	r0, r4
   18dd6:	f7ff fce1 	bl	1879c <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   18dda:	2800      	cmp	r0, #0
   18ddc:	da0b      	bge.n	18df6 <att_req_send_process+0x82>
	return list->head;
   18dde:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   18de2:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   18de4:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   18de8:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   18dec:	2b00      	cmp	r3, #0
   18dee:	d1ee      	bne.n	18dce <att_req_send_process+0x5a>
	list->tail = node;
   18df0:	f8c8 5008 	str.w	r5, [r8, #8]
}
   18df4:	e7eb      	b.n	18dce <att_req_send_process+0x5a>
}
   18df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018dfa <bt_att_status>:
{
   18dfa:	b538      	push	{r3, r4, r5, lr}
   18dfc:	4605      	mov	r5, r0
   18dfe:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   18e00:	2100      	movs	r1, #0
   18e02:	f7ff fcad 	bl	18760 <atomic_test_bit>
   18e06:	b1b8      	cbz	r0, 18e38 <bt_att_status+0x3e>
	if (!chan->att) {
   18e08:	f855 0c04 	ldr.w	r0, [r5, #-4]
   18e0c:	b1a0      	cbz	r0, 18e38 <bt_att_status+0x3e>
	if (chan->req) {
   18e0e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18e10:	b993      	cbnz	r3, 18e38 <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   18e12:	3004      	adds	r0, #4
   18e14:	f7ff fc80 	bl	18718 <sys_slist_get>
	if (!node) {
   18e18:	4604      	mov	r4, r0
   18e1a:	b168      	cbz	r0, 18e38 <bt_att_status+0x3e>
	return chan_req_send(chan, req);
   18e1c:	4601      	mov	r1, r0
   18e1e:	1f28      	subs	r0, r5, #4
   18e20:	f7ff fcbc 	bl	1879c <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   18e24:	2800      	cmp	r0, #0
   18e26:	da07      	bge.n	18e38 <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   18e28:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   18e2c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   18e2e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   18e30:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   18e32:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   18e34:	b902      	cbnz	r2, 18e38 <bt_att_status+0x3e>
	list->tail = node;
   18e36:	609c      	str	r4, [r3, #8]
}
   18e38:	bd38      	pop	{r3, r4, r5, pc}

00018e3a <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   18e3a:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   18e3c:	6883      	ldr	r3, [r0, #8]
   18e3e:	699b      	ldr	r3, [r3, #24]
   18e40:	b10b      	cbz	r3, 18e46 <att_sent+0xc>
		chan->ops->sent(chan);
   18e42:	3004      	adds	r0, #4
   18e44:	4718      	bx	r3
}
   18e46:	4770      	bx	lr

00018e48 <att_unknown>:
{
   18e48:	b510      	push	{r4, lr}
   18e4a:	460c      	mov	r4, r1
	if (!err) {
   18e4c:	b90a      	cbnz	r2, 18e52 <att_unknown+0xa>
		att_sent(conn, user_data);
   18e4e:	f7ff fff4 	bl	18e3a <att_sent>
	tx_meta_data_free(user_data);
   18e52:	4620      	mov	r0, r4
}
   18e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   18e58:	f7eb bfc6 	b.w	4de8 <tx_meta_data_free>

00018e5c <att_tx_complete>:
{
   18e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18e60:	4606      	mov	r6, r0
   18e62:	460d      	mov	r5, r1
	if (!err) {
   18e64:	4614      	mov	r4, r2
   18e66:	b122      	cbz	r2, 18e72 <att_tx_complete+0x16>
}
   18e68:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   18e6c:	4608      	mov	r0, r1
   18e6e:	f7eb bfbb 	b.w	4de8 <tx_meta_data_free>
		att_sent(conn, user_data);
   18e72:	f7ff ffe2 	bl	18e3a <att_sent>
	bt_gatt_complete_func_t func = data->func;
   18e76:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   18e78:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   18e7c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   18e80:	4628      	mov	r0, r5
   18e82:	f7eb ffb1 	bl	4de8 <tx_meta_data_free>
	if (!err && func) {
   18e86:	b92f      	cbnz	r7, 18e94 <att_tx_complete+0x38>
}
   18e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   18e8c:	4649      	mov	r1, r9
   18e8e:	4630      	mov	r0, r6
   18e90:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   18e92:	3401      	adds	r4, #1
   18e94:	b2a3      	uxth	r3, r4
   18e96:	4543      	cmp	r3, r8
   18e98:	d3f8      	bcc.n	18e8c <att_tx_complete+0x30>
   18e9a:	e7f5      	b.n	18e88 <att_tx_complete+0x2c>

00018e9c <att_req_sent>:
{
   18e9c:	b510      	push	{r4, lr}
   18e9e:	460c      	mov	r4, r1
	if (!err) {
   18ea0:	b90a      	cbnz	r2, 18ea6 <att_req_sent+0xa>
		att_sent(conn, user_data);
   18ea2:	f7ff ffca 	bl	18e3a <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   18ea6:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   18ea8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   18eaa:	b12b      	cbz	r3, 18eb8 <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   18eac:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18eb0:	2300      	movs	r3, #0
   18eb2:	3058      	adds	r0, #88	; 0x58
   18eb4:	f7fd fa06 	bl	162c4 <k_work_reschedule>
	tx_meta_data_free(user_data);
   18eb8:	4620      	mov	r0, r4
}
   18eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   18ebe:	f7eb bf93 	b.w	4de8 <tx_meta_data_free>

00018ec2 <att_cfm_sent>:
{
   18ec2:	b510      	push	{r4, lr}
   18ec4:	460c      	mov	r4, r1
	if (!err) {
   18ec6:	b90a      	cbnz	r2, 18ecc <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   18ec8:	f7ff ffb7 	bl	18e3a <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   18ecc:	6820      	ldr	r0, [r4, #0]
   18ece:	2101      	movs	r1, #1
   18ed0:	3034      	adds	r0, #52	; 0x34
   18ed2:	f7ff fea5 	bl	18c20 <atomic_clear_bit>
	tx_meta_data_free(data);
   18ed6:	4620      	mov	r0, r4
}
   18ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   18edc:	f7eb bf84 	b.w	4de8 <tx_meta_data_free>

00018ee0 <att_rsp_sent>:
{
   18ee0:	b510      	push	{r4, lr}
   18ee2:	460c      	mov	r4, r1
	if (!err) {
   18ee4:	b90a      	cbnz	r2, 18eea <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   18ee6:	f7ff ffa8 	bl	18e3a <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   18eea:	6820      	ldr	r0, [r4, #0]
   18eec:	2100      	movs	r1, #0
   18eee:	3034      	adds	r0, #52	; 0x34
   18ef0:	f7ff fe96 	bl	18c20 <atomic_clear_bit>
	tx_meta_data_free(data);
   18ef4:	4620      	mov	r0, r4
}
   18ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   18efa:	f7eb bf75 	b.w	4de8 <tx_meta_data_free>

00018efe <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   18efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f02:	4688      	mov	r8, r1
   18f04:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   18f06:	2101      	movs	r1, #1
   18f08:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   18f0a:	4605      	mov	r5, r0
   18f0c:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   18f0e:	f7ec f8ef 	bl	50f0 <bt_att_chan_create_pdu>
	if (!buf) {
   18f12:	4604      	mov	r4, r0
   18f14:	b170      	cbz	r0, 18f34 <send_err_rsp.part.0+0x36>
   18f16:	2104      	movs	r1, #4
   18f18:	300c      	adds	r0, #12
   18f1a:	f000 fcda 	bl	198d2 <net_buf_simple_add>
	rsp->request = req;
   18f1e:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   18f22:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   18f26:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   18f28:	4621      	mov	r1, r4
   18f2a:	4628      	mov	r0, r5
}
   18f2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   18f30:	f7ff bc88 	b.w	18844 <bt_att_chan_send_rsp>
}
   18f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018f38 <att_write_req>:
{
   18f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18f3a:	460c      	mov	r4, r1
   18f3c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   18f3e:	f101 000c 	add.w	r0, r1, #12
   18f42:	f000 fcf5 	bl	19930 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   18f46:	8a22      	ldrh	r2, [r4, #16]
   18f48:	9201      	str	r2, [sp, #4]
   18f4a:	68e2      	ldr	r2, [r4, #12]
   18f4c:	9200      	str	r2, [sp, #0]
   18f4e:	4603      	mov	r3, r0
   18f50:	2213      	movs	r2, #19
   18f52:	2112      	movs	r1, #18
   18f54:	4628      	mov	r0, r5
   18f56:	f7ec f973 	bl	5240 <att_write_rsp.constprop.0>
}
   18f5a:	b003      	add	sp, #12
   18f5c:	bd30      	pop	{r4, r5, pc}

00018f5e <att_write_cmd>:
{
   18f5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18f60:	460c      	mov	r4, r1
   18f62:	4605      	mov	r5, r0
   18f64:	f101 000c 	add.w	r0, r1, #12
   18f68:	f000 fce2 	bl	19930 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   18f6c:	8a22      	ldrh	r2, [r4, #16]
   18f6e:	9201      	str	r2, [sp, #4]
   18f70:	68e2      	ldr	r2, [r4, #12]
   18f72:	9200      	str	r2, [sp, #0]
   18f74:	2200      	movs	r2, #0
   18f76:	4603      	mov	r3, r0
   18f78:	4611      	mov	r1, r2
   18f7a:	4628      	mov	r0, r5
   18f7c:	f7ec f960 	bl	5240 <att_write_rsp.constprop.0>
}
   18f80:	b003      	add	sp, #12
   18f82:	bd30      	pop	{r4, r5, pc}

00018f84 <bt_att_create_pdu>:
{
   18f84:	b538      	push	{r3, r4, r5, lr}
   18f86:	460d      	mov	r5, r1
   18f88:	4614      	mov	r4, r2
	att = att_get(conn);
   18f8a:	f7ff fbf2 	bl	18772 <att_get>
	if (!att) {
   18f8e:	b158      	cbz	r0, 18fa8 <bt_att_create_pdu+0x24>
	return list->head;
   18f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18f92:	b14b      	cbz	r3, 18fa8 <bt_att_create_pdu+0x24>
   18f94:	4618      	mov	r0, r3
	return node->next;
   18f96:	f850 3988 	ldr.w	r3, [r0], #-136
   18f9a:	b103      	cbz	r3, 18f9e <bt_att_create_pdu+0x1a>
   18f9c:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18f9e:	1c62      	adds	r2, r4, #1
   18fa0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   18fa2:	428a      	cmp	r2, r1
   18fa4:	d90c      	bls.n	18fc0 <bt_att_create_pdu+0x3c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18fa6:	b90b      	cbnz	r3, 18fac <bt_att_create_pdu+0x28>
}
   18fa8:	2000      	movs	r0, #0
   18faa:	bd38      	pop	{r3, r4, r5, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18fac:	4618      	mov	r0, r3
   18fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   18fb2:	2b00      	cmp	r3, #0
   18fb4:	d0f4      	beq.n	18fa0 <bt_att_create_pdu+0x1c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18fb6:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   18fb8:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18fba:	f1a3 0388 	sub.w	r3, r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18fbe:	d8f5      	bhi.n	18fac <bt_att_create_pdu+0x28>
		return bt_att_chan_create_pdu(chan, op, len);
   18fc0:	4622      	mov	r2, r4
   18fc2:	4629      	mov	r1, r5
}
   18fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   18fc8:	f7ec b892 	b.w	50f0 <bt_att_chan_create_pdu>

00018fcc <att_read_blob_req>:
{
   18fcc:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   18fce:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   18fd0:	8813      	ldrh	r3, [r2, #0]
   18fd2:	8852      	ldrh	r2, [r2, #2]
   18fd4:	9200      	str	r2, [sp, #0]
   18fd6:	210c      	movs	r1, #12
   18fd8:	220d      	movs	r2, #13
   18fda:	f7ec fabb 	bl	5554 <att_read_rsp>
}
   18fde:	b003      	add	sp, #12
   18fe0:	f85d fb04 	ldr.w	pc, [sp], #4

00018fe4 <att_read_req>:
{
   18fe4:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   18fe6:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   18fe8:	2200      	movs	r2, #0
   18fea:	881b      	ldrh	r3, [r3, #0]
   18fec:	9200      	str	r2, [sp, #0]
   18fee:	210a      	movs	r1, #10
   18ff0:	220b      	movs	r2, #11
   18ff2:	f7ec faaf 	bl	5554 <att_read_rsp>
}
   18ff6:	b003      	add	sp, #12
   18ff8:	f85d fb04 	ldr.w	pc, [sp], #4

00018ffc <att_mtu_req>:
{
   18ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ffe:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   19000:	f850 2b34 	ldr.w	r2, [r0], #52
{
   19004:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   19006:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   19008:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1900a:	f7ff fba9 	bl	18760 <atomic_test_bit>
   1900e:	4604      	mov	r4, r0
   19010:	b9d8      	cbnz	r0, 1904a <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   19012:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   19014:	881b      	ldrh	r3, [r3, #0]
   19016:	2b16      	cmp	r3, #22
   19018:	d919      	bls.n	1904e <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1901a:	4630      	mov	r0, r6
   1901c:	2202      	movs	r2, #2
   1901e:	f7ff ffb1 	bl	18f84 <bt_att_create_pdu>
	if (!pdu) {
   19022:	4606      	mov	r6, r0
   19024:	b1a8      	cbz	r0, 19052 <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   19026:	2102      	movs	r1, #2
   19028:	300c      	adds	r0, #12
   1902a:	f000 fc52 	bl	198d2 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1902e:	2717      	movs	r7, #23
   19030:	7007      	strb	r7, [r0, #0]
   19032:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   19034:	4631      	mov	r1, r6
   19036:	4628      	mov	r0, r5
   19038:	f7ff fc04 	bl	18844 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   1903c:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1903e:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   19040:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   19042:	f7ff fced 	bl	18a20 <att_chan_mtu_updated>
	return 0;
   19046:	4620      	mov	r0, r4
}
   19048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1904a:	2006      	movs	r0, #6
   1904c:	e7fc      	b.n	19048 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   1904e:	2004      	movs	r0, #4
   19050:	e7fa      	b.n	19048 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   19052:	200e      	movs	r0, #14
   19054:	e7f8      	b.n	19048 <att_mtu_req+0x4c>

00019056 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   19056:	8a0a      	ldrh	r2, [r1, #16]
   19058:	68c9      	ldr	r1, [r1, #12]
   1905a:	2300      	movs	r3, #0
   1905c:	f7ec bc26 	b.w	58ac <att_handle_rsp>

00019060 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   19060:	3854      	subs	r0, #84	; 0x54
   19062:	f7ec bc59 	b.w	5918 <bt_att_disconnected>

00019066 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   19066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19068:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1906a:	f7ff fb82 	bl	18772 <att_get>
	if (!att) {
   1906e:	4604      	mov	r4, r0
   19070:	b940      	cbnz	r0, 19084 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19072:	69a8      	ldr	r0, [r5, #24]
   19074:	f7eb feb8 	bl	4de8 <tx_meta_data_free>
		net_buf_unref(buf);
   19078:	4628      	mov	r0, r5
   1907a:	f7fa f93d 	bl	132f8 <net_buf_unref>
		return -ENOTCONN;
   1907e:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   19082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   19084:	f100 060c 	add.w	r6, r0, #12
   19088:	4629      	mov	r1, r5
   1908a:	4630      	mov	r0, r6
   1908c:	f000 fbe9 	bl	19862 <net_buf_put>
	return list->head;
   19090:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19092:	b14d      	cbz	r5, 190a8 <bt_att_send+0x42>
	return node->next;
   19094:	f855 4988 	ldr.w	r4, [r5], #-136
   19098:	b104      	cbz	r4, 1909c <bt_att_send+0x36>
   1909a:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   1909c:	4631      	mov	r1, r6
   1909e:	4628      	mov	r0, r5
   190a0:	f7ff fd01 	bl	18aa6 <process_queue>
		if (!err) {
   190a4:	4603      	mov	r3, r0
   190a6:	b980      	cbnz	r0, 190ca <bt_att_send+0x64>
	return 0;
   190a8:	2000      	movs	r0, #0
   190aa:	e7ea      	b.n	19082 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   190ac:	2103      	movs	r1, #3
   190ae:	f104 0034 	add.w	r0, r4, #52	; 0x34
   190b2:	f7ff fb55 	bl	18760 <atomic_test_bit>
   190b6:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   190b8:	f105 0034 	add.w	r0, r5, #52	; 0x34
   190bc:	f7ff fb50 	bl	18760 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   190c0:	4287      	cmp	r7, r0
   190c2:	f06f 0301 	mvn.w	r3, #1
   190c6:	d107      	bne.n	190d8 <bt_att_send+0x72>
   190c8:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   190ca:	2c00      	cmp	r4, #0
   190cc:	d0ec      	beq.n	190a8 <bt_att_send+0x42>
   190ce:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   190d2:	b922      	cbnz	r2, 190de <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   190d4:	3302      	adds	r3, #2
   190d6:	d0e9      	beq.n	190ac <bt_att_send+0x46>
{
   190d8:	4625      	mov	r5, r4
   190da:	4614      	mov	r4, r2
   190dc:	e7de      	b.n	1909c <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   190de:	3a88      	subs	r2, #136	; 0x88
   190e0:	e7f8      	b.n	190d4 <bt_att_send+0x6e>

000190e2 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   190e2:	b510      	push	{r4, lr}
   190e4:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   190e6:	f7ff fb44 	bl	18772 <att_get>
	if (!att) {
   190ea:	b160      	cbz	r0, 19106 <bt_att_req_send+0x24>
	parent->next = child;
   190ec:	2300      	movs	r3, #0
   190ee:	6023      	str	r3, [r4, #0]
	return list->tail;
   190f0:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   190f2:	b92b      	cbnz	r3, 19100 <bt_att_req_send+0x1e>
	list->head = node;
   190f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   190f8:	f7ff fe3c 	bl	18d74 <att_req_send_process>

	return 0;
   190fc:	2000      	movs	r0, #0
}
   190fe:	bd10      	pop	{r4, pc}
	parent->next = child;
   19100:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19102:	6084      	str	r4, [r0, #8]
}
   19104:	e7f8      	b.n	190f8 <bt_att_req_send+0x16>
		return -ENOTCONN;
   19106:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1910a:	e7f8      	b.n	190fe <bt_att_req_send+0x1c>

0001910c <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1910c:	2001      	movs	r0, #1
   1910e:	4770      	bx	lr

00019110 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   19110:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   19112:	f7ff fb2e 	bl	18772 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   19116:	b150      	cbz	r0, 1912e <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   19118:	6a44      	ldr	r4, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1911a:	b144      	cbz	r4, 1912e <bt_att_clear_out_of_sync_sent+0x1e>
   1911c:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   1911e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   19122:	2105      	movs	r1, #5
   19124:	f7ff fd7c 	bl	18c20 <atomic_clear_bit>
	return node->next;
   19128:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   1912c:	e7f5      	b.n	1911a <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   1912e:	bd10      	pop	{r4, pc}

00019130 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   19130:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   19132:	2104      	movs	r1, #4
   19134:	f7ff faca 	bl	186cc <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   19138:	b128      	cbz	r0, 19146 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   1913a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   1913e:	2105      	movs	r1, #5
   19140:	3030      	adds	r0, #48	; 0x30
   19142:	f7ff bb0d 	b.w	18760 <atomic_test_bit>
}
   19146:	bd08      	pop	{r3, pc}

00019148 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   19148:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   1914a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   1914e:	2201      	movs	r2, #1
   19150:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   19152:	7403      	strb	r3, [r0, #16]
}
   19154:	4770      	bx	lr

00019156 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   19156:	6010      	str	r0, [r2, #0]
}
   19158:	2000      	movs	r0, #0
   1915a:	4770      	bx	lr

0001915c <gatt_ccc_changed>:
{
   1915c:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1915e:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   19160:	895a      	ldrh	r2, [r3, #10]
   19162:	428a      	cmp	r2, r1
   19164:	d003      	beq.n	1916e <gatt_ccc_changed+0x12>
		ccc->value = value;
   19166:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   19168:	68db      	ldr	r3, [r3, #12]
   1916a:	b103      	cbz	r3, 1916e <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1916c:	4718      	bx	r3
}
   1916e:	4770      	bx	lr

00019170 <gatt_indicate_rsp>:
{
   19170:	b510      	push	{r4, lr}
   19172:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   19174:	68a3      	ldr	r3, [r4, #8]
{
   19176:	460a      	mov	r2, r1
	if (params->func) {
   19178:	b10b      	cbz	r3, 1917e <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1917a:	4621      	mov	r1, r4
   1917c:	4798      	blx	r3
	params->_ref--;
   1917e:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   19180:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   19182:	3b01      	subs	r3, #1
   19184:	b2db      	uxtb	r3, r3
   19186:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   19188:	b122      	cbz	r2, 19194 <gatt_indicate_rsp+0x24>
   1918a:	b91b      	cbnz	r3, 19194 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1918c:	4620      	mov	r0, r4
}
   1918e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   19192:	4710      	bx	r2
}
   19194:	bd10      	pop	{r4, pc}

00019196 <match_uuid>:
	data->attr = attr;
   19196:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   19198:	8091      	strh	r1, [r2, #4]
}
   1919a:	2000      	movs	r0, #0
   1919c:	4770      	bx	lr

0001919e <gen_hash_m>:
{
   1919e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   191a0:	6807      	ldr	r7, [r0, #0]
   191a2:	783d      	ldrb	r5, [r7, #0]
{
   191a4:	b089      	sub	sp, #36	; 0x24
   191a6:	4606      	mov	r6, r0
   191a8:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   191aa:	b9dd      	cbnz	r5, 191e4 <gen_hash_m+0x46>
	switch (u16->val) {
   191ac:	887b      	ldrh	r3, [r7, #2]
   191ae:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   191b2:	d004      	beq.n	191be <gen_hash_m+0x20>
   191b4:	d810      	bhi.n	191d8 <gen_hash_m+0x3a>
   191b6:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   191ba:	2b03      	cmp	r3, #3
   191bc:	d812      	bhi.n	191e4 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   191be:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   191c2:	2202      	movs	r2, #2
   191c4:	f10d 010a 	add.w	r1, sp, #10
   191c8:	4620      	mov	r0, r4
   191ca:	f7fe fb3d 	bl	17848 <tc_cmac_update>
   191ce:	b968      	cbnz	r0, 191ec <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   191d0:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   191d4:	65a2      	str	r2, [r4, #88]	; 0x58
   191d6:	e006      	b.n	191e6 <gen_hash_m+0x48>
	switch (u16->val) {
   191d8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   191dc:	33ff      	adds	r3, #255	; 0xff
   191de:	b29b      	uxth	r3, r3
   191e0:	2b04      	cmp	r3, #4
   191e2:	d91e      	bls.n	19222 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   191e4:	2501      	movs	r5, #1
}
   191e6:	4628      	mov	r0, r5
   191e8:	b009      	add	sp, #36	; 0x24
   191ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   191ec:	887b      	ldrh	r3, [r7, #2]
   191ee:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   191f2:	2202      	movs	r2, #2
   191f4:	f10d 010a 	add.w	r1, sp, #10
   191f8:	4620      	mov	r0, r4
   191fa:	f7fe fb25 	bl	17848 <tc_cmac_update>
   191fe:	2800      	cmp	r0, #0
   19200:	d0e6      	beq.n	191d0 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   19202:	2000      	movs	r0, #0
   19204:	9000      	str	r0, [sp, #0]
   19206:	aa03      	add	r2, sp, #12
   19208:	6877      	ldr	r7, [r6, #4]
   1920a:	2313      	movs	r3, #19
   1920c:	4631      	mov	r1, r6
   1920e:	47b8      	blx	r7
		if (len < 0) {
   19210:	1e02      	subs	r2, r0, #0
   19212:	dbdf      	blt.n	191d4 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   19214:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   19216:	4620      	mov	r0, r4
   19218:	f7fe fb16 	bl	17848 <tc_cmac_update>
   1921c:	2800      	cmp	r0, #0
   1921e:	d1e1      	bne.n	191e4 <gen_hash_m+0x46>
   19220:	e7d6      	b.n	191d0 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   19222:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   19226:	2202      	movs	r2, #2
   19228:	f10d 010a 	add.w	r1, sp, #10
   1922c:	4620      	mov	r0, r4
   1922e:	f7fe fb0b 	bl	17848 <tc_cmac_update>
   19232:	2800      	cmp	r0, #0
   19234:	d0cc      	beq.n	191d0 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   19236:	887b      	ldrh	r3, [r7, #2]
   19238:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1923c:	2202      	movs	r2, #2
   1923e:	f10d 010a 	add.w	r1, sp, #10
   19242:	e7e8      	b.n	19216 <gen_hash_m+0x78>

00019244 <bt_addr_le_eq>:
{
   19244:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   19246:	2207      	movs	r2, #7
   19248:	f7fe fbc8 	bl	179dc <memcmp>
}
   1924c:	fab0 f080 	clz	r0, r0
   19250:	0940      	lsrs	r0, r0, #5
   19252:	bd08      	pop	{r3, pc}

00019254 <atomic_or>:
{
   19254:	b510      	push	{r4, lr}
   19256:	4603      	mov	r3, r0
}
   19258:	f3bf 8f5b 	dmb	ish
   1925c:	e853 0f00 	ldrex	r0, [r3]
   19260:	ea40 0201 	orr.w	r2, r0, r1
   19264:	e843 2400 	strex	r4, r2, [r3]
   19268:	2c00      	cmp	r4, #0
   1926a:	d1f7      	bne.n	1925c <atomic_or+0x8>
   1926c:	f3bf 8f5b 	dmb	ish
   19270:	bd10      	pop	{r4, pc}

00019272 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   19272:	2207      	movs	r2, #7
   19274:	f7fe bbc2 	b.w	179fc <memcpy>

00019278 <sc_clear>:
{
   19278:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1927a:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1927e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19280:	4631      	mov	r1, r6
   19282:	7a00      	ldrb	r0, [r0, #8]
   19284:	f7fe fead 	bl	17fe2 <bt_addr_le_is_bonded>
   19288:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1928a:	4631      	mov	r1, r6
   1928c:	f7ec fbc4 	bl	5a18 <find_sc_cfg>
	if (!cfg) {
   19290:	b128      	cbz	r0, 1929e <sc_clear+0x26>
}
   19292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   19296:	220c      	movs	r2, #12
   19298:	2100      	movs	r1, #0
   1929a:	f7fe bbba 	b.w	17a12 <memset>
}
   1929e:	bd70      	pop	{r4, r5, r6, pc}

000192a0 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   192a0:	2a02      	cmp	r2, #2
{
   192a2:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   192a4:	d108      	bne.n	192b8 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   192a6:	2300      	movs	r3, #0
   192a8:	f100 0188 	add.w	r1, r0, #136	; 0x88
   192ac:	461a      	mov	r2, r3
   192ae:	7a00      	ldrb	r0, [r0, #8]
   192b0:	f7ec fc46 	bl	5b40 <sc_save>
}
   192b4:	2002      	movs	r0, #2
   192b6:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   192b8:	f7ff ffde 	bl	19278 <sc_clear>
   192bc:	e7fa      	b.n	192b4 <sc_ccc_cfg_write+0x14>

000192be <read_appearance>:
{
   192be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   192c0:	4615      	mov	r5, r2
   192c2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   192c6:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   192c8:	f7fe fe88 	bl	17fdc <bt_get_appearance>
	if (offset > value_len) {
   192cc:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   192ce:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   192d2:	d80e      	bhi.n	192f2 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   192d4:	f1c6 0402 	rsb	r4, r6, #2
   192d8:	42bc      	cmp	r4, r7
   192da:	bfa8      	it	ge
   192dc:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   192de:	f10d 0306 	add.w	r3, sp, #6
   192e2:	4622      	mov	r2, r4
   192e4:	1999      	adds	r1, r3, r6
   192e6:	4628      	mov	r0, r5
   192e8:	f7fe fb88 	bl	179fc <memcpy>
}
   192ec:	4620      	mov	r0, r4
   192ee:	b003      	add	sp, #12
   192f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   192f2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   192f6:	e7f9      	b.n	192ec <read_appearance+0x2e>

000192f8 <read_name>:
{
   192f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192fc:	4698      	mov	r8, r3
   192fe:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   19302:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   19304:	f7ea fb20 	bl	3948 <bt_get_name>
   19308:	4607      	mov	r7, r0
				 strlen(name));
   1930a:	f7fe fb57 	bl	179bc <strlen>
	if (offset > value_len) {
   1930e:	b283      	uxth	r3, r0
   19310:	42b3      	cmp	r3, r6
   19312:	d30c      	bcc.n	1932e <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   19314:	1b9c      	subs	r4, r3, r6
   19316:	4544      	cmp	r4, r8
   19318:	bfa8      	it	ge
   1931a:	4644      	movge	r4, r8
   1931c:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1931e:	4622      	mov	r2, r4
   19320:	19b9      	adds	r1, r7, r6
   19322:	4628      	mov	r0, r5
   19324:	f7fe fb6a 	bl	179fc <memcpy>
}
   19328:	4620      	mov	r0, r4
   1932a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1932e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   19332:	e7f9      	b.n	19328 <read_name+0x30>

00019334 <cf_read>:
{
   19334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19336:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   19338:	2300      	movs	r3, #0
{
   1933a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1933e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   19342:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   19344:	f7ec fb50 	bl	59e8 <find_cf_cfg>
	if (cfg) {
   19348:	b128      	cbz	r0, 19356 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1934a:	f100 0108 	add.w	r1, r0, #8
   1934e:	2201      	movs	r2, #1
   19350:	a801      	add	r0, sp, #4
   19352:	f7fe fb53 	bl	179fc <memcpy>
	if (offset > value_len) {
   19356:	2e01      	cmp	r6, #1
   19358:	d80d      	bhi.n	19376 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1935a:	f1c6 0401 	rsb	r4, r6, #1
   1935e:	42bc      	cmp	r4, r7
   19360:	bfa8      	it	ge
   19362:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   19364:	ab01      	add	r3, sp, #4
   19366:	4622      	mov	r2, r4
   19368:	1999      	adds	r1, r3, r6
   1936a:	4628      	mov	r0, r5
   1936c:	f7fe fb46 	bl	179fc <memcpy>
}
   19370:	4620      	mov	r0, r4
   19372:	b003      	add	sp, #12
   19374:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19376:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1937a:	e7f9      	b.n	19370 <cf_read+0x3c>

0001937c <bt_gatt_attr_read_service>:
{
   1937c:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   1937e:	68c9      	ldr	r1, [r1, #12]
{
   19380:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   19382:	780a      	ldrb	r2, [r1, #0]
{
   19384:	461c      	mov	r4, r3
   19386:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   1938a:	b992      	cbnz	r2, 193b2 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1938c:	884a      	ldrh	r2, [r1, #2]
   1938e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   19392:	2b02      	cmp	r3, #2
   19394:	d818      	bhi.n	193c8 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   19396:	f1c3 0202 	rsb	r2, r3, #2
   1939a:	4294      	cmp	r4, r2
   1939c:	bfa8      	it	ge
   1939e:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   193a0:	4622      	mov	r2, r4
   193a2:	f10d 0106 	add.w	r1, sp, #6
   193a6:	4419      	add	r1, r3
   193a8:	f7fe fb28 	bl	179fc <memcpy>
}
   193ac:	4620      	mov	r0, r4
   193ae:	b002      	add	sp, #8
   193b0:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   193b2:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   193b4:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   193b8:	d806      	bhi.n	193c8 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   193ba:	f1c3 0210 	rsb	r2, r3, #16
   193be:	4294      	cmp	r4, r2
   193c0:	bfa8      	it	ge
   193c2:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   193c4:	4622      	mov	r2, r4
   193c6:	e7ee      	b.n	193a6 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   193c8:	f06f 0406 	mvn.w	r4, #6
   193cc:	e7ee      	b.n	193ac <bt_gatt_attr_read_service+0x30>

000193ce <bt_gatt_attr_read_ccc>:
{
   193ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   193d0:	68c9      	ldr	r1, [r1, #12]
{
   193d2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   193d6:	4615      	mov	r5, r2
   193d8:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   193da:	f7ec fb2d 	bl	5a38 <find_ccc_cfg>
	if (cfg) {
   193de:	b100      	cbz	r0, 193e2 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   193e0:	8900      	ldrh	r0, [r0, #8]
   193e2:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   193e6:	2e02      	cmp	r6, #2
   193e8:	d80e      	bhi.n	19408 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   193ea:	f1c6 0402 	rsb	r4, r6, #2
   193ee:	42bc      	cmp	r4, r7
   193f0:	bfa8      	it	ge
   193f2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   193f4:	f10d 0306 	add.w	r3, sp, #6
   193f8:	4622      	mov	r2, r4
   193fa:	1999      	adds	r1, r3, r6
   193fc:	4628      	mov	r0, r5
   193fe:	f7fe fafd 	bl	179fc <memcpy>
}
   19402:	4620      	mov	r0, r4
   19404:	b003      	add	sp, #12
   19406:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19408:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1940c:	e7f9      	b.n	19402 <bt_gatt_attr_read_ccc+0x34>

0001940e <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1940e:	2101      	movs	r1, #1
   19410:	300c      	adds	r0, #12
   19412:	f7ff bf1f 	b.w	19254 <atomic_or>

00019416 <cf_write>:
{
   19416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1941a:	461f      	mov	r7, r3
   1941c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   19420:	2b01      	cmp	r3, #1
{
   19422:	4606      	mov	r6, r0
   19424:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   19426:	d82c      	bhi.n	19482 <cf_write+0x6c>
	if (offset + len > sizeof(cfg->data)) {
   19428:	443b      	add	r3, r7
   1942a:	2b01      	cmp	r3, #1
   1942c:	463d      	mov	r5, r7
   1942e:	dc2b      	bgt.n	19488 <cf_write+0x72>
	cfg = find_cf_cfg(conn);
   19430:	f7ec fada 	bl	59e8 <find_cf_cfg>
	if (!cfg) {
   19434:	4604      	mov	r4, r0
   19436:	b918      	cbnz	r0, 19440 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   19438:	f7ec fad6 	bl	59e8 <find_cf_cfg>
	if (!cfg) {
   1943c:	4604      	mov	r4, r0
   1943e:	b330      	cbz	r0, 1948e <cf_write+0x78>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19440:	b197      	cbz	r7, 19468 <cf_write+0x52>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19442:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   19444:	f898 2000 	ldrb.w	r2, [r8]
   19448:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1944a:	fa21 f003 	lsr.w	r0, r1, r3
   1944e:	07c7      	lsls	r7, r0, #31
   19450:	d503      	bpl.n	1945a <cf_write+0x44>
		    !(value[i / 8] & BIT(i % 8))) {
   19452:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19456:	07c0      	lsls	r0, r0, #31
   19458:	d51c      	bpl.n	19494 <cf_write+0x7e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1945a:	3301      	adds	r3, #1
   1945c:	2b03      	cmp	r3, #3
   1945e:	d1f4      	bne.n	1944a <cf_write+0x34>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   19460:	f002 0207 	and.w	r2, r2, #7
   19464:	4311      	orrs	r1, r2
   19466:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19468:	1c60      	adds	r0, r4, #1
   1946a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1946e:	f7ff ff00 	bl	19272 <bt_addr_le_copy>
	cfg->id = conn->id;
   19472:	7a33      	ldrb	r3, [r6, #8]
   19474:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   19476:	4620      	mov	r0, r4
   19478:	f7ff ffc9 	bl	1940e <set_change_aware_no_store.constprop.0.isra.0>
}
   1947c:	4628      	mov	r0, r5
   1947e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19482:	f06f 0506 	mvn.w	r5, #6
   19486:	e7f9      	b.n	1947c <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19488:	f06f 050c 	mvn.w	r5, #12
   1948c:	e7f6      	b.n	1947c <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1948e:	f06f 0510 	mvn.w	r5, #16
   19492:	e7f3      	b.n	1947c <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   19494:	f06f 0512 	mvn.w	r5, #18
   19498:	e7f0      	b.n	1947c <cf_write+0x66>

0001949a <sc_restore_rsp>:
{
   1949a:	b538      	push	{r3, r4, r5, lr}
   1949c:	4604      	mov	r4, r0
   1949e:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   194a0:	f7ff fe34 	bl	1910c <bt_att_fixed_chan_only>
   194a4:	b140      	cbz	r0, 194b8 <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   194a6:	4620      	mov	r0, r4
   194a8:	f7ec fa9e 	bl	59e8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   194ac:	b120      	cbz	r0, 194b8 <sc_restore_rsp+0x1e>
   194ae:	7a03      	ldrb	r3, [r0, #8]
   194b0:	07db      	lsls	r3, r3, #31
   194b2:	d501      	bpl.n	194b8 <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   194b4:	f7ff ffab 	bl	1940e <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   194b8:	b965      	cbnz	r5, 194d4 <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   194ba:	7a20      	ldrb	r0, [r4, #8]
   194bc:	f104 0188 	add.w	r1, r4, #136	; 0x88
   194c0:	f7ec faaa 	bl	5a18 <find_sc_cfg>
		if (sc_cfg) {
   194c4:	b130      	cbz	r0, 194d4 <sc_restore_rsp+0x3a>
	memset(&cfg->data, 0, sizeof(cfg->data));
   194c6:	4629      	mov	r1, r5
   194c8:	2204      	movs	r2, #4
}
   194ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   194ce:	3008      	adds	r0, #8
   194d0:	f7fe ba9f 	b.w	17a12 <memset>
}
   194d4:	bd38      	pop	{r3, r4, r5, pc}

000194d6 <bt_gatt_attr_read>:
{
   194d6:	b510      	push	{r4, lr}
   194d8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   194dc:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   194e0:	42a1      	cmp	r1, r4
{
   194e2:	4610      	mov	r0, r2
	if (offset > value_len) {
   194e4:	d80b      	bhi.n	194fe <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   194e6:	1a64      	subs	r4, r4, r1
   194e8:	429c      	cmp	r4, r3
   194ea:	bfa8      	it	ge
   194ec:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   194ee:	9b03      	ldr	r3, [sp, #12]
   194f0:	b2a4      	uxth	r4, r4
   194f2:	4622      	mov	r2, r4
   194f4:	4419      	add	r1, r3
   194f6:	f7fe fa81 	bl	179fc <memcpy>
}
   194fa:	4620      	mov	r0, r4
   194fc:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   194fe:	f06f 0406 	mvn.w	r4, #6
   19502:	e7fa      	b.n	194fa <bt_gatt_attr_read+0x24>

00019504 <bt_gatt_attr_value_handle>:
{
   19504:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   19506:	4604      	mov	r4, r0
   19508:	b910      	cbnz	r0, 19510 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1950a:	2000      	movs	r0, #0
}
   1950c:	b002      	add	sp, #8
   1950e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   19510:	2300      	movs	r3, #0
   19512:	f88d 3004 	strb.w	r3, [sp, #4]
   19516:	6800      	ldr	r0, [r0, #0]
   19518:	f642 0303 	movw	r3, #10243	; 0x2803
   1951c:	a901      	add	r1, sp, #4
   1951e:	f8ad 3006 	strh.w	r3, [sp, #6]
   19522:	f7fe fa94 	bl	17a4e <bt_uuid_cmp>
   19526:	2800      	cmp	r0, #0
   19528:	d1ef      	bne.n	1950a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1952a:	68e3      	ldr	r3, [r4, #12]
   1952c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1952e:	2800      	cmp	r0, #0
   19530:	d1ec      	bne.n	1950c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   19532:	4620      	mov	r0, r4
   19534:	f7ec fc04 	bl	5d40 <bt_gatt_attr_get_handle>
   19538:	3001      	adds	r0, #1
   1953a:	b280      	uxth	r0, r0
	return handle;
   1953c:	e7e6      	b.n	1950c <bt_gatt_attr_value_handle+0x8>

0001953e <bt_gatt_attr_read_chrc>:
{
   1953e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   19540:	68cc      	ldr	r4, [r1, #12]
{
   19542:	b087      	sub	sp, #28
   19544:	4608      	mov	r0, r1
   19546:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   19548:	79a3      	ldrb	r3, [r4, #6]
   1954a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1954e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   19552:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   19554:	f7ff ffd6 	bl	19504 <bt_gatt_attr_value_handle>
   19558:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1955c:	6821      	ldr	r1, [r4, #0]
   1955e:	780b      	ldrb	r3, [r1, #0]
   19560:	b99b      	cbnz	r3, 1958a <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   19562:	884b      	ldrh	r3, [r1, #2]
   19564:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   19568:	2405      	movs	r4, #5
	if (offset > value_len) {
   1956a:	42b4      	cmp	r4, r6
   1956c:	d315      	bcc.n	1959a <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1956e:	1ba4      	subs	r4, r4, r6
   19570:	42bc      	cmp	r4, r7
   19572:	bfa8      	it	ge
   19574:	463c      	movge	r4, r7
   19576:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   19578:	ab01      	add	r3, sp, #4
   1957a:	4622      	mov	r2, r4
   1957c:	1999      	adds	r1, r3, r6
   1957e:	4628      	mov	r0, r5
   19580:	f7fe fa3c 	bl	179fc <memcpy>
}
   19584:	4620      	mov	r0, r4
   19586:	b007      	add	sp, #28
   19588:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1958a:	2210      	movs	r2, #16
   1958c:	3101      	adds	r1, #1
   1958e:	f10d 0007 	add.w	r0, sp, #7
   19592:	f7fe fa33 	bl	179fc <memcpy>
		value_len += 16U;
   19596:	2413      	movs	r4, #19
   19598:	e7e7      	b.n	1956a <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1959a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1959e:	e7f1      	b.n	19584 <bt_gatt_attr_read_chrc+0x46>

000195a0 <bt_gatt_foreach_attr>:
{
   195a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   195a2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   195a6:	2300      	movs	r3, #0
   195a8:	9300      	str	r3, [sp, #0]
   195aa:	461a      	mov	r2, r3
   195ac:	f7ec fbf8 	bl	5da0 <bt_gatt_foreach_attr_type>
}
   195b0:	b005      	add	sp, #20
   195b2:	f85d fb04 	ldr.w	pc, [sp], #4

000195b6 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   195b6:	f012 0f01 	tst.w	r2, #1
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   195ba:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   195bc:	d004      	beq.n	195c8 <bt_gatt_check_perm+0x12>
   195be:	f013 0f95 	tst.w	r3, #149	; 0x95
   195c2:	d010      	beq.n	195e6 <bt_gatt_check_perm+0x30>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   195c4:	6848      	ldr	r0, [r1, #4]
   195c6:	b170      	cbz	r0, 195e6 <bt_gatt_check_perm+0x30>
	if ((mask & BT_GATT_PERM_WRITE) &&
   195c8:	f012 0f02 	tst.w	r2, #2
   195cc:	d004      	beq.n	195d8 <bt_gatt_check_perm+0x22>
   195ce:	f413 7f95 	tst.w	r3, #298	; 0x12a
   195d2:	d00a      	beq.n	195ea <bt_gatt_check_perm+0x34>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   195d4:	6889      	ldr	r1, [r1, #8]
   195d6:	b141      	cbz	r1, 195ea <bt_gatt_check_perm+0x34>
	mask &= attr->perm;
   195d8:	401a      	ands	r2, r3
	return 0;
   195da:	f012 0f3c 	tst.w	r2, #60	; 0x3c
   195de:	bf14      	ite	ne
   195e0:	2005      	movne	r0, #5
   195e2:	2000      	moveq	r0, #0
   195e4:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   195e6:	2002      	movs	r0, #2
   195e8:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   195ea:	2003      	movs	r0, #3
}
   195ec:	4770      	bx	lr

000195ee <bt_gatt_is_subscribed>:
{
   195ee:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   195f2:	7a83      	ldrb	r3, [r0, #10]
   195f4:	2b07      	cmp	r3, #7
{
   195f6:	4605      	mov	r5, r0
   195f8:	460c      	mov	r4, r1
   195fa:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   195fc:	d110      	bne.n	19620 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   195fe:	2300      	movs	r3, #0
   19600:	f88d 300c 	strb.w	r3, [sp, #12]
   19604:	6820      	ldr	r0, [r4, #0]
   19606:	f642 0303 	movw	r3, #10243	; 0x2803
   1960a:	a903      	add	r1, sp, #12
   1960c:	f8ad 300e 	strh.w	r3, [sp, #14]
   19610:	f7fe fa1d 	bl	17a4e <bt_uuid_cmp>
   19614:	b960      	cbnz	r0, 19630 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   19616:	68e3      	ldr	r3, [r4, #12]
   19618:	799b      	ldrb	r3, [r3, #6]
   1961a:	f013 0f30 	tst.w	r3, #48	; 0x30
   1961e:	d103      	bne.n	19628 <bt_gatt_is_subscribed+0x3a>
		return false;
   19620:	2000      	movs	r0, #0
}
   19622:	b004      	add	sp, #16
   19624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   19628:	4620      	mov	r0, r4
   1962a:	f7ec fc95 	bl	5f58 <bt_gatt_attr_next>
   1962e:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   19630:	2300      	movs	r3, #0
   19632:	6820      	ldr	r0, [r4, #0]
   19634:	f88d 300c 	strb.w	r3, [sp, #12]
   19638:	a903      	add	r1, sp, #12
   1963a:	f642 1302 	movw	r3, #10498	; 0x2902
   1963e:	f8ad 300e 	strh.w	r3, [sp, #14]
   19642:	f7fe fa04 	bl	17a4e <bt_uuid_cmp>
   19646:	b118      	cbz	r0, 19650 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   19648:	4620      	mov	r0, r4
   1964a:	f7ec fc85 	bl	5f58 <bt_gatt_attr_next>
   1964e:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   19650:	2600      	movs	r6, #0
   19652:	f642 1802 	movw	r8, #10498	; 0x2902
   19656:	6820      	ldr	r0, [r4, #0]
   19658:	f88d 6000 	strb.w	r6, [sp]
   1965c:	4669      	mov	r1, sp
   1965e:	f8ad 8002 	strh.w	r8, [sp, #2]
   19662:	f7fe f9f4 	bl	17a4e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19666:	b9d8      	cbnz	r0, 196a0 <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   19668:	2300      	movs	r3, #0
   1966a:	6820      	ldr	r0, [r4, #0]
   1966c:	f88d 300c 	strb.w	r3, [sp, #12]
   19670:	a903      	add	r1, sp, #12
   19672:	f642 1302 	movw	r3, #10498	; 0x2902
   19676:	f8ad 300e 	strh.w	r3, [sp, #14]
   1967a:	f7fe f9e8 	bl	17a4e <bt_uuid_cmp>
   1967e:	2800      	cmp	r0, #0
   19680:	d1ce      	bne.n	19620 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   19682:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   19684:	4622      	mov	r2, r4
   19686:	4628      	mov	r0, r5
   19688:	f812 1b01 	ldrb.w	r1, [r2], #1
   1968c:	f7fe ff3c 	bl	18508 <bt_conn_is_peer_addr_le>
   19690:	2800      	cmp	r0, #0
   19692:	d0c5      	beq.n	19620 <bt_gatt_is_subscribed+0x32>
   19694:	8923      	ldrh	r3, [r4, #8]
   19696:	421f      	tst	r7, r3
   19698:	bf14      	ite	ne
   1969a:	2001      	movne	r0, #1
   1969c:	2000      	moveq	r0, #0
   1969e:	e7c0      	b.n	19622 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   196a0:	6820      	ldr	r0, [r4, #0]
   196a2:	f88d 6004 	strb.w	r6, [sp, #4]
   196a6:	f642 0303 	movw	r3, #10243	; 0x2803
   196aa:	a901      	add	r1, sp, #4
   196ac:	f8ad 3006 	strh.w	r3, [sp, #6]
   196b0:	f7fe f9cd 	bl	17a4e <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   196b4:	2800      	cmp	r0, #0
   196b6:	d0d7      	beq.n	19668 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   196b8:	6820      	ldr	r0, [r4, #0]
   196ba:	f88d 6008 	strb.w	r6, [sp, #8]
   196be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   196c2:	a902      	add	r1, sp, #8
   196c4:	f8ad 300a 	strh.w	r3, [sp, #10]
   196c8:	f7fe f9c1 	bl	17a4e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   196cc:	2800      	cmp	r0, #0
   196ce:	d0cb      	beq.n	19668 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   196d0:	6820      	ldr	r0, [r4, #0]
   196d2:	f88d 600c 	strb.w	r6, [sp, #12]
   196d6:	f642 0301 	movw	r3, #10241	; 0x2801
   196da:	a903      	add	r1, sp, #12
   196dc:	f8ad 300e 	strh.w	r3, [sp, #14]
   196e0:	f7fe f9b5 	bl	17a4e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   196e4:	2800      	cmp	r0, #0
   196e6:	d0bf      	beq.n	19668 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   196e8:	4620      	mov	r0, r4
   196ea:	f7ec fc35 	bl	5f58 <bt_gatt_attr_next>
		if (!attr) {
   196ee:	4604      	mov	r4, r0
   196f0:	2800      	cmp	r0, #0
   196f2:	d1b0      	bne.n	19656 <bt_gatt_is_subscribed+0x68>
   196f4:	e794      	b.n	19620 <bt_gatt_is_subscribed+0x32>

000196f6 <gatt_notify>:
{
   196f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   196fa:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   196fc:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   196fe:	8a4b      	ldrh	r3, [r1, #18]
   19700:	f003 0314 	and.w	r3, r3, #20
{
   19704:	4607      	mov	r7, r0
   19706:	4614      	mov	r4, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   19708:	bb4b      	cbnz	r3, 1975e <gatt_notify+0x68>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1970a:	2201      	movs	r2, #1
   1970c:	f7ff ff6f 	bl	195ee <bt_gatt_is_subscribed>
   19710:	b348      	cbz	r0, 19766 <gatt_notify+0x70>
				sizeof(*nfy) + params->len);
   19712:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   19714:	211b      	movs	r1, #27
   19716:	3202      	adds	r2, #2
   19718:	4638      	mov	r0, r7
   1971a:	f7ff fc33 	bl	18f84 <bt_att_create_pdu>
	if (!buf) {
   1971e:	4605      	mov	r5, r0
   19720:	b320      	cbz	r0, 1976c <gatt_notify+0x76>
   19722:	f100 090c 	add.w	r9, r0, #12
   19726:	2102      	movs	r1, #2
   19728:	4648      	mov	r0, r9
   1972a:	f000 f8d2 	bl	198d2 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1972e:	4606      	mov	r6, r0
   19730:	4648      	mov	r0, r9
   19732:	f826 8b02 	strh.w	r8, [r6], #2
   19736:	89a1      	ldrh	r1, [r4, #12]
   19738:	f000 f8cb 	bl	198d2 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1973c:	89a2      	ldrh	r2, [r4, #12]
   1973e:	68a1      	ldr	r1, [r4, #8]
   19740:	4630      	mov	r0, r6
   19742:	f7fe f95b 	bl	179fc <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   19746:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1974a:	4628      	mov	r0, r5
   1974c:	2301      	movs	r3, #1
   1974e:	f7ff fcfb 	bl	19148 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   19752:	4629      	mov	r1, r5
   19754:	4638      	mov	r0, r7
}
   19756:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1975a:	f7ff bc84 	b.w	19066 <bt_att_send>
		return -EPERM;
   1975e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   19766:	f06f 0015 	mvn.w	r0, #21
   1976a:	e7fa      	b.n	19762 <gatt_notify+0x6c>
		return -ENOMEM;
   1976c:	f06f 000b 	mvn.w	r0, #11
   19770:	e7f7      	b.n	19762 <gatt_notify+0x6c>

00019772 <bt_gatt_change_aware>:
{
   19772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19776:	4605      	mov	r5, r0
   19778:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   1977a:	f7ec f935 	bl	59e8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1977e:	4604      	mov	r4, r0
   19780:	b308      	cbz	r0, 197c6 <bt_gatt_change_aware+0x54>
   19782:	7a03      	ldrb	r3, [r0, #8]
   19784:	07da      	lsls	r2, r3, #31
   19786:	d51e      	bpl.n	197c6 <bt_gatt_change_aware+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19788:	f3bf 8f5b 	dmb	ish
   1978c:	68c6      	ldr	r6, [r0, #12]
   1978e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   19792:	f016 0601 	ands.w	r6, r6, #1
   19796:	f100 080c 	add.w	r8, r0, #12
   1979a:	d114      	bne.n	197c6 <bt_gatt_change_aware+0x54>
	if (!req) {
   1979c:	b1a7      	cbz	r7, 197c8 <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1979e:	f3bf 8f5b 	dmb	ish
   197a2:	e858 3f00 	ldrex	r3, [r8]
   197a6:	f023 0202 	bic.w	r2, r3, #2
   197aa:	e848 2100 	strex	r1, r2, [r8]
   197ae:	2900      	cmp	r1, #0
   197b0:	d1f7      	bne.n	197a2 <bt_gatt_change_aware+0x30>
   197b2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   197b6:	079b      	lsls	r3, r3, #30
		bt_att_clear_out_of_sync_sent(conn);
   197b8:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   197ba:	d508      	bpl.n	197ce <bt_gatt_change_aware+0x5c>
		bt_att_clear_out_of_sync_sent(conn);
   197bc:	f7ff fca8 	bl	19110 <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   197c0:	4620      	mov	r0, r4
   197c2:	f7ff fe24 	bl	1940e <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   197c6:	2601      	movs	r6, #1
}
   197c8:	4630      	mov	r0, r6
   197ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   197ce:	f7ff fc9d 	bl	1910c <bt_att_fixed_chan_only>
   197d2:	2800      	cmp	r0, #0
   197d4:	d0f8      	beq.n	197c8 <bt_gatt_change_aware+0x56>
   197d6:	4628      	mov	r0, r5
   197d8:	f7ff fcaa 	bl	19130 <bt_att_out_of_sync_sent_on_fixed>
   197dc:	2800      	cmp	r0, #0
   197de:	d0f3      	beq.n	197c8 <bt_gatt_change_aware+0x56>
   197e0:	f3bf 8f5b 	dmb	ish
   197e4:	e858 3f00 	ldrex	r3, [r8]
   197e8:	f023 0302 	bic.w	r3, r3, #2
   197ec:	e848 3200 	strex	r2, r3, [r8]
   197f0:	2a00      	cmp	r2, #0
   197f2:	d1f7      	bne.n	197e4 <bt_gatt_change_aware+0x72>
   197f4:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   197f8:	4628      	mov	r0, r5
   197fa:	e7df      	b.n	197bc <bt_gatt_change_aware+0x4a>

000197fc <bt_smp_recv>:
{
   197fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   197fe:	2100      	movs	r1, #0
   19800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   19808:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1980a:	4608      	mov	r0, r1
   1980c:	f7fe ff11 	bl	18632 <bt_l2cap_create_pdu_timeout>
   19810:	f100 060c 	add.w	r6, r0, #12
   19814:	4604      	mov	r4, r0
   19816:	2101      	movs	r1, #1
   19818:	4630      	mov	r0, r6
   1981a:	f000 f85a 	bl	198d2 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1981e:	2505      	movs	r5, #5
   19820:	7005      	strb	r5, [r0, #0]
   19822:	2101      	movs	r1, #1
   19824:	4630      	mov	r0, r6
   19826:	f000 f854 	bl	198d2 <net_buf_simple_add>
   1982a:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1982c:	7005      	strb	r5, [r0, #0]
   1982e:	4622      	mov	r2, r4
   19830:	9300      	str	r3, [sp, #0]
   19832:	2106      	movs	r1, #6
   19834:	4638      	mov	r0, r7
   19836:	f7fe feff 	bl	18638 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1983a:	b110      	cbz	r0, 19842 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1983c:	4620      	mov	r0, r4
   1983e:	f7f9 fd5b 	bl	132f8 <net_buf_unref>
}
   19842:	2000      	movs	r0, #0
   19844:	b003      	add	sp, #12
   19846:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019848 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   19848:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1984c:	4770      	bx	lr

0001984e <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1984e:	2000      	movs	r0, #0
   19850:	4770      	bx	lr

00019852 <fixed_data_unref>:
}
   19852:	4770      	bx	lr

00019854 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19854:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   19856:	6849      	ldr	r1, [r1, #4]
   19858:	6809      	ldr	r1, [r1, #0]
   1985a:	f7f9 bcbb 	b.w	131d4 <net_buf_alloc_len>

0001985e <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   1985e:	f7fc bac3 	b.w	15de8 <z_impl_k_queue_get>

00019862 <net_buf_put>:
	k_fifo_put(fifo, buf);
   19862:	f000 bf57 	b.w	1a714 <k_queue_append>

00019866 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   19866:	7a02      	ldrb	r2, [r0, #8]
   19868:	3201      	adds	r2, #1
   1986a:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1986c:	4770      	bx	lr

0001986e <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1986e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   19870:	4618      	mov	r0, r3
   19872:	685b      	ldr	r3, [r3, #4]
   19874:	2b00      	cmp	r3, #0
   19876:	d1fb      	bne.n	19870 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   19878:	4770      	bx	lr

0001987a <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1987a:	6842      	ldr	r2, [r0, #4]
{
   1987c:	b510      	push	{r4, lr}
	if (parent->frags) {
   1987e:	b12a      	cbz	r2, 1988c <net_buf_frag_insert+0x12>
   19880:	460b      	mov	r3, r1
	while (buf->frags) {
   19882:	461c      	mov	r4, r3
   19884:	685b      	ldr	r3, [r3, #4]
   19886:	2b00      	cmp	r3, #0
   19888:	d1fb      	bne.n	19882 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1988a:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1988c:	6041      	str	r1, [r0, #4]
}
   1988e:	bd10      	pop	{r4, pc}

00019890 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   19890:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   19892:	4604      	mov	r4, r0
   19894:	b920      	cbnz	r0, 198a0 <net_buf_frag_add+0x10>
	buf->ref++;
   19896:	7a0b      	ldrb	r3, [r1, #8]
   19898:	3301      	adds	r3, #1
   1989a:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   1989c:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1989e:	bd10      	pop	{r4, pc}
   198a0:	4603      	mov	r3, r0
	while (buf->frags) {
   198a2:	4618      	mov	r0, r3
   198a4:	685b      	ldr	r3, [r3, #4]
   198a6:	2b00      	cmp	r3, #0
   198a8:	d1fb      	bne.n	198a2 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   198aa:	f7ff ffe6 	bl	1987a <net_buf_frag_insert>
   198ae:	4620      	mov	r0, r4
   198b0:	e7f5      	b.n	1989e <net_buf_frag_add+0xe>

000198b2 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   198b2:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   198b4:	b108      	cbz	r0, 198ba <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   198b6:	684b      	ldr	r3, [r1, #4]
   198b8:	6043      	str	r3, [r0, #4]
	}

	next_frag = frag->frags;
   198ba:	684c      	ldr	r4, [r1, #4]

	frag->frags = NULL;
   198bc:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   198be:	4608      	mov	r0, r1
	frag->frags = NULL;
   198c0:	604b      	str	r3, [r1, #4]
	net_buf_unref(frag);
   198c2:	f7f9 fd19 	bl	132f8 <net_buf_unref>
#endif

	return next_frag;
}
   198c6:	4620      	mov	r0, r4
   198c8:	bd10      	pop	{r4, pc}

000198ca <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   198ca:	6883      	ldr	r3, [r0, #8]
   198cc:	440b      	add	r3, r1
   198ce:	6003      	str	r3, [r0, #0]
}
   198d0:	4770      	bx	lr

000198d2 <net_buf_simple_add>:
	return buf->data + buf->len;
   198d2:	8883      	ldrh	r3, [r0, #4]
   198d4:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   198d6:	4419      	add	r1, r3
   198d8:	8081      	strh	r1, [r0, #4]
	return tail;
}
   198da:	18d0      	adds	r0, r2, r3
   198dc:	4770      	bx	lr

000198de <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   198de:	b430      	push	{r4, r5}
   198e0:	8884      	ldrh	r4, [r0, #4]
   198e2:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   198e4:	18a3      	adds	r3, r4, r2
   198e6:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   198e8:	1928      	adds	r0, r5, r4
}
   198ea:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   198ec:	f7fe b886 	b.w	179fc <memcpy>

000198f0 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   198f0:	b510      	push	{r4, lr}
   198f2:	8883      	ldrh	r3, [r0, #4]
   198f4:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   198f6:	1c5c      	adds	r4, r3, #1
   198f8:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   198fa:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   198fc:	18d0      	adds	r0, r2, r3
   198fe:	bd10      	pop	{r4, pc}

00019900 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   19900:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   19902:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   19904:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   19906:	1a40      	subs	r0, r0, r1
	buf->len += len;
   19908:	4411      	add	r1, r2
	buf->data -= len;
   1990a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1990c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1990e:	4770      	bx	lr

00019910 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   19910:	8882      	ldrh	r2, [r0, #4]
   19912:	1a52      	subs	r2, r2, r1
{
   19914:	4603      	mov	r3, r0
	buf->len -= len;
   19916:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   19918:	6800      	ldr	r0, [r0, #0]
   1991a:	4408      	add	r0, r1
   1991c:	6018      	str	r0, [r3, #0]
}
   1991e:	4770      	bx	lr

00019920 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   19920:	4603      	mov	r3, r0
	void *data = buf->data;
   19922:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   19924:	889a      	ldrh	r2, [r3, #4]
   19926:	1a52      	subs	r2, r2, r1
	buf->data += len;
   19928:	4401      	add	r1, r0
	buf->len -= len;
   1992a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1992c:	6019      	str	r1, [r3, #0]

	return data;
}
   1992e:	4770      	bx	lr

00019930 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   19930:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   19932:	6803      	ldr	r3, [r0, #0]
   19934:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   19936:	2102      	movs	r1, #2
   19938:	f7ff ffea 	bl	19910 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1993c:	4620      	mov	r0, r4
   1993e:	bd10      	pop	{r4, pc}

00019940 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   19940:	6802      	ldr	r2, [r0, #0]
   19942:	6880      	ldr	r0, [r0, #8]
}
   19944:	1a10      	subs	r0, r2, r0
   19946:	4770      	bx	lr

00019948 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   19948:	8883      	ldrh	r3, [r0, #4]
   1994a:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   1994c:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1994e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   19950:	6803      	ldr	r3, [r0, #0]
   19952:	1a5b      	subs	r3, r3, r1
}
   19954:	1ad0      	subs	r0, r2, r3
   19956:	4770      	bx	lr

00019958 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   19958:	6903      	ldr	r3, [r0, #16]
   1995a:	b2c9      	uxtb	r1, r1
   1995c:	220c      	movs	r2, #12
   1995e:	fb01 3302 	mla	r3, r1, r2, r3
   19962:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   19964:	f000 0007 	and.w	r0, r0, #7
   19968:	4770      	bx	lr

0001996a <set_on_state>:
	__asm__ volatile(
   1996a:	f04f 0320 	mov.w	r3, #32
   1996e:	f3ef 8211 	mrs	r2, BASEPRI
   19972:	f383 8812 	msr	BASEPRI_MAX, r3
   19976:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1997a:	6803      	ldr	r3, [r0, #0]
   1997c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19980:	f043 0302 	orr.w	r3, r3, #2
   19984:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   19986:	f382 8811 	msr	BASEPRI, r2
   1998a:	f3bf 8f6f 	isb	sy
}
   1998e:	4770      	bx	lr

00019990 <stop>:
{
   19990:	b570      	push	{r4, r5, r6, lr}
   19992:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   19994:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   19996:	f04f 0420 	mov.w	r4, #32
   1999a:	f3ef 8511 	mrs	r5, BASEPRI
   1999e:	f384 8812 	msr	BASEPRI_MAX, r4
   199a2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   199a6:	260c      	movs	r6, #12
   199a8:	fb06 3401 	mla	r4, r6, r1, r3
   199ac:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   199ae:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   199b2:	d008      	beq.n	199c6 <stop+0x36>
   199b4:	42a2      	cmp	r2, r4
   199b6:	d006      	beq.n	199c6 <stop+0x36>
	__asm__ volatile(
   199b8:	f385 8811 	msr	BASEPRI, r5
   199bc:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   199c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   199c4:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   199c6:	fb06 3301 	mla	r3, r6, r1, r3
   199ca:	2201      	movs	r2, #1
   199cc:	641a      	str	r2, [r3, #64]	; 0x40
   199ce:	f385 8811 	msr	BASEPRI, r5
   199d2:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   199d6:	6843      	ldr	r3, [r0, #4]
   199d8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   199dc:	685b      	ldr	r3, [r3, #4]
   199de:	4798      	blx	r3
	return 0;
   199e0:	2000      	movs	r0, #0
   199e2:	e7ef      	b.n	199c4 <stop+0x34>

000199e4 <api_stop>:
	return stop(dev, subsys, CTX_API);
   199e4:	2280      	movs	r2, #128	; 0x80
   199e6:	f7ff bfd3 	b.w	19990 <stop>

000199ea <async_start>:
{
   199ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   199ec:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   199ee:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   199f0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   199f2:	f04f 0520 	mov.w	r5, #32
   199f6:	f3ef 8611 	mrs	r6, BASEPRI
   199fa:	f385 8812 	msr	BASEPRI_MAX, r5
   199fe:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19a02:	250c      	movs	r5, #12
   19a04:	fb05 4401 	mla	r4, r5, r1, r4
   19a08:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   19a0a:	f005 0c07 	and.w	ip, r5, #7
   19a0e:	f1bc 0f01 	cmp.w	ip, #1
   19a12:	d10c      	bne.n	19a2e <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   19a14:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   19a16:	f386 8811 	msr	BASEPRI, r6
   19a1a:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   19a1e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   19a22:	6843      	ldr	r3, [r0, #4]
   19a24:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   19a28:	4798      	blx	r3
	return 0;
   19a2a:	2000      	movs	r0, #0
}
   19a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   19a2e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   19a32:	42af      	cmp	r7, r5
   19a34:	f386 8811 	msr	BASEPRI, r6
   19a38:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   19a3c:	bf0c      	ite	eq
   19a3e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   19a42:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   19a46:	e7f1      	b.n	19a2c <async_start+0x42>

00019a48 <api_start>:
{
   19a48:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   19a4a:	2480      	movs	r4, #128	; 0x80
   19a4c:	9400      	str	r4, [sp, #0]
   19a4e:	f7ff ffcc 	bl	199ea <async_start>
}
   19a52:	b002      	add	sp, #8
   19a54:	bd10      	pop	{r4, pc}

00019a56 <onoff_started_callback>:
{
   19a56:	b410      	push	{r4}
	return &data->mgr[type];
   19a58:	6900      	ldr	r0, [r0, #16]
   19a5a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   19a5c:	241c      	movs	r4, #28
   19a5e:	fb03 0004 	mla	r0, r3, r4, r0
   19a62:	2100      	movs	r1, #0
}
   19a64:	bc10      	pop	{r4}
	notify(mgr, 0);
   19a66:	4710      	bx	r2

00019a68 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   19a68:	2000      	movs	r0, #0
   19a6a:	f000 bc65 	b.w	1a338 <nrfx_clock_stop>

00019a6e <blocking_start_callback>:
{
   19a6e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   19a70:	f7fc b9ee 	b.w	15e50 <z_impl_k_sem_give>

00019a74 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   19a74:	2000      	movs	r0, #0
   19a76:	4770      	bx	lr

00019a78 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   19a78:	b538      	push	{r3, r4, r5, lr}
   19a7a:	460c      	mov	r4, r1
   19a7c:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   19a7e:	f7e9 ff57 	bl	3930 <bt_is_ready>
   19a82:	b128      	cbz	r0, 19a90 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   19a84:	4629      	mov	r1, r5
   19a86:	4620      	mov	r0, r4
}
   19a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   19a8c:	f7e9 b9fe 	b.w	2e8c <bt_hci_le_rand>
}
   19a90:	f06f 000a 	mvn.w	r0, #10
   19a94:	bd38      	pop	{r3, r4, r5, pc}

00019a96 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19a96:	6843      	ldr	r3, [r0, #4]
   19a98:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   19a9a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   19a9e:	600b      	str	r3, [r1, #0]
}
   19aa0:	2000      	movs	r0, #0
   19aa2:	4770      	bx	lr

00019aa4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19aa4:	6843      	ldr	r3, [r0, #4]
   19aa6:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   19aa8:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   19aac:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   19ab0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   19ab4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   19ab8:	2000      	movs	r0, #0
   19aba:	4770      	bx	lr

00019abc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19abc:	6843      	ldr	r3, [r0, #4]
   19abe:	685b      	ldr	r3, [r3, #4]
}
   19ac0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   19ac2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   19ac6:	4770      	bx	lr

00019ac8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19ac8:	6843      	ldr	r3, [r0, #4]
   19aca:	685b      	ldr	r3, [r3, #4]
}
   19acc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   19ace:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   19ad2:	4770      	bx	lr

00019ad4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19ad4:	6843      	ldr	r3, [r0, #4]
   19ad6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   19ad8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   19adc:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   19ae0:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   19ae2:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   19ae6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   19aea:	2000      	movs	r0, #0
   19aec:	4770      	bx	lr

00019aee <gpio_nrfx_manage_callback>:
{
   19aee:	b510      	push	{r4, lr}
	return port->data;
   19af0:	6903      	ldr	r3, [r0, #16]
	return list->head;
   19af2:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   19af4:	b1f8      	cbz	r0, 19b36 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19af6:	4288      	cmp	r0, r1
   19af8:	d119      	bne.n	19b2e <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   19afa:	689c      	ldr	r4, [r3, #8]
	return node->next;
   19afc:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   19afe:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   19b00:	42a1      	cmp	r1, r4
   19b02:	d100      	bne.n	19b06 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   19b04:	6098      	str	r0, [r3, #8]
	parent->next = child;
   19b06:	2000      	movs	r0, #0
   19b08:	6008      	str	r0, [r1, #0]
	if (set) {
   19b0a:	b12a      	cbz	r2, 19b18 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   19b0c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   19b0e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   19b10:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   19b12:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   19b14:	b902      	cbnz	r2, 19b18 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   19b16:	6099      	str	r1, [r3, #8]
	return 0;
   19b18:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   19b1a:	e010      	b.n	19b3e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19b1c:	4281      	cmp	r1, r0
   19b1e:	d106      	bne.n	19b2e <gpio_nrfx_manage_callback+0x40>
	return node->next;
   19b20:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   19b22:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   19b24:	6898      	ldr	r0, [r3, #8]
   19b26:	4281      	cmp	r1, r0
   19b28:	d1ed      	bne.n	19b06 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   19b2a:	609c      	str	r4, [r3, #8]
}
   19b2c:	e7eb      	b.n	19b06 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   19b2e:	4604      	mov	r4, r0
   19b30:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19b32:	2800      	cmp	r0, #0
   19b34:	d1f2      	bne.n	19b1c <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   19b36:	2a00      	cmp	r2, #0
   19b38:	d1e8      	bne.n	19b0c <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   19b3a:	f06f 0015 	mvn.w	r0, #21
}
   19b3e:	bd10      	pop	{r4, pc}

00019b40 <pin_interrupt_configure>:
	rc = i2c_write_dt(&cfg->bus, &irq_buf.reg, sizeof(irq_buf));

	k_sem_give(&drv_data->lock);
#endif /* CONFIG_GPIO_SX1509B_INTERRUPT */

	return rc;
   19b40:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
}
   19b44:	bf14      	ite	ne
   19b46:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   19b4a:	2000      	moveq	r0, #0
   19b4c:	4770      	bx	lr

00019b4e <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   19b4e:	f7fc b9a5 	b.w	15e9c <z_impl_k_sem_take>

00019b52 <i2c_write>:
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
			    uint32_t num_bytes, uint16_t addr)
{
   19b52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
	msg.len = num_bytes;
   19b54:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   19b58:	2202      	movs	r2, #2
   19b5a:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   19b5e:	6882      	ldr	r2, [r0, #8]
   19b60:	a901      	add	r1, sp, #4
   19b62:	6894      	ldr	r4, [r2, #8]
   19b64:	2201      	movs	r2, #1
   19b66:	47a0      	blx	r4

	return i2c_transfer(dev, &msg, 1, addr);
}
   19b68:	b004      	add	sp, #16
   19b6a:	bd10      	pop	{r4, pc}

00019b6c <i2c_write_dt>:
 * @return a value from i2c_write()
 */
static inline int i2c_write_dt(const struct i2c_dt_spec *spec,
			       const uint8_t *buf, uint32_t num_bytes)
{
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
   19b6c:	8883      	ldrh	r3, [r0, #4]
   19b6e:	6800      	ldr	r0, [r0, #0]
   19b70:	f7ff bfef 	b.w	19b52 <i2c_write>

00019b74 <i2c_reg_write_word_be>:
{
   19b74:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   19b76:	0a13      	lsrs	r3, r2, #8
   19b78:	f88d 1004 	strb.w	r1, [sp, #4]
   19b7c:	f88d 2006 	strb.w	r2, [sp, #6]
	return i2c_write_dt(bus, tx_buf, 3);
   19b80:	a901      	add	r1, sp, #4
   19b82:	2203      	movs	r2, #3
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   19b84:	f88d 3005 	strb.w	r3, [sp, #5]
	return i2c_write_dt(bus, tx_buf, 3);
   19b88:	f7ff fff0 	bl	19b6c <i2c_write_dt>
}
   19b8c:	b003      	add	sp, #12
   19b8e:	f85d fb04 	ldr.w	pc, [sp], #4

00019b92 <port_write>:
{
   19b92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19b96:	4606      	mov	r6, r0
   19b98:	4689      	mov	r9, r1
   19b9a:	4614      	mov	r4, r2
   19b9c:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
   19b9e:	f000 fcfa 	bl	1a596 <k_is_in_isr>
   19ba2:	bb00      	cbnz	r0, 19be6 <port_write+0x54>
	const struct sx1509b_config *cfg = dev->config;
   19ba4:	6875      	ldr	r5, [r6, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   19ba6:	6936      	ldr	r6, [r6, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
   19ba8:	f106 071c 	add.w	r7, r6, #28
   19bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19bb4:	4638      	mov	r0, r7
   19bb6:	f7ff ffca 	bl	19b4e <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
   19bba:	8ab2      	ldrh	r2, [r6, #20]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
   19bbc:	4054      	eors	r4, r2
   19bbe:	ea04 0409 	and.w	r4, r4, r9
   19bc2:	ea82 0208 	eor.w	r2, r2, r8
   19bc6:	4054      	eors	r4, r2
   19bc8:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA, out);
   19bca:	1d28      	adds	r0, r5, #4
   19bcc:	4622      	mov	r2, r4
   19bce:	2110      	movs	r1, #16
   19bd0:	f7ff ffd0 	bl	19b74 <i2c_reg_write_word_be>
	if (rc == 0) {
   19bd4:	4605      	mov	r5, r0
   19bd6:	b900      	cbnz	r0, 19bda <port_write+0x48>
		*outp = out;
   19bd8:	82b4      	strh	r4, [r6, #20]
	z_impl_k_sem_give(sem);
   19bda:	4638      	mov	r0, r7
   19bdc:	f7fc f938 	bl	15e50 <z_impl_k_sem_give>
}
   19be0:	4628      	mov	r0, r5
   19be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
   19be6:	f06f 050a 	mvn.w	r5, #10
   19bea:	e7f9      	b.n	19be0 <port_write+0x4e>

00019bec <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
   19bec:	2200      	movs	r2, #0
{
   19bee:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
   19bf0:	4611      	mov	r1, r2
   19bf2:	f7ff bfce 	b.w	19b92 <port_write>

00019bf6 <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
   19bf6:	2300      	movs	r3, #0
   19bf8:	461a      	mov	r2, r3
   19bfa:	f7ff bfca 	b.w	19b92 <port_write>

00019bfe <port_set_bits>:
{
   19bfe:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
   19c00:	2300      	movs	r3, #0
   19c02:	f7ff bfc6 	b.w	19b92 <port_write>

00019c06 <port_set_masked>:
	return port_write(dev, mask, value, 0);
   19c06:	2300      	movs	r3, #0
   19c08:	f7ff bfc3 	b.w	19b92 <port_write>

00019c0c <write_pin_state.constprop.0>:
static int write_pin_state(const struct sx1509b_config *cfg,
   19c0c:	b510      	push	{r4, lr}
   19c0e:	b086      	sub	sp, #24
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
   19c10:	2300      	movs	r3, #0
   19c12:	f88d 3004 	strb.w	r3, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
   19c16:	880b      	ldrh	r3, [r1, #0]
   19c18:	ba5b      	rev16	r3, r3
   19c1a:	f8ad 3005 	strh.w	r3, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
   19c1e:	884b      	ldrh	r3, [r1, #2]
   19c20:	ba5b      	rev16	r3, r3
   19c22:	f8ad 3007 	strh.w	r3, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
   19c26:	888b      	ldrh	r3, [r1, #4]
   19c28:	ba5b      	rev16	r3, r3
   19c2a:	f8ad 3009 	strh.w	r3, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
   19c2e:	88cb      	ldrh	r3, [r1, #6]
   19c30:	ba5b      	rev16	r3, r3
   19c32:	f8ad 300b 	strh.w	r3, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
   19c36:	890b      	ldrh	r3, [r1, #8]
   19c38:	ba5b      	rev16	r3, r3
   19c3a:	f8ad 300d 	strh.w	r3, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
   19c3e:	894b      	ldrh	r3, [r1, #10]
   19c40:	ba5b      	rev16	r3, r3
   19c42:	f8ad 300f 	strh.w	r3, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
   19c46:	898b      	ldrh	r3, [r1, #12]
   19c48:	ba5b      	rev16	r3, r3
   19c4a:	f8ad 3011 	strh.w	r3, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   19c4e:	89cb      	ldrh	r3, [r1, #14]
   19c50:	ba5b      	rev16	r3, r3
   19c52:	f8ad 3013 	strh.w	r3, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
   19c56:	8a0b      	ldrh	r3, [r1, #16]
   19c58:	ba59      	rev16	r1, r3
   19c5a:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
   19c5e:	1d04      	adds	r4, r0, #4
	if (data_first) {
   19c60:	b162      	cbz	r2, 19c7c <write_pin_state.constprop.0+0x70>
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
   19c62:	461a      	mov	r2, r3
   19c64:	2110      	movs	r1, #16
   19c66:	4620      	mov	r0, r4
   19c68:	f7ff ff84 	bl	19b74 <i2c_reg_write_word_be>
		if (rc == 0) {
   19c6c:	b920      	cbnz	r0, 19c78 <write_pin_state.constprop.0+0x6c>
			rc = i2c_write_dt(&cfg->bus, &pin_buf.reg,
   19c6e:	2211      	movs	r2, #17
		rc = i2c_write_dt(&cfg->bus, &pin_buf.reg, sizeof(pin_buf));
   19c70:	a901      	add	r1, sp, #4
   19c72:	4620      	mov	r0, r4
   19c74:	f7ff ff7a 	bl	19b6c <i2c_write_dt>
}
   19c78:	b006      	add	sp, #24
   19c7a:	bd10      	pop	{r4, pc}
		rc = i2c_write_dt(&cfg->bus, &pin_buf.reg, sizeof(pin_buf));
   19c7c:	2213      	movs	r2, #19
   19c7e:	e7f7      	b.n	19c70 <write_pin_state.constprop.0+0x64>

00019c80 <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
   19c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct sx1509b_config *cfg = dev->config;
   19c82:	6846      	ldr	r6, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   19c84:	6905      	ldr	r5, [r0, #16]
	int rc;

	if (!device_is_ready(cfg->bus.bus)) {
   19c86:	6870      	ldr	r0, [r6, #4]
   19c88:	f000 fb9e 	bl	1a3c8 <z_device_is_ready>
   19c8c:	2800      	cmp	r0, #0
   19c8e:	d055      	beq.n	19d3c <sx1509b_init+0xbc>
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   19c90:	f241 227d 	movw	r2, #4733	; 0x127d
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   19c94:	6870      	ldr	r0, [r6, #4]
   19c96:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   19c98:	f8ad 2004 	strh.w	r2, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   19c9c:	a901      	add	r1, sp, #4
   19c9e:	2202      	movs	r2, #2
   19ca0:	f7ff ff57 	bl	19b52 <i2c_write>
	};
#endif

	rc = i2c_reg_write_byte_dt(&cfg->bus, SX1509B_REG_RESET,
				   SX1509B_REG_RESET_MAGIC0);
	if (rc != 0) {
   19ca4:	4604      	mov	r4, r0
   19ca6:	2800      	cmp	r0, #0
   19ca8:	d141      	bne.n	19d2e <sx1509b_init+0xae>
	uint8_t tx_buf[2] = {reg_addr, value};
   19caa:	f243 427d 	movw	r2, #13437	; 0x347d
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   19cae:	6870      	ldr	r0, [r6, #4]
   19cb0:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   19cb2:	f8ad 2004 	strh.w	r2, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   19cb6:	a901      	add	r1, sp, #4
   19cb8:	2202      	movs	r2, #2
   19cba:	f7ff ff4a 	bl	19b52 <i2c_write>
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
		goto out;
	}
	rc = i2c_reg_write_byte_dt(&cfg->bus, SX1509B_REG_RESET,
				   SX1509B_REG_RESET_MAGIC1);
	if (rc != 0) {
   19cbe:	4604      	mov	r4, r0
   19cc0:	bba8      	cbnz	r0, 19d2e <sx1509b_init+0xae>
	return z_impl_k_sleep(timeout);
   19cc2:	2100      	movs	r1, #0
   19cc4:	2063      	movs	r0, #99	; 0x63
   19cc6:	f7fc fdf9 	bl	168bc <z_impl_k_sleep>
	}

	k_sleep(K_MSEC(RESET_DELAY_MS));

	/* Reset state mediated by initial configuration */
	drv_data->pin_state = (struct sx1509b_pin_state) {
   19cca:	4621      	mov	r1, r4
   19ccc:	2212      	movs	r2, #18
   19cce:	1d28      	adds	r0, r5, #4
   19cd0:	f7fd fe9f 	bl	17a12 <memset>
   19cd4:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
			& ~(DT_INST_PROP(0, init_out_low)
			    | DT_INST_PROP(0, init_out_high))),
		.data = (ALL_PINS
			 & ~DT_INST_PROP(0, init_out_low)),
	};
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   19cd8:	832c      	strh	r4, [r5, #24]
   19cda:	76ac      	strb	r4, [r5, #26]
	drv_data->pin_state = (struct sx1509b_pin_state) {
   19cdc:	82ab      	strh	r3, [r5, #20]
	uint8_t tx_buf[2] = {reg_addr, value};
   19cde:	f244 021e 	movw	r2, #16414	; 0x401e
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   19ce2:	6870      	ldr	r0, [r6, #4]
   19ce4:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   19ce6:	f8ad 2004 	strh.w	r2, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   19cea:	a901      	add	r1, sp, #4
   19cec:	2202      	movs	r2, #2
   19cee:	f7ff ff30 	bl	19b52 <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   19cf2:	4627      	mov	r7, r4
		.debounce_config = CONFIG_GPIO_SX1509B_DEBOUNCE_TIME,
	};

	rc = i2c_reg_write_byte_dt(&cfg->bus, SX1509B_REG_CLOCK,
				   SX1509B_REG_CLOCK_FOSC_INT_2MHZ);
	if (rc == 0) {
   19cf4:	4604      	mov	r4, r0
   19cf6:	b9d0      	cbnz	r0, 19d2e <sx1509b_init+0xae>
	rc = i2c_reg_write_byte_dt(&cfg->bus, SX1509B_REG_RESET,
   19cf8:	3604      	adds	r6, #4
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
   19cfa:	8aaa      	ldrh	r2, [r5, #20]
   19cfc:	2110      	movs	r1, #16
   19cfe:	4630      	mov	r0, r6
   19d00:	f7ff ff38 	bl	19b74 <i2c_reg_write_word_be>
					   drv_data->pin_state.data);
	}
	if (rc == 0) {
   19d04:	4604      	mov	r4, r0
   19d06:	b990      	cbnz	r0, 19d2e <sx1509b_init+0xae>
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DIR,
   19d08:	8a6a      	ldrh	r2, [r5, #18]
   19d0a:	210e      	movs	r1, #14
   19d0c:	4630      	mov	r0, r6
   19d0e:	f7ff ff31 	bl	19b74 <i2c_reg_write_word_be>
					   drv_data->pin_state.dir);
	}
	if (rc == 0) {
   19d12:	4604      	mov	r4, r0
   19d14:	b958      	cbnz	r0, 19d2e <sx1509b_init+0xae>
	uint8_t tx_buf[3] = { reg_addr, value };
   19d16:	f649 031f 	movw	r3, #38943	; 0x981f
	return i2c_write_dt(bus, tx_buf, 2);
   19d1a:	2202      	movs	r2, #2
   19d1c:	a901      	add	r1, sp, #4
   19d1e:	4630      	mov	r0, r6
	uint8_t tx_buf[3] = { reg_addr, value };
   19d20:	f8ad 3004 	strh.w	r3, [sp, #4]
   19d24:	f88d 7006 	strb.w	r7, [sp, #6]
	return i2c_write_dt(bus, tx_buf, 2);
   19d28:	f7ff ff20 	bl	19b6c <i2c_write_dt>
   19d2c:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   19d2e:	f105 001c 	add.w	r0, r5, #28
   19d32:	f7fc f88d 	bl	15e50 <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
   19d36:	4620      	mov	r0, r4
   19d38:	b003      	add	sp, #12
   19d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = -ENODEV;
   19d3c:	f06f 0412 	mvn.w	r4, #18
   19d40:	e7f5      	b.n	19d2e <sx1509b_init+0xae>

00019d42 <sx1509b_config>:
{
   19d42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d46:	460d      	mov	r5, r1
	const struct sx1509b_config *cfg = dev->config;
   19d48:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   19d4c:	6904      	ldr	r4, [r0, #16]
{
   19d4e:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
   19d50:	f000 fc21 	bl	1a596 <k_is_in_isr>
   19d54:	4682      	mov	sl, r0
   19d56:	2800      	cmp	r0, #0
   19d58:	f040 8084 	bne.w	19e64 <sx1509b_config+0x122>
	k_sem_take(&drv_data->lock, K_FOREVER);
   19d5c:	f104 081c 	add.w	r8, r4, #28
   19d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19d68:	4640      	mov	r0, r8
   19d6a:	f7ff fef0 	bl	19b4e <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
   19d6e:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
   19d70:	8ae2      	ldrh	r2, [r4, #22]
		drv_data->led_drv_enable &= ~BIT(pin);
   19d72:	40ae      	lsls	r6, r5
   19d74:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   19d76:	fa22 f505 	lsr.w	r5, r2, r5
		drv_data->led_drv_enable &= ~BIT(pin);
   19d7a:	ea6f 0b06 	mvn.w	fp, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   19d7e:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
   19d80:	fa1f fb8b 	uxth.w	fp, fp
	if (drv_data->led_drv_enable & BIT(pin)) {
   19d84:	d44c      	bmi.n	19e20 <sx1509b_config+0xde>
	pins->open_drain &= ~BIT(pin);
   19d86:	89e3      	ldrh	r3, [r4, #14]
   19d88:	ea03 020b 	and.w	r2, r3, fp
   19d8c:	81e2      	strh	r2, [r4, #14]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
   19d8e:	07ba      	lsls	r2, r7, #30
   19d90:	d458      	bmi.n	19e44 <sx1509b_config+0x102>
		pins->pull_up |= BIT(pin);
   19d92:	8963      	ldrh	r3, [r4, #10]
	if ((flags & GPIO_PULL_UP) != 0) {
   19d94:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
   19d96:	bf4c      	ite	mi
   19d98:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
   19d9a:	ea0b 0303 	andpl.w	r3, fp, r3
   19d9e:	8163      	strh	r3, [r4, #10]
		pins->pull_down |= BIT(pin);
   19da0:	89a3      	ldrh	r3, [r4, #12]
	if ((flags & GPIO_PULL_DOWN) != 0) {
   19da2:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
   19da4:	bf4c      	ite	mi
   19da6:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
   19da8:	ea0b 0303 	andpl.w	r3, fp, r3
   19dac:	81a3      	strh	r3, [r4, #12]
		pins->input_disable &= ~BIT(pin);
   19dae:	88a3      	ldrh	r3, [r4, #4]
	if ((flags & GPIO_INPUT) != 0) {
   19db0:	03fa      	lsls	r2, r7, #15
		pins->input_disable &= ~BIT(pin);
   19db2:	bf4c      	ite	mi
   19db4:	ea0b 0303 	andmi.w	r3, fp, r3
		pins->input_disable |= BIT(pin);
   19db8:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
   19dba:	03bd      	lsls	r5, r7, #14
   19dbc:	80a3      	strh	r3, [r4, #4]
		pins->dir &= ~BIT(pin);
   19dbe:	8a63      	ldrh	r3, [r4, #18]
	if ((flags & GPIO_OUTPUT) != 0) {
   19dc0:	d54a      	bpl.n	19e58 <sx1509b_config+0x116>
		pins->dir &= ~BIT(pin);
   19dc2:	ea0b 0303 	and.w	r3, fp, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   19dc6:	0378      	lsls	r0, r7, #13
		pins->dir &= ~BIT(pin);
   19dc8:	8263      	strh	r3, [r4, #18]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   19dca:	d540      	bpl.n	19e4e <sx1509b_config+0x10c>
			pins->data &= ~BIT(pin);
   19dcc:	8aa3      	ldrh	r3, [r4, #20]
   19dce:	ea0b 0303 	and.w	r3, fp, r3
			pins->data |= BIT(pin);
   19dd2:	82a3      	strh	r3, [r4, #20]
			data_first = true;
   19dd4:	f04f 0a01 	mov.w	sl, #1
		debounce->debounce_enable |= BIT(pin);
   19dd8:	f8b4 3019 	ldrh.w	r3, [r4, #25]
	if ((flags & SX1509B_GPIO_DEBOUNCE) != 0) {
   19ddc:	05fa      	lsls	r2, r7, #23
		debounce->debounce_enable |= BIT(pin);
   19dde:	bf4c      	ite	mi
   19de0:	4333      	orrmi	r3, r6
		debounce->debounce_enable &= ~BIT(pin);
   19de2:	ea0b 0303 	andpl.w	r3, fp, r3
   19de6:	f8a4 3019 	strh.w	r3, [r4, #25]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
   19dea:	4652      	mov	r2, sl
   19dec:	1d21      	adds	r1, r4, #4
   19dee:	4648      	mov	r0, r9
   19df0:	f7ff ff0c 	bl	19c0c <write_pin_state.constprop.0>
	if (rc == 0) {
   19df4:	4605      	mov	r5, r0
   19df6:	b9f0      	cbnz	r0, 19e36 <sx1509b_config+0xf4>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
   19df8:	2322      	movs	r3, #34	; 0x22
   19dfa:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
   19dfe:	7e23      	ldrb	r3, [r4, #24]
   19e00:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
   19e04:	f8b4 3019 	ldrh.w	r3, [r4, #25]
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
   19e08:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
   19e0a:	ba5b      	rev16	r3, r3
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
   19e0c:	eb0d 0102 	add.w	r1, sp, r2
   19e10:	eb09 0002 	add.w	r0, r9, r2
			= sys_cpu_to_be16(debounce->debounce_enable);
   19e14:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
   19e18:	f7ff fea8 	bl	19b6c <i2c_write_dt>
   19e1c:	4605      	mov	r5, r0
   19e1e:	e00a      	b.n	19e36 <sx1509b_config+0xf4>
		drv_data->led_drv_enable &= ~BIT(pin);
   19e20:	ea02 020b 	and.w	r2, r2, fp
   19e24:	82e2      	strh	r2, [r4, #22]
		rc = i2c_reg_write_word_be(&cfg->bus,
   19e26:	2120      	movs	r1, #32
   19e28:	f109 0004 	add.w	r0, r9, #4
   19e2c:	f7ff fea2 	bl	19b74 <i2c_reg_write_word_be>
		if (rc) {
   19e30:	4605      	mov	r5, r0
   19e32:	2800      	cmp	r0, #0
   19e34:	d0a7      	beq.n	19d86 <sx1509b_config+0x44>
   19e36:	4640      	mov	r0, r8
   19e38:	f7fc f80a 	bl	15e50 <z_impl_k_sem_give>
}
   19e3c:	4628      	mov	r0, r5
   19e3e:	b003      	add	sp, #12
   19e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
   19e44:	077d      	lsls	r5, r7, #29
   19e46:	d50a      	bpl.n	19e5e <sx1509b_config+0x11c>
			pins->open_drain |= BIT(pin);
   19e48:	4333      	orrs	r3, r6
   19e4a:	81e3      	strh	r3, [r4, #14]
   19e4c:	e7a1      	b.n	19d92 <sx1509b_config+0x50>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   19e4e:	0339      	lsls	r1, r7, #12
   19e50:	d5c2      	bpl.n	19dd8 <sx1509b_config+0x96>
			pins->data |= BIT(pin);
   19e52:	8aa3      	ldrh	r3, [r4, #20]
   19e54:	4333      	orrs	r3, r6
			data_first = true;
   19e56:	e7bc      	b.n	19dd2 <sx1509b_config+0x90>
		pins->dir |= BIT(pin);
   19e58:	4333      	orrs	r3, r6
   19e5a:	8263      	strh	r3, [r4, #18]
   19e5c:	e7bc      	b.n	19dd8 <sx1509b_config+0x96>
			rc = -ENOTSUP;
   19e5e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   19e62:	e7e8      	b.n	19e36 <sx1509b_config+0xf4>
		return -EWOULDBLOCK;
   19e64:	f06f 050a 	mvn.w	r5, #10
   19e68:	e7e8      	b.n	19e3c <sx1509b_config+0xfa>

00019e6a <port_get>:
{
   19e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e6c:	b089      	sub	sp, #36	; 0x24
	const struct sx1509b_config *cfg = dev->config;
   19e6e:	6847      	ldr	r7, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   19e70:	6905      	ldr	r5, [r0, #16]
{
   19e72:	460e      	mov	r6, r1
	if (k_is_in_isr()) {
   19e74:	f000 fb8f 	bl	1a596 <k_is_in_isr>
   19e78:	4604      	mov	r4, r0
   19e7a:	bb60      	cbnz	r0, 19ed6 <port_get+0x6c>
	k_sem_take(&drv_data->lock, K_FOREVER);
   19e7c:	351c      	adds	r5, #28
   19e7e:	4628      	mov	r0, r5
   19e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19e88:	f7ff fe61 	bl	19b4e <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
   19e8c:	f10d 0205 	add.w	r2, sp, #5
   19e90:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   19e92:	2201      	movs	r2, #1
	return i2c_write_read(spec->bus, spec->addr,
   19e94:	6878      	ldr	r0, [r7, #4]
	msg[0].len = num_write;
   19e96:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
   19e98:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
   19e9a:	f10d 0206 	add.w	r2, sp, #6
   19e9e:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   19ea2:	2107      	movs	r1, #7
	return i2c_write_read(spec->bus, spec->addr,
   19ea4:	893b      	ldrh	r3, [r7, #8]
	msg[1].buf = (uint8_t *)read_buf;
   19ea6:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   19ea8:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   19eaa:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
   19eae:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   19eb0:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   19eb4:	6881      	ldr	r1, [r0, #8]
   19eb6:	688c      	ldr	r4, [r1, #8]
   19eb8:	a902      	add	r1, sp, #8
   19eba:	47a0      	blx	r4
	if (rc != 0) {
   19ebc:	4604      	mov	r4, r0
   19ebe:	b920      	cbnz	r0, 19eca <port_get+0x60>
	*value = sys_be16_to_cpu(pin_data);
   19ec0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19ec4:	ba5b      	rev16	r3, r3
   19ec6:	b29b      	uxth	r3, r3
   19ec8:	6033      	str	r3, [r6, #0]
   19eca:	4628      	mov	r0, r5
   19ecc:	f7fb ffc0 	bl	15e50 <z_impl_k_sem_give>
}
   19ed0:	4620      	mov	r0, r4
   19ed2:	b009      	add	sp, #36	; 0x24
   19ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EWOULDBLOCK;
   19ed6:	f06f 040a 	mvn.w	r4, #10
   19eda:	e7f9      	b.n	19ed0 <port_get+0x66>

00019edc <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & i2c_config) {
   19edc:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   19ede:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
   19ee0:	d405      	bmi.n	19eee <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(i2c_config)) {
   19ee2:	f3c1 0142 	ubfx	r1, r1, #1, #3
   19ee6:	2901      	cmp	r1, #1
   19ee8:	d004      	beq.n	19ef4 <i2c_nrfx_twim_configure+0x18>
   19eea:	2902      	cmp	r1, #2
   19eec:	d009      	beq.n	19f02 <i2c_nrfx_twim_configure+0x26>
   19eee:	f06f 0015 	mvn.w	r0, #21
}
   19ef2:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   19ef4:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   19ef6:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   19efa:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
   19efe:	2000      	movs	r0, #0
   19f00:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   19f02:	681b      	ldr	r3, [r3, #0]
   19f04:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   19f08:	e7f7      	b.n	19efa <i2c_nrfx_twim_configure+0x1e>

00019f0a <irq_connect0>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   19f0a:	2200      	movs	r2, #0
   19f0c:	2101      	movs	r1, #1
   19f0e:	2003      	movs	r0, #3
   19f10:	f7e8 b9f0 	b.w	22f4 <z_arm_irq_priority_set>

00019f14 <irq_connect1>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   19f14:	2200      	movs	r2, #0
   19f16:	2101      	movs	r1, #1
   19f18:	2004      	movs	r0, #4
   19f1a:	f7e8 b9eb 	b.w	22f4 <z_arm_irq_priority_set>

00019f1e <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   19f1e:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   19f20:	2100      	movs	r1, #0
   19f22:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   19f24:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   19f26:	f000 f80a 	bl	19f3e <pinctrl_lookup_state>
	if (ret < 0) {
   19f2a:	2800      	cmp	r0, #0
   19f2c:	db05      	blt.n	19f3a <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
   19f2e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   19f30:	6822      	ldr	r2, [r4, #0]
   19f32:	7919      	ldrb	r1, [r3, #4]
   19f34:	6818      	ldr	r0, [r3, #0]
   19f36:	f000 f815 	bl	19f64 <pinctrl_configure_pins>
}
   19f3a:	b002      	add	sp, #8
   19f3c:	bd10      	pop	{r4, pc}

00019f3e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   19f3e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   19f40:	6843      	ldr	r3, [r0, #4]
   19f42:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   19f44:	7a05      	ldrb	r5, [r0, #8]
   19f46:	6844      	ldr	r4, [r0, #4]
   19f48:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   19f4c:	42a3      	cmp	r3, r4
   19f4e:	d302      	bcc.n	19f56 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   19f50:	f06f 0001 	mvn.w	r0, #1
}
   19f54:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   19f56:	795c      	ldrb	r4, [r3, #5]
   19f58:	428c      	cmp	r4, r1
   19f5a:	d001      	beq.n	19f60 <pinctrl_lookup_state+0x22>
		(*state)++;
   19f5c:	3308      	adds	r3, #8
   19f5e:	e7f0      	b.n	19f42 <pinctrl_lookup_state+0x4>
			return 0;
   19f60:	2000      	movs	r0, #0
   19f62:	e7f7      	b.n	19f54 <pinctrl_lookup_state+0x16>

00019f64 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   19f64:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19f6a:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
   19f6c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   19f70:	4281      	cmp	r1, r0
   19f72:	d101      	bne.n	19f78 <pinctrl_configure_pins+0x14>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   19f74:	2000      	movs	r0, #0
}
   19f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   19f78:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   19f7a:	f005 047f 	and.w	r4, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   19f7e:	f3c5 2343 	ubfx	r3, r5, #9, #4
			pin = 0xFFFFFFFFU;
   19f82:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   19f84:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   19f88:	bf08      	it	eq
   19f8a:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   19f8e:	2d0c      	cmp	r5, #12
   19f90:	d841      	bhi.n	1a016 <pinctrl_configure_pins+0xb2>
   19f92:	e8df f005 	tbb	[pc, r5]
   19f96:	1107      	.short	0x1107
   19f98:	40401815 	.word	0x40401815
   19f9c:	40404040 	.word	0x40404040
   19fa0:	1b40      	.short	0x1b40
   19fa2:	3d          	.byte	0x3d
   19fa3:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   19fa4:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   19fa8:	f004 051f 	and.w	r5, r4, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19fac:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   19fb0:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
}
   19fb4:	2501      	movs	r5, #1
   19fb6:	e00f      	b.n	19fd8 <pinctrl_configure_pins+0x74>
			NRF_PSEL_UART(reg, RXD) = pin;
   19fb8:	f8c2 4514 	str.w	r4, [r2, #1300]	; 0x514
			dir = NRF_GPIO_PIN_DIR_INPUT;
   19fbc:	2500      	movs	r5, #0
   19fbe:	e00b      	b.n	19fd8 <pinctrl_configure_pins+0x74>
			NRF_PSEL_UART(reg, RTS) = pin;
   19fc0:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   19fc4:	e7f0      	b.n	19fa8 <pinctrl_configure_pins+0x44>
			NRF_PSEL_UART(reg, CTS) = pin;
   19fc6:	f8c2 4510 	str.w	r4, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   19fca:	e7f7      	b.n	19fbc <pinctrl_configure_pins+0x58>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   19fcc:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   19fd0:	2b00      	cmp	r3, #0
   19fd2:	d1f3      	bne.n	19fbc <pinctrl_configure_pins+0x58>
			dir = NRF_GPIO_PIN_DIR_INPUT;
   19fd4:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
   19fd6:	2306      	movs	r3, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   19fd8:	f850 cb04 	ldr.w	ip, [r0], #4
   19fdc:	f40c 5e00 	and.w	lr, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   19fe0:	f1be 0f00 	cmp.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   19fe4:	f3cc 1cc1 	ubfx	ip, ip, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   19fe8:	ea4f 2303 	mov.w	r3, r3, lsl #8
   19fec:	bf18      	it	ne
   19fee:	2500      	movne	r5, #0
    *p_pin = pin_number & 0x1F;
   19ff0:	f004 041f 	and.w	r4, r4, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   19ff4:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
   19ff8:	bf0c      	ite	eq
   19ffa:	46ae      	moveq	lr, r5
   19ffc:	f04f 0e01 	movne.w	lr, #1
   1a000:	432b      	orrs	r3, r5
    reg->PIN_CNF[pin_number] = cnf;
   1a002:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a006:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1a00a:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1a00e:	e7af      	b.n	19f70 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1a010:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1a014:	e7dc      	b.n	19fd0 <pinctrl_configure_pins+0x6c>
		switch (NRF_GET_FUN(pins[i])) {
   1a016:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a01a:	e7ac      	b.n	19f76 <pinctrl_configure_pins+0x12>

0001a01c <regulator_common_data_init>:
 */

#include <zephyr/drivers/regulator.h>

void regulator_common_data_init(const struct device *dev)
{
   1a01c:	b510      	push	{r4, lr}
	struct regulator_common_data *data = dev->data;
   1a01e:	6904      	ldr	r4, [r0, #16]
	return z_impl_k_mutex_init(mutex);
   1a020:	4620      	mov	r0, r4
   1a022:	f000 fad2 	bl	1a5ca <z_impl_k_mutex_init>

	(void)k_mutex_init(&data->lock);
	data->refcnt = 0;
   1a026:	2300      	movs	r3, #0
   1a028:	6163      	str	r3, [r4, #20]
}
   1a02a:	bd10      	pop	{r4, pc}

0001a02c <regulator_is_enabled>:

	return ret;
}

bool regulator_is_enabled(const struct device *dev)
{
   1a02c:	b538      	push	{r3, r4, r5, lr}
	const struct regulator_common_config *config = dev->config;
	struct regulator_common_data *data = dev->data;
	bool enabled;

	if ((config->flags & REGULATOR_ALWAYS_ON) != 0U) {
   1a02e:	6843      	ldr	r3, [r0, #4]
   1a030:	7e9b      	ldrb	r3, [r3, #26]
   1a032:	07db      	lsls	r3, r3, #31
   1a034:	d410      	bmi.n	1a058 <regulator_is_enabled+0x2c>
	struct regulator_common_data *data = dev->data;
   1a036:	6905      	ldr	r5, [r0, #16]
	return z_impl_k_mutex_lock(mutex, timeout);
   1a038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a03c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a040:	4628      	mov	r0, r5
   1a042:	f7fb fe1b 	bl	15c7c <z_impl_k_mutex_lock>
		enabled = true;
	} else {
		(void)k_mutex_lock(&data->lock, K_FOREVER);
		enabled = data->refcnt != 0;
   1a046:	696c      	ldr	r4, [r5, #20]
   1a048:	3c00      	subs	r4, #0
   1a04a:	bf18      	it	ne
   1a04c:	2401      	movne	r4, #1
	return z_impl_k_mutex_unlock(mutex);
   1a04e:	4628      	mov	r0, r5
   1a050:	f7fb fe8e 	bl	15d70 <z_impl_k_mutex_unlock>
		k_mutex_unlock(&data->lock);
	}

	return enabled;
}
   1a054:	4620      	mov	r0, r4
   1a056:	bd38      	pop	{r3, r4, r5, pc}
		enabled = true;
   1a058:	2401      	movs	r4, #1
   1a05a:	e7fb      	b.n	1a054 <regulator_is_enabled+0x28>

0001a05c <regulator_set_voltage>:
	return false;
}

int regulator_set_voltage(const struct device *dev, int32_t min_uv,
			  int32_t max_uv)
{
   1a05c:	b4f0      	push	{r4, r5, r6, r7}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_voltage == NULL) {
   1a05e:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   1a062:	691b      	ldr	r3, [r3, #16]
   1a064:	b13b      	cbz	r3, 1a076 <regulator_set_voltage+0x1a>
		return -ENOSYS;
	}

	/* voltage may not be allowed, even if supported */
	if ((min_uv > config->max_uv) || (max_uv < config->min_uv)) {
   1a066:	6877      	ldr	r7, [r6, #4]
   1a068:	428f      	cmp	r7, r1
   1a06a:	db08      	blt.n	1a07e <regulator_set_voltage+0x22>
   1a06c:	6835      	ldr	r5, [r6, #0]
   1a06e:	4295      	cmp	r5, r2
   1a070:	dc05      	bgt.n	1a07e <regulator_set_voltage+0x22>
		return -EINVAL;
	}

	return api->set_voltage(dev, min_uv, max_uv);
}
   1a072:	bcf0      	pop	{r4, r5, r6, r7}
	return api->set_voltage(dev, min_uv, max_uv);
   1a074:	4718      	bx	r3
		return -ENOSYS;
   1a076:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   1a07a:	bcf0      	pop	{r4, r5, r6, r7}
   1a07c:	4770      	bx	lr
		return -EINVAL;
   1a07e:	f06f 0015 	mvn.w	r0, #21
   1a082:	e7fa      	b.n	1a07a <regulator_set_voltage+0x1e>

0001a084 <regulator_set_mode>:

	return api->set_current_limit(dev, min_ua, max_ua);
}

int regulator_set_mode(const struct device *dev, regulator_mode_t mode)
{
   1a084:	b470      	push	{r4, r5, r6}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_mode == NULL) {
   1a086:	e9d0 6201 	ldrd	r6, r2, [r0, #4]
   1a08a:	6a15      	ldr	r5, [r2, #32]
{
   1a08c:	4603      	mov	r3, r0
   1a08e:	460c      	mov	r4, r1
	if (api->set_mode == NULL) {
   1a090:	b19d      	cbz	r5, 1a0ba <regulator_set_mode+0x36>
		return -ENOSYS;
	}

	/* no mode restrictions */
	if (config->allowed_modes_cnt == 0U) {
   1a092:	7e32      	ldrb	r2, [r6, #24]
   1a094:	b912      	cbnz	r2, 1a09c <regulator_set_mode+0x18>
	}

	/* check if mode is allowed, apply if it is */
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
		if (mode == config->allowed_modes[i]) {
			return api->set_mode(dev, mode);
   1a096:	462b      	mov	r3, r5
		}
	}

	return -ENOTSUP;
}
   1a098:	bc70      	pop	{r4, r5, r6}
			return api->set_mode(dev, mode);
   1a09a:	4718      	bx	r3
   1a09c:	6970      	ldr	r0, [r6, #20]
   1a09e:	4402      	add	r2, r0
		if (mode == config->allowed_modes[i]) {
   1a0a0:	f810 1b01 	ldrb.w	r1, [r0], #1
   1a0a4:	42a1      	cmp	r1, r4
   1a0a6:	d102      	bne.n	1a0ae <regulator_set_mode+0x2a>
			return api->set_mode(dev, mode);
   1a0a8:	4621      	mov	r1, r4
   1a0aa:	4618      	mov	r0, r3
   1a0ac:	e7f3      	b.n	1a096 <regulator_set_mode+0x12>
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
   1a0ae:	4290      	cmp	r0, r2
   1a0b0:	d1f6      	bne.n	1a0a0 <regulator_set_mode+0x1c>
	return -ENOTSUP;
   1a0b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1a0b6:	bc70      	pop	{r4, r5, r6}
   1a0b8:	4770      	bx	lr
		return -ENOSYS;
   1a0ba:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1a0be:	e7fa      	b.n	1a0b6 <regulator_set_mode+0x32>

0001a0c0 <regulator_common_init>:
{
   1a0c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct regulator_common_config *config = dev->config;
   1a0c4:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
{
   1a0c8:	460e      	mov	r6, r1
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   1a0ca:	f898 1019 	ldrb.w	r1, [r8, #25]
	struct regulator_common_data *data = dev->data;
   1a0ce:	6905      	ldr	r5, [r0, #16]
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   1a0d0:	29ff      	cmp	r1, #255	; 0xff
{
   1a0d2:	4604      	mov	r4, r0
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   1a0d4:	d123      	bne.n	1a11e <regulator_common_init+0x5e>
	if (config->init_uv > INT32_MIN) {
   1a0d6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1a0da:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1a0de:	d005      	beq.n	1a0ec <regulator_common_init+0x2c>
		ret = regulator_set_voltage(dev, config->init_uv, config->init_uv);
   1a0e0:	4611      	mov	r1, r2
   1a0e2:	4620      	mov	r0, r4
   1a0e4:	f7ff ffba 	bl	1a05c <regulator_set_voltage>
		if (ret < 0) {
   1a0e8:	2800      	cmp	r0, #0
   1a0ea:	db1c      	blt.n	1a126 <regulator_common_init+0x66>
	if ((config->min_uv > INT32_MIN) || (config->max_uv < INT32_MAX)) {
   1a0ec:	f8d8 3000 	ldr.w	r3, [r8]
   1a0f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1a0f4:	d01a      	beq.n	1a12c <regulator_common_init+0x6c>
					int32_t *volt_uv)
{
	const struct regulator_driver_api *api =
		(const struct regulator_driver_api *)dev->api;

	if (api->get_voltage == NULL) {
   1a0f6:	68a3      	ldr	r3, [r4, #8]
   1a0f8:	695b      	ldr	r3, [r3, #20]
   1a0fa:	b38b      	cbz	r3, 1a160 <regulator_common_init+0xa0>
		return -ENOSYS;
	}

	return api->get_voltage(dev, volt_uv);
   1a0fc:	a901      	add	r1, sp, #4
   1a0fe:	4620      	mov	r0, r4
   1a100:	4798      	blx	r3
		if (ret < 0) {
   1a102:	2800      	cmp	r0, #0
   1a104:	db0f      	blt.n	1a126 <regulator_common_init+0x66>
		if (current_uv < config->min_uv) {
   1a106:	f8d8 2000 	ldr.w	r2, [r8]
   1a10a:	9b01      	ldr	r3, [sp, #4]
   1a10c:	429a      	cmp	r2, r3
   1a10e:	dd22      	ble.n	1a156 <regulator_common_init+0x96>
			ret = regulator_set_voltage(dev, config->max_uv, config->max_uv);
   1a110:	4611      	mov	r1, r2
   1a112:	4620      	mov	r0, r4
   1a114:	f7ff ffa2 	bl	1a05c <regulator_set_voltage>
			if (ret < 0) {
   1a118:	2800      	cmp	r0, #0
   1a11a:	da0d      	bge.n	1a138 <regulator_common_init+0x78>
   1a11c:	e003      	b.n	1a126 <regulator_common_init+0x66>
		ret = regulator_set_mode(dev, config->initial_mode);
   1a11e:	f7ff ffb1 	bl	1a084 <regulator_set_mode>
		if (ret < 0) {
   1a122:	2800      	cmp	r0, #0
   1a124:	dad7      	bge.n	1a0d6 <regulator_common_init+0x16>
}
   1a126:	b002      	add	sp, #8
   1a128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((config->min_uv > INT32_MIN) || (config->max_uv < INT32_MAX)) {
   1a12c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1a130:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1a134:	429a      	cmp	r2, r3
   1a136:	d1de      	bne.n	1a0f6 <regulator_common_init+0x36>
	if (is_enabled) {
   1a138:	b946      	cbnz	r6, 1a14c <regulator_common_init+0x8c>
	} else if ((config->flags & REGULATOR_INIT_ENABLED) != 0U) {
   1a13a:	f898 301a 	ldrb.w	r3, [r8, #26]
   1a13e:	079b      	lsls	r3, r3, #30
   1a140:	d007      	beq.n	1a152 <regulator_common_init+0x92>
		ret = api->enable(dev);
   1a142:	683b      	ldr	r3, [r7, #0]
   1a144:	4620      	mov	r0, r4
   1a146:	4798      	blx	r3
		if (ret < 0) {
   1a148:	2800      	cmp	r0, #0
   1a14a:	dbec      	blt.n	1a126 <regulator_common_init+0x66>
		data->refcnt++;
   1a14c:	696b      	ldr	r3, [r5, #20]
   1a14e:	3301      	adds	r3, #1
   1a150:	616b      	str	r3, [r5, #20]
	return 0;
   1a152:	2000      	movs	r0, #0
   1a154:	e7e7      	b.n	1a126 <regulator_common_init+0x66>
		} else if (current_uv > config->max_uv) {
   1a156:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1a15a:	4293      	cmp	r3, r2
   1a15c:	ddec      	ble.n	1a138 <regulator_common_init+0x78>
   1a15e:	e7d7      	b.n	1a110 <regulator_common_init+0x50>
		return -ENOSYS;
   1a160:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1a164:	e7df      	b.n	1a126 <regulator_common_init+0x66>

0001a166 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1a166:	2301      	movs	r3, #1
   1a168:	fa03 f101 	lsl.w	r1, r3, r1
   1a16c:	6903      	ldr	r3, [r0, #16]
   1a16e:	681b      	ldr	r3, [r3, #0]
   1a170:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1a172:	bf18      	it	ne
   1a174:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1a178:	b112      	cbz	r2, 1a180 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   1a17a:	6883      	ldr	r3, [r0, #8]
   1a17c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1a17e:	4718      	bx	r3
   1a180:	6883      	ldr	r3, [r0, #8]
   1a182:	691b      	ldr	r3, [r3, #16]
   1a184:	e7fb      	b.n	1a17e <gpio_pin_set+0x18>

0001a186 <regulator_fixed_init>:
	.enable = regulator_fixed_enable,
	.disable = regulator_fixed_disable,
};

static int regulator_fixed_init(const struct device *dev)
{
   1a186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct regulator_fixed_config *cfg = dev->config;
   1a188:	6844      	ldr	r4, [r0, #4]
{
   1a18a:	4605      	mov	r5, r0
	int ret;

	regulator_common_data_init(dev);
   1a18c:	f7ff ff46 	bl	1a01c <regulator_common_data_init>

	if (!device_is_ready(cfg->enable.port)) {
   1a190:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1a192:	f000 f919 	bl	1a3c8 <z_device_is_ready>
   1a196:	b370      	cbz	r0, 1a1f6 <regulator_fixed_init+0x70>
	return gpio_pin_configure(spec->port,
   1a198:	6a60      	ldr	r0, [r4, #36]	; 0x24
				  spec->pin,
   1a19a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
				  spec->dt_flags | extra_flags);
   1a19e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
	struct gpio_driver_data *data =
   1a1a0:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   1a1a4:	f8d0 e008 	ldr.w	lr, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a1a8:	f8dc 6000 	ldr.w	r6, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1a1ac:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   1a1ae:	bf54      	ite	pl
   1a1b0:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1a1b4:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a1b8:	2701      	movs	r7, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1a1ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a1be:	408f      	lsls	r7, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1a1c0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a1c2:	bf4c      	ite	mi
   1a1c4:	433e      	orrmi	r6, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1a1c6:	43be      	bicpl	r6, r7
   1a1c8:	f8cc 6000 	str.w	r6, [ip]
	return api->pin_configure(port, pin, flags);
   1a1cc:	f8de 3000 	ldr.w	r3, [lr]
   1a1d0:	4798      	blx	r3
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
		return -ENODEV;
	}

	ret = gpio_pin_configure_dt(&cfg->enable, GPIO_OUTPUT_INACTIVE);
	if (ret < 0) {
   1a1d2:	2800      	cmp	r0, #0
   1a1d4:	db0a      	blt.n	1a1ec <regulator_fixed_init+0x66>
		return ret;
	}

	ret = regulator_common_init(dev, false);
   1a1d6:	2100      	movs	r1, #0
   1a1d8:	4628      	mov	r0, r5
   1a1da:	f7ff ff71 	bl	1a0c0 <regulator_common_init>
	if (ret < 0) {
   1a1de:	2800      	cmp	r0, #0
   1a1e0:	db04      	blt.n	1a1ec <regulator_fixed_init+0x66>
		return ret;
	}

	if (regulator_is_enabled(dev)) {
   1a1e2:	4628      	mov	r0, r5
   1a1e4:	f7ff ff22 	bl	1a02c <regulator_is_enabled>
   1a1e8:	b908      	cbnz	r0, 1a1ee <regulator_fixed_init+0x68>
		k_busy_wait(cfg->startup_delay_us);
	}

	return 0;
   1a1ea:	2000      	movs	r0, #0
}
   1a1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_busy_wait(cfg->startup_delay_us);
   1a1ee:	69e0      	ldr	r0, [r4, #28]
	z_impl_k_busy_wait(usec_to_wait);
   1a1f0:	f000 fce3 	bl	1abba <z_impl_k_busy_wait>
}
   1a1f4:	e7f9      	b.n	1a1ea <regulator_fixed_init+0x64>
		return -ENODEV;
   1a1f6:	f06f 0012 	mvn.w	r0, #18
   1a1fa:	e7f7      	b.n	1a1ec <regulator_fixed_init+0x66>

0001a1fc <regulator_fixed_disable>:
	const struct regulator_fixed_config *cfg = dev->config;
   1a1fc:	6843      	ldr	r3, [r0, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
   1a1fe:	2200      	movs	r2, #0
   1a200:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
   1a204:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1a206:	f7ff bfae 	b.w	1a166 <gpio_pin_set>

0001a20a <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   1a20a:	6902      	ldr	r2, [r0, #16]
{
   1a20c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   1a20e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1a212:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1a216:	2000      	movs	r0, #0
   1a218:	4770      	bx	lr

0001a21a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1a21a:	6843      	ldr	r3, [r0, #4]
   1a21c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1a21e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1a222:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1a226:	4770      	bx	lr

0001a228 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1a228:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1a22a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1a22c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a22e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1a232:	b150      	cbz	r0, 1a24a <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   1a234:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a236:	2000      	movs	r0, #0
   1a238:	7812      	ldrb	r2, [r2, #0]
   1a23a:	700a      	strb	r2, [r1, #0]
   1a23c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1a240:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a244:	2201      	movs	r2, #1
   1a246:	601a      	str	r2, [r3, #0]
	return 0;
   1a248:	4770      	bx	lr
		return -1;
   1a24a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1a24e:	4770      	bx	lr

0001a250 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1a250:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1a252:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a254:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1a258:	b940      	cbnz	r0, 1a26c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1a25a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1a25c:	079b      	lsls	r3, r3, #30
   1a25e:	d406      	bmi.n	1a26e <is_tx_ready.isra.0+0x1e>
   1a260:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1a264:	3800      	subs	r0, #0
   1a266:	bf18      	it	ne
   1a268:	2001      	movne	r0, #1
   1a26a:	4770      	bx	lr
   1a26c:	2001      	movs	r0, #1
}
   1a26e:	4770      	bx	lr

0001a270 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1a270:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1a272:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1a274:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1a278:	05c9      	lsls	r1, r1, #23
   1a27a:	d518      	bpl.n	1a2ae <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a27c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1a280:	b1a9      	cbz	r1, 1a2ae <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1a282:	f04f 0020 	mov.w	r0, #32
   1a286:	f3ef 8111 	mrs	r1, BASEPRI
   1a28a:	f380 8812 	msr	BASEPRI_MAX, r0
   1a28e:	f3bf 8f6f 	isb	sy
   1a292:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1a296:	b130      	cbz	r0, 1a2a6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a298:	2000      	movs	r0, #0
   1a29a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1a29e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a2a2:	2001      	movs	r0, #1
   1a2a4:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   1a2a6:	f381 8811 	msr	BASEPRI, r1
   1a2aa:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a2ae:	6852      	ldr	r2, [r2, #4]
   1a2b0:	06d2      	lsls	r2, r2, #27
   1a2b2:	d515      	bpl.n	1a2e0 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1a2b4:	f04f 0120 	mov.w	r1, #32
   1a2b8:	f3ef 8211 	mrs	r2, BASEPRI
   1a2bc:	f381 8812 	msr	BASEPRI_MAX, r1
   1a2c0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a2c4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1a2c8:	b111      	cbz	r1, 1a2d0 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1a2ca:	2100      	movs	r1, #0
   1a2cc:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1a2d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1a2d4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1a2d8:	f382 8811 	msr	BASEPRI, r2
   1a2dc:	f3bf 8f6f 	isb	sy
}
   1a2e0:	4770      	bx	lr

0001a2e2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1a2e2:	4770      	bx	lr

0001a2e4 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1a2e4:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1a2e8:	009b      	lsls	r3, r3, #2
   1a2ea:	b29b      	uxth	r3, r3
   1a2ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a2f0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1a2f4:	2200      	movs	r2, #0
   1a2f6:	601a      	str	r2, [r3, #0]
   1a2f8:	681b      	ldr	r3, [r3, #0]
}
   1a2fa:	4770      	bx	lr

0001a2fc <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1a2fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a300:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1a304:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1a306:	bf04      	itt	eq
   1a308:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   1a30c:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   1a310:	1f83      	subs	r3, r0, #6
   1a312:	4258      	negs	r0, r3
   1a314:	4158      	adcs	r0, r3
   1a316:	4770      	bx	lr

0001a318 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1a318:	4700      	bx	r0

0001a31a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1a31a:	f000 bc4e 	b.w	1abba <z_impl_k_busy_wait>

0001a31e <nrfx_clock_enable>:
{
   1a31e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1a320:	2000      	movs	r0, #0
   1a322:	f7e7 ffd9 	bl	22d8 <arch_irq_is_enabled>
   1a326:	b908      	cbnz	r0, 1a32c <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1a328:	f7e7 ffb4 	bl	2294 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1a32c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a330:	2200      	movs	r2, #0
   1a332:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1a336:	bd08      	pop	{r3, pc}

0001a338 <nrfx_clock_stop>:
    clock_stop(domain);
   1a338:	f7fa bb04 	b.w	14944 <clock_stop>

0001a33c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1a33c:	f000 001f 	and.w	r0, r0, #31
   1a340:	0080      	lsls	r0, r0, #2
   1a342:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1a346:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   1a34a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1a34e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1a352:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1a356:	4770      	bx	lr

0001a358 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   1a358:	7b0a      	ldrb	r2, [r1, #12]
{
   1a35a:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   1a35c:	2a03      	cmp	r2, #3
   1a35e:	d829      	bhi.n	1a3b4 <xfer_completeness_check+0x5c>
   1a360:	e8df f002 	tbb	[pc, r2]
   1a364:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1a368:	688a      	ldr	r2, [r1, #8]
   1a36a:	0350      	lsls	r0, r2, #13
   1a36c:	d504      	bpl.n	1a378 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   1a36e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   1a372:	6908      	ldr	r0, [r1, #16]
   1a374:	4290      	cmp	r0, r2
   1a376:	d107      	bne.n	1a388 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1a378:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1a37a:	0352      	lsls	r2, r2, #13
   1a37c:	d41a      	bmi.n	1a3b4 <xfer_completeness_check+0x5c>
   1a37e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1a382:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1a384:	4291      	cmp	r1, r2
   1a386:	d015      	beq.n	1a3b4 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1a388:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1a38a:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1a38c:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1a390:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1a394:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   1a396:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1a39a:	6908      	ldr	r0, [r1, #16]
   1a39c:	4290      	cmp	r0, r2
   1a39e:	d1f3      	bne.n	1a388 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   1a3a0:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1a3a4:	e7ed      	b.n	1a382 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   1a3a6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1a3aa:	6909      	ldr	r1, [r1, #16]
   1a3ac:	e7ea      	b.n	1a384 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   1a3ae:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1a3b2:	e7fa      	b.n	1a3aa <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   1a3b4:	2001      	movs	r0, #1
}
   1a3b6:	4770      	bx	lr

0001a3b8 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1a3b8:	f7fb ba14 	b.w	157e4 <_DoInit>

0001a3bc <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1a3bc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1a3be:	f7ff fffb 	bl	1a3b8 <SEGGER_RTT_Init>

	return 0;
}
   1a3c2:	2000      	movs	r0, #0
   1a3c4:	bd08      	pop	{r3, pc}

0001a3c6 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   1a3c6:	4770      	bx	lr

0001a3c8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1a3c8:	b140      	cbz	r0, 1a3dc <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1a3ca:	68c3      	ldr	r3, [r0, #12]
   1a3cc:	7858      	ldrb	r0, [r3, #1]
   1a3ce:	f010 0001 	ands.w	r0, r0, #1
   1a3d2:	bf1e      	ittt	ne
   1a3d4:	7818      	ldrbne	r0, [r3, #0]
   1a3d6:	fab0 f080 	clzne	r0, r0
   1a3da:	0940      	lsrne	r0, r0, #5
}
   1a3dc:	4770      	bx	lr

0001a3de <arch_system_halt>:
	__asm__ volatile(
   1a3de:	f04f 0220 	mov.w	r2, #32
   1a3e2:	f3ef 8311 	mrs	r3, BASEPRI
   1a3e6:	f382 8812 	msr	BASEPRI_MAX, r2
   1a3ea:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   1a3ee:	e7fe      	b.n	1a3ee <arch_system_halt+0x10>

0001a3f0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1a3f0:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   1a3f2:	f7ff fff4 	bl	1a3de <arch_system_halt>

0001a3f6 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1a3f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a3f8:	4605      	mov	r5, r0
   1a3fa:	460e      	mov	r6, r1
   1a3fc:	f04f 0320 	mov.w	r3, #32
   1a400:	f3ef 8711 	mrs	r7, BASEPRI
   1a404:	f383 8812 	msr	BASEPRI_MAX, r3
   1a408:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1a40c:	f7fc fa70 	bl	168f0 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1a410:	4631      	mov	r1, r6
   1a412:	4604      	mov	r4, r0
   1a414:	4628      	mov	r0, r5
   1a416:	f7ff ffeb 	bl	1a3f0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1a41a:	f387 8811 	msr	BASEPRI, r7
   1a41e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1a422:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1a424:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a428:	f7e8 b9f0 	b.w	280c <z_impl_k_thread_abort>

0001a42c <z_early_memset>:
	(void) memset(dst, c, n);
   1a42c:	f7fd baf1 	b.w	17a12 <memset>

0001a430 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   1a430:	f7fd bae4 	b.w	179fc <memcpy>

0001a434 <k_heap_init>:
{
   1a434:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1a436:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1a43a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1a43e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1a440:	f7fc bead 	b.w	1719e <sys_heap_init>

0001a444 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1a444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a448:	b085      	sub	sp, #20
   1a44a:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   1a44e:	4607      	mov	r7, r0
   1a450:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1a452:	4650      	mov	r0, sl
   1a454:	4621      	mov	r1, r4
{
   1a456:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1a458:	f000 fbb3 	bl	1abc2 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1a45c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1a460:	bf08      	it	eq
   1a462:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1a466:	4605      	mov	r5, r0
   1a468:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1a46a:	bf04      	itt	eq
   1a46c:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   1a470:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1a474:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   1a478:	f04f 0320 	mov.w	r3, #32
   1a47c:	f3ef 8411 	mrs	r4, BASEPRI
   1a480:	f383 8812 	msr	BASEPRI_MAX, r3
   1a484:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1a488:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1a48c:	464a      	mov	r2, r9
   1a48e:	4641      	mov	r1, r8
   1a490:	4638      	mov	r0, r7
   1a492:	f7fc fe1d 	bl	170d0 <sys_heap_aligned_alloc>
   1a496:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1a498:	f7fc fbe2 	bl	16c60 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1a49c:	9b03      	ldr	r3, [sp, #12]
   1a49e:	b13b      	cbz	r3, 1a4b0 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   1a4a0:	f384 8811 	msr	BASEPRI, r4
   1a4a4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1a4a8:	4618      	mov	r0, r3
   1a4aa:	b005      	add	sp, #20
   1a4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1a4b0:	1a28      	subs	r0, r5, r0
   1a4b2:	eb66 0101 	sbc.w	r1, r6, r1
   1a4b6:	2801      	cmp	r0, #1
   1a4b8:	f171 0200 	sbcs.w	r2, r1, #0
   1a4bc:	dbf0      	blt.n	1a4a0 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1a4be:	e9cd 0100 	strd	r0, r1, [sp]
   1a4c2:	465a      	mov	r2, fp
   1a4c4:	4621      	mov	r1, r4
   1a4c6:	4650      	mov	r0, sl
   1a4c8:	f7fc f874 	bl	165b4 <z_pend_curr>
	__asm__ volatile(
   1a4cc:	f04f 0320 	mov.w	r3, #32
   1a4d0:	f3ef 8411 	mrs	r4, BASEPRI
   1a4d4:	f383 8812 	msr	BASEPRI_MAX, r3
   1a4d8:	f3bf 8f6f 	isb	sy
	return k;
   1a4dc:	e7d6      	b.n	1a48c <k_heap_aligned_alloc+0x48>

0001a4de <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1a4de:	b538      	push	{r3, r4, r5, lr}
   1a4e0:	4604      	mov	r4, r0
   1a4e2:	f04f 0320 	mov.w	r3, #32
   1a4e6:	f3ef 8511 	mrs	r5, BASEPRI
   1a4ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1a4ee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1a4f2:	f7fc fdb5 	bl	17060 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1a4f6:	f104 000c 	add.w	r0, r4, #12
   1a4fa:	f000 fb01 	bl	1ab00 <z_unpend_all>
   1a4fe:	b130      	cbz	r0, 1a50e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1a500:	4629      	mov	r1, r5
   1a502:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1a506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1a50a:	f7fc b8b7 	b.w	1667c <z_reschedule>
	__asm__ volatile(
   1a50e:	f385 8811 	msr	BASEPRI, r5
   1a512:	f3bf 8f6f 	isb	sy
}
   1a516:	bd38      	pop	{r3, r4, r5, pc}

0001a518 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1a518:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   1a51c:	4313      	orrs	r3, r2
   1a51e:	f013 0303 	ands.w	r3, r3, #3
   1a522:	d10c      	bne.n	1a53e <create_free_list+0x26>
	slab->free_list = NULL;
   1a524:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a526:	6881      	ldr	r1, [r0, #8]
   1a528:	4299      	cmp	r1, r3
   1a52a:	d801      	bhi.n	1a530 <create_free_list+0x18>
	return 0;
   1a52c:	2000      	movs	r0, #0
   1a52e:	4770      	bx	lr
		*(char **)p = slab->free_list;
   1a530:	6941      	ldr	r1, [r0, #20]
   1a532:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   1a534:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   1a536:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a538:	3301      	adds	r3, #1
		p += slab->block_size;
   1a53a:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1a53c:	e7f3      	b.n	1a526 <create_free_list+0xe>
		return -EINVAL;
   1a53e:	f06f 0015 	mvn.w	r0, #21
}
   1a542:	4770      	bx	lr

0001a544 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a546:	4604      	mov	r4, r0
   1a548:	460d      	mov	r5, r1
	__asm__ volatile(
   1a54a:	f04f 0320 	mov.w	r3, #32
   1a54e:	f3ef 8611 	mrs	r6, BASEPRI
   1a552:	f383 8812 	msr	BASEPRI_MAX, r3
   1a556:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1a55a:	6947      	ldr	r7, [r0, #20]
   1a55c:	b977      	cbnz	r7, 1a57c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1a55e:	f000 fa85 	bl	1aa6c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1a562:	b158      	cbz	r0, 1a57c <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1a564:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1a566:	6142      	str	r2, [r0, #20]
   1a568:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1a56a:	f000 fa49 	bl	1aa00 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1a56e:	4631      	mov	r1, r6
   1a570:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1a574:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1a578:	f7fc b880 	b.w	1667c <z_reschedule>
	**(char ***) mem = slab->free_list;
   1a57c:	682b      	ldr	r3, [r5, #0]
   1a57e:	6962      	ldr	r2, [r4, #20]
   1a580:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1a582:	682b      	ldr	r3, [r5, #0]
   1a584:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1a586:	69a3      	ldr	r3, [r4, #24]
   1a588:	3b01      	subs	r3, #1
   1a58a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1a58c:	f386 8811 	msr	BASEPRI, r6
   1a590:	f3bf 8f6f 	isb	sy
}
   1a594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a596 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a596:	f3ef 8005 	mrs	r0, IPSR
}
   1a59a:	3800      	subs	r0, #0
   1a59c:	bf18      	it	ne
   1a59e:	2001      	movne	r0, #1
   1a5a0:	4770      	bx	lr

0001a5a2 <z_impl_k_thread_name_set>:
}
   1a5a2:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1a5a6:	4770      	bx	lr

0001a5a8 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1a5a8:	f7fc b87a 	b.w	166a0 <z_sched_start>

0001a5ac <z_pm_save_idle_exit>:
{
   1a5ac:	b508      	push	{r3, lr}
	pm_system_resume();
   1a5ae:	f7e7 fcdb 	bl	1f68 <pm_system_resume>
}
   1a5b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1a5b6:	f7ff be94 	b.w	1a2e2 <sys_clock_idle_exit>

0001a5ba <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1a5ba:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a5be:	428b      	cmp	r3, r1
   1a5c0:	d001      	beq.n	1a5c6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1a5c2:	f7fc b815 	b.w	165f0 <z_set_prio>
}
   1a5c6:	2000      	movs	r0, #0
   1a5c8:	4770      	bx	lr

0001a5ca <z_impl_k_mutex_init>:
{
   1a5ca:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1a5cc:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   1a5ce:	e9c3 0002 	strd	r0, r0, [r3, #8]
   1a5d2:	e9c3 3300 	strd	r3, r3, [r3]
}
   1a5d6:	4770      	bx	lr

0001a5d8 <queue_insert>:
{
   1a5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a5dc:	4699      	mov	r9, r3
   1a5de:	4604      	mov	r4, r0
   1a5e0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1a5e4:	460d      	mov	r5, r1
   1a5e6:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a5e8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1a5ec:	f04f 0220 	mov.w	r2, #32
   1a5f0:	f3ef 8711 	mrs	r7, BASEPRI
   1a5f4:	f382 8812 	msr	BASEPRI_MAX, r2
   1a5f8:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1a5fc:	b103      	cbz	r3, 1a600 <queue_insert+0x28>
	return list->tail;
   1a5fe:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1a600:	4630      	mov	r0, r6
   1a602:	f000 fa33 	bl	1aa6c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1a606:	b158      	cbz	r0, 1a620 <queue_insert+0x48>
   1a608:	2300      	movs	r3, #0
   1a60a:	67c3      	str	r3, [r0, #124]	; 0x7c
   1a60c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1a610:	f000 f9f6 	bl	1aa00 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1a614:	4630      	mov	r0, r6
   1a616:	4639      	mov	r1, r7
   1a618:	f7fc f830 	bl	1667c <z_reschedule>
		return 0;
   1a61c:	2000      	movs	r0, #0
   1a61e:	e00c      	b.n	1a63a <queue_insert+0x62>
	if (alloc) {
   1a620:	f1b9 0f00 	cmp.w	r9, #0
   1a624:	d01b      	beq.n	1a65e <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1a626:	2108      	movs	r1, #8
   1a628:	f7fc fbb8 	bl	16d9c <z_thread_aligned_alloc>
		if (anode == NULL) {
   1a62c:	b938      	cbnz	r0, 1a63e <queue_insert+0x66>
	__asm__ volatile(
   1a62e:	f387 8811 	msr	BASEPRI, r7
   1a632:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1a636:	f06f 000b 	mvn.w	r0, #11
}
   1a63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1a63e:	2201      	movs	r2, #1
		anode->data = data;
   1a640:	f8c0 8004 	str.w	r8, [r0, #4]
   1a644:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a646:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a648:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1a64c:	b95d      	cbnz	r5, 1a666 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a64e:	6822      	ldr	r2, [r4, #0]
   1a650:	430a      	orrs	r2, r1
   1a652:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a654:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1a656:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a658:	b96a      	cbnz	r2, 1a676 <queue_insert+0x9e>
	list->tail = node;
   1a65a:	6060      	str	r0, [r4, #4]
}
   1a65c:	e00b      	b.n	1a676 <queue_insert+0x9e>
	node->next_and_flags = flags;
   1a65e:	f8c8 9000 	str.w	r9, [r8]
}
   1a662:	4640      	mov	r0, r8
   1a664:	e7ef      	b.n	1a646 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a666:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1a668:	2a03      	cmp	r2, #3
   1a66a:	d810      	bhi.n	1a68e <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a66c:	6001      	str	r1, [r0, #0]
	return list->tail;
   1a66e:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1a670:	b939      	cbnz	r1, 1a682 <queue_insert+0xaa>
	list->head = node;
   1a672:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a676:	2104      	movs	r1, #4
   1a678:	f104 0010 	add.w	r0, r4, #16
   1a67c:	f000 fc03 	bl	1ae86 <z_handle_obj_poll_events>
   1a680:	e7c8      	b.n	1a614 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a682:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a684:	f002 0203 	and.w	r2, r2, #3
   1a688:	4302      	orrs	r2, r0
   1a68a:	600a      	str	r2, [r1, #0]
   1a68c:	e7e5      	b.n	1a65a <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a68e:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a692:	430a      	orrs	r2, r1
   1a694:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a696:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a698:	f002 0203 	and.w	r2, r2, #3
   1a69c:	ea40 0302 	orr.w	r3, r0, r2
   1a6a0:	602b      	str	r3, [r5, #0]
}
   1a6a2:	e7e8      	b.n	1a676 <queue_insert+0x9e>

0001a6a4 <z_queue_node_peek>:
{
   1a6a4:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1a6a6:	4604      	mov	r4, r0
   1a6a8:	b130      	cbz	r0, 1a6b8 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a6aa:	6802      	ldr	r2, [r0, #0]
   1a6ac:	0793      	lsls	r3, r2, #30
   1a6ae:	d003      	beq.n	1a6b8 <z_queue_node_peek+0x14>
		ret = anode->data;
   1a6b0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1a6b2:	b109      	cbz	r1, 1a6b8 <z_queue_node_peek+0x14>
			k_free(anode);
   1a6b4:	f000 fbfa 	bl	1aeac <k_free>
}
   1a6b8:	4620      	mov	r0, r4
   1a6ba:	bd10      	pop	{r4, pc}

0001a6bc <z_impl_k_queue_init>:
	list->head = NULL;
   1a6bc:	2300      	movs	r3, #0
	list->tail = NULL;
   1a6be:	e9c0 3300 	strd	r3, r3, [r0]
   1a6c2:	f100 0308 	add.w	r3, r0, #8
   1a6c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1a6ca:	f100 0310 	add.w	r3, r0, #16
   1a6ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1a6d2:	4770      	bx	lr

0001a6d4 <z_impl_k_queue_cancel_wait>:
{
   1a6d4:	b570      	push	{r4, r5, r6, lr}
   1a6d6:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a6d8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1a6dc:	f04f 0320 	mov.w	r3, #32
   1a6e0:	f3ef 8611 	mrs	r6, BASEPRI
   1a6e4:	f383 8812 	msr	BASEPRI_MAX, r3
   1a6e8:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1a6ec:	4628      	mov	r0, r5
   1a6ee:	f000 f9bd 	bl	1aa6c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1a6f2:	b120      	cbz	r0, 1a6fe <z_impl_k_queue_cancel_wait+0x2a>
   1a6f4:	2200      	movs	r2, #0
   1a6f6:	67c2      	str	r2, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   1a6f8:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   1a6fa:	f000 f981 	bl	1aa00 <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a6fe:	f104 0010 	add.w	r0, r4, #16
   1a702:	2108      	movs	r1, #8
   1a704:	f000 fbbf 	bl	1ae86 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1a708:	4631      	mov	r1, r6
   1a70a:	4628      	mov	r0, r5
}
   1a70c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   1a710:	f7fb bfb4 	b.w	1667c <z_reschedule>

0001a714 <k_queue_append>:
{
   1a714:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1a716:	2301      	movs	r3, #1
   1a718:	9300      	str	r3, [sp, #0]
   1a71a:	2300      	movs	r3, #0
{
   1a71c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1a71e:	4619      	mov	r1, r3
   1a720:	f7ff ff5a 	bl	1a5d8 <queue_insert>
}
   1a724:	b003      	add	sp, #12
   1a726:	f85d fb04 	ldr.w	pc, [sp], #4

0001a72a <k_queue_prepend>:
{
   1a72a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1a72c:	2300      	movs	r3, #0
{
   1a72e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1a730:	9300      	str	r3, [sp, #0]
   1a732:	4619      	mov	r1, r3
   1a734:	f7ff ff50 	bl	1a5d8 <queue_insert>
}
   1a738:	b003      	add	sp, #12
   1a73a:	f85d fb04 	ldr.w	pc, [sp], #4

0001a73e <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   1a73e:	6800      	ldr	r0, [r0, #0]
   1a740:	2100      	movs	r1, #0
   1a742:	f7ff bfaf 	b.w	1a6a4 <z_queue_node_peek>

0001a746 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1a746:	b15a      	cbz	r2, 1a760 <z_impl_k_sem_init+0x1a>
   1a748:	428a      	cmp	r2, r1
   1a74a:	d309      	bcc.n	1a760 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1a74c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1a750:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1a754:	e9c0 0000 	strd	r0, r0, [r0]
   1a758:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1a75c:	2000      	movs	r0, #0
   1a75e:	4770      	bx	lr
		return -EINVAL;
   1a760:	f06f 0015 	mvn.w	r0, #21
}
   1a764:	4770      	bx	lr

0001a766 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1a766:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1a768:	2301      	movs	r3, #1
   1a76a:	408b      	lsls	r3, r1
   1a76c:	ea22 0303 	bic.w	r3, r2, r3
   1a770:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1a772:	fa22 f001 	lsr.w	r0, r2, r1
}
   1a776:	f000 0001 	and.w	r0, r0, #1
   1a77a:	4770      	bx	lr

0001a77c <unschedule_locked>:
{
   1a77c:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1a77e:	2103      	movs	r1, #3
{
   1a780:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1a782:	300c      	adds	r0, #12
   1a784:	f7ff ffef 	bl	1a766 <flag_test_and_clear>
   1a788:	b130      	cbz	r0, 1a798 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   1a78a:	f104 0010 	add.w	r0, r4, #16
   1a78e:	f000 f9ea 	bl	1ab66 <z_abort_timeout>
   1a792:	fab0 f080 	clz	r0, r0
   1a796:	0940      	lsrs	r0, r0, #5
}
   1a798:	bd10      	pop	{r4, pc}

0001a79a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1a79a:	b120      	cbz	r0, 1a7a6 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1a79c:	2200      	movs	r2, #0
   1a79e:	4611      	mov	r1, r2
   1a7a0:	3088      	adds	r0, #136	; 0x88
   1a7a2:	f000 b9bd 	b.w	1ab20 <z_sched_wake>
}
   1a7a6:	4770      	bx	lr

0001a7a8 <cancel_async_locked>:
{
   1a7a8:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1a7aa:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a7ac:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1a7b0:	079b      	lsls	r3, r3, #30
{
   1a7b2:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a7b4:	d416      	bmi.n	1a7e4 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1a7b6:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1a7b8:	2102      	movs	r1, #2
   1a7ba:	300c      	adds	r0, #12
   1a7bc:	f7ff ffd3 	bl	1a766 <flag_test_and_clear>
   1a7c0:	b180      	cbz	r0, 1a7e4 <cancel_async_locked+0x3c>
	return list->head;
   1a7c2:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a7c6:	b16a      	cbz	r2, 1a7e4 <cancel_async_locked+0x3c>
   1a7c8:	4294      	cmp	r4, r2
   1a7ca:	d11d      	bne.n	1a808 <cancel_async_locked+0x60>
	return node->next;
   1a7cc:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a7ce:	b99e      	cbnz	r6, 1a7f8 <cancel_async_locked+0x50>
   1a7d0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   1a7d4:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1a7d8:	429c      	cmp	r4, r3
   1a7da:	d101      	bne.n	1a7e0 <cancel_async_locked+0x38>
	list->tail = node;
   1a7dc:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   1a7e0:	2300      	movs	r3, #0
   1a7e2:	6023      	str	r3, [r4, #0]
	return *flagp;
   1a7e4:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1a7e6:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1a7ea:	bf1e      	ittt	ne
   1a7ec:	f043 0302 	orrne.w	r3, r3, #2
   1a7f0:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1a7f2:	f040 0002 	orrne.w	r0, r0, #2
}
   1a7f6:	bd70      	pop	{r4, r5, r6, pc}
   1a7f8:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a7fa:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   1a7fe:	4294      	cmp	r4, r2
	list->tail = node;
   1a800:	bf08      	it	eq
   1a802:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   1a806:	e7eb      	b.n	1a7e0 <cancel_async_locked+0x38>
	return node->next;
   1a808:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a80a:	6812      	ldr	r2, [r2, #0]
   1a80c:	e7db      	b.n	1a7c6 <cancel_async_locked+0x1e>

0001a80e <work_timeout>:
{
   1a80e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a810:	4604      	mov	r4, r0
   1a812:	f04f 0320 	mov.w	r3, #32
   1a816:	f3ef 8511 	mrs	r5, BASEPRI
   1a81a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a81e:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1a822:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1a824:	f1a0 0610 	sub.w	r6, r0, #16
   1a828:	2103      	movs	r1, #3
   1a82a:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1a82c:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1a82e:	f7ff ff9a 	bl	1a766 <flag_test_and_clear>
   1a832:	b128      	cbz	r0, 1a840 <work_timeout+0x32>
		queue = dw->queue;
   1a834:	69a3      	ldr	r3, [r4, #24]
   1a836:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1a838:	a901      	add	r1, sp, #4
   1a83a:	4630      	mov	r0, r6
   1a83c:	f7fb fc4c 	bl	160d8 <submit_to_queue_locked>
	__asm__ volatile(
   1a840:	f385 8811 	msr	BASEPRI, r5
   1a844:	f3bf 8f6f 	isb	sy
}
   1a848:	b002      	add	sp, #8
   1a84a:	bd70      	pop	{r4, r5, r6, pc}

0001a84c <k_work_init>:
{
   1a84c:	b538      	push	{r3, r4, r5, lr}
   1a84e:	4604      	mov	r4, r0
   1a850:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1a852:	2210      	movs	r2, #16
   1a854:	2100      	movs	r1, #0
   1a856:	f7fd f8dc 	bl	17a12 <memset>
   1a85a:	6065      	str	r5, [r4, #4]
}
   1a85c:	bd38      	pop	{r3, r4, r5, pc}

0001a85e <k_work_busy_get>:
	__asm__ volatile(
   1a85e:	f04f 0220 	mov.w	r2, #32
   1a862:	f3ef 8311 	mrs	r3, BASEPRI
   1a866:	f382 8812 	msr	BASEPRI_MAX, r2
   1a86a:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1a86e:	68c0      	ldr	r0, [r0, #12]
   1a870:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   1a874:	f383 8811 	msr	BASEPRI, r3
   1a878:	f3bf 8f6f 	isb	sy
}
   1a87c:	4770      	bx	lr

0001a87e <z_work_submit_to_queue>:
{
   1a87e:	b513      	push	{r0, r1, r4, lr}
   1a880:	9001      	str	r0, [sp, #4]
   1a882:	4608      	mov	r0, r1
	__asm__ volatile(
   1a884:	f04f 0320 	mov.w	r3, #32
   1a888:	f3ef 8411 	mrs	r4, BASEPRI
   1a88c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a890:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1a894:	a901      	add	r1, sp, #4
   1a896:	f7fb fc1f 	bl	160d8 <submit_to_queue_locked>
	__asm__ volatile(
   1a89a:	f384 8811 	msr	BASEPRI, r4
   1a89e:	f3bf 8f6f 	isb	sy
}
   1a8a2:	b002      	add	sp, #8
   1a8a4:	bd10      	pop	{r4, pc}

0001a8a6 <k_work_submit_to_queue>:
{
   1a8a6:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1a8a8:	f7ff ffe9 	bl	1a87e <z_work_submit_to_queue>
	if (ret > 0) {
   1a8ac:	1e04      	subs	r4, r0, #0
   1a8ae:	dd09      	ble.n	1a8c4 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1a8b0:	f04f 0320 	mov.w	r3, #32
   1a8b4:	f3ef 8011 	mrs	r0, BASEPRI
   1a8b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a8bc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1a8c0:	f000 f908 	bl	1aad4 <z_reschedule_irqlock>
}
   1a8c4:	4620      	mov	r0, r4
   1a8c6:	bd10      	pop	{r4, pc}

0001a8c8 <k_work_queue_init>:
{
   1a8c8:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   1a8ca:	22a0      	movs	r2, #160	; 0xa0
   1a8cc:	2100      	movs	r1, #0
   1a8ce:	f7fd f8a0 	bl	17a12 <memset>
}
   1a8d2:	bd08      	pop	{r3, pc}

0001a8d4 <k_work_init_delayable>:
{
   1a8d4:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1a8d6:	2230      	movs	r2, #48	; 0x30
{
   1a8d8:	4604      	mov	r4, r0
   1a8da:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1a8dc:	2100      	movs	r1, #0
   1a8de:	f7fd f898 	bl	17a12 <memset>
   1a8e2:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a8e6:	6065      	str	r5, [r4, #4]
   1a8e8:	60e3      	str	r3, [r4, #12]
}
   1a8ea:	bd38      	pop	{r3, r4, r5, pc}

0001a8ec <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   1a8ec:	f7ff bfb7 	b.w	1a85e <k_work_busy_get>

0001a8f0 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1a8f0:	b538      	push	{r3, r4, r5, lr}
   1a8f2:	4604      	mov	r4, r0
   1a8f4:	f04f 0320 	mov.w	r3, #32
   1a8f8:	f3ef 8511 	mrs	r5, BASEPRI
   1a8fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1a900:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1a904:	f7ff ff3a 	bl	1a77c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1a908:	4620      	mov	r0, r4
   1a90a:	f7ff ff4d 	bl	1a7a8 <cancel_async_locked>
	__asm__ volatile(
   1a90e:	f385 8811 	msr	BASEPRI, r5
   1a912:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1a916:	bd38      	pop	{r3, r4, r5, pc}

0001a918 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a91a:	4604      	mov	r4, r0
   1a91c:	460d      	mov	r5, r1
	__asm__ volatile(
   1a91e:	f04f 0320 	mov.w	r3, #32
   1a922:	f3ef 8611 	mrs	r6, BASEPRI
   1a926:	f383 8812 	msr	BASEPRI_MAX, r3
   1a92a:	f3bf 8f6f 	isb	sy
	return *flagp;
   1a92e:	68c3      	ldr	r3, [r0, #12]
   1a930:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1a934:	2b00      	cmp	r3, #0
   1a936:	bf14      	ite	ne
   1a938:	2701      	movne	r7, #1
   1a93a:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1a93c:	d105      	bne.n	1a94a <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   1a93e:	f386 8811 	msr	BASEPRI, r6
   1a942:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1a946:	4638      	mov	r0, r7
   1a948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   1a94a:	f7ff ff17 	bl	1a77c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1a94e:	4620      	mov	r0, r4
   1a950:	f7ff ff2a 	bl	1a7a8 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1a954:	4629      	mov	r1, r5
   1a956:	4620      	mov	r0, r4
   1a958:	f7fb fba0 	bl	1609c <cancel_sync_locked>
   1a95c:	f386 8811 	msr	BASEPRI, r6
   1a960:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   1a964:	2800      	cmp	r0, #0
   1a966:	d0ee      	beq.n	1a946 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   1a968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a96c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a970:	f105 0008 	add.w	r0, r5, #8
   1a974:	f7fb fa92 	bl	15e9c <z_impl_k_sem_take>
   1a978:	e7e5      	b.n	1a946 <k_work_cancel_delayable_sync+0x2e>

0001a97a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1a97a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1a97e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a980:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a982:	2300      	movs	r3, #0
	node->prev = NULL;
   1a984:	e9c0 3300 	strd	r3, r3, [r0]
}
   1a988:	4770      	bx	lr

0001a98a <unpend_thread_no_timeout>:
{
   1a98a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a98c:	f7ff fff5 	bl	1a97a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a990:	7b43      	ldrb	r3, [r0, #13]
   1a992:	f023 0302 	bic.w	r3, r3, #2
   1a996:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1a998:	2300      	movs	r3, #0
   1a99a:	6083      	str	r3, [r0, #8]
}
   1a99c:	bd08      	pop	{r3, pc}

0001a99e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1a99e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1a9a2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1a9a6:	4283      	cmp	r3, r0
		return b2 - b1;
   1a9a8:	bf14      	ite	ne
   1a9aa:	1ac0      	subne	r0, r0, r3
	return 0;
   1a9ac:	2000      	moveq	r0, #0
}
   1a9ae:	4770      	bx	lr

0001a9b0 <add_to_waitq_locked>:
{
   1a9b0:	b538      	push	{r3, r4, r5, lr}
   1a9b2:	4604      	mov	r4, r0
   1a9b4:	460d      	mov	r5, r1
	unready_thread(thread);
   1a9b6:	f7fb fd6d 	bl	16494 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1a9ba:	7b63      	ldrb	r3, [r4, #13]
   1a9bc:	f043 0302 	orr.w	r3, r3, #2
   1a9c0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1a9c2:	b1e5      	cbz	r5, 1a9fe <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   1a9c4:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   1a9c6:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a9c8:	429d      	cmp	r5, r3
   1a9ca:	d109      	bne.n	1a9e0 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   1a9cc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1a9ce:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1a9d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a9d4:	606c      	str	r4, [r5, #4]
}
   1a9d6:	e012      	b.n	1a9fe <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1a9d8:	686a      	ldr	r2, [r5, #4]
   1a9da:	4293      	cmp	r3, r2
   1a9dc:	d0f6      	beq.n	1a9cc <add_to_waitq_locked+0x1c>
   1a9de:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a9e0:	2b00      	cmp	r3, #0
   1a9e2:	d0f3      	beq.n	1a9cc <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   1a9e4:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1a9e8:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1a9ec:	428a      	cmp	r2, r1
   1a9ee:	d0f3      	beq.n	1a9d8 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a9f0:	4291      	cmp	r1, r2
   1a9f2:	ddf1      	ble.n	1a9d8 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   1a9f4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a9f6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1a9fa:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1a9fc:	605c      	str	r4, [r3, #4]
}
   1a9fe:	bd38      	pop	{r3, r4, r5, pc}

0001aa00 <z_ready_thread>:
{
   1aa00:	b510      	push	{r4, lr}
	__asm__ volatile(
   1aa02:	f04f 0320 	mov.w	r3, #32
   1aa06:	f3ef 8411 	mrs	r4, BASEPRI
   1aa0a:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa0e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1aa12:	f7fb fd0b 	bl	1642c <ready_thread>
	__asm__ volatile(
   1aa16:	f384 8811 	msr	BASEPRI, r4
   1aa1a:	f3bf 8f6f 	isb	sy
}
   1aa1e:	bd10      	pop	{r4, pc}

0001aa20 <z_sched_wake_thread>:
{
   1aa20:	b538      	push	{r3, r4, r5, lr}
   1aa22:	4604      	mov	r4, r0
	__asm__ volatile(
   1aa24:	f04f 0320 	mov.w	r3, #32
   1aa28:	f3ef 8511 	mrs	r5, BASEPRI
   1aa2c:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa30:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1aa34:	7b43      	ldrb	r3, [r0, #13]
   1aa36:	f013 0f28 	tst.w	r3, #40	; 0x28
   1aa3a:	d10b      	bne.n	1aa54 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   1aa3c:	6883      	ldr	r3, [r0, #8]
   1aa3e:	b10b      	cbz	r3, 1aa44 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   1aa40:	f7ff ffa3 	bl	1a98a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1aa44:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   1aa46:	b951      	cbnz	r1, 1aa5e <z_sched_wake_thread+0x3e>
   1aa48:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1aa4c:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   1aa4e:	4620      	mov	r0, r4
   1aa50:	f7fb fcec 	bl	1642c <ready_thread>
	__asm__ volatile(
   1aa54:	f385 8811 	msr	BASEPRI, r5
   1aa58:	f3bf 8f6f 	isb	sy
}
   1aa5c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1aa5e:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   1aa62:	e7f3      	b.n	1aa4c <z_sched_wake_thread+0x2c>

0001aa64 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   1aa64:	2101      	movs	r1, #1
   1aa66:	3818      	subs	r0, #24
   1aa68:	f7ff bfda 	b.w	1aa20 <z_sched_wake_thread>

0001aa6c <z_unpend_first_thread>:
{
   1aa6c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1aa6e:	f04f 0320 	mov.w	r3, #32
   1aa72:	f3ef 8511 	mrs	r5, BASEPRI
   1aa76:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa7a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1aa7e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aa80:	42a0      	cmp	r0, r4
   1aa82:	d00d      	beq.n	1aaa0 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   1aa84:	b134      	cbz	r4, 1aa94 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   1aa86:	4620      	mov	r0, r4
   1aa88:	f7ff ff7f 	bl	1a98a <unpend_thread_no_timeout>
   1aa8c:	f104 0018 	add.w	r0, r4, #24
   1aa90:	f000 f869 	bl	1ab66 <z_abort_timeout>
	__asm__ volatile(
   1aa94:	f385 8811 	msr	BASEPRI, r5
   1aa98:	f3bf 8f6f 	isb	sy
}
   1aa9c:	4620      	mov	r0, r4
   1aa9e:	bd38      	pop	{r3, r4, r5, pc}
   1aaa0:	2400      	movs	r4, #0
   1aaa2:	e7f7      	b.n	1aa94 <z_unpend_first_thread+0x28>

0001aaa4 <z_unpend_thread>:
{
   1aaa4:	b510      	push	{r4, lr}
   1aaa6:	4601      	mov	r1, r0
	__asm__ volatile(
   1aaa8:	f04f 0320 	mov.w	r3, #32
   1aaac:	f3ef 8411 	mrs	r4, BASEPRI
   1aab0:	f383 8812 	msr	BASEPRI_MAX, r3
   1aab4:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1aab8:	6883      	ldr	r3, [r0, #8]
   1aaba:	b10b      	cbz	r3, 1aac0 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   1aabc:	f7ff ff65 	bl	1a98a <unpend_thread_no_timeout>
	__asm__ volatile(
   1aac0:	f384 8811 	msr	BASEPRI, r4
   1aac4:	f3bf 8f6f 	isb	sy
}
   1aac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1aacc:	f101 0018 	add.w	r0, r1, #24
   1aad0:	f000 b849 	b.w	1ab66 <z_abort_timeout>

0001aad4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1aad4:	4603      	mov	r3, r0
   1aad6:	b920      	cbnz	r0, 1aae2 <z_reschedule_irqlock+0xe>
   1aad8:	f3ef 8205 	mrs	r2, IPSR
   1aadc:	b90a      	cbnz	r2, 1aae2 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1aade:	f7e7 bc57 	b.w	2390 <arch_swap>
   1aae2:	f383 8811 	msr	BASEPRI, r3
   1aae6:	f3bf 8f6f 	isb	sy
}
   1aaea:	4770      	bx	lr

0001aaec <z_reschedule_unlocked>:
	__asm__ volatile(
   1aaec:	f04f 0320 	mov.w	r3, #32
   1aaf0:	f3ef 8011 	mrs	r0, BASEPRI
   1aaf4:	f383 8812 	msr	BASEPRI_MAX, r3
   1aaf8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1aafc:	f7ff bfea 	b.w	1aad4 <z_reschedule_irqlock>

0001ab00 <z_unpend_all>:
{
   1ab00:	b538      	push	{r3, r4, r5, lr}
   1ab02:	4605      	mov	r5, r0
	int need_sched = 0;
   1ab04:	2000      	movs	r0, #0
	return list->head == list;
   1ab06:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ab08:	42a5      	cmp	r5, r4
   1ab0a:	d000      	beq.n	1ab0e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1ab0c:	b904      	cbnz	r4, 1ab10 <z_unpend_all+0x10>
}
   1ab0e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1ab10:	4620      	mov	r0, r4
   1ab12:	f7ff ffc7 	bl	1aaa4 <z_unpend_thread>
		z_ready_thread(thread);
   1ab16:	4620      	mov	r0, r4
   1ab18:	f7ff ff72 	bl	1aa00 <z_ready_thread>
		need_sched = 1;
   1ab1c:	2001      	movs	r0, #1
   1ab1e:	e7f2      	b.n	1ab06 <z_unpend_all+0x6>

0001ab20 <z_sched_wake>:
{
   1ab20:	b538      	push	{r3, r4, r5, lr}
   1ab22:	f04f 0320 	mov.w	r3, #32
   1ab26:	f3ef 8511 	mrs	r5, BASEPRI
   1ab2a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab2e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1ab32:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ab34:	42a0      	cmp	r0, r4
   1ab36:	d012      	beq.n	1ab5e <z_sched_wake+0x3e>
		if (thread != NULL) {
   1ab38:	b19c      	cbz	r4, 1ab62 <z_sched_wake+0x42>
   1ab3a:	67e1      	str	r1, [r4, #124]	; 0x7c
   1ab3c:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   1ab3e:	4620      	mov	r0, r4
   1ab40:	f7ff ff23 	bl	1a98a <unpend_thread_no_timeout>
   1ab44:	f104 0018 	add.w	r0, r4, #24
   1ab48:	f000 f80d 	bl	1ab66 <z_abort_timeout>
			ready_thread(thread);
   1ab4c:	4620      	mov	r0, r4
   1ab4e:	f7fb fc6d 	bl	1642c <ready_thread>
			ret = true;
   1ab52:	2001      	movs	r0, #1
	__asm__ volatile(
   1ab54:	f385 8811 	msr	BASEPRI, r5
   1ab58:	f3bf 8f6f 	isb	sy
}
   1ab5c:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   1ab5e:	2000      	movs	r0, #0
   1ab60:	e7f8      	b.n	1ab54 <z_sched_wake+0x34>
   1ab62:	4620      	mov	r0, r4
   1ab64:	e7f6      	b.n	1ab54 <z_sched_wake+0x34>

0001ab66 <z_abort_timeout>:
{
   1ab66:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ab68:	f04f 0220 	mov.w	r2, #32
   1ab6c:	f3ef 8411 	mrs	r4, BASEPRI
   1ab70:	f382 8812 	msr	BASEPRI_MAX, r2
   1ab74:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1ab78:	6803      	ldr	r3, [r0, #0]
   1ab7a:	b13b      	cbz	r3, 1ab8c <z_abort_timeout+0x26>
			remove_timeout(to);
   1ab7c:	f7fb ff74 	bl	16a68 <remove_timeout>
			ret = 0;
   1ab80:	2000      	movs	r0, #0
	__asm__ volatile(
   1ab82:	f384 8811 	msr	BASEPRI, r4
   1ab86:	f3bf 8f6f 	isb	sy
}
   1ab8a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1ab8c:	f06f 0015 	mvn.w	r0, #21
   1ab90:	e7f7      	b.n	1ab82 <z_abort_timeout+0x1c>

0001ab92 <z_get_next_timeout_expiry>:
{
   1ab92:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ab94:	f04f 0320 	mov.w	r3, #32
   1ab98:	f3ef 8411 	mrs	r4, BASEPRI
   1ab9c:	f383 8812 	msr	BASEPRI_MAX, r3
   1aba0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1aba4:	f7fb ff40 	bl	16a28 <next_timeout>
	__asm__ volatile(
   1aba8:	f384 8811 	msr	BASEPRI, r4
   1abac:	f3bf 8f6f 	isb	sy
}
   1abb0:	bd10      	pop	{r4, pc}

0001abb2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1abb2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1abb4:	f7fc f854 	bl	16c60 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1abb8:	bd08      	pop	{r3, pc}

0001abba <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1abba:	b108      	cbz	r0, 1abc0 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1abbc:	f7e7 bf1e 	b.w	29fc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1abc0:	4770      	bx	lr

0001abc2 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1abc2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1abc6:	bf08      	it	eq
   1abc8:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1abcc:	b538      	push	{r3, r4, r5, lr}
   1abce:	460c      	mov	r4, r1
   1abd0:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1abd2:	d014      	beq.n	1abfe <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1abd4:	4308      	orrs	r0, r1
   1abd6:	d103      	bne.n	1abe0 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1abd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1abdc:	f7fc b840 	b.w	16c60 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1abe0:	f06f 0001 	mvn.w	r0, #1
   1abe4:	1b40      	subs	r0, r0, r5
   1abe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1abea:	eb63 0101 	sbc.w	r1, r3, r1
   1abee:	2900      	cmp	r1, #0
   1abf0:	da04      	bge.n	1abfc <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   1abf2:	f7fc f835 	bl	16c60 <sys_clock_tick_get>
   1abf6:	1940      	adds	r0, r0, r5
   1abf8:	eb41 0104 	adc.w	r1, r1, r4
}
   1abfc:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1abfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ac02:	4601      	mov	r1, r0
   1ac04:	e7fa      	b.n	1abfc <sys_clock_timeout_end_calc+0x3a>

0001ac06 <add_event>:
{
   1ac06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac08:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ac0a:	e9d0 1300 	ldrd	r1, r3, [r0]
   1ac0e:	4288      	cmp	r0, r1
   1ac10:	4604      	mov	r4, r0
   1ac12:	d105      	bne.n	1ac20 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   1ac14:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1ac16:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1ac1a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ac1c:	6065      	str	r5, [r4, #4]
   1ac1e:	e01d      	b.n	1ac5c <add_event+0x56>
	if ((pending == NULL) ||
   1ac20:	2b00      	cmp	r3, #0
   1ac22:	d0f7      	beq.n	1ac14 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1ac24:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ac26:	b100      	cbz	r0, 1ac2a <add_event+0x24>
   1ac28:	3860      	subs	r0, #96	; 0x60
   1ac2a:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1ac2e:	4639      	mov	r1, r7
   1ac30:	f7ff feb5 	bl	1a99e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1ac34:	2800      	cmp	r0, #0
   1ac36:	dced      	bgt.n	1ac14 <add_event+0xe>
	return list->head == list;
   1ac38:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ac3a:	42b4      	cmp	r4, r6
   1ac3c:	d0ea      	beq.n	1ac14 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ac3e:	2e00      	cmp	r6, #0
   1ac40:	d0e8      	beq.n	1ac14 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1ac42:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ac44:	b101      	cbz	r1, 1ac48 <add_event+0x42>
   1ac46:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1ac48:	4638      	mov	r0, r7
   1ac4a:	f7ff fea8 	bl	1a99e <z_sched_prio_cmp>
   1ac4e:	2800      	cmp	r0, #0
   1ac50:	dd05      	ble.n	1ac5e <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   1ac52:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1ac54:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1ac58:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1ac5a:	6075      	str	r5, [r6, #4]
}
   1ac5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1ac5e:	6863      	ldr	r3, [r4, #4]
   1ac60:	429e      	cmp	r6, r3
   1ac62:	d0d7      	beq.n	1ac14 <add_event+0xe>
   1ac64:	6836      	ldr	r6, [r6, #0]
   1ac66:	e7ea      	b.n	1ac3e <add_event+0x38>

0001ac68 <register_events>:
{
   1ac68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1ac6c:	2500      	movs	r5, #0
{
   1ac6e:	468b      	mov	fp, r1
   1ac70:	4614      	mov	r4, r2
   1ac72:	461f      	mov	r7, r3
   1ac74:	4682      	mov	sl, r0
	int events_registered = 0;
   1ac76:	462e      	mov	r6, r5
	event->poller = NULL;
   1ac78:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1ac7a:	455d      	cmp	r5, fp
   1ac7c:	db02      	blt.n	1ac84 <register_events+0x1c>
}
   1ac7e:	4630      	mov	r0, r6
   1ac80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1ac84:	f04f 0320 	mov.w	r3, #32
   1ac88:	f3ef 8911 	mrs	r9, BASEPRI
   1ac8c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac90:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1ac94:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1ac98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ac9c:	3b01      	subs	r3, #1
   1ac9e:	2b07      	cmp	r3, #7
   1aca0:	d80f      	bhi.n	1acc2 <register_events+0x5a>
   1aca2:	e8df f003 	tbb	[pc, r3]
   1aca6:	041e      	.short	0x041e
   1aca8:	0e0e0a0e 	.word	0x0e0e0a0e
   1acac:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   1acae:	f8da 3010 	ldr.w	r3, [sl, #16]
   1acb2:	689b      	ldr	r3, [r3, #8]
   1acb4:	b12b      	cbz	r3, 1acc2 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1acb6:	2302      	movs	r3, #2
   1acb8:	e020      	b.n	1acfc <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1acba:	f8da 3010 	ldr.w	r3, [sl, #16]
   1acbe:	681b      	ldr	r3, [r3, #0]
   1acc0:	bb8b      	cbnz	r3, 1ad26 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1acc2:	bb47      	cbnz	r7, 1ad16 <register_events+0xae>
   1acc4:	7823      	ldrb	r3, [r4, #0]
   1acc6:	b333      	cbz	r3, 1ad16 <register_events+0xae>
	switch (event->type) {
   1acc8:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1accc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1acd0:	3b01      	subs	r3, #1
   1acd2:	2b07      	cmp	r3, #7
   1acd4:	d830      	bhi.n	1ad38 <register_events+0xd0>
   1acd6:	e8df f003 	tbb	[pc, r3]
   1acda:	2833      	.short	0x2833
   1acdc:	2f2f282f 	.word	0x2f2f282f
   1ace0:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   1ace2:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ace6:	689b      	ldr	r3, [r3, #8]
   1ace8:	2b00      	cmp	r3, #0
   1acea:	d0ea      	beq.n	1acc2 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1acec:	2301      	movs	r3, #1
   1acee:	e005      	b.n	1acfc <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1acf0:	f8da 3010 	ldr.w	r3, [sl, #16]
   1acf4:	6a1b      	ldr	r3, [r3, #32]
   1acf6:	2b00      	cmp	r3, #0
   1acf8:	d0e3      	beq.n	1acc2 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1acfa:	2310      	movs	r3, #16
	event->state |= state;
   1acfc:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1ad00:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1ad04:	f3c2 3186 	ubfx	r1, r2, #14, #7
   1ad08:	430b      	orrs	r3, r1
   1ad0a:	f363 3294 	bfi	r2, r3, #14, #7
   1ad0e:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1ad12:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1ad16:	f389 8811 	msr	BASEPRI, r9
   1ad1a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1ad1e:	3501      	adds	r5, #1
   1ad20:	f10a 0a14 	add.w	sl, sl, #20
   1ad24:	e7a9      	b.n	1ac7a <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1ad26:	2304      	movs	r3, #4
   1ad28:	e7e8      	b.n	1acfc <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1ad2a:	f8da 0010 	ldr.w	r0, [sl, #16]
   1ad2e:	4622      	mov	r2, r4
   1ad30:	4651      	mov	r1, sl
   1ad32:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1ad34:	f7ff ff67 	bl	1ac06 <add_event>
	event->poller = poller;
   1ad38:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1ad3c:	3601      	adds	r6, #1
   1ad3e:	e7ea      	b.n	1ad16 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1ad40:	f8da 0010 	ldr.w	r0, [sl, #16]
   1ad44:	4622      	mov	r2, r4
   1ad46:	4651      	mov	r1, sl
   1ad48:	e7f4      	b.n	1ad34 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1ad4a:	f8da 0010 	ldr.w	r0, [sl, #16]
   1ad4e:	4622      	mov	r2, r4
   1ad50:	4651      	mov	r1, sl
   1ad52:	3024      	adds	r0, #36	; 0x24
   1ad54:	e7ee      	b.n	1ad34 <register_events+0xcc>

0001ad56 <signal_poll_event>:
{
   1ad56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1ad5a:	6884      	ldr	r4, [r0, #8]
{
   1ad5c:	4605      	mov	r5, r0
   1ad5e:	460e      	mov	r6, r1
	if (poller != NULL) {
   1ad60:	b144      	cbz	r4, 1ad74 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1ad62:	7863      	ldrb	r3, [r4, #1]
   1ad64:	2b01      	cmp	r3, #1
   1ad66:	d12e      	bne.n	1adc6 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1ad68:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1ad6c:	f013 0302 	ands.w	r3, r3, #2
   1ad70:	d10a      	bne.n	1ad88 <signal_poll_event+0x32>
		poller->is_polling = false;
   1ad72:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1ad74:	68eb      	ldr	r3, [r5, #12]
   1ad76:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1ad7a:	4316      	orrs	r6, r2
	event->poller = NULL;
   1ad7c:	2000      	movs	r0, #0
	event->state |= state;
   1ad7e:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   1ad82:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1ad84:	60eb      	str	r3, [r5, #12]
	return retcode;
   1ad86:	e03e      	b.n	1ae06 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1ad88:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1ad8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ad90:	bf08      	it	eq
   1ad92:	f112 0f02 	cmneq.w	r2, #2
   1ad96:	d032      	beq.n	1adfe <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ad98:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1ad9c:	4640      	mov	r0, r8
   1ad9e:	f7ff fe81 	bl	1aaa4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1ada2:	2e08      	cmp	r6, #8
   1ada4:	bf0c      	ite	eq
   1ada6:	f06f 0303 	mvneq.w	r3, #3
   1adaa:	2300      	movne	r3, #0
   1adac:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1adae:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1adb2:	06db      	lsls	r3, r3, #27
   1adb4:	d109      	bne.n	1adca <signal_poll_event+0x74>
   1adb6:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1adba:	b937      	cbnz	r7, 1adca <signal_poll_event+0x74>
	z_ready_thread(thread);
   1adbc:	4640      	mov	r0, r8
   1adbe:	f7ff fe1f 	bl	1aa00 <z_ready_thread>
		poller->is_polling = false;
   1adc2:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1adc4:	e7d6      	b.n	1ad74 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1adc6:	2b02      	cmp	r3, #2
   1adc8:	d001      	beq.n	1adce <signal_poll_event+0x78>
		poller->is_polling = false;
   1adca:	2300      	movs	r3, #0
   1adcc:	e7d1      	b.n	1ad72 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1adce:	7823      	ldrb	r3, [r4, #0]
   1add0:	2b00      	cmp	r3, #0
   1add2:	d0cf      	beq.n	1ad74 <signal_poll_event+0x1e>
   1add4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1add8:	2f00      	cmp	r7, #0
   1adda:	d0f2      	beq.n	1adc2 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1addc:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1ade0:	f1a4 0914 	sub.w	r9, r4, #20
   1ade4:	f104 0014 	add.w	r0, r4, #20
   1ade8:	f7ff febd 	bl	1ab66 <z_abort_timeout>
		twork->poll_result = 0;
   1adec:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1adf0:	4649      	mov	r1, r9
   1adf2:	4638      	mov	r0, r7
   1adf4:	f7ff fd43 	bl	1a87e <z_work_submit_to_queue>
		poller->is_polling = false;
   1adf8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1adfc:	e7ba      	b.n	1ad74 <signal_poll_event+0x1e>
		poller->is_polling = false;
   1adfe:	2300      	movs	r3, #0
   1ae00:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1ae02:	f06f 000a 	mvn.w	r0, #10
}
   1ae06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ae0a <clear_event_registrations>:
	while (num_events--) {
   1ae0a:	2314      	movs	r3, #20
{
   1ae0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae0e:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1ae12:	2400      	movs	r4, #0
	switch (event->type) {
   1ae14:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   1ae18:	b901      	cbnz	r1, 1ae1c <clear_event_registrations+0x12>
}
   1ae1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1ae1c:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   1ae20:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1ae24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ae28:	2b08      	cmp	r3, #8
   1ae2a:	f1a0 0714 	sub.w	r7, r0, #20
   1ae2e:	d80c      	bhi.n	1ae4a <clear_event_registrations+0x40>
   1ae30:	fa26 f303 	lsr.w	r3, r6, r3
   1ae34:	07db      	lsls	r3, r3, #31
   1ae36:	d508      	bpl.n	1ae4a <clear_event_registrations+0x40>
	return node->next != NULL;
   1ae38:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1ae3c:	b12b      	cbz	r3, 1ae4a <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1ae3e:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1ae42:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1ae44:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1ae46:	e940 4405 	strd	r4, r4, [r0, #-20]
   1ae4a:	f382 8811 	msr	BASEPRI, r2
   1ae4e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1ae52:	f04f 0320 	mov.w	r3, #32
   1ae56:	f3ef 8211 	mrs	r2, BASEPRI
   1ae5a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae5e:	f3bf 8f6f 	isb	sy
   1ae62:	3901      	subs	r1, #1
   1ae64:	4638      	mov	r0, r7
   1ae66:	e7d7      	b.n	1ae18 <clear_event_registrations+0xe>

0001ae68 <k_poll_event_init>:
{
   1ae68:	b510      	push	{r4, lr}
	event->type = type;
   1ae6a:	0552      	lsls	r2, r2, #21
   1ae6c:	0209      	lsls	r1, r1, #8
   1ae6e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   1ae72:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   1ae76:	430a      	orrs	r2, r1
   1ae78:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1ae7a:	2400      	movs	r4, #0
	event->type = type;
   1ae7c:	430a      	orrs	r2, r1
	event->obj = obj;
   1ae7e:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1ae82:	6084      	str	r4, [r0, #8]
}
   1ae84:	bd10      	pop	{r4, pc}

0001ae86 <z_handle_obj_poll_events>:
{
   1ae86:	4603      	mov	r3, r0
	return list->head == list;
   1ae88:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1ae8a:	4283      	cmp	r3, r0
   1ae8c:	d008      	beq.n	1aea0 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1ae8e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1ae92:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1ae94:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ae96:	2300      	movs	r3, #0
	node->prev = NULL;
   1ae98:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1ae9c:	f7ff bf5b 	b.w	1ad56 <signal_poll_event>
}
   1aea0:	4770      	bx	lr

0001aea2 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   1aea2:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1aea4:	e9c0 0000 	strd	r0, r0, [r0]
   1aea8:	6083      	str	r3, [r0, #8]
}
   1aeaa:	4770      	bx	lr

0001aeac <k_free>:
	if (ptr != NULL) {
   1aeac:	b120      	cbz	r0, 1aeb8 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1aeae:	1f01      	subs	r1, r0, #4
   1aeb0:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1aeb4:	f7ff bb13 	b.w	1a4de <k_heap_free>
}
   1aeb8:	4770      	bx	lr
	...
